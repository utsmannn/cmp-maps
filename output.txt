===
Path: .fleet/receipt.json
===
// Project generated by Kotlin Multiplatform Wizard
{
    "spec": {
        "template_id": "kmt",
        "targets": {
            "android": {
                "ui": [
                    "compose"
                ]
            },
            "ios": {
                "ui": [
                    "compose"
                ]
            }
        }
    },
    "timestamp": "2024-05-25T13:54:05.684614836Z"
}
=== end .fleet/receipt.json ===

===
Path: README.md
===
This is a Kotlin Multiplatform project targeting Android, iOS.

* `/composeApp` is for code that will be shared across your Compose Multiplatform applications.
  It contains several subfolders:
  - `commonMain` is for code that’s common for all targets.
  - Other folders are for Kotlin code that will be compiled for only the platform indicated in the folder name.
    For example, if you want to use Apple’s CoreCrypto for the iOS part of your Kotlin app,
    `iosMain` would be the right folder for such calls.

* `/iosApp` contains iOS applications. Even if you’re sharing your UI with Compose Multiplatform, 
  you need this entry point for your iOS app. This is also where you should add SwiftUI code for your project.


Learn more about [Kotlin Multiplatform](https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html)…
=== end README.md ===

===
Path: build.gradle.kts
===
plugins {
    // this is necessary to avoid the plugins to be loaded multiple times
    // in each subproject's classloader
    alias(libs.plugins.androidApplication) apply false
    alias(libs.plugins.androidLibrary) apply false
    alias(libs.plugins.jetbrainsCompose) apply false
    alias(libs.plugins.kotlinMultiplatform) apply false
    alias(libs.plugins.kotlinAndroidParcelize) apply false
    alias(libs.plugins.nativeCocoaPod) apply false
    alias(libs.plugins.androidGoogleService) apply false
    id("org.jetbrains.dokka") version "1.9.20" apply false
}
=== end build.gradle.kts ===

===
Path: composeApp/build.gradle.kts
===

import org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    alias(libs.plugins.kotlinMultiplatform)
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.jetbrainsCompose)
    alias(libs.plugins.kotlinSerializer)
    alias(libs.plugins.kotlinAndroidParcelize)
    alias(libs.plugins.nativeCocoaPod)
    alias(libs.plugins.androidGoogleService)
    id("org.jetbrains.dokka")
}

val secretFolder = "$projectDir/build/generatedSecret"

kotlin {
    androidTarget {
        compilations.all {
            kotlinOptions {
                jvmTarget = "17"
                freeCompilerArgs += listOf(
                    "-P",
                    "plugin:org.jetbrains.kotlin.parcelize:additionalAnnotation=com.bumble.appyx.utils.multiplatform.Parcelize"
                )
            }
        }
    }
    
    listOf(
        iosX64(),
        iosArm64(),
        iosSimulatorArm64()
    ).forEach { iosTarget ->
        iosTarget.binaries.framework {
            baseName = "ComposeApp"
            isStatic = true
        }
    }

    cocoapods {
        version = "1.0"
        summary = "Some description for a Kotlin/Native module"
        homepage = "Link to a Kotlin/Native module homepage"
        podfile = project.file("../iosApp/Podfile")

        ios.deploymentTarget = "17.0"

        framework {
            baseName = "ComposeApp"

            isStatic = true
        }

        pod("netfox") {
            extraOpts += listOf("-compiler-option", "-fmodules")
            version = "1.21.0"
        }

        pod("GoogleMaps") {
            extraOpts += listOf("-compiler-option", "-fmodules")
        }

        pod("FirebaseCore") {
            extraOpts += listOf("-compiler-option", "-fmodules")
        }

        pod("FirebaseAuth") {
            extraOpts += listOf("-compiler-option", "-fmodules")
        }

        pod("GoogleSignIn") {
            extraOpts += listOf("-compiler-option", "-fmodules")
        }

        // Maps custom Xcode configuration to NativeBuildType
//        xcodeConfigurationToNativeBuildType["CUSTOM_DEBUG"] = NativeBuildType.DEBUG
//        xcodeConfigurationToNativeBuildType["CUSTOM_RELEASE"] = NativeBuildType.RELEASE
    }

    sourceSets.commonMain.configure {
        kotlin.srcDirs(secretFolder)
    }
    
    sourceSets {
        
        androidMain.dependencies {
            implementation(compose.preview)
            implementation(libs.androidx.activity.compose)

            // ktor
            implementation(libs.ktor.client.okhttp)

            // google maps
            implementation(libs.googleMaps.android.core)
            implementation(libs.googleMaps.android.compose)

            // play service location
            implementation(libs.android.play.service.location)

            // android firebase auth
            implementation(libs.androidFirebase.auth)
            implementation(libs.android.play.service.auth)

            // android google identity
            implementation(libs.android.credential)
            implementation(libs.android.credential.play.service.auth)
            implementation(libs.android.google.id)
        }
        commonMain.dependencies {
            implementation(compose.runtime)
            implementation(compose.foundation)
            implementation(compose.material)
            implementation(compose.ui)
            implementation(compose.components.resources)
            implementation(compose.components.uiToolingPreview)

            // ktor
            implementation(libs.ktor.client.core)
            implementation(libs.ktor.client.contentNegotiation)
            implementation(libs.ktor.client.json)
            implementation(libs.ktor.client.logging)

            // viewmodel
            implementation(libs.jetbrain.viewModel)

            // appyx
            implementation(libs.appyx.navigation)
            implementation(libs.appyx.interaction)
            api(libs.appyx.backstack)

            // image loader
            implementation(libs.imageLoader)
        }
        iosMain.dependencies {
            implementation(libs.ktor.client.darwin)
        }
    }
}

android {
    namespace = "org.utsman.cmpbasic"
    compileSdk = libs.versions.android.compileSdk.get().toInt()

    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
    sourceSets["main"].res.srcDirs("src/androidMain/res")
    sourceSets["main"].resources.srcDirs("src/commonMain/resources", secretFolder)

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.12"
    }

    defaultConfig {
        applicationId = "org.utsman.cmpbasic"
        minSdk = libs.versions.android.minSdk.get().toInt()
        targetSdk = libs.versions.android.targetSdk.get().toInt()
        versionCode = 1
        versionName = "1.0"
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
    buildTypes {
        getByName("release") {
            isMinifyEnabled = false
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    buildFeatures {
        compose = true
    }
    dependencies {
        debugImplementation(compose.uiTooling)
    }
}

fun generateSecret(file: String) {
    val propContent = file("$rootDir/$file").readText()
    val propData = parseProp(propContent)

    var ktContent = "package org.utsman.cmpbasic\n\nobject SecretConfig {\n"
    propData.forEach { (key, value) ->
        ktContent += "    const val $key = $value\n"
    }

    ktContent += "}"

    val folder = file(secretFolder)
    if (!folder.exists()) {
        folder.mkdirs()
    }

    val fileSecret = file("$secretFolder/SecretConfig.kt")
    if (!fileSecret.exists()) {
        fileSecret.createNewFile()
    }

    fileSecret.writeText(ktContent)

}

fun parseProp(content: String): Map<String, Any> {
    val propData = mutableMapOf<String, Any>()
    content.lines().forEach { line ->
        val key = line.substringBefore("=")
        val rawValue = line.substringAfter("=")
        val value: Any = when {
            rawValue == "true" || rawValue == "false" -> {
                rawValue.toBoolean()
            }
            rawValue.toIntOrNull() != null -> {
                rawValue.toInt()
            }
            rawValue.toLongOrNull() != null -> {
                rawValue.toLong()
            }
            else -> "\"$rawValue\""
        }

        propData[key] = value
    }

    return propData
}

tasks.register("generateSecret") {
    doLast {
        generateSecret("secret.properties")
    }
}

afterEvaluate {
    tasks.getByName("generateComposeResClass").dependsOn("generateSecret")
}
=== end composeApp/build.gradle.kts ===

===
Path: composeApp/src/androidMain/AndroidManifest.xml
===
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">

    <uses-permission android:name="android.permission.INTERNET"/>

    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat.NoActionBar">

        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="AIzaSyBLdpISj1DAZJZ3nDri1oVn2wNvJjJQLls" />

        <activity
            android:exported="true"
            android:configChanges="orientation|screenSize|screenLayout|keyboardHidden|mnc|colorMode|density|fontScale|fontWeightAdjustment|keyboard|layoutDirection|locale|mcc|navigation|smallestScreenSize|touchscreen|uiMode"
            android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
=== end composeApp/src/androidMain/AndroidManifest.xml ===

===
Path: composeApp/src/androidMain/kotlin/Platform.android.kt
===
import android.content.Context
import android.os.Build
import androidx.activity.compose.BackHandler
import androidx.compose.runtime.Composable

class AndroidPlatform : Platform {
    override val name: String = "Android ${Build.VERSION.SDK_INT}"
}

actual fun getPlatform(): Platform = AndroidPlatform()

actual val isAndroid: Boolean = true

@Composable
actual fun BackPress(enable: Boolean, handler: () -> Unit) {
    BackHandler(enable, handler)
}

object FinishDelegate {

    var onFinish: () -> Unit = {}
}

actual fun quitApp() {
    FinishDelegate.onFinish.invoke()
}
=== end composeApp/src/androidMain/kotlin/Platform.android.kt ===

===
Path: composeApp/src/androidMain/kotlin/authentication/AndroidGoogleAuthentication.kt
===
package authentication

import android.content.Context
import android.content.Intent
import androidx.activity.compose.ManagedActivityResultLauncher
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.ActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.platform.LocalContext
import androidx.credentials.ClearCredentialStateRequest
import androidx.credentials.CredentialManager
import androidx.credentials.CustomCredential
import androidx.credentials.GetCredentialRequest
import androidx.credentials.exceptions.GetCredentialException
import com.google.android.gms.auth.api.identity.SignInClient
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInClient
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import com.google.android.gms.common.api.ApiException
import com.google.android.libraries.identity.googleid.GetGoogleIdOption
import com.google.android.libraries.identity.googleid.GoogleIdTokenCredential
import com.google.android.libraries.identity.googleid.GoogleIdTokenParsingException
import com.google.firebase.Firebase
import com.google.firebase.auth.AuthCredential
import com.google.firebase.auth.GoogleAuthProvider
import com.google.firebase.auth.auth
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch
import org.utsman.cmpbasic.R
import org.utsman.cmpbasic.SecretConfig

class AndroidGoogleAuthentication(
    private val context: Context,
    private val coroutineScope: CoroutineScope
) : GoogleAuthentication {

    private val _isSignIn = mutableStateOf(false)
    override val isSignedIn: State<Boolean>
        get() = _isSignIn

    private val _user = mutableStateOf(getUser())
    override val user: State<User?>
        get() = _user

    override fun checkIsSignIn() {
        _isSignIn.value = getUser() != null
    }

    private val credentialManager = CredentialManager.create(context)

    override fun signIn() {
        if (getUser() == null) {
            coroutineScope.launch {
                signInWithIdentity()
            }
        } else {
            _isSignIn.value = true
        }
    }

    override fun signOut() {
        coroutineScope.launch {
            val clearCredentialStateRequest = ClearCredentialStateRequest()
            credentialManager.clearCredentialState(clearCredentialStateRequest)
            Firebase.auth.signOut()
            _isSignIn.value = false
        }
    }

    private fun signInWithCredential(idToken: String) {
        val credential = GoogleAuthProvider.getCredential(idToken, null)
        Firebase.auth.signInWithCredential(credential)
            .addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    val firebaseUser = task.result.user
                    _isSignIn.value = firebaseUser != null
                    _user.value = getUser()
                } else {
                    _isSignIn.value = false
                }
            }
    }

    private fun getUser(): authentication.User? {
        val firebaseUser = Firebase.auth.currentUser
        return if (firebaseUser != null) {
            authentication.User(
                name = firebaseUser.displayName.orEmpty(),
                email = firebaseUser.email.orEmpty(),
                photoUrl = firebaseUser.photoUrl.toString()
            )
        } else {
            null
        }
    }

    private suspend fun signInWithIdentity() {
        val webClientId = SecretConfig.WEB_CLIENT_ID

        val googleIdOption = GetGoogleIdOption.Builder()
            .setFilterByAuthorizedAccounts(false)
            .setServerClientId(webClientId)
            .setAutoSelectEnabled(false)
            .build()

        val request = GetCredentialRequest.Builder()
            .addCredentialOption(googleIdOption)
            .build()

        try {
            val result = credentialManager.getCredential(
                request = request,
                context = context
            )

            val resultCredential = result.credential

            val googleCredentialType = GoogleIdTokenCredential.TYPE_GOOGLE_ID_TOKEN_CREDENTIAL
            if (resultCredential is CustomCredential && resultCredential.type == googleCredentialType) {
                try {
                    val tokenCredential = GoogleIdTokenCredential
                        .createFrom(resultCredential.data)

                    val idToken = tokenCredential.idToken
                    signInWithCredential(idToken)
                } catch (e: GoogleIdTokenParsingException) {
                    _isSignIn.value = false
                }
            }
        } catch (e: GetCredentialException) {
            _isSignIn.value = false
        }
    }

}

@Composable
actual fun rememberGoogleAuthentication(): GoogleAuthentication {
    val context = LocalContext.current
    val coroutineScope = rememberCoroutineScope()
    val androidGoogleAuthentication = remember {
        AndroidGoogleAuthentication(context, coroutineScope)
    }

    return androidGoogleAuthentication
}
=== end composeApp/src/androidMain/kotlin/authentication/AndroidGoogleAuthentication.kt ===

===
Path: composeApp/src/androidMain/kotlin/maps/AndroidLocationService.kt
===
package maps

import android.Manifest
import android.annotation.SuppressLint
import android.content.Context
import androidx.activity.compose.ManagedActivityResultLauncher
import com.google.android.gms.location.FusedLocationProviderClient
import entity.data.Coordinate
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update

typealias GMSLocationService = com.google.android.gms.location.LocationServices

class AndroidLocationService(
    private val context: Context
) : LocationService {
    private val _myLocation: MutableStateFlow<Coordinate> = MutableStateFlow(Coordinate())
    override val myLocation: StateFlow<Coordinate>
        get() = _myLocation

    private var isGranted = false

    private val permission = arrayOf(
        Manifest.permission.ACCESS_COARSE_LOCATION,
        Manifest.permission.ACCESS_FINE_LOCATION
    )

    private lateinit var launcher: ManagedActivityResultLauncher<Array<String>, Map<String, @JvmSuppressWildcards Boolean>>


    private val fusedLocationProviderClient = GMSLocationService
        .getFusedLocationProviderClient(context)

    @SuppressLint("MissingPermission")
    override suspend fun getMyLocation() {
        if (isGranted) {
            // get location
            getLastLocation()
            println("permission granted!")
        } else {
            startRequestPermission()
        }
    }

    fun requestPermission() {
        if (!isGranted) {
            startRequestPermission()
        }
    }

    private fun startRequestPermission() {
        launcher.launch(permission)
    }

    fun setLauncher(launcher: ManagedActivityResultLauncher<Array<String>, Map<String, @JvmSuppressWildcards Boolean>>) {
        this.launcher = launcher
    }

    fun setPermissionResult(granted: Boolean) {
        isGranted = granted
        getLastLocation()
    }

    @SuppressLint("MissingPermission")
    private fun getLastLocation() {
        if (isGranted) {
            fusedLocationProviderClient.lastLocation
                .addOnCompleteListener { task ->
                    if (task.exception == null) {
                        val location = task.result
                        val coordinate = Coordinate(
                            location.latitude,
                            location.longitude
                        )
                        _myLocation.update { coordinate }
                    }
                }
        }
    }
}
=== end composeApp/src/androidMain/kotlin/maps/AndroidLocationService.kt ===

===
Path: composeApp/src/androidMain/kotlin/maps/GoogleMapsCompose.android.kt
===
package maps

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.asPaddingValues
import androidx.compose.foundation.layout.navigationBarsPadding
import androidx.compose.foundation.layout.statusBars
import androidx.compose.foundation.layout.statusBarsPadding
import androidx.compose.foundation.layout.windowInsetsPadding
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.Marker
import com.google.maps.android.compose.CameraMoveStartedReason
import com.google.maps.android.compose.DefaultMapProperties
import com.google.maps.android.compose.GoogleMap
import com.google.maps.android.compose.MapProperties
import com.google.maps.android.compose.MapUiSettings
import com.google.maps.android.compose.Marker
import com.google.maps.android.compose.MarkerInfoWindow
import com.google.maps.android.compose.rememberCameraPositionState
import com.google.maps.android.compose.rememberMarkerState
import entity.data.Coordinate
import maps.state.GoogleMapsState
import maps.state.GoogleMapsStateImpl
import maps.state.asImplement


@Composable
actual fun GoogleMapsCompose(
    modifier: Modifier,
    googleMapsState: GoogleMapsState,
    mapsSettings: MapsSettings,
    onMarkerClick: (GoogleMapsMarker) -> Unit
) {

    val androidCameraPositionState = rememberCameraPositionState()

    val gestureManager = remember {
        GestureManager()
    }

    val initialCamera by googleMapsState.asImplement().initialCameraCoordinate.collectAsState()

    val moveCamera by googleMapsState.asImplement().moveCameraCoordinate.collectAsState()

    val zoomCamera by (googleMapsState as GoogleMapsStateImpl).zoomCamera.collectAsState()
    val isNeedZoom by (googleMapsState as GoogleMapsStateImpl).isNeedZoom.collectAsState()

    val selectedMarker by googleMapsState.asImplement().selectedMarker.collectAsState()

    val markerList by googleMapsState.markerList.collectAsState()

    val gesture by gestureManager.gesture.collectAsState()

    LaunchedEffect(gesture) {
        googleMapsState.asImplement().setMoveGesture(gesture)
    }

    LaunchedEffect(Unit) {
        googleMapsState.asImplement().setMapLoaded(false)
    }

    LaunchedEffect(initialCamera) {
        val latLng = LatLng(
            initialCamera.coordinate.latitude,
            initialCamera.coordinate.longitude
        )
        androidCameraPositionState.move(
            CameraUpdateFactory.newLatLngZoom(
                latLng, initialCamera.zoomWithDefault()
            )
        )
    }

    LaunchedEffect(moveCamera, mapsSettings) {
        if (!moveCamera.isZeroCoordinate()) {
            val latLng = LatLng(
                moveCamera.coordinate.latitude,
                moveCamera.coordinate.longitude
            )
            androidCameraPositionState.animate(
                CameraUpdateFactory.newLatLngZoom(
                    latLng, moveCamera.zoomWithDefault()
                )
            )
        }
    }

    LaunchedEffect(androidCameraPositionState.position) {
        val position = androidCameraPositionState.position
        val zoom = position.zoom
        val coordinate = Coordinate(
            latitude = position.target.latitude,
            longitude = position.target.longitude
        )

        val cameraCoordinate = CameraCoordinate(coordinate, zoom)

        val stateImpl = googleMapsState as GoogleMapsStateImpl
        stateImpl.saveCameraPosition(cameraCoordinate)
        gestureManager.setCoordinate(coordinate)
    }

    LaunchedEffect(zoomCamera) {
        if (isNeedZoom) {
            androidCameraPositionState.animate(
                CameraUpdateFactory.zoomTo(zoomCamera)
            )
        }
    }

    LaunchedEffect(androidCameraPositionState.isMoving) {
        val isGestureReason = androidCameraPositionState.cameraMoveStartedReason == CameraMoveStartedReason.GESTURE
        val isMoveFromInput = androidCameraPositionState.isMoving && isGestureReason

        gestureManager.setIsMoving(isMoveFromInput)
    }

    GoogleMap(
        modifier = modifier,
        cameraPositionState = androidCameraPositionState,
        onMapLoaded = {
            googleMapsState.asImplement().setMapLoaded(true)
        },
        properties = MapProperties(
            isMyLocationEnabled = mapsSettings.myLocationEnable,
        ),
        uiSettings = MapUiSettings(
            myLocationButtonEnabled = mapsSettings.myLocationButtonEnabled,
            compassEnabled = mapsSettings.compassEnabled
        ),
        contentPadding = mapsSettings.padding
    ) {

        for (marker in markerList) {
            val markerState = rememberMarkerState(
                position = LatLng(
                    marker.coordinate.latitude,
                    marker.coordinate.longitude
                )
            )

            LaunchedEffect(selectedMarker) {
                if (markerState.position.asString() == selectedMarker?.coordinate.toString()) {
                    markerState.showInfoWindow()
                } else {
                    markerState.hideInfoWindow()
                }
            }

            Marker(
                state = markerState,
                title = marker.title,
                onClick = { androidMarker ->
                    val googleMapsMarker = markerList.find {
                        println("marker: ${it.coordinate} | android marker: ${androidMarker.position
                            .asString()}")
                        it.coordinate.toString() == androidMarker.position
                            .asString()
                    }
                    if (googleMapsMarker != null) {
                        println("marker: not null -> $googleMapsMarker")
                        onMarkerClick.invoke(googleMapsMarker)
                        androidMarker.showInfoWindow()
                    }
                    true
                }
            )
        }

    }
}

fun LatLng.asString(): String {
    return "$latitude,$longitude"
}
=== end composeApp/src/androidMain/kotlin/maps/GoogleMapsCompose.android.kt ===

===
Path: composeApp/src/androidMain/kotlin/maps/LocationService.android.kt
===
package maps

import android.Manifest
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.platform.LocalContext

@Composable
actual fun rememberLocationService(): LocationService {
    val androidContext = LocalContext.current
    val androidLocationService = remember {
        AndroidLocationService(androidContext)
    }

    val launcher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestMultiplePermissions()
    ) { result ->
        val isGranted = !result.map { it.value }.contains(false)
        println("permission granted: $isGranted")
        androidLocationService.setPermissionResult(isGranted)
    }

    LaunchedEffect(launcher) {
        androidLocationService.setLauncher(launcher)
    }

    LaunchedEffect(Unit) {
        androidLocationService.requestPermission()
    }

    return androidLocationService
}
=== end composeApp/src/androidMain/kotlin/maps/LocationService.android.kt ===

===
Path: composeApp/src/androidMain/kotlin/maps/state/GoogleMapsState.android.kt
===
package maps.state

import maps.CameraCoordinate
=== end composeApp/src/androidMain/kotlin/maps/state/GoogleMapsState.android.kt ===

===
Path: composeApp/src/androidMain/kotlin/org/utsman/cmpbasic/MainActivity.kt
===
package org.utsman.cmpbasic

import App
import FinishDelegate
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.navigationBarsPadding
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.tooling.preview.Preview
import com.bumble.appyx.navigation.integration.NodeActivity
import com.bumble.appyx.navigation.integration.NodeHost
import com.bumble.appyx.navigation.platform.AndroidLifecycle
import navigation.RootNode

class MainActivity : NodeActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        FinishDelegate.onFinish = {
            finish()
        }

        setContent {
            enableEdgeToEdge()
            Box(
                modifier = Modifier
                    .navigationBarsPadding()
            ) {
                val lifecycleOwner = LocalLifecycleOwner.current
                NodeHost(
                    lifecycle = AndroidLifecycle(lifecycleOwner.lifecycle),
                    integrationPoint = appyxIntegrationPoint
                ) {
                    RootNode(it)
                }
            }
        }
    }
}

@Preview
@Composable
fun AppAndroidPreview() {
    App()
}
=== end composeApp/src/androidMain/kotlin/org/utsman/cmpbasic/MainActivity.kt ===

===
Path: composeApp/src/androidMain/res/drawable-v24/ic_launcher_foreground.xml
===
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
=== end composeApp/src/androidMain/res/drawable-v24/ic_launcher_foreground.xml ===

===
Path: composeApp/src/androidMain/res/drawable/ic_launcher_background.xml
===
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>
=== end composeApp/src/androidMain/res/drawable/ic_launcher_background.xml ===

===
Path: composeApp/src/androidMain/res/mipmap-anydpi-v26/ic_launcher.xml
===
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
=== end composeApp/src/androidMain/res/mipmap-anydpi-v26/ic_launcher.xml ===

===
Path: composeApp/src/androidMain/res/mipmap-anydpi-v26/ic_launcher_round.xml
===
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
=== end composeApp/src/androidMain/res/mipmap-anydpi-v26/ic_launcher_round.xml ===

===
Path: composeApp/src/androidMain/res/values/strings.xml
===
<resources>
    <string name="app_name">KotlinComposeMultiplatform1</string>
</resources>
=== end composeApp/src/androidMain/res/values/strings.xml ===

===
Path: composeApp/src/commonMain/composeResources/drawable/compose-multiplatform.xml
===
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="600dp"
    android:height="600dp"
    android:viewportWidth="600"
    android:viewportHeight="600">
  <path
      android:pathData="M301.21,418.53C300.97,418.54 300.73,418.56 300.49,418.56C297.09,418.59 293.74,417.72 290.79,416.05L222.6,377.54C220.63,376.43 219,374.82 217.85,372.88C216.7,370.94 216.09,368.73 216.07,366.47L216.07,288.16C216.06,287.32 216.09,286.49 216.17,285.67C216.38,283.54 216.91,281.5 217.71,279.6L199.29,268.27L177.74,256.19C175.72,260.43 174.73,265.23 174.78,270.22L174.79,387.05C174.85,393.89 178.57,400.2 184.53,403.56L286.26,461.02C290.67,463.51 295.66,464.8 300.73,464.76C300.91,464.76 301.09,464.74 301.27,464.74C301.24,449.84 301.22,439.23 301.22,439.23L301.21,418.53Z"
      android:fillColor="#041619"
      android:fillType="nonZero"/>
  <path
      android:pathData="M409.45,242.91L312.64,188.23C303.64,183.15 292.58,183.26 283.68,188.51L187.92,245C183.31,247.73 179.93,251.62 177.75,256.17L177.74,256.19L199.29,268.27L217.71,279.6C217.83,279.32 217.92,279.02 218.05,278.74C218.24,278.36 218.43,277.98 218.64,277.62C219.06,276.88 219.52,276.18 220.04,275.51C221.37,273.8 223.01,272.35 224.87,271.25L289.06,233.39C290.42,232.59 291.87,231.96 293.39,231.51C295.53,230.87 297.77,230.6 300,230.72C302.98,230.88 305.88,231.73 308.47,233.2L373.37,269.85C375.54,271.08 377.49,272.68 379.13,274.57C379.68,275.19 380.18,275.85 380.65,276.53C380.86,276.84 381.05,277.15 381.24,277.47L397.79,266.39L420.34,252.93L420.31,252.88C417.55,248.8 413.77,245.35 409.45,242.91Z"
      android:fillColor="#37BF6E"
      android:fillType="nonZero"/>
  <path
      android:pathData="M381.24,277.47C381.51,277.92 381.77,278.38 382.01,278.84C382.21,279.24 382.39,279.65 382.57,280.06C382.91,280.88 383.19,281.73 383.41,282.59C383.74,283.88 383.92,285.21 383.93,286.57L383.93,361.1C383.96,363.95 383.35,366.77 382.16,369.36C381.93,369.86 381.69,370.35 381.42,370.83C379.75,373.79 377.32,376.27 374.39,378L310.2,415.87C307.47,417.48 304.38,418.39 301.21,418.53L301.22,439.23C301.22,439.23 301.24,449.84 301.27,464.74C306.1,464.61 310.91,463.3 315.21,460.75L410.98,404.25C419.88,399 425.31,389.37 425.22,379.03L425.22,267.85C425.17,262.48 423.34,257.34 420.34,252.93L397.79,266.39L381.24,277.47Z"
      android:fillColor="#3870B2"
      android:fillType="nonZero"/>
  <path
      android:pathData="M177.75,256.17C179.93,251.62 183.31,247.73 187.92,245L283.68,188.51C292.58,183.26 303.64,183.15 312.64,188.23L409.45,242.91C413.77,245.35 417.55,248.8 420.31,252.88L420.34,252.93L498.59,206.19C494.03,199.46 487.79,193.78 480.67,189.75L320.86,99.49C306.01,91.1 287.75,91.27 273.07,99.95L114.99,193.2C107.39,197.69 101.81,204.11 98.21,211.63L177.74,256.19L177.75,256.17ZM301.27,464.74C301.09,464.74 300.91,464.76 300.73,464.76C295.66,464.8 290.67,463.51 286.26,461.02L184.53,403.56C178.57,400.2 174.85,393.89 174.79,387.05L174.78,270.22C174.73,265.23 175.72,260.43 177.74,256.19L98.21,211.63C94.86,218.63 93.23,226.58 93.31,234.82L93.31,427.67C93.42,438.97 99.54,449.37 109.4,454.92L277.31,549.77C284.6,553.88 292.84,556.01 301.2,555.94L301.2,555.8C301.39,543.78 301.33,495.26 301.27,464.74Z"
      android:strokeWidth="10"
      android:fillColor="#00000000"
      android:strokeColor="#083042"
      android:fillType="nonZero"/>
  <path
      android:pathData="M498.59,206.19L420.34,252.93C423.34,257.34 425.17,262.48 425.22,267.85L425.22,379.03C425.31,389.37 419.88,399 410.98,404.25L315.21,460.75C310.91,463.3 306.1,464.61 301.27,464.74C301.33,495.26 301.39,543.78 301.2,555.8L301.2,555.94C309.48,555.87 317.74,553.68 325.11,549.32L483.18,456.06C497.87,447.39 506.85,431.49 506.69,414.43L506.69,230.91C506.6,222.02 503.57,213.5 498.59,206.19Z"
      android:strokeWidth="10"
      android:fillColor="#00000000"
      android:strokeColor="#083042"
      android:fillType="nonZero"/>
  <path
      android:pathData="M301.2,555.94C292.84,556.01 284.6,553.88 277.31,549.76L109.4,454.92C99.54,449.37 93.42,438.97 93.31,427.67L93.31,234.82C93.23,226.58 94.86,218.63 98.21,211.63C101.81,204.11 107.39,197.69 114.99,193.2L273.07,99.95C287.75,91.27 306.01,91.1 320.86,99.49L480.67,189.75C487.79,193.78 494.03,199.46 498.59,206.19C503.57,213.5 506.6,222.02 506.69,230.91L506.69,414.43C506.85,431.49 497.87,447.39 483.18,456.06L325.11,549.32C317.74,553.68 309.48,555.87 301.2,555.94Z"
      android:strokeWidth="10"
      android:fillColor="#00000000"
      android:strokeColor="#083042"
      android:fillType="nonZero"/>
</vector>
=== end composeApp/src/commonMain/composeResources/drawable/compose-multiplatform.xml ===

===
Path: composeApp/src/commonMain/composeResources/drawable/ic_arrow_back.xml
===
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="#000000" android:pathData="M19,11H7.83l4.88,-4.88c0.39,-0.39 0.39,-1.03 0,-1.42 -0.39,-0.39 -1.02,-0.39 -1.41,0l-6.59,6.59c-0.39,0.39 -0.39,1.02 0,1.41l6.59,6.59c0.39,0.39 1.02,0.39 1.41,0 0.39,-0.39 0.39,-1.02 0,-1.41L7.83,13H19c0.55,0 1,-0.45 1,-1s-0.45,-1 -1,-1z"/>
    
</vector>

=== end composeApp/src/commonMain/composeResources/drawable/ic_arrow_back.xml ===

===
Path: composeApp/src/commonMain/composeResources/drawable/ic_firebase_auth.xml
===
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="100dp"
    android:height="100dp"
    android:viewportWidth="100"
    android:viewportHeight="100">
  <group>
    <clip-path
        android:pathData="M0,0h100v100h-100z"/>
    <path
        android:pathData="M16.67,78.13L27.95,5.93C28.01,5.5 28.22,5.1 28.52,4.79C28.83,4.48 29.23,4.27 29.66,4.2C30.09,4.13 30.53,4.19 30.92,4.38C31.32,4.57 31.64,4.89 31.84,5.27L43.51,27.03L48.16,18.18C48.34,17.84 48.6,17.56 48.93,17.36C49.25,17.17 49.63,17.06 50.01,17.06C50.38,17.06 50.76,17.17 51.08,17.36C51.41,17.56 51.67,17.84 51.85,18.18L83.33,78.13H16.67Z"
        android:fillColor="#FFA000"/>
    <path
        android:pathData="M55.64,50.01L43.51,27.03L16.67,78.13L55.64,50.01Z"
        android:fillColor="#F57C00"/>
    <path
        android:pathData="M83.33,78.13L74.69,24.66C74.63,24.28 74.46,23.93 74.21,23.64C73.96,23.35 73.64,23.14 73.27,23.02C72.91,22.9 72.52,22.89 72.15,22.98C71.78,23.07 71.44,23.26 71.17,23.53L16.67,78.13L46.82,95.04C47.75,95.56 48.8,95.83 49.87,95.83C50.94,95.83 51.99,95.56 52.92,95.04L83.33,78.13Z"
        android:fillColor="#FFCA28"/>
    <path
        android:pathData="M74.69,24.66C74.63,24.28 74.46,23.93 74.21,23.64C73.96,23.35 73.64,23.14 73.27,23.02C72.91,22.9 72.52,22.89 72.15,22.98C71.78,23.07 71.44,23.26 71.17,23.53L60.35,34.38L51.84,18.17C51.67,17.84 51.4,17.55 51.08,17.36C50.75,17.16 50.38,17.06 50,17.06C49.62,17.06 49.25,17.16 48.92,17.36C48.6,17.55 48.33,17.84 48.16,18.17L43.51,27.03L31.84,5.27C31.63,4.89 31.31,4.57 30.92,4.38C30.52,4.19 30.08,4.13 29.65,4.2C29.22,4.27 28.82,4.48 28.52,4.79C28.21,5.11 28.01,5.51 27.94,5.94L16.67,78.13H16.63L16.66,78.17L16.96,78.31L60.33,34.9L71.15,24.06C71.42,23.79 71.76,23.6 72.13,23.51C72.51,23.42 72.9,23.43 73.26,23.55C73.63,23.66 73.95,23.88 74.2,24.17C74.45,24.46 74.62,24.81 74.68,25.19L83.25,78.18L83.33,78.13L74.69,24.66ZM16.77,78.03L27.95,6.45C28.01,6.02 28.22,5.62 28.52,5.31C28.83,5 29.22,4.79 29.66,4.72C30.09,4.64 30.53,4.71 30.92,4.9C31.32,5.09 31.64,5.4 31.84,5.79L43.51,27.55L48.16,18.69C48.34,18.36 48.6,18.08 48.93,17.88C49.25,17.68 49.63,17.58 50.01,17.58C50.38,17.58 50.76,17.68 51.08,17.88C51.41,18.08 51.67,18.36 51.85,18.69L60.18,34.54L16.77,78.03Z"
        android:fillColor="#ffffff"
        android:fillAlpha="0.2"/>
    <path
        android:pathData="M52.92,94.53C51.99,95.05 50.94,95.32 49.87,95.32C48.8,95.32 47.75,95.05 46.82,94.53L16.74,77.65L16.67,78.12L46.82,95.03C47.75,95.55 48.8,95.82 49.87,95.82C50.94,95.82 51.99,95.55 52.92,95.03L83.33,78.12L83.25,77.65L52.92,94.53Z"
        android:strokeAlpha="0.2"
        android:fillColor="#A52714"
        android:fillAlpha="0.2"/>
    <path
        android:pathData="M74.69,24.66C74.63,24.28 74.46,23.93 74.21,23.64C73.96,23.35 73.64,23.14 73.27,23.02C72.91,22.9 72.52,22.89 72.15,22.98C71.78,23.07 71.44,23.26 71.17,23.53L60.35,34.38L51.84,18.17C51.67,17.84 51.4,17.55 51.08,17.36C50.75,17.16 50.38,17.06 50,17.06C49.62,17.06 49.25,17.16 48.92,17.36C48.6,17.55 48.33,17.84 48.16,18.17L43.51,27.03L31.84,5.27C31.63,4.89 31.31,4.57 30.92,4.38C30.52,4.19 30.08,4.13 29.65,4.2C29.22,4.27 28.82,4.48 28.52,4.79C28.21,5.11 28.01,5.51 27.94,5.94L16.67,78.13L46.82,95.03C47.75,95.55 48.8,95.82 49.87,95.82C50.94,95.82 51.99,95.55 52.92,95.03L83.33,78.13L74.69,24.66Z">
      <aapt:attr name="android:fillColor">
        <gradient 
            android:startX="14.16"
            android:startY="20.98"
            android:endX="83.79"
            android:endY="90.61"
            android:type="linear">
          <item android:offset="0" android:color="#19FFFFFF"/>
          <item android:offset="1" android:color="#00FFFFFF"/>
        </gradient>
      </aapt:attr>
    </path>
    <path
        android:pathData="M75,95.83C86.51,95.83 95.83,86.51 95.83,75C95.83,63.49 86.51,54.17 75,54.17C63.49,54.17 54.17,63.49 54.17,75C54.17,86.51 63.49,95.83 75,95.83Z"
        android:fillColor="#757575"/>
    <path
        android:pathData="M79.17,73.96C80.9,73.96 82.28,72.56 82.28,70.83C82.28,69.1 80.9,67.71 79.17,67.71C77.44,67.71 76.04,69.1 76.04,70.83C76.04,72.56 77.44,73.96 79.17,73.96ZM70.83,73.96C72.56,73.96 73.95,72.56 73.95,70.83C73.95,69.1 72.56,67.71 70.83,67.71C69.1,67.71 67.71,69.1 67.71,70.83C67.71,72.56 69.1,73.96 70.83,73.96ZM70.83,76.04C68.41,76.04 63.54,77.26 63.54,79.69V82.29H78.12V79.69C78.12,77.26 73.26,76.04 70.83,76.04ZM79.17,76.04C78.86,76.04 78.52,76.06 78.16,76.09C79.36,76.97 80.21,78.15 80.21,79.69V82.29H86.46V79.69C86.46,77.26 81.59,76.04 79.17,76.04Z"
        android:fillColor="#ffffff"
        android:fillType="evenOdd"/>
  </group>
</vector>

=== end composeApp/src/commonMain/composeResources/drawable/ic_firebase_auth.xml ===

===
Path: composeApp/src/commonMain/composeResources/drawable/ic_google.xml
===
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="61.399918dp" android:viewportHeight="262" android:viewportWidth="256" android:width="60dp">
      
    <path android:fillColor="#4285F4" android:pathData="M255.88,133.45c0,-10.73 -0.87,-18.57 -2.76,-26.69H130.55v48.45h71.95c-1.45,12.04 -9.28,30.17 -26.69,42.36l-0.24,1.62 38.76,30.02 2.68,0.27c24.66,-22.77 38.88,-56.28 38.88,-96.03"/>
      
    <path android:fillColor="#34A853" android:pathData="M130.55,261.1c35.25,0 64.84,-11.6 86.45,-31.62l-41.2,-31.91c-11.02,7.69 -25.82,13.06 -45.26,13.06 -34.52,0 -63.82,-22.77 -74.27,-54.25l-1.53,0.13 -40.3,31.19 -0.53,1.47C35.39,231.8 79.49,261.1 130.55,261.1"/>
      
    <path android:fillColor="#FBBC05" android:pathData="M56.28,156.37c-2.76,-8.12 -4.35,-16.83 -4.35,-25.82 0,-8.99 1.6,-17.7 4.21,-25.82l-0.07,-1.73L15.26,71.31l-1.34,0.63C5.08,89.64 0,109.52 0,130.55s5.08,40.9 13.93,58.6l42.36,-32.78"/>
      
    <path android:fillColor="#EB4335" android:pathData="M130.55,50.48c24.51,0 41.05,10.59 50.48,19.44l36.84,-35.97C195.24,12.91 165.8,0 130.55,0 79.49,0 35.39,29.3 13.93,71.95l42.21,32.78c10.59,-31.48 39.89,-54.25 74.41,-54.25"/>
    
</vector>

=== end composeApp/src/commonMain/composeResources/drawable/ic_google.xml ===

===
Path: composeApp/src/commonMain/composeResources/drawable/ic_google_maps.xml
===
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="92.3dp"
    android:height="132.3dp"
    android:viewportWidth="92.3"
    android:viewportHeight="132.3">
  <path
      android:pathData="M60.2,2.2C55.8,0.8 51,0 46.1,0 32,0 19.3,6.4 10.8,16.5l21.8,18.3L60.2,2.2z"
      android:fillColor="#1a73e8"/>
  <path
      android:pathData="M10.8,16.5C4.1,24.5 0,34.9 0,46.1c0,8.7 1.7,15.7 4.6,22l28,-33.3 -21.8,-18.3z"
      android:fillColor="#ea4335"/>
  <path
      android:pathData="M46.2,28.5c9.8,0 17.7,7.9 17.7,17.7 0,4.3 -1.6,8.3 -4.2,11.4 0,0 13.9,-16.6 27.5,-32.7 -5.6,-10.8 -15.3,-19 -27,-22.7L32.6,34.8c3.3,-3.8 8.1,-6.3 13.6,-6.3"
      android:fillColor="#4285f4"/>
  <path
      android:pathData="M46.2,63.8c-9.8,0 -17.7,-7.9 -17.7,-17.7 0,-4.3 1.5,-8.3 4.1,-11.3l-28,33.3c4.8,10.6 12.8,19.2 21,29.9l34.1,-40.5c-3.3,3.9 -8.1,6.3 -13.5,6.3"
      android:fillColor="#fbbc04"/>
  <path
      android:pathData="M59.1,109.2c15.4,-24.1 33.3,-35 33.3,-63 0,-7.7 -1.9,-14.9 -5.2,-21.3L25.6,98c2.6,3.4 5.3,7.3 7.9,11.3 9.4,14.5 6.8,23.1 12.8,23.1s3.4,-8.7 12.8,-23.2"
      android:fillColor="#34a853"/>
</vector>

=== end composeApp/src/commonMain/composeResources/drawable/ic_google_maps.xml ===

===
Path: composeApp/src/commonMain/composeResources/drawable/ic_pick_location.xml
===
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="800dp"
    android:height="800dp"
    android:viewportWidth="297"
    android:viewportHeight="297">
    <path
        android:pathData="M149.5,58.43m-49.33,0a49.33,49.33 0,1 1,98.66 0a49.33,49.33 0,1 1,-98.66 0"
        android:fillColor="#000000"/>
    <path
        android:pathData="M149.5,192.97c1.42,0 2.65,-1.01 2.93,-2.4l14.25,-71.24c-5.47,1.54 -11.23,2.39 -17.18,2.39c-5.96,0 -11.71,-0.85 -17.18,-2.39l14.25,71.24C146.84,191.96 148.08,192.97 149.5,192.97z"
        android:fillColor="#000000"/>
    <path
        android:pathData="M225.78,237.19l48.42,-40.55l-8.37,-29.34c-1.22,-4.28 -5.13,-7.23 -9.58,-7.23h-83.49l-6.65,33.23c-1.58,7.89 -8.57,13.62 -16.61,13.62c-8.05,0 -15.04,-5.73 -16.61,-13.62l-6.65,-33.23H40.75c-4.45,0 -8.36,2.95 -9.58,7.23l-9.31,32.63L225.78,237.19z"
        android:fillColor="#000000"/>
    <path
        android:pathData="M296.62,275.2l-18.22,-63.86l-91.43,76.56h100.07c3.13,0 6.07,-1.47 7.95,-3.96C296.87,281.44 297.48,278.2 296.62,275.2z"
        android:fillColor="#000000"/>
    <path
        android:pathData="M59.16,220.93l0,66.97l106.08,0l46.65,-39.06z"
        android:fillColor="#000000"/>
    <path
        android:pathData="M45.2,218.38l-27.19,-4.97l-17.63,61.78c-0.86,3.01 -0.26,6.24 1.63,8.74c1.88,2.49 4.83,3.96 7.95,3.96h35.24V218.38z"
        android:fillColor="#000000"/>
</vector>

=== end composeApp/src/commonMain/composeResources/drawable/ic_pick_location.xml ===

===
Path: composeApp/src/commonMain/composeResources/drawable/ic_pin_marker.xml
===
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="800dp"
    android:height="800dp"
    android:viewportWidth="297"
    android:viewportHeight="297">
    <path
        android:pathData="M148.5,0C85.65,0 34.51,51.14 34.51,113.99c0,25.11 8.01,48.93 23.16,68.87c13.6,17.91 32.51,31.59 53.66,38.9l27.46,68.66c1.59,3.97 5.43,6.57 9.71,6.57c4.28,0 8.12,-2.6 9.71,-6.57l27.46,-68.66c21.15,-7.32 40.05,-20.99 53.66,-38.9c15.15,-19.95 23.16,-43.76 23.16,-68.87C262.49,51.14 211.35,0 148.5,0zM148.5,72.68c22.78,0 41.31,18.53 41.31,41.31c0,22.78 -18.53,41.31 -41.31,41.31c-22.78,0 -41.31,-18.53 -41.31,-41.31C107.19,91.21 125.72,72.68 148.5,72.68z"
        android:fillColor="#000000"/>
</vector>

=== end composeApp/src/commonMain/composeResources/drawable/ic_pin_marker.xml ===

===
Path: composeApp/src/commonMain/composeResources/drawable/ic_search.xml
===
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="800dp"
    android:height="800dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:pathData="M11,6C13.761,6 16,8.239 16,11M16.659,16.655L21,21M19,11C19,15.418 15.418,19 11,19C6.582,19 3,15.418 3,11C3,6.582 6.582,3 11,3C15.418,3 19,6.582 19,11Z"
        android:strokeLineJoin="round"
        android:strokeWidth="2"
        android:fillColor="#00000000"
        android:strokeColor="#000000"
        android:strokeLineCap="round"/>
</vector>

=== end composeApp/src/commonMain/composeResources/drawable/ic_search.xml ===

===
Path: composeApp/src/commonMain/kotlin/App.kt
===

import androidx.compose.material.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.lifecycle.viewmodel.compose.viewModel
import org.jetbrains.compose.ui.tooling.preview.Preview

@Composable
@Preview
fun App(
    viewModel: AppViewModel = viewModel { AppViewModel() }
) {
    println("load app")

    MaterialTheme {

    }
}
=== end composeApp/src/commonMain/kotlin/App.kt ===

===
Path: composeApp/src/commonMain/kotlin/AppViewModel.kt
===

import androidx.lifecycle.viewModelScope
import base.BaseViewModel
import base.State
import entity.data.User
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import repository.ReqresUserRepository


sealed class AppIntent {
    data object GetApi : AppIntent()
    data object UpdateCounter : AppIntent()
}

data class AppModel(
    val counter: Int = 0,
    val reqresResponseState: State<User> = State.Idle
)

class AppViewModel(
    private val reqresUserRepository: ReqresUserRepository = ReqresUserRepository()
) : BaseViewModel<AppModel, AppIntent>(AppModel()) {

    override fun handleIntent(appIntent: AppIntent) {
        when (appIntent) {
            is AppIntent.GetApi -> getApi()
            is AppIntent.UpdateCounter -> updateCounter()
        }
    }

    private fun getApi() = viewModelScope.launch {
        reqresUserRepository.getUser()
            .stateIn(this)
            .collectLatest { state ->
                updateModel { model ->
                    model.copy(
                        reqresResponseState = state
                    )
                }
            }
    }

    private fun updateCounter() {
        updateModel { model ->
            model.copy(
                counter = model.counter +1
            )
        }
    }

}
=== end composeApp/src/commonMain/kotlin/AppViewModel.kt ===

===
Path: composeApp/src/commonMain/kotlin/Greeting.kt
===
class Greeting {
    private val platform = getPlatform()

    fun greet(): String {
        return "Hello, ${platform.name}!"
    }
}
=== end composeApp/src/commonMain/kotlin/Greeting.kt ===

===
Path: composeApp/src/commonMain/kotlin/Platform.kt
===
import androidx.compose.runtime.Composable

interface Platform {
    val name: String
}

expect fun getPlatform(): Platform

expect val isAndroid: Boolean

@Composable
expect fun BackPress(enable: Boolean, handler: () -> Unit)

expect fun quitApp()
=== end composeApp/src/commonMain/kotlin/Platform.kt ===

===
Path: composeApp/src/commonMain/kotlin/Utils.kt
===
import androidx.compose.runtime.Composable
import base.State

@Composable
fun <T> State<T>.onIdle(block: @Composable () -> Unit) {
    when (this) {
        is State.Idle -> block.invoke()
        else -> {}
    }
}

@Composable
fun <T> State<T>.onLoading(block: @Composable () -> Unit) {
    when (this) {
        is State.Loading -> block.invoke()
        else -> {}
    }
}

@Composable
fun <T> State<T>.onSuccess(block: @Composable (T) -> Unit) {
    when (val state = this) {
        is State.Success -> block.invoke(state.data)
        else -> {}
    }
}

@Composable
fun <T> State<T>.onFailure(block: @Composable (Throwable) -> Unit) {
    when (val state = this) {
        is State.Failure -> block.invoke(state.throwable)
        else -> {}
    }
}
=== end composeApp/src/commonMain/kotlin/Utils.kt ===

===
Path: composeApp/src/commonMain/kotlin/UtilsComponent.kt
===
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.ime
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material.Button
import androidx.compose.material.ButtonDefaults
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.State
import androidx.compose.runtime.rememberUpdatedState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import kotlincomposemultiplatform1.composeapp.generated.resources.Res
import kotlincomposemultiplatform1.composeapp.generated.resources.ic_google
import org.jetbrains.compose.resources.painterResource

@Composable
fun isKeyboardOpen(): State<Boolean> {
    return rememberUpdatedState(WindowInsets.ime.getBottom(LocalDensity.current) > 0)
}

@Composable
fun GoogleSignInButton(
    modifier: Modifier = Modifier,
    onClick: () -> Unit
) {
    Button(
        modifier = modifier,
        onClick = onClick,
        colors = ButtonDefaults.buttonColors(
            backgroundColor = Color.White
        ),
        border = BorderStroke(width = 1.dp, color = Color.Black.copy(alpha = 0.5f))
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Center
        ) {
            val painter = painterResource(Res.drawable.ic_google)
            Image(
                painter = painter,
                contentDescription = null,
                modifier = Modifier.size(20.dp)
            )
            Spacer(Modifier.width(12.dp))
            Text(
                text = "Sign In",
                style = TextStyle.Default.copy(
                    color = Color.Black.copy(alpha = 0.7f),
                    fontWeight = FontWeight.SemiBold
                )
            )
        }
    }
}
=== end composeApp/src/commonMain/kotlin/UtilsComponent.kt ===

===
Path: composeApp/src/commonMain/kotlin/authentication/GoogleAuthentication.kt
===
package authentication

import androidx.compose.runtime.Composable
import androidx.compose.runtime.State

interface GoogleAuthentication {
    val isSignedIn: State<Boolean>
    val user: State<User?>

    fun checkIsSignIn()
    fun signIn()
    fun signOut()
}

@Composable
expect fun rememberGoogleAuthentication(): GoogleAuthentication
=== end composeApp/src/commonMain/kotlin/authentication/GoogleAuthentication.kt ===

===
Path: composeApp/src/commonMain/kotlin/authentication/User.kt
===
package authentication

data class User(
    val name: String,
    val email: String,
    val photoUrl: String?
)
=== end composeApp/src/commonMain/kotlin/authentication/User.kt ===

===
Path: composeApp/src/commonMain/kotlin/authentication/UserSignOutThrowable.kt
===
package authentication

class UserSignOutThrowable : Throwable("Sign out by user")
=== end composeApp/src/commonMain/kotlin/authentication/UserSignOutThrowable.kt ===

===
Path: composeApp/src/commonMain/kotlin/base/BaseRepository.kt
===
package base

import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.client.plugins.logging.LogLevel
import io.ktor.client.plugins.logging.Logging
import io.ktor.client.request.get
import io.ktor.client.statement.HttpResponse
import io.ktor.client.statement.bodyAsText
import io.ktor.http.isSuccess
import io.ktor.serialization.kotlinx.json.json
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.onStart
import kotlinx.serialization.json.Json

abstract class BaseRepository {

    private val client: HttpClient = HttpClient {
        install(ContentNegotiation) {
            json(Json {
                ignoreUnknownKeys = true
            })
        }
        install(Logging) {
            level = LogLevel.ALL
        }
    }

    suspend fun getHttpResponse(urlString: String): HttpResponse {
        return client.get(urlString = urlString)
    }

    protected inline fun <reified T, U>(suspend () -> HttpResponse).reduce(
        crossinline block: (T) -> State<U>
    ) : Flow<State<U>> {
        return flow {
            delay(2000)
            val httpResponse = invoke()
            if (httpResponse.status.isSuccess()) {
                val data = httpResponse.body<T>()
                val dataState = block.invoke(data)
                emit(dataState)
            } else {
                val throwable = Throwable(httpResponse.bodyAsText())
                val state = State.Failure(throwable)
                emit(state)
            }
        }.onStart {
            emit(State.Loading)
        }.catch {
            val state = State.Failure(it)
            emit(state)
        }
    }
}
=== end composeApp/src/commonMain/kotlin/base/BaseRepository.kt ===

===
Path: composeApp/src/commonMain/kotlin/base/BaseViewModel.kt
===
package base

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update

abstract class BaseViewModel<MODEL, INTENT>(private val defaultModel: MODEL) : ViewModel() {

    private val mutableStateModel: MutableStateFlow<MODEL> = MutableStateFlow(defaultModel)
    val stateModel: StateFlow<MODEL> get() = mutableStateModel

    abstract fun handleIntent(appIntent: INTENT)

    fun updateModel(block: (MODEL) -> MODEL) {
        mutableStateModel.update(block)
    }

    fun restartModel() {
        mutableStateModel.value = defaultModel
    }

}
=== end composeApp/src/commonMain/kotlin/base/BaseViewModel.kt ===

===
Path: composeApp/src/commonMain/kotlin/base/State.kt
===
package base

sealed class State <out T> {
    data object Idle : State<Nothing>()
    data object Loading : State<Nothing>()
    data class Success<T>(val data: T) : State<T>()
    data class Failure(val throwable: Throwable) : State<Nothing>()
}
=== end composeApp/src/commonMain/kotlin/base/State.kt ===

===
Path: composeApp/src/commonMain/kotlin/entity/PlaceMapper.kt
===
package entity

import entity.data.Coordinate
import entity.data.Place
import entity.response.PlaceResponse

object PlaceMapper {

    fun mapResponseToPlaces(response: PlaceResponse) : List<Place> {
        return response.items?.map {
            mapItemResponseToPlace(it)
        }.orEmpty()
    }

    private fun mapItemResponseToPlace(itemResponse: PlaceResponse.Item?): Place {
        return Place(
            id = itemResponse?.id.orEmpty(),
            name = itemResponse?.title.orEmpty(),
            address = itemResponse?.address?.let {
                "${it.label} - ${it.street}, ${it.city}"
            }.orEmpty(),
            coordinate = itemResponse?.position?.let {
                Coordinate(
                    latitude = it.lat ?: 0.0,
                    longitude = it.lng ?: 0.0
                )
            } ?: Coordinate(),
            distance = itemResponse?.distance ?: -1
        )
    }
}
=== end composeApp/src/commonMain/kotlin/entity/PlaceMapper.kt ===

===
Path: composeApp/src/commonMain/kotlin/entity/ReqresMapper.kt
===
package entity

import entity.data.User
import entity.response.ReqresResponse

object ReqresMapper {

    fun mapResponseToUser(reqresResponse: ReqresResponse?): User {
        val firstName = reqresResponse?.data?.firstOrNull()?.firstName
        val lastName = reqresResponse?.data?.firstOrNull()?.lastName

        return User(
            name = "${firstName.orEmpty()} ${lastName.orEmpty()}".trim()
        )
    }
}
=== end composeApp/src/commonMain/kotlin/entity/ReqresMapper.kt ===

===
Path: composeApp/src/commonMain/kotlin/entity/data/Coordinate.kt
===
package entity.data

import com.bumble.appyx.utils.multiplatform.Parcelable
import com.bumble.appyx.utils.multiplatform.Parcelize

@Parcelize
data class Coordinate(
    val latitude: Double = 0.0,
    val longitude: Double = 0.0
) : Parcelable {

    override fun toString(): String {
        return "$latitude,$longitude"
    }
}
=== end composeApp/src/commonMain/kotlin/entity/data/Coordinate.kt ===

===
Path: composeApp/src/commonMain/kotlin/entity/data/Place.kt
===
package entity.data

data class Place(
    val id: String = "",
    val name: String = "",
    val address: String = "",
    val coordinate: Coordinate = Coordinate(),
    val distance: Int = -1
) {

    companion object {
        val Empty: Place = Place()
    }

    fun distanceOnKm(): String {
        val kilo = distance.toDouble() / 1000.0
        val kiloString = kilo.toString()
            .replace(".", ",") // 2.999832 -> 2,998923

        val kiloValueSplit = kiloString.split(",")
        val kiloBeforeComma = kiloValueSplit[0]
        val kiloAfterComma = (kiloValueSplit.getOrNull(1) ?: "0")
            .take(1)

        return "$kiloBeforeComma,$kiloAfterComma km"
    }
}
=== end composeApp/src/commonMain/kotlin/entity/data/Place.kt ===

===
Path: composeApp/src/commonMain/kotlin/entity/data/User.kt
===
package entity.data

data class User(
    val name: String
)
=== end composeApp/src/commonMain/kotlin/entity/data/User.kt ===

===
Path: composeApp/src/commonMain/kotlin/entity/response/PlaceResponse.kt
===
package entity.response


import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class PlaceResponse(
    @SerialName("items")
    val items: List<Item?>? = null
) {
    @Serializable
    data class Item(
        @SerialName("access")
        val access: List<Acces?>? = null,
        @SerialName("address")
        val address: Address? = null,
        @SerialName("categories")
        val categories: List<Category?>? = null,
        @SerialName("distance")
        val distance: Int? = null,
        @SerialName("id")
        val id: String? = null,
        @SerialName("language")
        val language: String? = null,
        @SerialName("position")
        val position: Position? = null,
        @SerialName("references")
        val references: List<Reference?>? = null,
        @SerialName("resultType")
        val resultType: String? = null,
        @SerialName("title")
        val title: String? = null
    ) {
        @Serializable
        data class Acces(
            @SerialName("lat")
            val lat: Double? = null,
            @SerialName("lng")
            val lng: Double? = null
        )

        @Serializable
        data class Address(
            @SerialName("city")
            val city: String? = null,
            @SerialName("countryCode")
            val countryCode: String? = null,
            @SerialName("countryName")
            val countryName: String? = null,
            @SerialName("county")
            val county: String? = null,
            @SerialName("countyCode")
            val countyCode: String? = null,
            @SerialName("district")
            val district: String? = null,
            @SerialName("label")
            val label: String? = null,
            @SerialName("postalCode")
            val postalCode: String? = null,
            @SerialName("street")
            val street: String? = null,
            @SerialName("subdistrict")
            val subdistrict: String? = null
        )

        @Serializable
        data class Category(
            @SerialName("id")
            val id: String? = null,
            @SerialName("name")
            val name: String? = null,
            @SerialName("primary")
            val primary: Boolean? = null
        )

        @Serializable
        data class Position(
            @SerialName("lat")
            val lat: Double? = null,
            @SerialName("lng")
            val lng: Double? = null
        )

        @Serializable
        data class Reference(
            @SerialName("id")
            val id: String? = null,
            @SerialName("supplier")
            val supplier: Supplier? = null
        ) {
            @Serializable
            data class Supplier(
                @SerialName("id")
                val id: String? = null
            )
        }
    }
}
=== end composeApp/src/commonMain/kotlin/entity/response/PlaceResponse.kt ===

===
Path: composeApp/src/commonMain/kotlin/entity/response/ReqresResponse.kt
===
package entity.response


import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class ReqresResponse(
    @SerialName("data")
    val `data`: List<Data?>? = null,
    @SerialName("page")
    val page: Int? = null,
    @SerialName("per_page")
    val perPage: Int? = null,
    @SerialName("support")
    val support: Support? = null,
    @SerialName("total")
    val total: Int? = null,
    @SerialName("total_pages")
    val totalPages: Int? = null
) {
    @Serializable
    data class Data(
        @SerialName("avatar")
        val avatar: String?,
        @SerialName("email")
        val email: String?,
        @SerialName("first_name")
        val firstName: String?,
        @SerialName("id")
        val id: Int?,
        @SerialName("last_name")
        val lastName: String?
    )

    @Serializable
    data class Support(
        @SerialName("text")
        val text: String?,
        @SerialName("url")
        val url: String?
    )
}
=== end composeApp/src/commonMain/kotlin/entity/response/ReqresResponse.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/AuthResultScreen.kt
===
package features

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import authentication.rememberGoogleAuthentication

@Composable
fun AuthResultScreen() {

    val googleAuthentication = rememberGoogleAuthentication()

    val user by googleAuthentication.user

    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center
    ) {
        Text("Sign in as: ${user?.email}")
    }
}
=== end composeApp/src/commonMain/kotlin/features/AuthResultScreen.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/MainScreen.kt
===
package features

import GoogleSignInButton
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import authentication.rememberGoogleAuthentication
import navigation.LocalNavigator
import navigation.NavTarget

@Composable
fun MainScreen() {

    val navigator = LocalNavigator.current

    val googleAuthentication = rememberGoogleAuthentication()
    val result by googleAuthentication.isSignedIn

    var counter by remember { mutableStateOf(0) }

    LaunchedEffect(counter) {
        //

        if (counter == 9) {

        }
    }

    DisposableEffect(Unit) {
        onDispose {

        }
    }



    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {

        Button(
            onClick = {
                navigator.navigate(NavTarget.SearchLocation)
            }
        ) {
            Text("Search location")
        }

        Spacer(Modifier.height(12.dp))

        Button(
            onClick = {
                navigator.navigate(NavTarget.ReverseLocation)
            }
        ) {
            Text("Reversed location")
        }

        Spacer(Modifier.height(12.dp))

        Button(
            onClick = {
                navigator.navigate(NavTarget.GoogleMaps)
            }
        ) {
            Text("Google Maps")
        }

        Spacer(Modifier.height(12.dp))

        Button(
            onClick = {
                navigator.navigate(NavTarget.FeatureMaps)
            }
        ) {
            Text("Maps Feature")
        }

        Spacer(Modifier.height(12.dp))

        GoogleSignInButton(
            onClick = {
                googleAuthentication.signIn()
            }
        )

        Button(
            onClick = {
                googleAuthentication.signOut()
            }
        ) {
            Text("Google Sign Out")
        }

    }

}
=== end composeApp/src/commonMain/kotlin/features/MainScreen.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/googlemaps/GoogleMapsScreen.kt
===
package features.googlemaps

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.navigationBarsPadding
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.statusBarsPadding
import androidx.compose.foundation.layout.systemBarsPadding
import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import entity.data.Coordinate
import maps.CameraCoordinate
import maps.GoogleMapsCompose
import maps.GoogleMapsMarker
import maps.MapsSettings
import maps.rememberLocationService
import maps.state.rememberGoogleMapsState
import navigation.LocalNavigator
import navigation.NavTarget

val pamulangCoordinate = Coordinate(-6.34245001897142, 106.69354203471914)
val monasCoordinate = Coordinate(-6.176197222612754, 106.827467801915)

@Composable
fun GoogleMapsScreen() {

    val navigator = LocalNavigator.current

    val locationService = rememberLocationService()

    val googleMapsState = rememberGoogleMapsState(
        initialCameraCoordinate = CameraCoordinate(
            coordinate = Coordinate(),
            zoom = 16f
        )
    )

    val savedCameraCoordinate by googleMapsState.cameraCoordinate.collectAsState()
    val isMapLoaded by googleMapsState.mapLoaded.collectAsState()

    val gesture by googleMapsState.gesture.collectAsState()

    LaunchedEffect(savedCameraCoordinate) {
        println("camera on ---> coordinate: ${savedCameraCoordinate.coordinate} | zoom: ${savedCameraCoordinate.zoom}")
    }

    val myLocation by locationService.myLocation.collectAsState()

    LaunchedEffect(myLocation, isMapLoaded) {
        println("my location on screen: $myLocation")
        if (isMapLoaded) {
            googleMapsState.animatedCamera(
                cameraCoordinate = CameraCoordinate(
                    coordinate = myLocation
                )
            )
        }
    }

    LaunchedEffect(Unit) {
        locationService.getMyLocation()
    }

    Box(
        modifier = Modifier.fillMaxSize()
    ) {
        GoogleMapsCompose(
            modifier = Modifier.fillMaxSize(),
            googleMapsState = googleMapsState,
            mapsSettings = MapsSettings(
                myLocationEnable = myLocation.latitude != 0.0,
                compassEnabled = true,
                myLocationButtonEnabled = true
            )
        )

        Column(
            modifier = Modifier.fillMaxWidth()
                .align(Alignment.BottomCenter)
                .padding(12.dp),
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = gesture.toString(),
                textAlign = TextAlign.Center,
                modifier = Modifier.background(color = Color.Yellow)
            )

            Spacer(Modifier.height(12.dp))

            Button(
                onClick = {
                    googleMapsState.animatedCamera(
                        CameraCoordinate(
                            coordinate = pamulangCoordinate,
                            zoom = 12f
                        )
                    )

                    googleMapsState.addMarker(
                        GoogleMapsMarker(
                            coordinate = pamulangCoordinate
                        )
                    )
                }
            ) {
                Text("move camera and add marker to pamulang")
            }

            Button(
                onClick = {
                    googleMapsState.animatedCamera(
                        CameraCoordinate(
                            coordinate = monasCoordinate
                        )
                    )

                    googleMapsState.addMarker(
                        GoogleMapsMarker(
                            coordinate = monasCoordinate,
                            title = "monas"
                        )
                    )
                }
            ) {
                Text("move camera and add marker to monas")
            }

            Button(
                onClick = {
                    googleMapsState.removeMarker(
                        GoogleMapsMarker(
                            coordinate = monasCoordinate,
                            title = "monas"
                        )
                    )
                }
            ) {
                Text("remove marker monas")
            }

            Button(
                onClick = {
                    googleMapsState.zoomIn()
                }
            ) {
                Text("zoom in")
            }

            Button(
                onClick = {
                    googleMapsState.zoomOut()
                }
            ) {
                Text("zoom out")
            }

            Button(
                onClick = {
                    navigator.navigate(NavTarget.SearchLocation)
                }
            ) {
                Text("navigate to search")
            }
        }
    }
}
=== end composeApp/src/commonMain/kotlin/features/googlemaps/GoogleMapsScreen.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/maps/MapsScreen.kt
===
package features.maps

import BackPress
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.asPaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.ime
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.statusBars
import androidx.compose.foundation.layout.systemGestures
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Button
import androidx.compose.material.ButtonDefaults
import androidx.compose.material.CircularProgressIndicator
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.derivedStateOf
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberUpdatedState
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.lifecycle.viewmodel.compose.viewModel
import authentication.User
import authentication.rememberGoogleAuthentication
import base.State
import com.seiko.imageloader.rememberImagePainter
import entity.data.Place
import features.maps.component.CarouselHeight
import features.maps.component.CarouselPlaces
import features.maps.component.ItemPlace
import features.maps.component.SearchBarPlace
import isAndroid
import isKeyboardOpen
import maps.CameraCoordinate
import maps.GoogleMapsCompose
import maps.GoogleMapsMarker
import maps.MapsSettings
import maps.rememberLocationService
import maps.state.rememberGoogleMapsState
import navigation.LocalNavigator
import navigation.NavTarget
import onFailure
import onLoading
import onSuccess

@Composable
fun MapsScreen(
    viewModel: MapsViewModel = viewModel { MapsViewModel() }
) {

    val mapsState = rememberGoogleMapsState(
        initialCameraCoordinate = CameraCoordinate(
            zoom = 16f
        )
    )

    val locationService = rememberLocationService()

    val isMapHasLoaded by mapsState.mapLoaded.collectAsState()
    val myLocation by locationService.myLocation.collectAsState()

    val model by viewModel.stateModel.collectAsState()

    val googleAuthentication = rememberGoogleAuthentication()

    val user by googleAuthentication.user

    val isSignIn by googleAuthentication.isSignedIn

    val navigator = LocalNavigator.current

    LaunchedEffect(Unit) {
        locationService.getMyLocation()
        viewModel.handleIntent(MapsIntent.ObserverQuery)
        googleAuthentication.checkIsSignIn()
    }

    LaunchedEffect(myLocation) {
        viewModel.handleIntent(
            MapsIntent.SetMyCoordinate(myLocation)
        )
    }

    LaunchedEffect(myLocation, isMapHasLoaded) {
        if (isMapHasLoaded) {
            mapsState.animatedCamera(
                cameraCoordinate = CameraCoordinate(
                    coordinate = myLocation
                )
            )
        }
    }

    LaunchedEffect(model.selectedPlace) {
        if (model.selectedPlace != Place.Empty) {
            mapsState.animatedCamera(
                cameraCoordinate = CameraCoordinate(
                    coordinate = model.selectedPlace.coordinate,
                    zoom = 18f
                )
            )

            mapsState.setSelectedMarkerByCoordinate(model.selectedPlace.coordinate)
        }
    }

    val places by remember(model.placesState) {
        derivedStateOf {
            val placeState = model.placesState
            if (placeState is State.Success) {
                placeState.data
            } else {
                emptyList()
            }
        }
    }

    BackPress(true) {
        when {
            model.isShowSearch -> {
                viewModel.handleIntent(
                    MapsIntent.SetIsShowSearch(false)
                )
            }

            places.isNotEmpty() -> {
                viewModel.handleIntent(
                    MapsIntent.SetPlacesClear
                )
                mapsState.removeAllMarker()
            }

            else -> {
                navigator.quit()
            }
        }
    }

    val imePadding by rememberUpdatedState(
        WindowInsets.ime.asPaddingValues().calculateBottomPadding()
    )
    val systemGesture by rememberUpdatedState(
        WindowInsets.systemGestures.asPaddingValues().calculateBottomPadding()
    )

    val isKeyboardOpen by isKeyboardOpen()

    LaunchedEffect(places, imePadding, systemGesture, isKeyboardOpen) {
        val platformSystemGesture = if (isKeyboardOpen) {
            systemGesture
        } else {
            if (isAndroid) {
                0.dp
            } else {
                systemGesture
            }
        }

        val bottomMapsPadding = when {
            isKeyboardOpen -> imePadding - platformSystemGesture
            places.isNotEmpty() -> (CarouselHeight + 16.dp) - platformSystemGesture
            else -> 0.dp
        }

        viewModel.handleIntent(
            MapsIntent.SetBottomMapPadding(bottomMapsPadding)
        )
    }

    if (model.showProfileDialog) {
        DialogProfileContent(
            onDismiss = {
                viewModel.handleIntent(
                    MapsIntent.DismissProfileDialog
                )
            },
            onClickSignOut = {
                googleAuthentication.signOut()
            },
            user = user
        )
    }

    LaunchedEffect(isSignIn, model.showProfileDialog) {
        if (!isSignIn) {
            if (model.showProfileDialog) {
              viewModel.handleIntent(
                  MapsIntent.DismissProfileDialog
              )
            }

            navigator.newRoot(NavTarget.SignIn)
        }
    }

    Box(
        modifier = Modifier.fillMaxSize()
    ) {

        GoogleMapsCompose(
            modifier = Modifier.fillMaxSize(),
            googleMapsState = mapsState,
            mapsSettings = MapsSettings(
                myLocationEnable = myLocation.latitude != 0.0,
                compassEnabled = true,
                padding = PaddingValues(
                    top = WindowInsets.statusBars.asPaddingValues().calculateTopPadding(),
                    bottom = model.mapBottomPadding
                )
            ),
            onMarkerClick = { marker ->
                viewModel.handleIntent(
                    MapsIntent.SetSelectedMarker(marker)
                )
            }
        )

        CarouselPlaces(
            modifier = Modifier
                .align(Alignment.BottomCenter),
            places = places,
            selectedPlace = model.selectedPlace,
            onPageChange = { place ->
                viewModel.handleIntent(
                    MapsIntent.SetSelectedPlace(place)
                )
            }
        )

        Box(
            modifier = Modifier
        ) {

            SearchBarPlace(
                value = model.query,
                onEditValue = {
                    viewModel.handleIntent(
                        MapsIntent.SetQuery(it)
                    )
                    viewModel.handleIntent(
                        MapsIntent.SetIsShowSearch(true)
                    )
                },
                isShowSearch = model.isShowSearch,
                onDoneEdit = {
                    viewModel.handleIntent(
                        MapsIntent.SetIsShowSearch(false)
                    )
                },
                isPlaceNotEmpty = places.isNotEmpty(),
                photoUrl = user?.photoUrl,
                onBackButtonClick = {
                    if (!model.isShowSearch) {
                        viewModel.handleIntent(
                            MapsIntent.SetPlacesClear
                        )
                        mapsState.removeAllMarker()
                    } else {
                        viewModel.handleIntent(
                            MapsIntent.SetIsShowSearch(false)
                        )
                    }
                },
                onIconProfileClick = {
                    viewModel.handleIntent(
                        MapsIntent.ShowProfileDialog
                    )
                },
                content = { keyboardController ->
                    with(model.placesState) {
                        onLoading {
                            CircularProgressIndicator()
                        }
                        onFailure {
                            Text(
                                text = it.message.orEmpty(),
                                color = Color.Red
                            )
                        }
                        onSuccess { places ->
                            LaunchedEffect(places) {
                                for (place in places) {
                                    mapsState.addMarker(
                                        marker = GoogleMapsMarker(
                                            coordinate = place.coordinate,
                                            title = place.name
                                        )
                                    )
                                }
                            }
                            for (place in places) {
                                ItemPlace(place) {
                                    keyboardController?.hide()
                                    viewModel.handleIntent(
                                        MapsIntent.SetIsShowSearch(false)
                                    )
                                    viewModel.handleIntent(
                                        MapsIntent.SetSelectedPlace(place)
                                    )
                                }
                            }
                        }
                    }
                }
            )

        }
    }
}

@Composable
fun DialogProfileContent(
    onDismiss: () -> Unit,
    onClickSignOut: () -> Unit,
    user: User?
) {
    if (user != null) {
        Dialog(
            onDismissRequest = onDismiss
        ) {
            Column(
                modifier = Modifier.fillMaxWidth()
                    .wrapContentHeight()
                    .background(color = Color.White, shape = RoundedCornerShape(12.dp))
                    .padding(12.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                val painter = rememberImagePainter(user.photoUrl.orEmpty())
                Image(
                    painter = painter,
                    contentDescription = null,
                    modifier = Modifier
                        .size(70.dp)
                        .clip(CircleShape)
                )

                Spacer(Modifier.height(12.dp))

                Text(
                    text = user.name,
                    style = TextStyle.Default
                        .copy(
                            color = Color.Black,
                            fontWeight = FontWeight.SemiBold,
                            fontSize = 18.sp
                        )
                )
                Spacer(Modifier.height(6.dp))
                Text(
                    text = user.email,
                    style = TextStyle.Default
                        .copy(
                            color = Color.Black,
                            fontSize = 12.sp
                        )
                )

                Spacer(Modifier.height(12.dp))

                Button(
                    onClick = {
                        onClickSignOut.invoke()
                    },
                    colors = ButtonDefaults
                        .buttonColors(
                            backgroundColor = Color.White
                        ),
                    border = BorderStroke(width = 1.dp, color = Color.Black.copy(alpha = 0.5f))
                ) {
                    Text("Sign Out")
                }
            }
        }
    }
}

=== end composeApp/src/commonMain/kotlin/features/maps/MapsScreen.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/maps/MapsViewModel.kt
===
package features.maps

import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewModelScope
import base.BaseViewModel
import base.State
import entity.data.Coordinate
import entity.data.Place
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.debounce
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import maps.GoogleMapsMarker
import repository.LocationRepository

data class MapsState(
    val query: String = "",
    val placesState: State<List<Place>> = State.Idle,
    val selectedPlace: Place = Place.Empty,
    val isShowSearch: Boolean = false,
    val myCoordinate: Coordinate = Coordinate(),
    val mapBottomPadding: Dp = 0.dp,
    val showProfileDialog: Boolean = false
)

sealed class MapsIntent {
    data class SetQuery(val query: String) : MapsIntent()
    data class SetSelectedPlace(val place: Place) : MapsIntent()
    data class SetIsShowSearch(val isShowSearch: Boolean) : MapsIntent()
    data object ObserverQuery : MapsIntent()
    data class SetMyCoordinate(val coordinate: Coordinate) : MapsIntent()
    data class SetSelectedMarker(val marker: GoogleMapsMarker) : MapsIntent()
    data object SetPlacesClear : MapsIntent()
    data class SetBottomMapPadding(val padding: Dp) : MapsIntent()
    data object ShowProfileDialog : MapsIntent()
    data object DismissProfileDialog : MapsIntent()
}

class MapsViewModel : BaseViewModel<MapsState, MapsIntent>(
    MapsState()
) {

    private val locationRepository = LocationRepository()

    override fun handleIntent(appIntent: MapsIntent) {
        when (appIntent) {
            is MapsIntent.SetQuery -> {
                setQuerySearch(appIntent.query)
            }

            is MapsIntent.SetSelectedPlace -> {
                setSelectedPlace(appIntent.place)
            }

            is MapsIntent.SetIsShowSearch -> {
                setIsShowSearch(appIntent.isShowSearch)
            }

            is MapsIntent.ObserverQuery -> {
                observerQuery()
            }

            is MapsIntent.SetMyCoordinate -> {
                setMyCoordinate(appIntent.coordinate)
            }

            is MapsIntent.SetSelectedMarker -> {
                setSelectedMarker(appIntent.marker)
            }

            is MapsIntent.SetPlacesClear -> {
                restartPlacesState()
            }

            is MapsIntent.SetBottomMapPadding -> {
                setBottomMapPadding(appIntent.padding)
            }

            is MapsIntent.ShowProfileDialog -> {
                showProfileDialog(true)
            }

            is MapsIntent.DismissProfileDialog -> {
                showProfileDialog(false)
            }
        }
    }

    private fun showProfileDialog(show: Boolean) {
        updateModel {
            it.copy(
                showProfileDialog = show
            )
        }
    }

    private fun setBottomMapPadding(padding: Dp) {
        updateModel {
            it.copy(
                mapBottomPadding = padding
            )
        }
    }

    private fun setSelectedMarker(marker: GoogleMapsMarker) {
        val selectedPlace = stateModel.value.placesState
        if (selectedPlace is State.Success) {
            val places = selectedPlace.data
            val place = places.find { it.coordinate.toString() == marker.coordinate.toString() }

            if (place != null) {
                setSelectedPlace(place)
            }
        }
    }

    private fun setMyCoordinate(coordinate: Coordinate) {
        updateModel {
            it.copy(
                myCoordinate = coordinate
            )
        }
    }

    private fun observerQuery() = viewModelScope.launch {
        stateModel
            .map { it.query }
            .debounce(1000)
            .stateIn(this)
            .collectLatest {
                if (it.length > 2) {
                    searchPlace()
                }

                if (it.isEmpty()) {
                    restartPlacesState()
                }
            }
    }

    private fun setIsShowSearch(showSearch: Boolean) {
        updateModel {
            it.copy(
                isShowSearch = showSearch
            )
        }
    }

    private fun setSelectedPlace(place: Place) {
        println("places: set selected place -> $place")
        updateModel {
            it.copy(
                selectedPlace = place
            )
        }
    }

    private fun setQuerySearch(query: String) {
        updateModel {
            it.copy(
                query = query
            )
        }
    }

    private fun searchPlace() = viewModelScope.launch {
        val query = stateModel.value.query
        val coordinate = stateModel.value.myCoordinate
        locationRepository
            .searchLocation(query, coordinate)
            .stateIn(this)
            .collectLatest { placeState ->
                updateModel {
                    it.copy(
                        placesState = placeState
                    )
                }
            }
    }

    private fun restartPlacesState() {
        updateModel {
            MapsState().copy(
                myCoordinate = it.myCoordinate
            )
        }
    }
}
=== end composeApp/src/commonMain/kotlin/features/maps/MapsViewModel.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/maps/component/CarouselPlaces.kt
===
package features.maps.component

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import entity.data.Place

@OptIn(ExperimentalFoundationApi::class)
@Composable
fun CarouselPlaces(
    modifier: Modifier,
    places: List<Place>,
    selectedPlace: Place,
    onPageChange: (Place) -> Unit
) {

    if (places.isNotEmpty()) {
        val selectedIndex = remember(selectedPlace) {
            val index = places.indexOf(selectedPlace)
            if (index < 0) {
                0
            } else {
                index
            }
        }

        val pagerState = rememberPagerState(selectedIndex) { places.size }

        LaunchedEffect(pagerState.currentPage) {
            onPageChange.invoke(places[pagerState.currentPage])
        }

        LaunchedEffect(selectedIndex) {
            pagerState.scrollToPage(selectedIndex)
        }

        HorizontalPager(
            modifier = Modifier.fillMaxWidth().then(modifier),
            state = pagerState,
            pageSpacing = 16.dp,
            contentPadding = PaddingValues(16.dp)
        ) { index ->

            val place = remember(index) {
                places[index]
            }

            Box(
                modifier = Modifier.fillMaxWidth()
                    .height(CarouselHeight)
                    .shadow(elevation = 12.dp, shape = RoundedCornerShape(12.dp))
                    .background(color = Color.White, shape = RoundedCornerShape(12.dp)),
                contentAlignment = Alignment.Center
            ) {

                ItemPlace(place) {

                }
            }
        }
    }
}

val CarouselHeight = 100.dp
=== end composeApp/src/commonMain/kotlin/features/maps/component/CarouselPlaces.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/maps/component/ItemPlace.kt
===
package features.maps.component

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material.Icon
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import entity.data.Place
import kotlincomposemultiplatform1.composeapp.generated.resources.Res
import kotlincomposemultiplatform1.composeapp.generated.resources.ic_pin_marker
import org.jetbrains.compose.resources.painterResource

@Composable
fun ItemPlace(
    place: Place,
    onClickPlace: () -> Unit
) {
    Row(
        modifier = Modifier.fillMaxWidth()
            .clickable {
                onClickPlace.invoke()
            }
            .padding(6.dp)
    ) {
        Column(
            modifier = Modifier.width(34.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Icon(
                painter = painterResource(Res.drawable.ic_pin_marker),
                contentDescription = null,
                modifier = Modifier.size(24.dp),
                tint = Color.Gray
            )
            Spacer(Modifier.height(6.dp))
            Text(
                text = place.distanceOnKm(),
                style = TextStyle.Default
                    .copy(
                        color = Color.Gray,
                        fontSize = 10.sp
                    ),
                modifier = Modifier.fillMaxWidth(),
                textAlign = TextAlign.Center
            )
        }

        Spacer(Modifier.width(6.dp))

        Column(
            modifier = Modifier.weight(1f),
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = place.name,
                style = TextStyle.Default
                    .copy(
                        fontWeight = FontWeight.SemiBold
                    )
            )
            Spacer(Modifier.height(6.dp))
            Text(
                text = place.address,
                style = TextStyle.Default
                    .copy(
                        fontSize = 12.sp
                    )
            )
        }
    }
}
=== end composeApp/src/commonMain/kotlin/features/maps/component/ItemPlace.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/maps/component/SearchBarPlace.kt
===
package features.maps.component

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.ColumnScope
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.asPaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.statusBars
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.derivedStateOf
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalSoftwareKeyboardController
import androidx.compose.ui.platform.SoftwareKeyboardController
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import com.seiko.imageloader.rememberImagePainter
import isKeyboardOpen
import kotlincomposemultiplatform1.composeapp.generated.resources.Res
import kotlincomposemultiplatform1.composeapp.generated.resources.ic_arrow_back
import kotlincomposemultiplatform1.composeapp.generated.resources.ic_search
import org.jetbrains.compose.resources.painterResource

@Composable
fun SearchBarPlace(
    value: String,
    onEditValue: (String) -> Unit,
    onDoneEdit: () -> Unit = {},
    isShowSearch: Boolean = false,
    isPlaceNotEmpty: Boolean = false,
    photoUrl: String? = null,
    onBackButtonClick: () -> Unit = {},
    onIconProfileClick: () -> Unit = {},
    content: @Composable ColumnScope.(SoftwareKeyboardController?) -> Unit = {}
) {
    val keyboardController = LocalSoftwareKeyboardController.current

    val modifierColumn by remember(isShowSearch) {
        derivedStateOf {
            if (isShowSearch) {
                Modifier.fillMaxSize()
            } else {
                Modifier.wrapContentSize()
            }
        }
    }

    val backgroundColorColumn by remember(isShowSearch) {
        derivedStateOf {
            if (isShowSearch) {
                Color.White
            } else {
                Color.Transparent
            }
        }
    }

    val isKeyboardOpen by isKeyboardOpen()

    Column(
        modifier = modifierColumn
            .background(
                color = backgroundColorColumn
            )
            .padding(
                horizontal = 12.dp
            )
            .padding(
                paddingValues = PaddingValues(
                    top = WindowInsets.statusBars.asPaddingValues().calculateTopPadding()
                )
            )
    ) {

        // search bar
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(12.dp)
                .shadow(
                    elevation = 4.dp,
                    shape = RoundedCornerShape(12.dp)
                )
                .background(
                    color = Color.White,
                    shape = RoundedCornerShape(12.dp)
                )
                .padding(12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {

            if (isKeyboardOpen || isPlaceNotEmpty) {
                IconButton(
                    onClick = {
                        when {
                            isKeyboardOpen -> {
                                keyboardController?.hide()
                            }
                            isPlaceNotEmpty -> {
                                onBackButtonClick.invoke()
                            }
                        }
                    },
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        painter = painterResource(Res.drawable.ic_arrow_back),
                        contentDescription = null
                    )
                }

                Spacer(Modifier.width(12.dp))
            }

            BasicTextField(
                value = value,
                onValueChange = onEditValue,
                decorationBox = { decoration ->
                    if (value.isEmpty()) {
                        Text(
                            text = "Search",
                            color = Color.Black.copy(
                                alpha = 0.4f
                            )
                        )
                    }

                    decoration.invoke()
                },
                modifier = Modifier.weight(1f),
                singleLine = true,
                keyboardActions = KeyboardActions(onDone = {
                    keyboardController?.hide()
                    onDoneEdit.invoke()
                }),
                keyboardOptions = KeyboardOptions(
                    keyboardType = KeyboardType.Text,
                    imeAction = ImeAction.Done
                )
            )

            if (photoUrl == null) {
                Icon(
                    painter = painterResource(Res.drawable.ic_search),
                    contentDescription = null,
                    modifier = Modifier.size(24.dp)
                )
            } else {
                // display image profile
                val painter = rememberImagePainter(url = photoUrl)
                Image(
                    painter = painter,
                    contentDescription = null,
                    modifier = Modifier
                        .size(24.dp)
                        .clip(CircleShape)
                        .clickable {
                           onIconProfileClick.invoke()
                        }
                )
            }
        }

        if (isShowSearch) {
            // content
            val scrollVertical = rememberScrollState()

            LaunchedEffect(scrollVertical.isScrollInProgress) {
                if (scrollVertical.isScrollInProgress) {
                    keyboardController?.hide()
                }
            }

            Column(
                modifier = Modifier.fillMaxWidth()
                    .verticalScroll(scrollVertical)
                    .pointerInput(Unit) {
                        detectTapGestures {
                            keyboardController?.hide()
                        }
                    },
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                content.invoke(this, keyboardController)
            }
        }
    }
}
=== end composeApp/src/commonMain/kotlin/features/maps/component/SearchBarPlace.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/reversed/ReversedLocationScreen.kt
===
package features.reversed

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material.Button
import androidx.compose.material.CircularProgressIndicator
import androidx.compose.material.Text
import androidx.compose.material.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import features.search.PlaceContent
import features.search.SearchLocationIntent
import onFailure
import onLoading
import onSuccess

@Composable
fun ReversedLocationScreen(
    viewModel: ReversedLocationViewModel = viewModel { ReversedLocationViewModel() }
) {

    val model by viewModel.stateModel.collectAsState()

    Column(
        modifier = Modifier.fillMaxSize()
            .padding(12.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth()
        ) {
            TextField(
                value = model.coordinate.latitude.toString(),
                onValueChange = {
                    viewModel.handleIntent(
                        ReversedLocationIntent.Latitude(it.toDoubleOrNull() ?: 0.0)
                    )
                },
                modifier = Modifier.weight(1f),
                label = {
                    Text("latitude")
                }
            )

            Spacer(Modifier.width(12.dp))

            TextField(
                value = model.coordinate.longitude.toString(),
                onValueChange = {
                    viewModel.handleIntent(
                        ReversedLocationIntent.Longitude(it.toDoubleOrNull() ?: 0.0)
                    )
                },
                modifier = Modifier.weight(1f),
                label = {
                    Text("longitude")
                }
            )

            Spacer(Modifier.width(12.dp))

            Button(
                onClick = {
                    viewModel.handleIntent(
                        ReversedLocationIntent.GetPlaces
                    )
                },
                enabled = model.isReversedButtonEnable
            ) {
                Text("get places")
            }
        }

        Spacer(Modifier.height(12.dp))

        with(model.placeState) {
            onLoading {
                CircularProgressIndicator()
            }
            onSuccess { places ->
                for (place in places) {
                    PlaceContent(place)
                    Spacer(Modifier.height(12.dp))
                }
            }
            onFailure {
                Text(it.message.orEmpty())
            }
        }
    }
}
=== end composeApp/src/commonMain/kotlin/features/reversed/ReversedLocationScreen.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/reversed/ReversedLocationViewModel.kt
===
package features.reversed

import androidx.lifecycle.viewModelScope
import base.BaseViewModel
import base.State
import entity.data.Coordinate
import entity.data.Place
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import repository.LocationRepository

data class ReversedLocationModel(
    val coordinate: Coordinate = Coordinate(),
    val placeState: State<List<Place>> = State.Idle,
    val isReversedButtonEnable: Boolean = false
)

sealed class ReversedLocationIntent {
    data class Latitude(val lat: Double) : ReversedLocationIntent()
    data class Longitude(val long: Double) : ReversedLocationIntent()
    data object GetPlaces : ReversedLocationIntent()
}

class ReversedLocationViewModel : BaseViewModel<ReversedLocationModel, ReversedLocationIntent>(
    ReversedLocationModel()
) {
    private val locationRepository = LocationRepository()

    override fun handleIntent(appIntent: ReversedLocationIntent) {
        when (appIntent) {
            is ReversedLocationIntent.Latitude -> {
                setLatitude(appIntent.lat)
            }
            is ReversedLocationIntent.Longitude -> {
                setLongitude(appIntent.long)
            }
            is ReversedLocationIntent.GetPlaces -> {
                reversedLocation()
            }
        }
    }

    private fun reversedLocation() = viewModelScope.launch {
        val coordinate = stateModel.value.coordinate
        locationRepository.reverseLocation(
            coordinate
        ).stateIn(this)
            .collectLatest {
                updateModel { model ->
                    model.copy(
                        placeState = it
                    )
                }
            }
    }

    private fun setLongitude(long: Double) {
        updateModel { model ->
            val coordinate = model.coordinate
            model.copy(
                coordinate = coordinate.copy(
                    longitude = long
                ),
                isReversedButtonEnable = setButtonEnable()
            )
        }
    }

    private fun setLatitude(lat: Double) {
        updateModel { model ->
            val coordinate = model.coordinate
            model.copy(
                coordinate = coordinate.copy(
                    latitude = lat
                ),
                isReversedButtonEnable = setButtonEnable()
            )
        }
    }

    private fun setButtonEnable(): Boolean {
        val coordinate = stateModel.value.coordinate
        val isLatitudeValid = coordinate.latitude.toString().isNotEmpty()
        val isLongitudeValid = coordinate.longitude.toString().isNotEmpty()

        return isLatitudeValid && isLongitudeValid
    }
}
=== end composeApp/src/commonMain/kotlin/features/reversed/ReversedLocationViewModel.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/search/SearchLocationScreen.kt
===
package features.search

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material.Button
import androidx.compose.material.Card
import androidx.compose.material.CircularProgressIndicator
import androidx.compose.material.Text
import androidx.compose.material.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import entity.data.Place
import onFailure
import onLoading
import onSuccess

@Composable
fun SearchLocationScreen(
    viewModel: SearchLocationViewModel = viewModel { SearchLocationViewModel() }
) {
    val model by viewModel.stateModel.collectAsState()

    Column(
        modifier = Modifier.fillMaxSize()
            .padding(12.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth()
        ) {
            TextField(
                value = model.query,
                onValueChange = {
                    viewModel.handleIntent(
                        SearchLocationIntent.Query(it)
                    )
                },
                modifier = Modifier.weight(1f)
            )

            Spacer(Modifier.width(12.dp))

            Button(
                onClick = {
                    viewModel.handleIntent(
                        SearchLocationIntent.Search
                    )
                },
                enabled = model.query.isNotEmpty()
            ) {
                Text("Seach")
            }
        }

        Spacer(Modifier.height(12.dp))

        with(model.placeState) {
            onLoading {
                CircularProgressIndicator()
            }
            onSuccess { places ->
                for (place in places) {
                    PlaceContent(place)
                    Spacer(Modifier.height(12.dp))
                }
            }
            onFailure {
                Text(it.message.orEmpty())
            }
        }
    }
}

@Composable
fun PlaceContent(place: Place) {
    Card {
        Column(
            modifier = Modifier.fillMaxWidth()
        ) {
            Text(
                text = place.name,
                style = TextStyle.Default
                    .copy(
                        fontWeight = FontWeight.Bold
                    )
            )
            Spacer(Modifier.height(6.dp))
            Text(
                text = place.address,
                style = TextStyle.Default
            )

            Spacer(Modifier.height(6.dp))
            Text(
                text = place.coordinate.toString(),
                style = TextStyle.Default
            )
        }
    }
}
=== end composeApp/src/commonMain/kotlin/features/search/SearchLocationScreen.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/search/SearchLocationViewModel.kt
===
package features.search

import androidx.lifecycle.viewModelScope
import base.BaseViewModel
import base.State
import entity.data.Coordinate
import entity.data.Place
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.debounce
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import repository.LocationRepository

data class SearchLocationModel(
    val query: String = "",
    val placeState: State<List<Place>> = State.Idle
)

sealed class SearchLocationIntent {
    data class Query(val query: String) : SearchLocationIntent()
    data object Search : SearchLocationIntent()
}

class SearchLocationViewModel : BaseViewModel<SearchLocationModel, SearchLocationIntent>(
    SearchLocationModel()
) {

    private val locationRepository = LocationRepository()

    override fun handleIntent(appIntent: SearchLocationIntent) {
        when (appIntent) {
            is SearchLocationIntent.Query -> {
                sendQuery(appIntent.query)
            }
            is SearchLocationIntent.Search -> {
                searchLocation()
            }
        }
    }

    private fun searchLocation() = viewModelScope.launch {
        val query = stateModel.value.query
        locationRepository.searchLocation(
            query = query,
            coordinate = Coordinate(
                latitude = -6.361380449431958,
                longitude = 106.8334773180715
            )
        ).stateIn(this)
            .collectLatest {
                updateModel { model ->
                    model.copy(
                        placeState = it
                    )
                }
            }
    }

    private fun sendQuery(query: String) {
        updateModel { model ->
            model.copy(
                query = query
            )
        }
    }
}
=== end composeApp/src/commonMain/kotlin/features/search/SearchLocationViewModel.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/signin/SignInScreen.kt
===
package features.signin

import GoogleSignInButton
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign
import authentication.rememberGoogleAuthentication
import navigation.LocalNavigator
import navigation.NavTarget

@Composable
fun SignInScreen() {
    val googleAuthentication = rememberGoogleAuthentication()
    val isSignIn by googleAuthentication.isSignedIn

    val navigator = LocalNavigator.current

    LaunchedEffect(isSignIn) {
        if (isSignIn) {
            navigator.newRoot(NavTarget.FeatureMaps)
        }
    }

    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        Spacer(Modifier.weight(1f))

        Text(
            text = "Welcome to Application",
            style = MaterialTheme.typography.h4,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center
        )

        Spacer(Modifier.weight(0.3f))

        GoogleSignInButton {
            googleAuthentication.signIn()
        }

        Spacer(Modifier.weight(1f))
    }

}
=== end composeApp/src/commonMain/kotlin/features/signin/SignInScreen.kt ===

===
Path: composeApp/src/commonMain/kotlin/features/splash/SplashScreen.kt
===
package features.splash

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.material.CircularProgressIndicator
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import authentication.rememberGoogleAuthentication
import kotlincomposemultiplatform1.composeapp.generated.resources.Res
import kotlincomposemultiplatform1.composeapp.generated.resources.compose_multiplatform
import kotlincomposemultiplatform1.composeapp.generated.resources.ic_firebase_auth
import kotlincomposemultiplatform1.composeapp.generated.resources.ic_google_maps
import kotlinx.coroutines.delay
import navigation.LocalNavigator
import navigation.NavTarget
import navigation.Navigator
import org.jetbrains.compose.resources.painterResource

@Composable
fun SplashScreen() {
    val googleAuthentication = rememberGoogleAuthentication()
    val isSignIn by googleAuthentication.isSignedIn

    val navigator = LocalNavigator.current

    LaunchedEffect(Unit) {
        delay(3000)
        googleAuthentication.checkIsSignIn()
    }

    LaunchedEffect(isSignIn) {
        delay(3000)
        if (isSignIn) {
            navigator.newRoot(NavTarget.FeatureMaps)
        } else {
            navigator.newRoot(NavTarget.SignIn)
        }
    }

    Column(
        modifier = Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        Spacer(Modifier.weight(0.2f))

        Row(
            modifier = Modifier.fillMaxWidth()
                .wrapContentHeight(),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Center
        ) {

            Spacer(Modifier.width(12.dp))

            Image(
                painter = painterResource(Res.drawable.compose_multiplatform),
                contentDescription = null,
                modifier = Modifier.weight(1f)
            )

            Spacer(Modifier.width(12.dp))

            Image(
                painter = painterResource(Res.drawable.ic_google_maps),
                contentDescription = null,
                modifier = Modifier.weight(1f)
            )

            Spacer(Modifier.width(12.dp))

            Image(
                painter = painterResource(Res.drawable.ic_firebase_auth),
                contentDescription = null,
                modifier = Modifier.weight(1f)
            )

            Spacer(Modifier.width(12.dp))

        }

        Spacer(Modifier.weight(1f))

        CircularProgressIndicator()

        Spacer(Modifier.weight(0.2f))

    }
}
=== end composeApp/src/commonMain/kotlin/features/splash/SplashScreen.kt ===

===
Path: composeApp/src/commonMain/kotlin/maps/CameraCoordinate.kt
===
package maps

import com.bumble.appyx.utils.multiplatform.Parcelable
import com.bumble.appyx.utils.multiplatform.Parcelize
import entity.data.Coordinate

@Parcelize
data class CameraCoordinate(
    val coordinate: Coordinate = Coordinate(),
    val zoom: Float? = null,
    val initializer: Int? = null
) : Parcelable {

    fun zoomWithDefault(): Float {
        return zoom ?: 16f
    }
}

fun CameraCoordinate.isZeroCoordinate(): Boolean {
    return coordinate.latitude == 0.0 && coordinate.longitude == 0.0
}
=== end composeApp/src/commonMain/kotlin/maps/CameraCoordinate.kt ===

===
Path: composeApp/src/commonMain/kotlin/maps/GestureManager.kt
===
package maps

import entity.data.Coordinate
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.IO
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.debounce
import kotlinx.coroutines.flow.filter
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import kotlin.coroutines.CoroutineContext

class GestureManager(
    private val debounce: Long = 600
) {

    private val coordinate = MutableStateFlow(Coordinate())

    private val _gesture: MutableStateFlow<MoveGesture> = MutableStateFlow(
        MoveGesture.MoveNotStarted
    )
    val gesture: StateFlow<MoveGesture> get() = _gesture

    private val scope = object : CoroutineScope {
        override val coroutineContext: CoroutineContext
            get() = SupervisorJob() + Dispatchers.IO
    }

    init {
        scope.launch {
            coordinate
                .debounce(debounce)
                .filter { it.latitude != 0.0 }
                .collectLatest { coor ->
                    val prevGesture = _gesture.value
                    if (prevGesture == MoveGesture.MoveStart) {
                        _gesture.update {
                            MoveGesture.MoveStop(coor)
                        }
                    }
                }
        }
    }

    fun setIsMoving(isMoving: Boolean) {
        if (isMoving) {
            _gesture.update {
                MoveGesture.MoveStart
            }
        }
    }

    fun setCoordinate(coordinate: Coordinate) {
        this.coordinate.update { coordinate }
    }
}
=== end composeApp/src/commonMain/kotlin/maps/GestureManager.kt ===

===
Path: composeApp/src/commonMain/kotlin/maps/GoogleMapsCompose.kt
===
package maps

import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.asPaddingValues
import androidx.compose.foundation.layout.ime
import androidx.compose.foundation.layout.statusBars
import androidx.compose.foundation.layout.systemGestures
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import maps.state.GoogleMapsState

@Composable
expect fun GoogleMapsCompose(
    modifier: Modifier,
    googleMapsState: GoogleMapsState,
    mapsSettings: MapsSettings = MapsSettings(),
    onMarkerClick: (GoogleMapsMarker) -> Unit = {}
)

val DefaultMapsPadding: PaddingValues
    @Composable
    get() = PaddingValues(
        top = WindowInsets.statusBars.asPaddingValues().calculateTopPadding(),
        bottom = WindowInsets.ime.asPaddingValues().calculateBottomPadding()
                - WindowInsets.systemGestures.asPaddingValues().calculateBottomPadding()
    )
=== end composeApp/src/commonMain/kotlin/maps/GoogleMapsCompose.kt ===

===
Path: composeApp/src/commonMain/kotlin/maps/GoogleMapsMarker.kt
===
package maps

import com.bumble.appyx.utils.multiplatform.Parcelable
import com.bumble.appyx.utils.multiplatform.Parcelize
import entity.data.Coordinate

@Parcelize
data class GoogleMapsMarker(
    val coordinate: Coordinate,
    val title: String? = null
) : Parcelable
=== end composeApp/src/commonMain/kotlin/maps/GoogleMapsMarker.kt ===

===
Path: composeApp/src/commonMain/kotlin/maps/LocationService.kt
===
package maps

import androidx.compose.runtime.Composable
import entity.data.Coordinate
import kotlinx.coroutines.flow.StateFlow

interface LocationService {
    val myLocation: StateFlow<Coordinate>

    suspend fun getMyLocation()
}

@Composable
expect fun rememberLocationService(): LocationService
=== end composeApp/src/commonMain/kotlin/maps/LocationService.kt ===

===
Path: composeApp/src/commonMain/kotlin/maps/MapsSettings.kt
===
package maps

import androidx.compose.foundation.layout.PaddingValues

data class MapsSettings(
    val myLocationEnable: Boolean = false,
    val myLocationButtonEnabled: Boolean = false,
    val compassEnabled: Boolean = false,
    val padding: PaddingValues = PaddingValues()
)
=== end composeApp/src/commonMain/kotlin/maps/MapsSettings.kt ===

===
Path: composeApp/src/commonMain/kotlin/maps/MoveGesture.kt
===
package maps

import entity.data.Coordinate

sealed class MoveGesture {
    data object MoveNotStarted : MoveGesture()
    data object MoveStart : MoveGesture()
    data class MoveStop(val coordinate: Coordinate) : MoveGesture()
}
=== end composeApp/src/commonMain/kotlin/maps/MoveGesture.kt ===

===
Path: composeApp/src/commonMain/kotlin/maps/state/GoogleMapsState.kt
===
package maps.state

import androidx.compose.runtime.Composable
import androidx.compose.runtime.saveable.Saver
import androidx.compose.runtime.saveable.rememberSaveable
import com.bumble.appyx.utils.multiplatform.Parcelable
import com.bumble.appyx.utils.multiplatform.Parcelize
import entity.data.Coordinate
import kotlinx.coroutines.flow.StateFlow
import maps.CameraCoordinate
import maps.GoogleMapsMarker
import maps.MoveGesture

interface GoogleMapsState {
    val cameraCoordinate: StateFlow<CameraCoordinate>
    val markerList: StateFlow<List<GoogleMapsMarker>>

    val mapLoaded: StateFlow<Boolean>

    val gesture: StateFlow<MoveGesture>

    fun animatedCamera(cameraCoordinate: CameraCoordinate)

    fun zoomIn()
    fun zoomOut()

    fun addMarker(marker: GoogleMapsMarker)
    fun removeMarker(marker: GoogleMapsMarker)
    fun setSelectedMarkerByCoordinate(coordinate: Coordinate)
    fun removeAllMarker()

    companion object {
        val Saver: Saver<GoogleMapsState, GoogleMapsStateSaveable> = Saver(
            save = {
                val cameraCoordinate = it.cameraCoordinate.value
                val markerList = it.markerList.value

                GoogleMapsStateSaveable(cameraCoordinate, markerList)
            },
            restore = {
                val initialCameraCoordinate = it.cameraCoordinate
                val initialMarkerList = it.markerList
                GoogleMapsStateImpl(
                    _initialCameraCoordinate = initialCameraCoordinate,
                    _initialMarkerList = initialMarkerList
                )
            }
        )
    }

    @Parcelize
    data class GoogleMapsStateSaveable(
        val cameraCoordinate: CameraCoordinate,
        val markerList: List<GoogleMapsMarker>
    ) : Parcelable
}

@Composable
fun rememberGoogleMapsState(initialCameraCoordinate: CameraCoordinate): GoogleMapsState {
    return rememberSaveable(saver = GoogleMapsState.Saver) {
        GoogleMapsStateImpl(initialCameraCoordinate, emptyList())
    }
}
=== end composeApp/src/commonMain/kotlin/maps/state/GoogleMapsState.kt ===

===
Path: composeApp/src/commonMain/kotlin/maps/state/GoogleMapsStateImpl.kt
===
package maps.state

import entity.data.Coordinate
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import maps.CameraCoordinate
import maps.GoogleMapsMarker
import maps.MoveGesture
import maps.isZeroCoordinate
import kotlin.coroutines.CoroutineContext

class GoogleMapsStateImpl(
    private val _initialCameraCoordinate: CameraCoordinate,
    private val _initialMarkerList: List<GoogleMapsMarker>
) : GoogleMapsState {

    private val _savedCameraCoordinate: MutableStateFlow<CameraCoordinate> = MutableStateFlow(
        CameraCoordinate()
    )
    override val cameraCoordinate: StateFlow<CameraCoordinate>
        get() = _savedCameraCoordinate

    private val _markerList: MutableStateFlow<List<GoogleMapsMarker>> = MutableStateFlow(
        _initialMarkerList
    )
    override val markerList: StateFlow<List<GoogleMapsMarker>>
        get() = _markerList

    private val _mapLoaded: MutableStateFlow<Boolean> = MutableStateFlow(false)
    override val mapLoaded: StateFlow<Boolean>
        get() = _mapLoaded

    private val _gesture: MutableStateFlow<MoveGesture> = MutableStateFlow(
        MoveGesture.MoveNotStarted
    )
    override val gesture: StateFlow<MoveGesture>
        get() = _gesture

    private val _initialCameraCoordinateFlow: MutableStateFlow<CameraCoordinate> get() = MutableStateFlow(_initialCameraCoordinate.copy())
    val initialCameraCoordinate: StateFlow<CameraCoordinate>
        get() = _initialCameraCoordinateFlow

    val zoomCamera: MutableStateFlow<Float> = MutableStateFlow(0f)
    val isNeedZoom: MutableStateFlow<Boolean> = MutableStateFlow(false)

    val selectedMarker: MutableStateFlow<GoogleMapsMarker?> = MutableStateFlow(null)

    private val _moveCameraCoordinate: MutableStateFlow<CameraCoordinate> = MutableStateFlow(
        _initialCameraCoordinate.copy()
    )

    val moveCameraCoordinate: StateFlow<CameraCoordinate>
        get() = _moveCameraCoordinate

    private val scope = object : CoroutineScope {
        override val coroutineContext: CoroutineContext
            get() = SupervisorJob() + Dispatchers.Default
    }

    override fun animatedCamera(cameraCoordinate: CameraCoordinate) {
        val savedZoom = _savedCameraCoordinate.value.zoom
        val newCameraCoordinate = if (cameraCoordinate.zoom == null) {
            cameraCoordinate.copy(
                zoom = savedZoom
            )
        } else {
            cameraCoordinate
        }
        _moveCameraCoordinate.update { coor ->
            coor.copy(
                coordinate = newCameraCoordinate.coordinate,
                zoom = newCameraCoordinate.zoom,
                initializer = (1..500).random()
            )
        }
    }

    override fun zoomIn() {
        scope.launch {
            isNeedZoom.update { true }
            delay(60)
            val savedZoom = cameraCoordinate.value.zoomWithDefault()
            zoomCamera.update {
                savedZoom + 1
            }
            delay(60)
            isNeedZoom.update { false }
        }
    }

    override fun zoomOut() {
        scope.launch {
            isNeedZoom.update { true }
            delay(60)
            val savedZoom = cameraCoordinate.value.zoomWithDefault()
            zoomCamera.update {
                savedZoom - 1
            }
            delay(60)
            isNeedZoom.update { false }
        }
    }

    override fun addMarker(marker: GoogleMapsMarker) {
        _markerList.update { currentMarker ->
            if (!currentMarker.contains(marker)) {
                currentMarker + marker
            } else {
                currentMarker
            }
        }
    }

    override fun removeMarker(marker: GoogleMapsMarker) {
        _markerList.update { currentMarker ->
            if (currentMarker.contains(marker)) {
                currentMarker - marker
            } else {
                currentMarker
            }
        }
    }

    override fun setSelectedMarkerByCoordinate(coordinate: Coordinate) {
        val markerFound = _markerList.value.find {
            it.coordinate == coordinate
        }

        selectedMarker.update { markerFound }
    }

    override fun removeAllMarker() {
        _markerList.update { emptyList() }
    }

    fun saveCameraPosition(cameraCoordinate: CameraCoordinate) {
        _savedCameraCoordinate.update {
            cameraCoordinate
        }
    }

    fun setMapLoaded(mapLoaded: Boolean) {
        _mapLoaded.update { mapLoaded }
    }

    fun setMoveGesture(moveGesture: MoveGesture) {
        _gesture.update { moveGesture }
    }
}

fun GoogleMapsState.asImplement() = this as GoogleMapsStateImpl
=== end composeApp/src/commonMain/kotlin/maps/state/GoogleMapsStateImpl.kt ===

===
Path: composeApp/src/commonMain/kotlin/navigation/NavTarget.kt
===
package navigation

import com.bumble.appyx.utils.multiplatform.Parcelable
import com.bumble.appyx.utils.multiplatform.Parcelize

sealed class NavTarget : Parcelable {

    @Parcelize
    data object Main : NavTarget()

    @Parcelize
    data object SearchLocation : NavTarget()

    @Parcelize
    data object ReverseLocation : NavTarget()

    @Parcelize
    data object GoogleMaps : NavTarget()

    @Parcelize
    data object FeatureMaps : NavTarget()

    @Parcelize
    data object SignInResult : NavTarget()

    @Parcelize
    data object Splash : NavTarget()

    @Parcelize
    data object SignIn : NavTarget()
}
=== end composeApp/src/commonMain/kotlin/navigation/NavTarget.kt ===

===
Path: composeApp/src/commonMain/kotlin/navigation/Navigator.kt
===
package navigation

import androidx.compose.runtime.staticCompositionLocalOf

interface Navigator {

    fun navigate(navTarget: NavTarget)
    fun newRoot(navTarget: NavTarget)
    fun back()
    fun quit()
}

val LocalNavigator = staticCompositionLocalOf<Navigator> { error("navigator not provided") }
=== end composeApp/src/commonMain/kotlin/navigation/Navigator.kt ===

===
Path: composeApp/src/commonMain/kotlin/navigation/RootNode.kt
===
package navigation

import androidx.compose.animation.core.spring
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import com.bumble.appyx.components.backstack.BackStack
import com.bumble.appyx.components.backstack.BackStackModel
import com.bumble.appyx.components.backstack.operation.newRoot
import com.bumble.appyx.components.backstack.operation.pop
import com.bumble.appyx.components.backstack.operation.push
import com.bumble.appyx.components.backstack.operation.replace
import com.bumble.appyx.components.backstack.ui.fader.BackStackFader
import com.bumble.appyx.components.backstack.ui.parallax.BackStackParallax
import com.bumble.appyx.interactions.gesture.GestureFactory
import com.bumble.appyx.navigation.composable.AppyxNavigationContainer
import com.bumble.appyx.navigation.modality.NodeContext
import com.bumble.appyx.navigation.node.Node
import com.bumble.appyx.navigation.node.node
import features.AuthResultScreen
import features.MainScreen
import features.googlemaps.GoogleMapsScreen
import features.maps.MapsScreen
import features.reversed.ReversedLocationScreen
import features.search.SearchLocationScreen
import features.signin.SignInScreen
import features.splash.SplashScreen
import isAndroid
import quitApp

class RootNode(
    nodeContext: NodeContext,
    private val backStack: BackStack<NavTarget> = BackStack(
        model = BackStackModel(
            initialTarget = NavTarget.Splash,
            savedStateMap = nodeContext.savedStateMap
        ),
        visualisation = {
            if (isAndroid) {
                BackStackFader(it, defaultAnimationSpec = spring())
            } else {
                BackStackParallax(it)
            }
        },
        gestureFactory = {
            if (isAndroid) {
                GestureFactory.Noop()
            } else {
                BackStackParallax.Gestures(it)
            }
        }
    )
) : Node<NavTarget>(
    nodeContext = nodeContext,
    appyxComponent = backStack
) {

    @Composable
    override fun Content(modifier: Modifier) {
        val navigator = remember {
            object : Navigator {
                override fun navigate(navTarget: NavTarget) {
                    backStack.push(navTarget)
                }

                override fun newRoot(navTarget: NavTarget) {
                    backStack.newRoot(navTarget)
                }

                override fun back() {
                    backStack.pop()
                }

                override fun quit() {
                    quitApp()
                }
            }
        }

        CompositionLocalProvider(
            LocalNavigator provides navigator,
        ) {
            AppyxNavigationContainer(
                appyxComponent = backStack
            )
        }
    }

    override fun buildChildNode(navTarget: NavTarget, nodeContext: NodeContext): Node<*> {
        return when (navTarget) {
            is NavTarget.Main -> node(nodeContext) {
                BoxBackground {
                    MainScreen()
                }
            }

            is NavTarget.SearchLocation -> node(nodeContext) {
                BoxBackground {
                    SearchLocationScreen()
                }
            }

            is NavTarget.ReverseLocation -> node(nodeContext) {
                BoxBackground {
                    ReversedLocationScreen()
                }
            }

            is NavTarget.GoogleMaps -> node(nodeContext) {
                BoxBackground {
                    GoogleMapsScreen()
                }
            }

            is NavTarget.FeatureMaps -> node(nodeContext) {
                BoxBackground {
                    MapsScreen()
                }
            }

            is NavTarget.SignInResult -> node(nodeContext) {
                BoxBackground {
                    AuthResultScreen()
                }
            }
            is NavTarget.Splash -> node(nodeContext) {
                BoxBackground {
                    SplashScreen()
                }
            }
            is NavTarget.SignIn -> node(nodeContext) {
                BoxBackground {
                    SignInScreen()
                }
            }
        }
    }

    @Composable
    private fun BoxBackground(
        content: @Composable () -> Unit
    ) {
        Box(
            modifier = Modifier.fillMaxSize()
                .background(color = Color.White)
        ) {
            content.invoke()
        }
    }
}
=== end composeApp/src/commonMain/kotlin/navigation/RootNode.kt ===

===
Path: composeApp/src/commonMain/kotlin/repository/LocationRepository.kt
===
package repository

import base.BaseRepository
import base.State
import entity.PlaceMapper
import entity.data.Coordinate
import entity.data.Place
import entity.response.PlaceResponse
import kotlinx.coroutines.flow.Flow
import org.utsman.cmpbasic.SecretConfig

class LocationRepository : BaseRepository() {

    fun searchLocation(query: String, coordinate: Coordinate): Flow<State<List<Place>>> {
        val hereApiKey = SecretConfig.HERE_API_KEY
        return suspend {
            getHttpResponse("https://discover.search.hereapi.com/v1/discover?at=$coordinate&limit=20&q=$query&apiKey=$hereApiKey")
        }.reduce<PlaceResponse, List<Place>> { response ->
            val data = PlaceMapper.mapResponseToPlaces(response)
            State.Success(data)
        }
    }

    fun reverseLocation(coordinate: Coordinate): Flow<State<List<Place>>> {
        val hereApiKey = SecretConfig.HERE_API_KEY
        return suspend {
            getHttpResponse("https://revgeocode.search.hereapi.com/v1/revgeocode?at=$coordinate&limit=3&lang=en-US&apiKey=$hereApiKey")
        }.reduce<PlaceResponse, List<Place>> { response ->
            val data = PlaceMapper.mapResponseToPlaces(response)
            State.Success(data)
        }
    }
}
=== end composeApp/src/commonMain/kotlin/repository/LocationRepository.kt ===

===
Path: composeApp/src/commonMain/kotlin/repository/ReqresUserRepository.kt
===
package repository

import base.BaseRepository
import base.State
import entity.ReqresMapper
import entity.data.User
import entity.response.ReqresResponse
import kotlinx.coroutines.flow.Flow

class ReqresUserRepository : BaseRepository() {

    fun getUser(): Flow<State<User>> {
        return suspend {
            getHttpResponse("https://reqres.in/api/users?page=2")
        }.reduce<ReqresResponse, User> {
            val user = ReqresMapper.mapResponseToUser(it)
            State.Success(user)
        }
    }
}
=== end composeApp/src/commonMain/kotlin/repository/ReqresUserRepository.kt ===

===
Path: composeApp/src/iosMain/kotlin/AppDelegateAdapter.kt
===
import cocoapods.FirebaseAuth.FIRAuth
import cocoapods.FirebaseCore.FIRApp
import cocoapods.GoogleMaps.GMSServices
import cocoapods.GoogleSignIn.GIDSignIn
import cocoapods.netfox.ENFXGesture
import cocoapods.netfox.ENFXGestureShake
import cocoapods.netfox.NFX
import kotlinx.cinterop.ExperimentalForeignApi
import platform.Foundation.NSURL
import platform.UIKit.UIApplication
import platform.UIKit.UIApplicationDelegateProtocol
import platform.darwin.NSObject
import kotlin.experimental.ExperimentalObjCName

@OptIn(ExperimentalObjCName::class)
@ObjCName(swiftName = "AppDelegateAdapter")
class AppDelegateAdapter {

    @OptIn(ExperimentalForeignApi::class)
    fun application(
        application: UIApplication,
        didFinishLaunchingWithOptions: Map<Any?, *>?
    ): Boolean {
        println("first launch from kotlin")

        NFX.sharedInstance().start()

        GMSServices.provideAPIKey("AIzaSyA0m6uScEWSqH83f1qNjTDOExTyoa7TNdw")

        FIRAuth.initialize()
        FIRApp.configure()
        return true
    }

    @OptIn(ExperimentalForeignApi::class)
    fun application(app: UIApplication, openURL: NSURL, options: Map<Any?, *>): Boolean {
        return GIDSignIn.sharedInstance.handleURL(openURL)
    }


}
=== end composeApp/src/iosMain/kotlin/AppDelegateAdapter.kt ===

===
Path: composeApp/src/iosMain/kotlin/MainViewController.kt
===
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.ui.Modifier
import androidx.compose.ui.window.ComposeUIViewController
import com.bumble.appyx.navigation.integration.IosNodeHost
import com.bumble.appyx.navigation.integration.MainIntegrationPoint
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.flow.receiveAsFlow
import navigation.RootNode

val backEvents: Channel<Unit> = Channel()
val integrationPoint = MainIntegrationPoint()

fun MainViewController() = ComposeUIViewController {
    IosNodeHost(
        onBackPressedEvents = backEvents.receiveAsFlow(),
        integrationPoint = integrationPoint,
        modifier = Modifier.fillMaxSize()
    ) {
        RootNode(it)
    }
}
=== end composeApp/src/iosMain/kotlin/MainViewController.kt ===

===
Path: composeApp/src/iosMain/kotlin/MyKotlinClass.kt
===
import kotlin.experimental.ExperimentalObjCName

@OptIn(ExperimentalObjCName::class)
@ObjCName(swiftName = "MyKotlinClass")
class MyKotlinClass {

    val name: String = "my kotlin"
}
=== end composeApp/src/iosMain/kotlin/MyKotlinClass.kt ===

===
Path: composeApp/src/iosMain/kotlin/Platform.ios.kt
===
import androidx.compose.runtime.Composable
import kotlinx.cinterop.ExperimentalForeignApi
import platform.UIKit.UIApplication
import platform.UIKit.UIDevice
import platform.posix.exit

class IOSPlatform: Platform {
    override val name: String = UIDevice.currentDevice.systemName() + " " + UIDevice.currentDevice.systemVersion
}

actual fun getPlatform(): Platform = IOSPlatform()

actual val isAndroid: Boolean = false

@Composable
actual fun BackPress(enable: Boolean, handler: () -> Unit) {}

actual fun quitApp() {
    exit(0)
}
=== end composeApp/src/iosMain/kotlin/Platform.ios.kt ===

===
Path: composeApp/src/iosMain/kotlin/authentication/IosGoogleAuthentication.kt
===
package authentication

import androidx.compose.runtime.Composable
import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.interop.LocalUIViewController
import cocoapods.FirebaseAuth.FIRAuth
import cocoapods.FirebaseAuth.FIRGoogleAuthProvider
import cocoapods.FirebaseCore.FIRApp
import cocoapods.GoogleSignIn.GIDConfiguration
import cocoapods.GoogleSignIn.GIDSignIn
import kotlinx.cinterop.ExperimentalForeignApi
import platform.UIKit.UIViewController

@OptIn(ExperimentalForeignApi::class)
class IosGoogleAuthentication(
    private val uiViewController: UIViewController
) : GoogleAuthentication {

    private val _isSignedIn = mutableStateOf(false)
    override val isSignedIn: State<Boolean>
        get() = _isSignedIn

    private val _user = mutableStateOf(getUser())
    override val user: State<User?>
        get() = _user

    override fun checkIsSignIn() {
        _isSignedIn.value = getUser() != null
    }

    init {
        val clientId = FIRApp.defaultApp()?.options()?.clientID
        if (clientId != null) {
            val config = GIDConfiguration(clientId)
            GIDSignIn.sharedInstance.configuration = config
        }
    }

    override fun signIn() {
        val user = FIRAuth.auth().currentUser
        if (user == null) {
            GIDSignIn.sharedInstance.signInWithPresentingViewController(uiViewController) { result, error ->
                if (result != null) {
                    val googleUser = result.user
                    val idToken = googleUser.idToken?.tokenString

                    if (idToken != null) {
                        val accessToken = googleUser.accessToken.tokenString
                        val credential = FIRGoogleAuthProvider.credentialWithIDToken(
                            IDToken = idToken,
                            accessToken = accessToken
                        )

                        FIRAuth.auth().signInWithCredential(credential) { firResult, firError ->
                            _isSignedIn.value = firResult != null && firError == null
                        }

                    } else {
                        _isSignedIn.value = false
                    }

                } else {
                    _isSignedIn.value = false
                }
            }
        } else {
            _isSignedIn.value = true
        }
    }

    override fun signOut() {
        FIRAuth.auth().signOut(null)
        _isSignedIn.value = false
    }

    private fun getUser(): authentication.User? {
        val firebaseUser = FIRAuth.auth().currentUser
        return if (firebaseUser != null) {
            authentication.User(
                name = firebaseUser.displayName.orEmpty(),
                email = firebaseUser.email.orEmpty(),
                photoUrl = firebaseUser.photoURL?.absoluteString
            )
        } else {
            null
        }
    }
}

@Composable
actual fun rememberGoogleAuthentication(): GoogleAuthentication {
    val uiViewController = LocalUIViewController.current
    return remember { IosGoogleAuthentication(uiViewController) }
}
=== end composeApp/src/iosMain/kotlin/authentication/IosGoogleAuthentication.kt ===

===
Path: composeApp/src/iosMain/kotlin/maps/GoogleMapsCompose.ios.kt
===
package maps

import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.interop.UIKitView
import androidx.compose.ui.platform.LocalLayoutDirection
import cocoapods.GoogleMaps.GMSCameraPosition
import cocoapods.GoogleMaps.GMSMapView
import cocoapods.GoogleMaps.GMSMarker
import cocoapods.GoogleMaps.animateToCameraPosition
import cocoapods.GoogleMaps.animateToZoom
import kotlinx.cinterop.ExperimentalForeignApi
import maps.state.GoogleMapsState
import maps.state.GoogleMapsStateImpl
import maps.state.asImplement
import platform.CoreLocation.CLLocationCoordinate2DMake
import platform.UIKit.UIEdgeInsetsMake


@OptIn(ExperimentalForeignApi::class)
@Composable
actual fun GoogleMapsCompose(
    modifier: Modifier,
    googleMapsState: GoogleMapsState,
    mapsSettings: MapsSettings,
    onMarkerClick: (GoogleMapsMarker) -> Unit
) {

    val googleMapsView = remember { GMSMapView() }
    val gestureManager = remember { GestureManager() }

    val googleMapsDelegate = remember {
        IosGoogleMapsDelegate(
            stateImpl = googleMapsState as GoogleMapsStateImpl,
            gestureManager = gestureManager,
            onMarkerClick = onMarkerClick
        )
    }

    val initialCamera by googleMapsState.asImplement().initialCameraCoordinate.collectAsState()

    val moveCamera by googleMapsState.asImplement().moveCameraCoordinate.collectAsState()

    val zoomCamera by googleMapsState.asImplement().zoomCamera.collectAsState()
    val isNeedZoom by googleMapsState.asImplement().isNeedZoom.collectAsState()

    val markerList by googleMapsState.markerList.collectAsState()
    val selectedMarker by googleMapsState.asImplement().selectedMarker.collectAsState()

    val gesture by gestureManager.gesture.collectAsState()

    LaunchedEffect(gesture) {
        googleMapsState.asImplement().setMoveGesture(gesture)
    }

    LaunchedEffect(Unit) {
        googleMapsState.asImplement().setMapLoaded(false)
    }

    LaunchedEffect(googleMapsView) {
        googleMapsView.delegate = googleMapsDelegate
    }

    val layoutDirection = LocalLayoutDirection.current

    LaunchedEffect(mapsSettings) {
        googleMapsView.myLocationEnabled = mapsSettings.myLocationEnable
        googleMapsView.padding = mapsSettings.padding.run {
            UIEdgeInsetsMake(
                top = calculateTopPadding().value.toDouble(),
                left = calculateLeftPadding(layoutDirection).value.toDouble(),
                right = calculateRightPadding(layoutDirection).value.toDouble(),
                bottom = calculateBottomPadding().value.toDouble()
            )
        }
    }

    LaunchedEffect(mapsSettings) {
        googleMapsView.settings().myLocationButton = mapsSettings.myLocationButtonEnabled
    }

    LaunchedEffect(mapsSettings) {
        googleMapsView.settings.compassButton = mapsSettings.compassEnabled
    }

    LaunchedEffect(moveCamera) {
        if (!moveCamera.isZeroCoordinate()) {
            val cameraPosition = GMSCameraPosition(
                latitude = moveCamera.coordinate.latitude,
                longitude = moveCamera.coordinate.longitude,
                zoom = moveCamera.zoomWithDefault()
            )
            googleMapsView.animateToCameraPosition(cameraPosition)
        }
    }

    LaunchedEffect(zoomCamera) {
        if (isNeedZoom) {
            googleMapsView.animateToZoom(zoomCamera)
        }
    }

    LaunchedEffect(markerList, selectedMarker) {
        googleMapsView.clear()
        googleMapsView.selectedMarker = null
        for (marker in markerList) {
            val gmsMarker = GMSMarker()
            gmsMarker.setPosition(
                CLLocationCoordinate2DMake(
                    latitude = marker.coordinate.latitude,
                    longitude = marker.coordinate.longitude
                )
            )

            gmsMarker.title = marker.title
            gmsMarker.map = googleMapsView

            if (selectedMarker?.coordinate.toString() == marker.coordinate.toString()) {
                googleMapsView.selectedMarker = gmsMarker
            }
        }
    }

    UIKitView(
        factory = {
            googleMapsView
        },
        modifier = modifier,
        update = {
            val cameraPosition = GMSCameraPosition(
                latitude = initialCamera.coordinate.latitude,
                longitude = initialCamera.coordinate.longitude,
                zoom = initialCamera.zoomWithDefault()
            )
            it.camera = cameraPosition
        }
    )
}
=== end composeApp/src/iosMain/kotlin/maps/GoogleMapsCompose.ios.kt ===

===
Path: composeApp/src/iosMain/kotlin/maps/IosGoogleMapsDelegate.kt
===
package maps

import cocoapods.GoogleMaps.GMSCameraPosition
import cocoapods.GoogleMaps.GMSMapView
import cocoapods.GoogleMaps.GMSMapViewDelegateProtocol
import cocoapods.GoogleMaps.GMSMarker
import entity.data.Coordinate
import kotlinx.cinterop.ExperimentalForeignApi
import kotlinx.cinterop.useContents
import maps.state.GoogleMapsStateImpl
import platform.darwin.NSObject

@OptIn(ExperimentalForeignApi::class)
class IosGoogleMapsDelegate(
    private val stateImpl: GoogleMapsStateImpl,
    private val gestureManager: GestureManager,
    private val onMarkerClick: (GoogleMapsMarker) -> Unit
) : NSObject(), GMSMapViewDelegateProtocol {

    override fun mapView(mapView: GMSMapView, didChangeCameraPosition: GMSCameraPosition) {
        val coordinate = didChangeCameraPosition.target.useContents {
            Coordinate(
                latitude = latitude,
                longitude = longitude
            )
        }

        val zoom = didChangeCameraPosition.zoom

        stateImpl.saveCameraPosition(
            cameraCoordinate = CameraCoordinate(
                coordinate, zoom
            )
        )
        gestureManager.setCoordinate(coordinate)
    }

    override fun mapView(mapView: GMSMapView, willMove: Boolean) {
        gestureManager.setIsMoving(willMove)
    }

    override fun mapViewDidFinishTileRendering(mapView: GMSMapView) {
        stateImpl.setMapLoaded(true)
    }

    override fun mapView(mapView: GMSMapView, didTapMarker: GMSMarker): Boolean {
        val coordinate = didTapMarker.position.useContents {
            Coordinate(latitude, longitude)
        }
        val title = didTapMarker.title
        val googleMapsMarker = GoogleMapsMarker(
            coordinate, title
        )
        onMarkerClick.invoke(googleMapsMarker)
        mapView.selectedMarker = didTapMarker
        return true
    }
}
=== end composeApp/src/iosMain/kotlin/maps/IosGoogleMapsDelegate.kt ===

===
Path: composeApp/src/iosMain/kotlin/maps/IosLocationService.kt
===
package maps

import entity.data.Coordinate
import kotlinx.cinterop.ExperimentalForeignApi
import kotlinx.cinterop.useContents
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import platform.CoreLocation.CLAuthorizationStatus
import platform.CoreLocation.CLLocation
import platform.CoreLocation.CLLocationManager
import platform.CoreLocation.CLLocationManagerDelegateProtocol
import platform.CoreLocation.kCLAuthorizationStatusAuthorizedAlways
import platform.CoreLocation.kCLAuthorizationStatusAuthorizedWhenInUse
import platform.CoreLocation.kCLAuthorizationStatusDenied
import platform.CoreLocation.kCLAuthorizationStatusNotDetermined
import platform.CoreLocation.kCLAuthorizationStatusRestricted
import platform.darwin.NSObject

class IosLocationService : LocationService {
    private val _myLocation: MutableStateFlow<Coordinate> = MutableStateFlow(Coordinate())
    override val myLocation: StateFlow<Coordinate>
        get() = _myLocation

    @OptIn(ExperimentalForeignApi::class)
    private val iosLocationDelegate = object : NSObject(), CLLocationManagerDelegateProtocol {
        override fun locationManager(
            manager: CLLocationManager,
            didChangeAuthorizationStatus: CLAuthorizationStatus
        ) {
            when (didChangeAuthorizationStatus) {
                kCLAuthorizationStatusNotDetermined, kCLAuthorizationStatusDenied -> {
                    // not granted
                    manager.requestWhenInUseAuthorization()
                }
                kCLAuthorizationStatusAuthorizedAlways, kCLAuthorizationStatusAuthorizedWhenInUse, kCLAuthorizationStatusRestricted -> {
                    // granted
                    println("permission granted..")
                    manager.startUpdatingLocation()
                }
            }
        }

        override fun locationManager(manager: CLLocationManager, didUpdateLocations: List<*>) {
            val coordinate = (didUpdateLocations as? List<CLLocation>)
                ?.firstOrNull()
                ?.coordinate
                ?.useContents {
                    Coordinate(latitude, longitude)
                }

            if (coordinate != null) {
                _myLocation.update { coordinate }
            }
        }
    }

    override suspend fun getMyLocation() {
        val locationManager = CLLocationManager()
        locationManager.delegate = iosLocationDelegate

        locationManager.requestWhenInUseAuthorization()
    }
}
=== end composeApp/src/iosMain/kotlin/maps/IosLocationService.kt ===

===
Path: composeApp/src/iosMain/kotlin/maps/LocationService.ios.kt
===
package maps

import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember

@Composable
actual fun rememberLocationService(): LocationService {
    return remember {
        IosLocationService()
    }
}
=== end composeApp/src/iosMain/kotlin/maps/LocationService.ios.kt ===

===
Path: composeApp/src/iosMain/kotlin/maps/state/GoogleMapsState.ios.kt
===
package maps.state

import maps.CameraCoordinate

=== end composeApp/src/iosMain/kotlin/maps/state/GoogleMapsState.ios.kt ===

===
Path: iosApp/Pods/AppAuth/README.md
===
![AppAuth for iOS and macOS](https://rawgit.com/openid/AppAuth-iOS/master/appauth_lockup.svg)
[![tests](https://github.com/openid/AppAuth-iOS/actions/workflows/tests.yml/badge.svg?event=push)](https://github.com/openid/AppAuth-iOS/actions/workflows/tests.yml)
[![codecov](https://codecov.io/gh/openid/AppAuth-iOS/branch/master/graph/badge.svg)](https://codecov.io/gh/openid/AppAuth-iOS)
[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat)](https://github.com/Carthage/Carthage)
[![SwiftPM compatible](https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg?style=flat)](https://swift.org/package-manager)
[![Pod Version](https://img.shields.io/cocoapods/v/AppAuth.svg?style=flat)](https://cocoapods.org/pods/AppAuth)
[![Pod License](https://img.shields.io/cocoapods/l/AppAuth.svg?style=flat)](https://github.com/openid/AppAuth-iOS/blob/master/LICENSE)
[![Pod Platform](https://img.shields.io/cocoapods/p/AppAuth.svg?style=flat)](https://cocoapods.org/pods/AppAuth)
[![Catalyst compatible](https://img.shields.io/badge/Catalyst-compatible-brightgreen.svg?style=flat)](https://developer.apple.com/documentation/xcode/creating_a_mac_version_of_your_ipad_app)

AppAuth for iOS and macOS, and tvOS is a client SDK for communicating with 
[OAuth 2.0](https://tools.ietf.org/html/rfc6749) and 
[OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html) providers. 
It strives to
directly map the requests and responses of those specifications, while following
the idiomatic style of the implementation language. In addition to mapping the
raw protocol flows, convenience methods are available to assist with common
tasks like performing an action with fresh tokens.

It follows the best practices set out in 
[RFC 8252 - OAuth 2.0 for Native Apps](https://tools.ietf.org/html/rfc8252)
including using `SFAuthenticationSession` and `SFSafariViewController` on iOS
for the auth request. `UIWebView` and `WKWebView` are explicitly *not*
supported due to the security and usability reasons explained in
[Section 8.12 of RFC 8252](https://tools.ietf.org/html/rfc8252#section-8.12).

It also supports the [PKCE](https://tools.ietf.org/html/rfc7636) extension to
OAuth, which was created to secure authorization codes in public clients when
custom URI scheme redirects are used. The library is friendly to other
extensions (standard or otherwise), with the ability to handle additional params
in all protocol requests and responses.

For tvOS, AppAuth implements [OAuth 2.0 Device Authorization Grant
](https://tools.ietf.org/html/rfc8628) to allow for tvOS sign-ins through a secondary device.

## Specification

### iOS

#### Supported Versions

AppAuth supports iOS 7 and above.

iOS 9+ uses the in-app browser tab pattern
(via `SFSafariViewController`), and falls back to the system browser (mobile
Safari) on earlier versions.

#### Authorization Server Requirements

Both Custom URI Schemes (all supported versions of iOS) and Universal Links
(iOS 9+) can be used with the library.

In general, AppAuth can work with any authorization server that supports
native apps, as documented in [RFC 8252](https://tools.ietf.org/html/rfc8252),
either through custom URI scheme redirects, or universal links.
Authorization servers that assume all clients are web-based, or require clients to maintain
confidentiality of the client secrets may not work well.

### macOS

#### Supported Versions

AppAuth supports macOS (OS X) 10.9 and above.

#### Authorization Server Requirements

AppAuth for macOS supports both custom schemes; a loopback HTTP redirects
via a small embedded server.

In general, AppAuth can work with any authorization server that supports
native apps, as documented in [RFC 8252](https://tools.ietf.org/html/rfc8252);
either through custom URI schemes, or loopback HTTP redirects.
Authorization servers that assume all clients are web-based, or require clients to maintain
confidentiality of the client secrets may not work well.

### tvOS

#### Supported Versions

AppAuth supports tvOS 9.0 and above. Please note that while it is possible to run the standard AppAuth library on tvOS, the documentation below describes implementing [OAuth 2.0 Device Authorization Grant](https://tools.ietf.org/html/rfc8628) (AppAuthTV).

#### Authorization Server Requirements

AppAuthTV is designed for servers that support the device authorization flow as documented in [RFC 8628](https://tools.ietf.org/html/rfc8628).

## Try

Want to try out AppAuth? Just run:

    pod try AppAuth

Follow the instructions in [Examples/README.md](Examples/README.md) to configure
with your own OAuth client (you need to update three configuration points with your
client info to try the demo).

## Setup

AppAuth supports four options for dependency management.

### CocoaPods

With [CocoaPods](https://guides.cocoapods.org/using/getting-started.html),
add the following line to your `Podfile`:

    pod 'AppAuth'

Then, run `pod install`.

**tvOS:** Use the `TV` subspec:

    pod 'AppAuth/TV'


### Swift Package Manager

With [Swift Package Manager](https://swift.org/package-manager), 
add the following `dependency` to your `Package.swift`:

```swift
dependencies: [
    .package(url: "https://github.com/openid/AppAuth-iOS.git", .upToNextMajor(from: "1.3.0"))
]
```

**tvOS:** Use the `AppAuthTV` target.

### Carthage

With [Carthage](https://github.com/Carthage/Carthage), add the following
line to your `Cartfile`:

    github "openid/AppAuth-iOS" "master"

Then, run `carthage bootstrap`.

**tvOS:** Use the `AppAuthTV` framework.

### Static Library

You can also use AppAuth as a static library. This requires linking the library
and your project, and including the headers.  Here is a suggested configuration:

1. Create an Xcode Workspace.
2. Add `AppAuth.xcodeproj` to your Workspace.
3. Include libAppAuth as a linked library for your target (in the "General ->
Linked Framework and Libraries" section of your target).
4. Add `AppAuth-iOS/Source` to your search paths of your target ("Build Settings ->
"Header Search Paths").

*Note: There is no static library for AppAuthTV.*

## Auth Flow

AppAuth supports both manual interaction with the authorization server
where you need to perform your own token exchanges, as well as convenience
methods that perform some of this logic for you. This example uses the
convenience method, which returns either an `OIDAuthState` object, or an error.

`OIDAuthState` is a class that keeps track of the authorization and token
requests and responses, and provides a convenience method to call an API with
fresh tokens. This is the only object that you need to serialize to retain the
authorization state of the session.

### Configuration

You can configure AppAuth by specifying the endpoints directly:

<sub>Objective-C</sub>
```objc
NSURL *authorizationEndpoint =
    [NSURL URLWithString:@"https://accounts.google.com/o/oauth2/v2/auth"];
NSURL *tokenEndpoint =
    [NSURL URLWithString:@"https://www.googleapis.com/oauth2/v4/token"];

OIDServiceConfiguration *configuration =
    [[OIDServiceConfiguration alloc]
        initWithAuthorizationEndpoint:authorizationEndpoint
                        tokenEndpoint:tokenEndpoint];

// perform the auth request...
```

<sub>Swift</sub>
```swift
let authorizationEndpoint = URL(string: "https://accounts.google.com/o/oauth2/v2/auth")!
let tokenEndpoint = URL(string: "https://www.googleapis.com/oauth2/v4/token")!
let configuration = OIDServiceConfiguration(authorizationEndpoint: authorizationEndpoint,
                                            tokenEndpoint: tokenEndpoint)

// perform the auth request...
```

**tvOS**

<sub>Objective-C</sub>
```objc
NSURL *deviceAuthorizationEndpoint =
    [NSURL URLWithString:@"https://oauth2.googleapis.com/device/code"];
NSURL *tokenEndpoint =
    [NSURL URLWithString:@"https://www.googleapis.com/oauth2/v4/token"];

OIDTVServiceConfiguration *configuration =
    [[OIDTVServiceConfiguration alloc]
        initWithDeviceAuthorizationEndpoint:deviceAuthorizationEndpoint
                              tokenEndpoint:tokenEndpoint];

// perform the auth request...
```


Or through discovery:

<sub>Objective-C</sub>
```objc
NSURL *issuer = [NSURL URLWithString:@"https://accounts.google.com"];

[OIDAuthorizationService discoverServiceConfigurationForIssuer:issuer
    completion:^(OIDServiceConfiguration *_Nullable configuration,
                 NSError *_Nullable error) {

  if (!configuration) {
    NSLog(@"Error retrieving discovery document: %@",
          [error localizedDescription]);
    return;
  }

  // perform the auth request...
}];
```

<sub>Swift</sub>
```swift
let issuer = URL(string: "https://accounts.google.com")!

// discovers endpoints
OIDAuthorizationService.discoverConfiguration(forIssuer: issuer) { configuration, error in
  guard let config = configuration else {
    print("Error retrieving discovery document: \(error?.localizedDescription ?? "Unknown error")")
    return
  }

  // perform the auth request...
}
```

**tvOS**

<sub>Objective-C</sub>
```objc
NSURL *issuer = [NSURL URLWithString:@"https://accounts.google.com"];

[OIDTVAuthorizationService discoverServiceConfigurationForIssuer:issuer
    completion:^(OIDTVServiceConfiguration *_Nullable configuration,
                 NSError *_Nullable error) {

  if (!configuration) {
    NSLog(@"Error retrieving discovery document: %@",
          [error localizedDescription]);
    return;
  }

  // perform the auth request...
}];
```

### Authorizing – iOS

First, you need to have a property in your `UIApplicationDelegate`
implementation to hold the session, in order to continue the authorization flow
from the redirect. In this example, the implementation of this delegate is
a class named `AppDelegate`, if your app's application delegate has a different
name, please update the class name in samples below accordingly.

<sub>Objective-C</sub>
```objc
@interface AppDelegate : UIResponder <UIApplicationDelegate>
// property of the app's AppDelegate
@property(nonatomic, strong, nullable) id<OIDExternalUserAgentSession> currentAuthorizationFlow;
@end
```

<sub>Swift</sub>
```swift
class AppDelegate: UIResponder, UIApplicationDelegate {
  // property of the app's AppDelegate
  var currentAuthorizationFlow: OIDExternalUserAgentSession?
}
```


And your main class, a property to store the auth state:

<sub>Objective-C</sub>
```objc
// property of the containing class
@property(nonatomic, strong, nullable) OIDAuthState *authState;
```
<sub>Swift</sub>
```swift
// property of the containing class
private var authState: OIDAuthState?
```


Then, initiate the authorization request. By using the 
`authStateByPresentingAuthorizationRequest` convenience method, the token
exchange will be performed automatically, and everything will be protected with
PKCE (if the server supports it). AppAuth also lets you perform these
requests manually. See the `authNoCodeExchange` method in the included Example
app for a demonstration:

<sub>Objective-C</sub>
```objc
// builds authentication request
OIDAuthorizationRequest *request =
    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration
                                                  clientId:kClientID
                                                    scopes:@[OIDScopeOpenID,
                                                             OIDScopeProfile]
                                               redirectURL:kRedirectURI
                                              responseType:OIDResponseTypeCode
                                      additionalParameters:nil];

// performs authentication request
AppDelegate *appDelegate =
    (AppDelegate *)[UIApplication sharedApplication].delegate;
appDelegate.currentAuthorizationFlow =
    [OIDAuthState authStateByPresentingAuthorizationRequest:request
        presentingViewController:self
                        callback:^(OIDAuthState *_Nullable authState,
                                   NSError *_Nullable error) {
  if (authState) {
    NSLog(@"Got authorization tokens. Access token: %@",
          authState.lastTokenResponse.accessToken);
    [self setAuthState:authState];
  } else {
    NSLog(@"Authorization error: %@", [error localizedDescription]);
    [self setAuthState:nil];
  }
}];
```

<sub>Swift</sub>
```swift
// builds authentication request
let request = OIDAuthorizationRequest(configuration: configuration,
                                      clientId: clientID,
                                      clientSecret: clientSecret,
                                      scopes: [OIDScopeOpenID, OIDScopeProfile],
                                      redirectURL: redirectURI,
                                      responseType: OIDResponseTypeCode,
                                      additionalParameters: nil)

// performs authentication request
print("Initiating authorization request with scope: \(request.scope ?? "nil")")

let appDelegate = UIApplication.shared.delegate as! AppDelegate

appDelegate.currentAuthorizationFlow =
    OIDAuthState.authState(byPresenting: request, presenting: self) { authState, error in
  if let authState = authState {
    self.setAuthState(authState)
    print("Got authorization tokens. Access token: " +
          "\(authState.lastTokenResponse?.accessToken ?? "nil")")
  } else {
    print("Authorization error: \(error?.localizedDescription ?? "Unknown error")")
    self.setAuthState(nil)
  }
}
```

*Handling the Redirect*

The authorization response URL is returned to the app via the iOS openURL
app delegate method, so you need to pipe this through to the current
authorization session (created in the previous session):

<sub>Objective-C</sub>
```objc
- (BOOL)application:(UIApplication *)app
            openURL:(NSURL *)url
            options:(NSDictionary<NSString *, id> *)options {
  // Sends the URL to the current authorization flow (if any) which will
  // process it if it relates to an authorization response.
  if ([_currentAuthorizationFlow resumeExternalUserAgentFlowWithURL:url]) {
    _currentAuthorizationFlow = nil;
    return YES;
  }

  // Your additional URL handling (if any) goes here.

  return NO;
}
```

<sub>Swift</sub>
```swift
func application(_ app: UIApplication,
                 open url: URL,
                 options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {
  // Sends the URL to the current authorization flow (if any) which will
  // process it if it relates to an authorization response.
  if let authorizationFlow = self.currentAuthorizationFlow,
                             authorizationFlow.resumeExternalUserAgentFlow(with: url) {
    self.currentAuthorizationFlow = nil
    return true
  }

  // Your additional URL handling (if any)

  return false
}
```

### Authorizing – MacOS

On macOS, the most popular way to get the authorization response redirect is to
start a local HTTP server on the loopback interface (limited to incoming
requests from the user's machine only). When the authorization is complete, the
user is redirected to that local server, and the authorization response can be
processed by the app. AppAuth takes care of managing the local HTTP server
lifecycle for you.

> #### :bulb: Alternative: Custom URI Schemes
> Custom URI schemes are also supported on macOS, but some browsers display
> an interstitial, which reduces the usability. For an example on using custom
> URI schemes with macOS, See `Example-Mac`.

To receive the authorization response using a local HTTP server, first you need
to have an instance variable in your main class to retain the HTTP redirect
handler:

<sub>Objective-C</sub>
```objc
OIDRedirectHTTPHandler *_redirectHTTPHandler;
```

Then, as the port used by the local HTTP server varies, you need to start it
before building the authorization request, in order to get the exact redirect
URI to use:

<sub>Objective-C</sub>
```objc
static NSString *const kSuccessURLString =
    @"http://openid.github.io/AppAuth-iOS/redirect/";
NSURL *successURL = [NSURL URLWithString:kSuccessURLString];

// Starts a loopback HTTP redirect listener to receive the code.  This needs to be started first,
// as the exact redirect URI (including port) must be passed in the authorization request.
_redirectHTTPHandler = [[OIDRedirectHTTPHandler alloc] initWithSuccessURL:successURL];
NSURL *redirectURI = [_redirectHTTPHandler startHTTPListener:nil];
```

Then, initiate the authorization request. By using the 
`authStateByPresentingAuthorizationRequest` convenience method, the token
exchange will be performed automatically, and everything will be protected with
PKCE (if the server supports it). By assigning the return value to the
`OIDRedirectHTTPHandler`'s `currentAuthorizationFlow`, the authorization will
continue automatically once the user makes their choice:

```objc
// builds authentication request
OIDAuthorizationRequest *request =
    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration
                                                  clientId:kClientID
                                              clientSecret:kClientSecret
                                                    scopes:@[ OIDScopeOpenID ]
                                               redirectURL:redirectURI
                                              responseType:OIDResponseTypeCode
                                      additionalParameters:nil];
// performs authentication request
__weak __typeof(self) weakSelf = self;
_redirectHTTPHandler.currentAuthorizationFlow =
    [OIDAuthState authStateByPresentingAuthorizationRequest:request
                        callback:^(OIDAuthState *_Nullable authState,
                                   NSError *_Nullable error) {
  // Brings this app to the foreground.
  [[NSRunningApplication currentApplication]
      activateWithOptions:(NSApplicationActivateAllWindows |
                           NSApplicationActivateIgnoringOtherApps)];

  // Processes the authorization response.
  if (authState) {
    NSLog(@"Got authorization tokens. Access token: %@",
          authState.lastTokenResponse.accessToken);
  } else {
    NSLog(@"Authorization error: %@", error.localizedDescription);
  }
  [weakSelf setAuthState:authState];
}];
```


### Authorizing – tvOS

Ensure that your main class is a delegate of `OIDAuthStateChangeDelegate`, `OIDAuthStateErrorDelegate`, implement the corresponding methods, and include the following property and instance variable:

<sub>Objective-C</sub>
```objc
// property of the containing class
@property(nonatomic, strong, nullable) OIDAuthState *authState;

// instance variable of the containing class
OIDTVAuthorizationCancelBlock _cancelBlock;
```

Then, build and perform the authorization request.

<sub>Objective-C</sub>
```objc
// builds authentication request
__weak __typeof(self) weakSelf = self;

OIDTVAuthorizationRequest *request =
    [[OIDTVAuthorizationRequest alloc] initWithConfiguration:configuration
                                                    clientId:kClientID
                                                clientSecret:kClientSecret
                                                      scopes:@[ OIDScopeOpenID, OIDScopeProfile ]
                                        additionalParameters:nil
                                           additionalHeaders:nil];

// performs authentication request
OIDTVAuthorizationInitialization initBlock =
    ^(OIDTVAuthorizationResponse *_Nullable response, NSError *_Nullable error) {
      if (response) {
        // process authorization response
        NSLog(@"Got authorization response: %@", response);
      } else {
        // handle initialization error
        NSLog(@"Error: %@", error);
      }
    };

OIDTVAuthorizationCompletion completionBlock =
    ^(OIDAuthState *_Nullable authState, NSError *_Nullable error) {
      weakSelf.signInView.hidden = YES;
      if (authState) {
        NSLog(@"Token response: %@", authState.lastTokenResponse);
        [weakSelf setAuthState:authState];
      } else {
        NSLog(@"Error: %@", error);
        [weakSelf setAuthState:nil];
      }
    };

_cancelBlock = [OIDTVAuthorizationService authorizeTVRequest:request
                                              initialization:initBlock
                                                  completion:completionBlock];
```

### Making API Calls

AppAuth gives you the raw token information, if you need it. However, we
recommend that users of the `OIDAuthState` convenience wrapper use the provided
`performActionWithFreshTokens:` method to perform their API calls to avoid
needing to worry about token freshness:

<sub>Objective-C</sub>
```objc
[_authState performActionWithFreshTokens:^(NSString *_Nonnull accessToken,
                                           NSString *_Nonnull idToken,
                                           NSError *_Nullable error) {
  if (error) {
    NSLog(@"Error fetching fresh tokens: %@", [error localizedDescription]);
    return;
  }

  // perform your API request using the tokens
}];
```

<sub>Swift</sub>
```swift
let userinfoEndpoint = URL(string:"https://openidconnect.googleapis.com/v1/userinfo")!
self.authState?.performAction() { (accessToken, idToken, error) in

  if error != nil  {
    print("Error fetching fresh tokens: \(error?.localizedDescription ?? "Unknown error")")
    return
  }
  guard let accessToken = accessToken else {
    return
  }

  // Add Bearer token to request
  var urlRequest = URLRequest(url: userinfoEndpoint)
  urlRequest.allHTTPHeaderFields = ["Authorization": "Bearer \(accessToken)"]

  // Perform request...
}
```

### Custom User-Agents (iOS and macOS)

Each OAuth flow involves presenting an external user-agent to the user, that
allows them to interact with the OAuth authorization server. Typical examples
of a user-agent are the user's browser, or an in-app browser tab incarnation
like `ASWebAuthenticationSession` on iOS.

AppAuth ships with several implementations of an external user-agent out of the
box, including defaults for iOS and macOS suitable for most cases. The default
user-agents typically share persistent cookies with the system default browser,
to improve the chance that the user doesn't need to sign-in all over again.

It is possible to change the user-agent that AppAuth uses, and even write your
own - all without needing to fork the library.

All implementations of the external user-agent, be they included or created by
you need to conform to the 
[`OIDExternalUserAgent`](http://openid.github.io/AppAuth-iOS/docs/latest/protocol_o_i_d_external_user_agent-p.html)
protocol.

Instances of the `OIDExternalUserAgent`are passed into
[`OIDAuthState.authStateByPresentingAuthorizationRequest:externalUserAgent:callback`](http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_auth_state.html#ac762fe2bf95c116f0b437419be211fa1)
and/or 
[`OIDAuthorizationService.presentAuthorizationRequest:externalUserAgent:callback:`](http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_authorization_service.html#ae551f8e6887366a46e49b09b37389b8f)
rather than using the platform-specific convenience methods (which use the 
default user-agents for their respective platforms), like 
[`OIDAuthState.authStateByPresentingAuthorizationRequest:presentingViewController:callback:`](http://openid.github.io/AppAuth-iOS/docs/latest/category_o_i_d_auth_state_07_i_o_s_08.html#ae32fd0732cd3192cd5219f2655a4c85c).

Popular use-cases for writing your own user-agent implementation include needing
to style the user-agent in ways not supported by AppAuth, and implementing a
fully custom flow with your own business logic. You can take one of the existing
implementations as a starting point to copy, rename, and customize to your
needs.

#### Custom Browser User-Agent

AppAuth for iOS includes a few extra user-agent implementations which you can
try, or use as a reference for your own implementation. One of them,
[`OIDExternalUserAgentIOSCustomBrowser`](http://openid.github.io/AppAuth-iOS/docs/latest/interface_o_i_d_external_user_agent_i_o_s_custom_browser.html)
enables you to use a different browser for authentication, like Chrome for iOS
or Firefox for iOS.

Here's how to configure AppAuth to use a custom browser using the
`OIDExternalUserAgentIOSCustomBrowser` user agent:

First, add the following array to your
[Info.plist](https://github.com/openid/AppAuth-iOS/blob/135f99d2cb4e9d18d310ac2588b905e612461561/Examples/Example-iOS_ObjC/Source/Info.plist#L34)
(in XCode, right click -> Open As -> Source Code)

```
    <key>LSApplicationQueriesSchemes</key>
    <array>
        <string>googlechromes</string>
        <string>opera-https</string>
        <string>firefox</string>
    </array>
```

This is required so that AppAuth can test for the browser and open the app store
if it's not installed (the default behavior of this user-agent). You only need
to include the URL scheme of the actual browser you intend to use.

<sub>Objective-C</sub>
```objc
// performs authentication request
AppDelegate *appDelegate =
    (AppDelegate *)[UIApplication sharedApplication].delegate;
id<OIDExternalUserAgent> userAgent =
    [OIDExternalUserAgentIOSCustomBrowser CustomBrowserChrome];
appDelegate.currentAuthorizationFlow =
    [OIDAuthState authStateByPresentingAuthorizationRequest:request
        externalUserAgent:userAgent
                 callback:^(OIDAuthState *_Nullable authState,
                                   NSError *_Nullable error) {
  if (authState) {
    NSLog(@"Got authorization tokens. Access token: %@",
          authState.lastTokenResponse.accessToken);
    [self setAuthState:authState];
  } else {
    NSLog(@"Authorization error: %@", [error localizedDescription]);
    [self setAuthState:nil];
  }
}];
```

<sub>Swift</sub>
```
guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
            self.logMessage("Error accessing AppDelegate")
            return
        }
let userAgent = OIDExternalUserAgentIOSCustomBrowser.customBrowserChrome()		
appDelegate.currentAuthorizationFlow = OIDAuthState.authState(byPresenting: request, externalUserAgent: userAgent) { authState, error in
    if let authState = authState {
        self.setAuthState(authState)
        self.logMessage("Got authorization tokens. Access token: \(authState.lastTokenResponse?.accessToken ?? "DEFAULT_TOKEN")")
    } else {
        self.logMessage("Authorization error: \(error?.localizedDescription ?? "DEFAULT_ERROR")")
        self.setAuthState(nil)
    }
}
```

That's it! With those two changes (which you can try on the included sample),
AppAuth will use Chrome iOS for the authorization request (and open Chrome in
the App Store if it's not installed).

⚠️**Note: the `OIDExternalUserAgentIOSCustomBrowser` user-agent is not intended for consumer apps**. It is designed for
advanced enterprise use-cases where the app developers have greater control over
the operating environment and have special requirements that require a custom
browser like Chrome.

You don't need to stop with the included external user agents either! Since the
[`OIDExternalUserAgent`](http://openid.github.io/AppAuth-iOS/docs/latest/protocol_o_i_d_external_user_agent-p.html)
protocol is part of AppAuth's public API, you can implement your own versions of
it. In the above example,
`userAgent = [OIDExternalUserAgentIOSCustomBrowser CustomBrowserChrome]` would
be replaced with an instantiation of your user-agent implementation.

## API Documentation

Browse the [API documentation](http://openid.github.io/AppAuth-iOS/docs/latest/annotated.html).

## Included Samples

Sample apps that explore core AppAuth features are available for iOS, macOS and tvOS; follow the instructions in [Examples/README.md](Examples/README.md) to get started.

=== end iosApp/Pods/AppAuth/README.md ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuth.h
===
/*! @file AppAuth.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import "OIDAuthState.h"
#import "OIDAuthStateChangeDelegate.h"
#import "OIDAuthStateErrorDelegate.h"
#import "OIDAuthorizationRequest.h"
#import "OIDAuthorizationResponse.h"
#import "OIDAuthorizationService.h"
#import "OIDError.h"
#import "OIDErrorUtilities.h"
#import "OIDExternalUserAgent.h"
#import "OIDExternalUserAgentRequest.h"
#import "OIDExternalUserAgentSession.h"
#import "OIDGrantTypes.h"
#import "OIDIDToken.h"
#import "OIDRegistrationRequest.h"
#import "OIDRegistrationResponse.h"
#import "OIDResponseTypes.h"
#import "OIDScopes.h"
#import "OIDScopeUtilities.h"
#import "OIDServiceConfiguration.h"
#import "OIDServiceDiscovery.h"
#import "OIDTokenRequest.h"
#import "OIDTokenResponse.h"
#import "OIDTokenUtilities.h"
#import "OIDURLSessionProvider.h"
#import "OIDEndSessionRequest.h"
#import "OIDEndSessionResponse.h"

#if TARGET_OS_TV
#elif TARGET_OS_WATCH
#elif TARGET_OS_IOS || TARGET_OS_MACCATALYST
#import "OIDAuthState+IOS.h"
#import "OIDAuthorizationService+IOS.h"
#import "OIDExternalUserAgentIOS.h"
#import "OIDExternalUserAgentIOSCustomBrowser.h"
#import "OIDExternalUserAgentCatalyst.h"
#elif TARGET_OS_OSX
#import "OIDAuthState+Mac.h"
#import "OIDAuthorizationService+Mac.h"
#import "OIDExternalUserAgentMac.h"
#import "OIDRedirectHTTPHandler.h"
#else
#error "Platform Undefined"
#endif

/*! @mainpage AppAuth for iOS and macOS

    @section introduction Introduction

    AppAuth for iOS and macOS is a client SDK for communicating with [OAuth 2.0]
    (https://tools.ietf.org/html/rfc6749) and [OpenID Connect]
    (http://openid.net/specs/openid-connect-core-1_0.html) providers. It strives to
    directly map the requests and responses of those specifications, while following
    the idiomatic style of the implementation language. In addition to mapping the
    raw protocol flows, convenience methods are available to assist with common
    tasks like performing an action with fresh tokens.

    It follows the best practices set out in 
    [RFC 8252 - OAuth 2.0 for Native Apps](https://tools.ietf.org/html/rfc8252)
    including using `SFAuthenticationSession` and `SFSafariViewController` on iOS
    for the auth request. Web view and `WKWebView` are explicitly *not*
    supported due to the security and usability reasons explained in
    [Section 8.12 of RFC 8252](https://tools.ietf.org/html/rfc8252#section-8.12).

    It also supports the [PKCE](https://tools.ietf.org/html/rfc7636) extension to
    OAuth which was created to secure authorization codes in public clients when
    custom URI scheme redirects are used. The library is friendly to other
    extensions (standard or otherwise) with the ability to handle additional params
    in all protocol requests and responses.

    <b>Homepage</b>: http://openid.github.io/AppAuth-iOS/ <br>
    <b>API Documentation</b>: http://openid.github.io/AppAuth-iOS/docs/latest <br>
    <b>Git Repository</b>: https://github.com/openid/AppAuth-iOS <br>

 */

=== end iosApp/Pods/AppAuth/Sources/AppAuth.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDAuthState+IOS.h
===
/*! @file OIDAuthState+IOS.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2016 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <TargetConditionals.h>

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST

#import <UIKit/UIKit.h>

#import "OIDAuthState.h"

NS_ASSUME_NONNULL_BEGIN

/*! @brief iOS specific convenience methods for @c OIDAuthState.
 */
@interface OIDAuthState (IOS)

/*! @brief Convenience method to create a @c OIDAuthState by presenting an authorization request
        and performing the authorization code exchange in the case of code flow requests. For
        the hybrid flow, the caller should validate the id_token and c_hash, then perform the token
        request (@c OIDAuthorizationService.performTokenRequest:callback:)
        and update the OIDAuthState with the results (@c
        OIDAuthState.updateWithTokenResponse:error:).
    @param authorizationRequest The authorization request to present.
    @param presentingViewController The view controller to use for presenting the authentication UI.
    @param callback The method called when the request has completed or failed.
    @return A @c OIDExternalUserAgentSession instance which will terminate when it
        receives a @c OIDExternalUserAgentSession.cancel message, or after processing a
        @c OIDExternalUserAgentSession.resumeExternalUserAgentFlowWithURL: message.
 */
+ (id<OIDExternalUserAgentSession>)
    authStateByPresentingAuthorizationRequest:(OIDAuthorizationRequest *)authorizationRequest
                     presentingViewController:(UIViewController *)presentingViewController
                                     callback:(OIDAuthStateAuthorizationCallback)callback;

/*! @brief Convenience method to create a @c OIDAuthState by presenting an authorization request
        (optionally using an emphemeral browser session that shares no cookies or data with the
        normal browser session) and performing the authorization code exchange in the case of code
        flow requests. For the hybrid flow, the caller should validate the id_token and c_hash, then
        perform the token request (@c OIDAuthorizationService.performTokenRequest:callback:)
        and update the OIDAuthState with the results (@c
        OIDAuthState.updateWithTokenResponse:error:).
    @param authorizationRequest The authorization request to present.
    @param presentingViewController The view controller to use for presenting the authentication UI.
    @param prefersEphemeralSession Whether the caller prefers to use a private authentication
        session. See @c ASWebAuthenticationSession.prefersEphemeralWebBrowserSession for more.
    @param callback The method called when the request has completed or failed.
    @return A @c OIDExternalUserAgentSession instance which will terminate when it
        receives a @c OIDExternalUserAgentSession.cancel message, or after processing a
        @c OIDExternalUserAgentSession.resumeExternalUserAgentFlowWithURL: message.
 */
+ (id<OIDExternalUserAgentSession>)
    authStateByPresentingAuthorizationRequest:(OIDAuthorizationRequest *)authorizationRequest
                     presentingViewController:(UIViewController *)presentingViewController
                      prefersEphemeralSession:(BOOL)prefersEphemeralSession
                                     callback:(OIDAuthStateAuthorizationCallback)callback
    API_AVAILABLE(ios(13));

+ (id<OIDExternalUserAgentSession>)
    authStateByPresentingAuthorizationRequest:(OIDAuthorizationRequest *)authorizationRequest
                     callback:(OIDAuthStateAuthorizationCallback)callback API_AVAILABLE(ios(11)) API_UNAVAILABLE(macCatalyst)
    __deprecated_msg("This method will not work on iOS 13. Use "
        "authStateByPresentingAuthorizationRequest:presentingViewController:callback:");

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS || TARGET_OS_MACCATALYST

=== end iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDAuthState+IOS.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDAuthorizationService+IOS.h
===
/*! @file OIDAuthorizationService+IOS.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2016 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <TargetConditionals.h>

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST

#import <UIKit/UIKit.h>

#import "OIDAuthorizationService.h"
#import "OIDExternalUserAgentSession.h"

NS_ASSUME_NONNULL_BEGIN

/*! @brief Provides iOS specific authorization request handling.
 */
@interface OIDAuthorizationService (IOS)

/*! @brief Perform an authorization flow, presenting an appropriate browser for the user to
        authenticate.
    @param request The authorization request.
    @param presentingViewController The view controller from which to present authentication UI.
    @param callback The method called when the request has completed or failed.
    @return A @c OIDExternalUserAgentSession instance which will terminate when it
        receives a @c OIDExternalUserAgentSession.cancel message, or after processing a
        @c OIDExternalUserAgentSession.resumeExternalUserAgentFlowWithURL: message.
 */
+ (id<OIDExternalUserAgentSession>) presentAuthorizationRequest:(OIDAuthorizationRequest *)request
    presentingViewController:(UIViewController *)presentingViewController
                    callback:(OIDAuthorizationCallback)callback;

/*! @brief Perform an authorization flow using the @c ASWebAuthenticationSession optionally using an
        emphemeral browser session that shares no cookies or data with the normal browser session.
    @param request The authorization request.
    @param presentingViewController The view controller from which to present authentication UI.
    @param prefersEphemeralSession Whether the caller prefers to use a private authentication
        session. See @c ASWebAuthenticationSession.prefersEphemeralWebBrowserSession for more.
    @param callback The method called when the request has completed or failed.
    @return A @c OIDExternalUserAgentSession instance which will terminate when it
        receives a @c OIDExternalUserAgentSession.cancel message, or after processing a
        @c OIDExternalUserAgentSession.resumeExternalUserAgentFlowWithURL: message.
 */
+ (id<OIDExternalUserAgentSession>) presentAuthorizationRequest:(OIDAuthorizationRequest *)request
    presentingViewController:(UIViewController *)presentingViewController
     prefersEphemeralSession:(BOOL)prefersEphemeralSession
                    callback:(OIDAuthorizationCallback)callback API_AVAILABLE(ios(13));

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS || TARGET_OS_MACCATALYST

=== end iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDAuthorizationService+IOS.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDExternalUserAgentCatalyst.h
===
/*! @file OIDExternalUserAgentCatalyst.h
   @brief AppAuth iOS SDK
   @copyright
       Copyright 2019 The AppAuth Authors. All Rights Reserved.
   @copydetails
       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.
*/

#import <TargetConditionals.h>

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST

#import <UIKit/UIKit.h>

#import "OIDExternalUserAgent.h"

NS_ASSUME_NONNULL_BEGIN

/*! @brief A Catalyst specific external user-agent that uses `ASWebAuthenticationSession` to
       present the request.
*/
API_AVAILABLE(macCatalyst(13)) API_UNAVAILABLE(ios)
@interface OIDExternalUserAgentCatalyst : NSObject<OIDExternalUserAgent>

/*! @internal
    @brief Unavailable. Please use @c initWithPresentingViewController:
 */
- (nonnull instancetype)init NS_UNAVAILABLE;

/*! @brief The designated initializer.
    @param presentingViewController The view controller from which to present the
        \SFSafariViewController.
 */
- (nullable instancetype)initWithPresentingViewController:
    (UIViewController *)presentingViewController
    NS_DESIGNATED_INITIALIZER;

/*! @brief Create an external user-agent which optionally uses a private authentication session.
    @param presentingViewController The view controller from which to present the browser.
    @param prefersEphemeralSession Whether the caller prefers to use a private authentication
        session. See @c ASWebAuthenticationSession.prefersEphemeralWebBrowserSession for more.
 */
- (nullable instancetype)initWithPresentingViewController:
    (UIViewController *)presentingViewController
                                  prefersEphemeralSession:(BOOL)prefersEphemeralSession;

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS || TARGET_OS_MACCATALYST

=== end iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDExternalUserAgentCatalyst.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDExternalUserAgentIOS.h
===
/*! @file OIDExternalUserAgentIOS.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2016 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <TargetConditionals.h>

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST

#import <UIKit/UIKit.h>

#import "OIDExternalUserAgent.h"

@class SFSafariViewController;

NS_ASSUME_NONNULL_BEGIN

/*! @brief An iOS specific external user-agent that uses the best possible user-agent available
        depending on the version of iOS to present the request.
 */
API_UNAVAILABLE(macCatalyst)
@interface OIDExternalUserAgentIOS : NSObject<OIDExternalUserAgent>

- (null_unspecified instancetype)init API_AVAILABLE(ios(11))
    __deprecated_msg("This method will not work on iOS 13, use "
                     "initWithPresentingViewController:presentingViewController");

/*! @brief The designated initializer.
    @param presentingViewController The view controller from which to present the authentication UI.
    @discussion The specific authentication UI used depends on the iOS version and accessibility
        options. iOS 8 uses the system browser, iOS 9-10 use @c SFSafariViewController, iOS 11 uses
        @c SFAuthenticationSession
        (unless Guided Access is on which does not work) or uses @c SFSafariViewController, and iOS
        12+ uses @c ASWebAuthenticationSession (unless Guided Access is on).
 */
- (nullable instancetype)initWithPresentingViewController:
    (UIViewController *)presentingViewController
    NS_DESIGNATED_INITIALIZER;

/*! @brief Create an external user-agent which optionally uses a private authentication session.
    @param presentingViewController The view controller from which to present the browser.
    @param prefersEphemeralSession Whether the caller prefers to use a private authentication
        session. See @c ASWebAuthenticationSession.prefersEphemeralWebBrowserSession for more.
    @discussion Authentication is performed with @c ASWebAuthenticationSession (unless Guided Access
        is on), setting the ephemerality based on the argument.
 */
- (nullable instancetype)initWithPresentingViewController:
    (UIViewController *)presentingViewController
                                  prefersEphemeralSession:(BOOL)prefersEphemeralSession
    API_AVAILABLE(ios(13));

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS || TARGET_OS_MACCATALYST

=== end iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDExternalUserAgentIOS.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDExternalUserAgentIOSCustomBrowser.h
===
/*! @file OIDExternalUserAgentIOSCustomBrowser.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2018 Google LLC
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <TargetConditionals.h>

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST

#import <Foundation/Foundation.h>

#import "OIDExternalUserAgent.h"

NS_ASSUME_NONNULL_BEGIN

/*! @brief A block that transforms a regular http/https URL into one that will open in an
        alternative browser.
    @param requestURL the http/https request URL to be transformed.
    @return transformed URL.
 */
typedef NSURL *_Nullable (^OIDCustomBrowserURLTransformation)(NSURL *_Nullable requestURL);

/*! @brief An implementation of the OIDExternalUserAgent protocol for iOS that uses
        a custom browser (i.e. not Safari) for external requests. It is suitable for browsers that
        offer a custom url scheme that simply replaces the "https" scheme. It is not designed
        for browsers that require other modifications to the URL.  If the browser is not installed
        the user will be prompted to install it.
 */
API_UNAVAILABLE(macCatalyst)
@interface OIDExternalUserAgentIOSCustomBrowser : NSObject<OIDExternalUserAgent>

/*! @brief URL transformation block for the browser.
 */
@property(nonatomic, readonly) OIDCustomBrowserURLTransformation URLTransformation;

/*! @brief URL Scheme used to test for whether the browser is installed.
 */
@property(nonatomic, readonly, nullable) NSString *canOpenURLScheme;

/*! @brief URL of the browser's App Store listing.
 */
@property(nonatomic, readonly, nullable) NSURL *appStoreURL;

/*! @brief An instance of @c OIDExternalUserAgentIOSCustomBrowser for Chrome.
 */
+ (instancetype)CustomBrowserChrome;

/*! @brief An instance of @c OIDExternalUserAgentIOSCustomBrowser for Firefox.
 */
+ (instancetype)CustomBrowserFirefox;

/*! @brief An instance of @c OIDExternalUserAgentIOSCustomBrowser for Opera.
 */
+ (instancetype)CustomBrowserOpera;

/*! @brief An instance of @c OIDExternalUserAgentIOSCustomBrowser for Safari.
 */
+ (instancetype)CustomBrowserSafari;

/*! @brief Creates a @c OIDCustomBrowserURLTransformation using the scheme substitution method used
        iOS browsers like Chrome and Firefox.
 */
+ (OIDCustomBrowserURLTransformation)
    URLTransformationSchemeSubstitutionHTTPS:(NSString *)browserSchemeHTTPS
                                        HTTP:(nullable NSString *)browserSchemeHTTP;

/*! @brief Creates a @c OIDCustomBrowserURLTransformation with the URL prefix method used by
        iOS browsers like Firefox.
 */
+ (OIDCustomBrowserURLTransformation) URLTransformationSchemeConcatPrefix:(NSString*)URLprefix;

/*! @internal
    @brief Unavailable. Please use @c initWithURLTransformation:canOpenURLScheme:appStoreURL:
 */
- (nonnull instancetype)init NS_UNAVAILABLE;

/*! @brief OIDExternalUserAgent for a custom browser. @c presentExternalUserAgentRequest:session method
        will return NO if the browser isn't installed.
 */
- (nullable instancetype)initWithURLTransformation:(OIDCustomBrowserURLTransformation)URLTransformation;

/*! @brief The designated initializer.
    @param URLTransformation the transformation block to translate the URL into one that will open
        in the desired custom browser.
    @param canOpenURLScheme any scheme supported by the browser used to check if the browser is
        installed.
    @param appStoreURL URL of the browser in the app store. When this and @c canOpenURLScheme
        are non-nil, @c presentExternalUserAgentRequest:session will redirect the user to the app store
        if the browser is not installed.
 */
- (nullable instancetype)initWithURLTransformation:(OIDCustomBrowserURLTransformation)URLTransformation
                                  canOpenURLScheme:(nullable NSString *)canOpenURLScheme
                                       appStoreURL:(nullable NSURL *)appStoreURL
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS || TARGET_OS_MACCATALYST

=== end iosApp/Pods/AppAuth/Sources/AppAuth/iOS/OIDExternalUserAgentIOSCustomBrowser.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore.h
===
/*! @file AppAuthCore.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import "OIDAuthState.h"
#import "OIDAuthStateChangeDelegate.h"
#import "OIDAuthStateErrorDelegate.h"
#import "OIDAuthorizationRequest.h"
#import "OIDAuthorizationResponse.h"
#import "OIDAuthorizationService.h"
#import "OIDError.h"
#import "OIDErrorUtilities.h"
#import "OIDExternalUserAgent.h"
#import "OIDExternalUserAgentRequest.h"
#import "OIDExternalUserAgentSession.h"
#import "OIDGrantTypes.h"
#import "OIDIDToken.h"
#import "OIDRegistrationRequest.h"
#import "OIDRegistrationResponse.h"
#import "OIDResponseTypes.h"
#import "OIDScopes.h"
#import "OIDScopeUtilities.h"
#import "OIDServiceConfiguration.h"
#import "OIDServiceDiscovery.h"
#import "OIDTokenRequest.h"
#import "OIDTokenResponse.h"
#import "OIDTokenUtilities.h"
#import "OIDURLSessionProvider.h"
#import "OIDEndSessionRequest.h"
#import "OIDEndSessionResponse.h"

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthState.h
===
/*! @file OIDAuthState.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */
#import <Foundation/Foundation.h>

@class OIDAuthorizationRequest;
@class OIDAuthorizationResponse;
@class OIDAuthState;
@class OIDRegistrationResponse;
@class OIDTokenResponse;
@class OIDTokenRequest;
@protocol OIDAuthStateChangeDelegate;
@protocol OIDAuthStateErrorDelegate;
@protocol OIDExternalUserAgent;
@protocol OIDExternalUserAgentSession;

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents a block used to call an action with a fresh access token.
    @param accessToken A valid access token if available.
    @param idToken A valid ID token if available.
    @param error The error if an error occurred.
 */
typedef void (^OIDAuthStateAction)(NSString *_Nullable accessToken,
                                   NSString *_Nullable idToken,
                                   NSError *_Nullable error);

/*! @brief The method called when the @c
        OIDAuthState.authStateByPresentingAuthorizationRequest:presentingViewController:callback:
        method has completed or failed.
    @param authState The auth state, if the authorization request succeeded.
    @param error The error if an error occurred.
 */
typedef void (^OIDAuthStateAuthorizationCallback)(OIDAuthState *_Nullable authState,
                                                  NSError *_Nullable error);

/*! @brief The exception thrown when a developer tries to create a refresh request from an
        authorization request with no authorization code.
 */
static NSString *const kRefreshTokenRequestException =
    @"Attempted to create a token refresh request from a token response with no refresh token.";

/*! @brief A convenience class that retains the auth state between @c OIDAuthorizationResponse%s
        and @c OIDTokenResponse%s.
 */
@interface OIDAuthState : NSObject <NSSecureCoding>

/*! @brief The most recent refresh token received from the server.
    @discussion Rather than using this property directly, you should call
        @c OIDAuthState.performActionWithFreshTokens:.
    @remarks refresh_token
    @see https://tools.ietf.org/html/rfc6749#section-5.1
 */
@property(nonatomic, readonly, nullable) NSString *refreshToken;

/*! @brief The scope of the current authorization grant.
    @discussion This represents the latest scope returned by the server and may be a subset of the
        scope that was initially granted.
    @remarks scope
 */
@property(nonatomic, readonly, nullable) NSString *scope;

/*! @brief The most recent authorization response used to update the authorization state. For the
        implicit flow, this will contain the latest access token.
 */
@property(nonatomic, readonly) OIDAuthorizationResponse *lastAuthorizationResponse;

/*! @brief The most recent token response used to update this authorization state. This will
        contain the latest access token.
 */
@property(nonatomic, readonly, nullable) OIDTokenResponse *lastTokenResponse;

/*! @brief The most recent registration response used to update this authorization state. This will
        contain the latest client credentials.
 */
@property(nonatomic, readonly, nullable) OIDRegistrationResponse *lastRegistrationResponse;

/*! @brief The authorization error that invalidated this @c OIDAuthState.
    @discussion The authorization error encountered by @c OIDAuthState or set by the user via
        @c OIDAuthState.updateWithAuthorizationError: that invalidated this @c OIDAuthState.
        Authorization errors from @c OIDAuthState will always have a domain of
        @c ::OIDOAuthAuthorizationErrorDomain or @c ::OIDOAuthTokenErrorDomain. Note: that after
        unarchiving the @c OIDAuthState object, the \NSError_userInfo property of this error will
        be nil.
 */
@property(nonatomic, readonly, nullable) NSError *authorizationError;

/*! @brief Returns YES if the authorization state is not known to be invalid.
    @discussion Returns YES if no OAuth errors have been received, and the last call resulted in a
        successful access token or id token. This does not mean that the access is fresh - just
        that it was valid the last time it was used. Note that network and other transient errors
        do not invalidate the authorized state.  If NO, you should authenticate the user again,
        using a fresh authorization request. Invalid @c OIDAuthState objects may still be useful in
        that case, to hint at the previously authorized user and streamline the re-authentication
        experience.
 */
@property(nonatomic, readonly) BOOL isAuthorized;

/*! @brief The @c OIDAuthStateChangeDelegate delegate.
    @discussion Use the delegate to observe state changes (and update storage) as well as error
        states.
 */
@property(nonatomic, weak, nullable) id<OIDAuthStateChangeDelegate> stateChangeDelegate;

/*! @brief The @c OIDAuthStateErrorDelegate delegate.
    @discussion Use the delegate to observe state changes (and update storage) as well as error
        states.
 */
@property(nonatomic, weak, nullable) id<OIDAuthStateErrorDelegate> errorDelegate;

/*! @brief Convenience method to create a @c OIDAuthState by presenting an authorization request
        and performing the authorization code exchange in the case of code flow requests. For
        the hybrid flow, the caller should validate the id_token and c_hash, then perform the token
        request (@c OIDAuthorizationService.performTokenRequest:callback:)
        and update the OIDAuthState with the results (@c
        OIDAuthState.updateWithTokenResponse:error:).
    @param authorizationRequest The authorization request to present.
    @param externalUserAgent A external user agent that can present an external user-agent request.
    @param callback The method called when the request has completed or failed.
    @return A @c OIDExternalUserAgentSession instance which will terminate when it
        receives a @c OIDExternalUserAgentSession.cancel message, or after processing a
        @c OIDExternalUserAgentSession.resumeExternalUserAgentFlowWithURL: message.
 */
+ (id<OIDExternalUserAgentSession>)
    authStateByPresentingAuthorizationRequest:(OIDAuthorizationRequest *)authorizationRequest
                            externalUserAgent:(id<OIDExternalUserAgent>)externalUserAgent
                                     callback:(OIDAuthStateAuthorizationCallback)callback;

/*! @internal
    @brief Unavailable. Please use @c initWithAuthorizationResponse:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Creates an auth state from an authorization response.
    @param authorizationResponse The authorization response.
 */
- (instancetype)initWithAuthorizationResponse:(OIDAuthorizationResponse *)authorizationResponse;

/*! @brief Creates an auth state from an authorization and token response.
    @param authorizationResponse The authorization response.
    @param tokenResponse The token response.
 */
- (instancetype)initWithAuthorizationResponse:(OIDAuthorizationResponse *)authorizationResponse
                                tokenResponse:(nullable OIDTokenResponse *)tokenResponse;

/*! @brief Creates an auth state from an registration response.
    @param registrationResponse The registration response.
 */
- (instancetype)initWithRegistrationResponse:(OIDRegistrationResponse *)registrationResponse;

/*! @brief Creates an auth state from an authorization, token and registration response.
    @param authorizationResponse The authorization response.
    @param tokenResponse The token response.
    @param registrationResponse The registration response.
 */
- (instancetype)initWithAuthorizationResponse:
    (nullable OIDAuthorizationResponse *)authorizationResponse
           tokenResponse:(nullable OIDTokenResponse *)tokenResponse
    registrationResponse:(nullable OIDRegistrationResponse *)registrationResponse
    NS_DESIGNATED_INITIALIZER;

/*! @brief Updates the authorization state based on a new authorization response.
    @param authorizationResponse The new authorization response to update the state with.
    @param error Any error encountered when performing the authorization request. Errors in the
        domain @c ::OIDOAuthAuthorizationErrorDomain are reflected in the auth state, other errors
        are assumed to be transient, and ignored.
    @discussion Typically called with the response from an incremental authorization request,
        or if using the implicit flow. Will clear the @c #lastTokenResponse property.
 */
- (void)updateWithAuthorizationResponse:(nullable OIDAuthorizationResponse *)authorizationResponse
                                  error:(nullable NSError *)error;

/*! @brief Updates the authorization state based on a new token response.
    @param tokenResponse The new token response to update the state from.
    @param error Any error encountered when performing the authorization request. Errors in the
        domain @c ::OIDOAuthTokenErrorDomain are reflected in the auth state, other errors
        are assumed to be transient, and ignored.
    @discussion Typically called with the response from an authorization code exchange, or a token
        refresh.
 */
- (void)updateWithTokenResponse:(nullable OIDTokenResponse *)tokenResponse
                          error:(nullable NSError *)error;

/*! @brief Updates the authorization state based on a new registration response.
    @param registrationResponse The new registration response to update the state with.
    @discussion Typically called with the response from a successful client registration
        request. Will reset the auth state.
 */
- (void)updateWithRegistrationResponse:(nullable OIDRegistrationResponse *)registrationResponse;

/*! @brief Updates the authorization state based on an authorization error.
    @param authorizationError The authorization error.
    @discussion Call this method if you receive an authorization error during an API call to
        invalidate the authentication state of this @c OIDAuthState. Don't call with errors
        unrelated to authorization, such as transient network errors.
        The OIDAuthStateErrorDelegate.authState:didEncounterAuthorizationError: method of
        @c #errorDelegate will be called with the error.
        You may optionally use the convenience method
        OIDErrorUtilities.resourceServerAuthorizationErrorWithCode:errorResponse:underlyingError:
        to create \NSError objects for use here.
        The latest error received is stored in @c #authorizationError. Note: that after unarchiving
        this object, the \NSError_userInfo property of this error will be nil.
 */
- (void)updateWithAuthorizationError:(NSError *)authorizationError;

/*! @brief Calls the block with a valid access token (refreshing it first, if needed), or if a
        refresh was needed and failed, with the error that caused it to fail.
    @param action The block to execute with a fresh token. This block will be executed on the main
        thread.
 */
- (void)performActionWithFreshTokens:(OIDAuthStateAction)action;

/*! @brief Calls the block with a valid access token (refreshing it first, if needed), or if a
        refresh was needed and failed, with the error that caused it to fail.
    @param action The block to execute with a fresh token. This block will be executed on the main
        thread.
    @param additionalParameters Additional parameters for the token request if token is
        refreshed.
 */
- (void)performActionWithFreshTokens:(OIDAuthStateAction)action
         additionalRefreshParameters:
    (nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @brief Calls the block with a valid access token (refreshing it first, if needed), or if a
        refresh was needed and failed, with the error that caused it to fail.
    @param action The block to execute with a fresh token. This block will be executed on the main
        thread.
    @param additionalParameters Additional parameters for the token request if token is
        refreshed.
    @param dispatchQueue The dispatchQueue on which to dispatch the action block.
 */
- (void)performActionWithFreshTokens:(OIDAuthStateAction)action
         additionalRefreshParameters:
    (nullable NSDictionary<NSString *, NSString *> *)additionalParameters
                       dispatchQueue:(dispatch_queue_t)dispatchQueue;

/*! @brief Forces a token refresh the next time @c OIDAuthState.performActionWithFreshTokens: is
        called, even if the current tokens are considered valid.
 */
- (void)setNeedsTokenRefresh;

/*! @brief Creates a token request suitable for refreshing an access token.
    @return A @c OIDTokenRequest suitable for using a refresh token to obtain a new access token.
    @discussion After performing the refresh, call @c OIDAuthState.updateWithTokenResponse:error:
        to update the authorization state based on the response. Rather than doing the token refresh
        yourself, you should use @c OIDAuthState.performActionWithFreshTokens:.
    @see https://tools.ietf.org/html/rfc6749#section-1.5
 */
- (nullable OIDTokenRequest *)tokenRefreshRequest;

/*! @brief Creates a token request suitable for refreshing an access token.
    @param additionalParameters Additional parameters for the token request.
    @return A @c OIDTokenRequest suitable for using a refresh token to obtain a new access token.
    @discussion After performing the refresh, call @c OIDAuthState.updateWithTokenResponse:error:
        to update the authorization state based on the response. Rather than doing the token refresh
        yourself, you should use @c OIDAuthState.performActionWithFreshTokens:.
    @see https://tools.ietf.org/html/rfc6749#section-1.5
 */
- (nullable OIDTokenRequest *)tokenRefreshRequestWithAdditionalParameters:
    (nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @brief Creates a token request suitable for refreshing an access token.
    @param additionalParameters Additional parameters for the token request.
    @param additionalHeaders Additional headers for the token request.
    @return A @c OIDTokenRequest suitable for using a refresh token to obtain a new access token.
    @discussion After performing the refresh, call @c OIDAuthState.updateWithTokenResponse:error:
        to update the authorization state based on the response. Rather than doing the token refresh
        yourself, you should use @c OIDAuthState.performActionWithFreshTokens:.
    @see https://tools.ietf.org/html/rfc6749#section-1.5
 */
- (nullable OIDTokenRequest *)tokenRefreshRequestWithAdditionalParameters:
    (nullable NSDictionary<NSString *, NSString *> *)additionalParameters
                                                        additionalHeaders:
    (nullable NSDictionary<NSString *, NSString *> *)additionalHeaders;

/*! @brief Creates a token request suitable for refreshing an access token.
    @param additionalHeaders Additional parameters for the token request.
    @return A @c OIDTokenRequest suitable for using a refresh token to obtain a new access token.
    @discussion After performing the refresh, call @c OIDAuthState.updateWithTokenResponse:error:
        to update the authorization state based on the response. Rather than doing the token refresh
        yourself, you should use @c OIDAuthState.performActionWithFreshTokens:.
    @see https://tools.ietf.org/html/rfc6749#section-1.5
 */
- (nullable OIDTokenRequest *)tokenRefreshRequestWithAdditionalHeaders:
    (nullable NSDictionary<NSString *, NSString *> *)additionalHeaders;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthState.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthStateChangeDelegate.h
===
/*! @file OIDAuthStateChangeDelegate.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDAuthState;

NS_ASSUME_NONNULL_BEGIN

/*! @protocol OIDAuthStateChangeDelegate
    @brief Delegate of the OIDAuthState used to monitor various changes in state.
 */
@protocol OIDAuthStateChangeDelegate <NSObject>

/*! @brief Called when the authorization state changes and any backing storage needs to be updated.
    @param state The @c OIDAuthState that changed.
    @discussion If you are storing the authorization state, you should update the storage when the
        state changes.
 */
- (void)didChangeState:(OIDAuthState *)state;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthStateChangeDelegate.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthStateErrorDelegate.h
===
/*! @file OIDAuthStateErrorDelegate.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDAuthState;

NS_ASSUME_NONNULL_BEGIN

/*! @protocol OIDAuthStateErrorDelegate
    @brief Delegate of the OIDAuthState used to monitor errors.
 */
@protocol OIDAuthStateErrorDelegate <NSObject>

/*! @brief Called when an authentication occurs, which indicates the auth session is invalid.
    @param state The @c OIDAuthState on which the error occurred.
    @param error The authorization error.
    @discussion This is a hard error (not a transient network issue) that indicates a problem with
        the authorization. You should stop using the @c OIDAuthState when such an error is
        encountered. If the \NSError_code is @c ::OIDErrorCodeOAuthInvalidGrant then
        the session may be recoverable with user interaction (i.e. re-authentication). In all cases
        you should consider the user unauthorized, and remove locally cached resources that require
        that authorization.  @c OIDAuthState will call this method automatically if it encounters
        an OAuth error (that is, an HTTP 400 response with a valid OAuth error response) during
        authorization or token refresh (such as performed automatically when using
        @c OIDAuthState.performActionWithFreshTokens:). You can signal authorization errors with
        @c OIDAuthState.updateWithAuthorizationError:.
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
- (void)authState:(OIDAuthState *)state didEncounterAuthorizationError:(NSError *)error;

@optional

/*! @brief Called when a network or other transient error occurs.
    @param state The @c OIDAuthState on which the error occurred.
    @param error The transient error.
    @discussion This is a soft error, typically network related. The @c OIDAuthState is likely
        still valid, and should not be discarded. Retry the request using an incremental backoff
        strategy. This is only called when using the @c OIDAuthState convenience methods such as
        @c OIDAuthState.performActionWithFreshTokens:. If you are refreshing the tokens yourself
        outside of @c OIDAuthState class, it will never be called.
 */
- (void)authState:(OIDAuthState *)state didEncounterTransientError:(NSError *)error;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthStateErrorDelegate.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthorizationRequest.h
===
/*! @file OIDAuthorizationRequest.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

// These files only declare string constants useful for constructing a @c OIDAuthorizationRequest,
// so they are imported here for convenience.
#import "OIDExternalUserAgentRequest.h"
#import "OIDResponseTypes.h"
#import "OIDScopes.h"

@class OIDServiceConfiguration;

NS_ASSUME_NONNULL_BEGIN

/*! @brief The @c code_challenge_method  value for the S256 code challenge.
    @see https://tools.ietf.org/html/rfc7636#section-4.3
 */
extern NSString *const OIDOAuthorizationRequestCodeChallengeMethodS256;


/*! @brief Represents an authorization request.
    @see https://tools.ietf.org/html/rfc6749#section-4
    @see https://tools.ietf.org/html/rfc6749#section-4.1.1
 */
@interface OIDAuthorizationRequest :
    NSObject<NSCopying, NSSecureCoding, OIDExternalUserAgentRequest>

/*! @brief The service's configuration.
    @remarks This configuration specifies how to connect to a particular OAuth provider.
        Configurations may be created manually, or via an OpenID Connect Discovery Document.
 */
@property(nonatomic, readonly) OIDServiceConfiguration *configuration;

/*! @brief The expected response type.
    @remarks response_type
    @discussion Generally 'code' if pure OAuth, otherwise a space-delimited list of of response
        types including 'code', 'token', and 'id_token' for OpenID Connect.
    @see https://tools.ietf.org/html/rfc6749#section-3.1.1
    @see http://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3
 */
@property(nonatomic, readonly) NSString *responseType;

/*! @brief The client identifier.
    @remarks client_id
    @see https://tools.ietf.org/html/rfc6749#section-2.2
 */
@property(nonatomic, readonly) NSString *clientID;

/*! @brief The client secret.
    @remarks client_secret
    @discussion The client secret is used to prove that identity of the client when exchaning an
        authorization code for an access token.
        The client secret is not passed in the authorizationRequestURL. It is only used when
        exchanging the authorization code for an access token.
    @see https://tools.ietf.org/html/rfc6749#section-2.3.1
 */
@property(nonatomic, readonly, nullable) NSString *clientSecret;

/*! @brief The value of the scope parameter is expressed as a list of space-delimited,
        case-sensitive strings.
    @remarks scope
    @see https://tools.ietf.org/html/rfc6749#section-3.3
 */
@property(nonatomic, readonly, nullable) NSString *scope;

/*! @brief The client's redirect URI.
    @remarks redirect_uri
    @see https://tools.ietf.org/html/rfc6749#section-3.1.2
 */
@property(nonatomic, readonly, nullable) NSURL *redirectURL;

/*! @brief An opaque value used by the client to maintain state between the request and callback.
    @remarks state
    @discussion If this value is not explicitly set, this library will automatically add state and
        perform appropriate validation of the state in the authorization response. It is recommended
        that the default implementation of this parameter be used wherever possible. Typically used
        to prevent CSRF attacks, as recommended in RFC6819 Section 5.3.5.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.1
    @see https://tools.ietf.org/html/rfc6819#section-5.3.5
 */
@property(nonatomic, readonly, nullable) NSString *state;

/*! @brief String value used to associate a Client session with an ID Token, and to mitigate replay
        attacks. The value is passed through unmodified from the Authentication Request to the ID
        Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from
        guessing values.
    @remarks nonce
    @discussion If this value is not explicitly set, this library will automatically add nonce and
        perform appropriate validation of the nonce in the ID Token.
    @see https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
 */
@property(nonatomic, readonly, nullable) NSString *nonce;

/*! @brief The PKCE code verifier.
    @remarks code_verifier
    @discussion The code verifier itself is not included in the authorization request that is sent
        on the wire, but needs to be in the token exchange request.
        @c OIDAuthorizationResponse.tokenExchangeRequest will create a @c OIDTokenRequest that
        includes this parameter automatically.
    @see https://tools.ietf.org/html/rfc7636#section-4.1
 */
@property(nonatomic, readonly, nullable) NSString *codeVerifier;

/*! @brief The PKCE code challenge, derived from #codeVerifier.
    @remarks code_challenge
    @see https://tools.ietf.org/html/rfc7636#section-4.2
 */
@property(nonatomic, readonly, nullable) NSString *codeChallenge;

/*! @brief The method used to compute the @c #codeChallenge
    @remarks code_challenge_method
    @see https://tools.ietf.org/html/rfc7636#section-4.3
 */
@property(nonatomic, readonly, nullable) NSString *codeChallengeMethod;

/*! @brief The client's additional authorization parameters.
    @see https://tools.ietf.org/html/rfc6749#section-3.1
 */
@property(nonatomic, readonly, nullable) NSDictionary<NSString *, NSString *> *additionalParameters;

/*! @internal
    @brief Unavailable. Please use
        @c initWithConfiguration:clientId:scopes:redirectURL:responseType:additionalParameters:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Creates an authorization request with opinionated defaults (a secure @c state, and
        PKCE with S256 as the @c code_challenge_method).
    @param configuration The service's configuration.
    @param clientID The client identifier.
    @param scopes An array of scopes to combine into a single scope string per the OAuth2 spec.
    @param redirectURL The client's redirect URI.
    @param responseType The expected response type.
    @param additionalParameters The client's additional authorization parameters.
    @remarks This convenience initializer generates a state parameter and PKCE challenges
        automatically.
 */
- (instancetype)
    initWithConfiguration:(OIDServiceConfiguration *)configuration
                 clientId:(NSString *)clientID
                   scopes:(nullable NSArray<NSString *> *)scopes
              redirectURL:(NSURL *)redirectURL
             responseType:(NSString *)responseType
     additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @brief Creates an authorization request with custom nonce, a secure @c state,
        and PKCE with S256 as the @c code_challenge_method.
    @param configuration The service's configuration.
    @param clientID The client identifier.
    @param scopes An array of scopes to combine into a single scope string per the OAuth2 spec.
    @param redirectURL The client's redirect URI.
    @param responseType The expected response type.
    @param nonce String value used to associate a Client session with an ID Token. Can be set to nil
        if not using OpenID Connect, although pure OAuth servers should ignore params they don't
        understand anyway.
    @param additionalParameters The client's additional authorization parameters.
    @remarks This convenience initializer generates a state parameter and PKCE challenges
        automatically.
 */
- (instancetype)
    initWithConfiguration:(OIDServiceConfiguration *)configuration
                 clientId:(NSString *)clientID
                   scopes:(nullable NSArray<NSString *> *)scopes
              redirectURL:(NSURL *)redirectURL
             responseType:(NSString *)responseType
                    nonce:(nullable NSString *)nonce
     additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @brief Creates an authorization request with opinionated defaults (a secure @c state, @c nonce,
        and PKCE with S256 as the @c code_challenge_method).
    @param configuration The service's configuration.
    @param clientID The client identifier.
    @param clientSecret The client secret.
    @param scopes An array of scopes to combine into a single scope string per the OAuth2 spec.
    @param redirectURL The client's redirect URI.
    @param responseType The expected response type.
    @param additionalParameters The client's additional authorization parameters.
    @remarks This convenience initializer generates a state parameter and PKCE challenges
        automatically.
 */
- (instancetype)
    initWithConfiguration:(OIDServiceConfiguration *)configuration
                 clientId:(NSString *)clientID
             clientSecret:(nullable NSString *)clientSecret
                   scopes:(nullable NSArray<NSString *> *)scopes
              redirectURL:(NSURL *)redirectURL
             responseType:(NSString *)responseType
     additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @brief Designated initializer.
    @param configuration The service's configuration.
    @param clientID The client identifier.
    @param scope A scope string per the OAuth2 spec (a space-delimited set of scopes).
    @param redirectURL The client's redirect URI.
    @param responseType The expected response type.
    @param state An opaque value used by the client to maintain state between the request and
        callback.
    @param nonce String value used to associate a Client session with an ID Token. Can be set to nil
        if not using OpenID Connect, although pure OAuth servers should ignore params they don't
        understand anyway.
    @param codeVerifier The PKCE code verifier. See @c OIDAuthorizationRequest.generateCodeVerifier.
    @param codeChallenge The PKCE code challenge, calculated from the code verifier such as with
        @c OIDAuthorizationRequest.codeChallengeS256ForVerifier:.
    @param codeChallengeMethod The PKCE code challenge method.
        ::OIDOAuthorizationRequestCodeChallengeMethodS256 when
        @c OIDAuthorizationRequest.codeChallengeS256ForVerifier: is used to create the code
        challenge.
    @param additionalParameters The client's additional authorization parameters.
 */
- (instancetype)
    initWithConfiguration:(OIDServiceConfiguration *)configuration
                 clientId:(NSString *)clientID
             clientSecret:(nullable NSString *)clientSecret
                    scope:(nullable NSString *)scope
              redirectURL:(nullable NSURL *)redirectURL
             responseType:(NSString *)responseType
                    state:(nullable NSString *)state
                    nonce:(nullable NSString *)nonce
             codeVerifier:(nullable NSString *)codeVerifier
            codeChallenge:(nullable NSString *)codeChallenge
      codeChallengeMethod:(nullable NSString *)codeChallengeMethod
     additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters
    NS_DESIGNATED_INITIALIZER;

/*! @brief Constructs the request URI by adding the request parameters to the query component of the
        authorization endpoint URI using the "application/x-www-form-urlencoded" format.
    @return A URL representing the authorization request.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.1
 */
- (NSURL *)authorizationRequestURL;

/*! @brief Generates an OAuth state param using a random source.
    @return The generated state.
    @see https://tools.ietf.org/html/rfc6819#section-5.3.5
 */
+ (nullable NSString *)generateState;

/*! @brief Constructs a PKCE-compliant code verifier.
    @return The generated code verifier.
    @see https://tools.ietf.org/html/rfc7636#section-4.1
 */
+ (nullable NSString *)generateCodeVerifier;

/*! @brief Creates a PKCE S256 codeChallenge from the codeVerifier.
    @param codeVerifier The code verifier from which the code challenge will be derived.
    @return The generated code challenge.
    @details Generate a secure code verifier to pass into this method with
        @c OIDAuthorizationRequest.generateCodeVerifier. The matching @c #codeChallengeMethod for
        @c #codeChallenge%s created by this method is
        ::OIDOAuthorizationRequestCodeChallengeMethodS256.
    @see https://tools.ietf.org/html/rfc7636#section-4.1
 */
+ (nullable NSString *)codeChallengeS256ForVerifier:(nullable NSString *)codeVerifier;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthorizationRequest.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthorizationResponse.h
===
/*! @file OIDAuthorizationResponse.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDAuthorizationRequest;
@class OIDTokenRequest;

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents the response to an authorization request.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.2
    @see https://tools.ietf.org/html/rfc6749#section-5.1
    @see http://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthResponse
 */
@interface OIDAuthorizationResponse : NSObject <NSCopying, NSSecureCoding>

/*! @brief The request which was serviced.
 */
@property(nonatomic, readonly) OIDAuthorizationRequest *request;

/*! @brief The authorization code generated by the authorization server.
    @discussion Set when the response_type requested includes 'code'.
    @remarks code
 */
@property(nonatomic, readonly, nullable) NSString *authorizationCode;

/*! @brief REQUIRED if the "state" parameter was present in the client authorization request. The
        exact value received from the client.
    @remarks state
 */
@property(nonatomic, readonly, nullable) NSString *state;

/*! @brief The access token generated by the authorization server.
    @discussion Set when the response_type requested includes 'token'.
    @remarks access_token
    @see http://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthResponse
 */
@property(nonatomic, readonly, nullable) NSString *accessToken;

/*! @brief The approximate expiration date & time of the access token.
    @discussion Set when the response_type requested includes 'token'.
    @remarks expires_in
    @seealso OIDAuthorizationResponse.accessToken
    @see http://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthResponse
 */
@property(nonatomic, readonly, nullable) NSDate *accessTokenExpirationDate;

/*! @brief Typically "Bearer" when present. Otherwise, another token_type value that the Client has
        negotiated with the Authorization Server.
    @discussion Set when the response_type requested includes 'token'.
    @remarks token_type
    @see http://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthResponse
 */
@property(nonatomic, readonly, nullable) NSString *tokenType;

/*! @brief ID Token value associated with the authenticated session.
    @discussion Set when the response_type requested includes 'id_token'.
    @remarks id_token
    @see http://openid.net/specs/openid-connect-core-1_0.html#IDToken
    @see http://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthResponse
 */
@property(nonatomic, readonly, nullable) NSString *idToken;

/*! @brief The scope of the access token. OPTIONAL, if identical to the scopes requested, otherwise,
        REQUIRED.
    @remarks scope
    @see https://tools.ietf.org/html/rfc6749#section-5.1
 */
@property(nonatomic, readonly, nullable) NSString *scope;

/*! @brief Additional parameters returned from the authorization server.
 */
@property(nonatomic, readonly, nullable)
    NSDictionary<NSString *, NSObject<NSCopying> *> *additionalParameters;

/*! @internal
    @brief Unavailable. Please use initWithRequest:parameters:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Designated initializer.
    @param request The serviced request.
    @param parameters The decoded parameters returned from the Authorization Server.
    @remarks Known parameters are extracted from the @c parameters parameter and the normative
        properties are populated. Non-normative parameters are placed in the
        @c #additionalParameters dictionary.
 */
- (instancetype)initWithRequest:(OIDAuthorizationRequest *)request
    parameters:(NSDictionary<NSString *, NSObject<NSCopying> *> *)parameters
    NS_DESIGNATED_INITIALIZER;

/*! @brief Creates a token request suitable for exchanging an authorization code for an access
        token.
    @return A @c OIDTokenRequest suitable for exchanging an authorization code for an access
        token.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
 */
- (nullable OIDTokenRequest *)tokenExchangeRequest;

/*! @brief Creates a token request suitable for exchanging an authorization code for an access
        token.
    @param additionalParameters Additional parameters for the token request.
    @return A @c OIDTokenRequest suitable for exchanging an authorization code for an access
        token.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
 */
- (nullable OIDTokenRequest *)tokenExchangeRequestWithAdditionalParameters:
    (nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @brief Creates a token request suitable for exchanging an authorization code for an access
        token.
    @param additionalParameters Additional parameters for the token request.
    @param additionalHeaders Additional headers for the token request.
    @return A @c OIDTokenRequest suitable for exchanging an authorization code for an access
        token.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
 */
- (nullable OIDTokenRequest *)tokenExchangeRequestWithAdditionalParameters:
    (nullable NSDictionary<NSString *, NSString *> *)additionalParameters
                                                         additionalHeaders:
    (nullable NSDictionary<NSString *, NSString *> *)additionalHeaders;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthorizationResponse.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthorizationService.h
===
/*! @file OIDAuthorizationService.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDAuthorization;
@class OIDAuthorizationRequest;
@class OIDAuthorizationResponse;
@class OIDEndSessionRequest;
@class OIDEndSessionResponse;
@class OIDRegistrationRequest;
@class OIDRegistrationResponse;
@class OIDServiceConfiguration;
@class OIDTokenRequest;
@class OIDTokenResponse;
@protocol OIDExternalUserAgent;
@protocol OIDExternalUserAgentSession;

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents the type of block used as a callback for creating a service configuration from
        a remote OpenID Connect Discovery document.
    @param configuration The service configuration, if available.
    @param error The error if an error occurred.
 */
typedef void (^OIDDiscoveryCallback)(OIDServiceConfiguration *_Nullable configuration,
                                     NSError *_Nullable error);

/*! @brief Represents the type of block used as a callback for various methods of
        @c OIDAuthorizationService.
    @param authorizationResponse The authorization response, if available.
    @param error The error if an error occurred.
 */
typedef void (^OIDAuthorizationCallback)(OIDAuthorizationResponse *_Nullable authorizationResponse,
                                         NSError *_Nullable error);

/*! @brief Block used as a callback for the end-session request of @c OIDAuthorizationService.
    @param endSessionResponse The end-session response, if available.
    @param error The error if an error occurred.
 */
typedef void (^OIDEndSessionCallback)(OIDEndSessionResponse *_Nullable endSessionResponse,
                                      NSError *_Nullable error);

/*! @brief Represents the type of block used as a callback for various methods of
        @c OIDAuthorizationService.
    @param tokenResponse The token response, if available.
    @param error The error if an error occurred.
 */
typedef void (^OIDTokenCallback)(OIDTokenResponse *_Nullable tokenResponse,
                                 NSError *_Nullable error);

/*! @brief Represents the type of dictionary used to specify additional querystring parameters
        when making authorization or token endpoint requests.
 */
typedef NSDictionary<NSString *, NSString *> *_Nullable OIDTokenEndpointParameters;

/*! @brief Represents the type of block used as a callback for various methods of
        @c OIDAuthorizationService.
    @param registrationResponse The registration response, if available.
    @param error The error if an error occurred.
*/
typedef void (^OIDRegistrationCompletion)(OIDRegistrationResponse *_Nullable registrationResponse,
                                          NSError *_Nullable error);

/*! @brief Performs various OAuth and OpenID Connect related calls via the user agent or
        \NSURLSession.
 */
@interface OIDAuthorizationService : NSObject

/*! @brief The service's configuration.
    @remarks Each authorization service is initialized with a configuration. This configuration
        specifies how to connect to a particular OAuth provider. Clients should use separate
        authorization service instances for each provider they wish to integrate with.
        Configurations may be created manually, or via an OpenID Connect Discovery Document.
 */
@property(nonatomic, readonly) OIDServiceConfiguration *configuration;

/*! @internal
    @brief Unavailable. This class should not be initialized.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Convenience method for creating an authorization service configuration from an OpenID
        Connect compliant issuer URL.
    @param issuerURL The service provider's OpenID Connect issuer.
    @param completion A block which will be invoked when the authorization service configuration has
        been created, or when an error has occurred.
    @see https://openid.net/specs/openid-connect-discovery-1_0.html
 */
+ (void)discoverServiceConfigurationForIssuer:(NSURL *)issuerURL
                                   completion:(OIDDiscoveryCallback)completion;


/*! @brief Convenience method for creating an authorization service configuration from an OpenID
        Connect compliant identity provider's discovery document.
    @param discoveryURL The URL of the service provider's OpenID Connect discovery document.
    @param completion A block which will be invoked when the authorization service configuration has
        been created, or when an error has occurred.
    @see https://openid.net/specs/openid-connect-discovery-1_0.html
 */
+ (void)discoverServiceConfigurationForDiscoveryURL:(NSURL *)discoveryURL
                                         completion:(OIDDiscoveryCallback)completion;

/*! @brief Perform an authorization flow using a generic flow shim.
    @param request The authorization request.
    @param externalUserAgent Generic external user-agent that can present an authorization
        request.
    @param callback The method called when the request has completed or failed.
    @return A @c OIDExternalUserAgentSession instance which will terminate when it
        receives a @c OIDExternalUserAgentSession.cancel message, or after processing a
        @c OIDExternalUserAgentSession.resumeExternalUserAgentFlowWithURL: message.
 */
+ (id<OIDExternalUserAgentSession>) presentAuthorizationRequest:(OIDAuthorizationRequest *)request
    externalUserAgent:(id<OIDExternalUserAgent>)externalUserAgent
             callback:(OIDAuthorizationCallback)callback;

/*! @brief Perform a logout request.
    @param request The end-session logout request.
    @param externalUserAgent Generic external user-agent that can present user-agent requests.
    @param callback The method called when the request has completed or failed.
    @return A @c OIDExternalUserAgentSession instance which will terminate when it
        receives a @c OIDExternalUserAgentSession.cancel message, or after processing a
        @c OIDExternalUserAgentSession.resumeExternalUserAgentFlowWithURL: message.
    @see http://openid.net/specs/openid-connect-session-1_0.html#RPLogout
 */
+ (id<OIDExternalUserAgentSession>)
    presentEndSessionRequest:(OIDEndSessionRequest *)request
           externalUserAgent:(id<OIDExternalUserAgent>)externalUserAgent
                    callback:(OIDEndSessionCallback)callback;

/*! @brief Performs a token request.
    @param request The token request.
    @param callback The method called when the request has completed or failed.
 */
+ (void)performTokenRequest:(OIDTokenRequest *)request callback:(OIDTokenCallback)callback;

/*! @brief Performs a token request.
    @param request The token request.
    @param authorizationResponse The original authorization response related to this token request.
    @param callback The method called when the request has completed or failed.
 */
+ (void)performTokenRequest:(OIDTokenRequest *)request
    originalAuthorizationResponse:(OIDAuthorizationResponse *_Nullable)authorizationResponse
                         callback:(OIDTokenCallback)callback;

/*! @brief Performs a registration request.
    @param request The registration request.
    @param completion The method called when the request has completed or failed.
 */
+ (void)performRegistrationRequest:(OIDRegistrationRequest *)request
                        completion:(OIDRegistrationCompletion)completion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDAuthorizationService.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDClientMetadataParameters.h
===
/*! @file OIDClientMetadataParameters.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2016 The AppAuth for iOS Authors. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/*! @brief Parameter name for the token endpoint authentication method.
 */
extern NSString *const OIDTokenEndpointAuthenticationMethodParam;

/*! @brief Parameter name for the application type.
 */
extern NSString *const OIDApplicationTypeParam;

/*! @brief Parameter name for the redirect URI values.
 */
extern NSString *const OIDRedirectURIsParam;

/*! @brief Parameter name for the response type values.
 */
extern NSString *const OIDResponseTypesParam;

/*! @brief Parameter name for the grant type values.
 */
extern NSString *const OIDGrantTypesParam;

/*! @brief Parameter name for the subject type.
 */
extern NSString *const OIDSubjectTypeParam;

/*! @brief Application type that indicates this client is a native (not a web) application.
 */
extern NSString *const OIDApplicationTypeNative;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDClientMetadataParameters.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDDefines.h
===
/*! @file OIDDefines.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

/*! @def OIDIsEqualIncludingNil(x, y)
    @brief Returns YES if x and y are equal by reference or value.
    @discussion NOTE: parameters may be evaluated multiple times. Be careful if using this check
        with expressions - especially if the expressions have side effects.
    @param x An object.
    @param y An object.
 */
#define OIDIsEqualIncludingNil(x, y) (((x) == (y)) || [(x) isEqual:(y)])

/*! @def OID_UNAVAILABLE_USE_INITIALIZER(designatedInitializer)
    @brief Provides a template implementation for init-family methods which have been marked as
        NS_UNAVILABLE. Stops the compiler from giving a warning when it's the super class'
        designated initializer, and gives callers useful feedback telling them what the
        new designated initializer is.
    @remarks Takes a SEL as a parameter instead of a string so that we get compiler warnings if the
        designated intializer's signature changes.
    @param designatedInitializer A SEL referencing the designated initializer.
 */
#define OID_UNAVAILABLE_USE_INITIALIZER(designatedInitializer) { \
  NSString *reason = [NSString stringWithFormat:@"Called: %@\nDesignated Initializer:%@", \
                                                NSStringFromSelector(_cmd), \
                                                NSStringFromSelector(designatedInitializer)]; \
  @throw [NSException exceptionWithName:@"Attempt to call unavailable initializer." \
                                 reason:reason \
                               userInfo:nil]; \
}

#ifdef _APPAUTHTRACE
#   define AppAuthRequestTrace(fmt, ...) NSLog(fmt, ##__VA_ARGS__);
#else // _APPAUTHTRACE
#   define AppAuthRequestTrace(...)
#endif // _APPAUTHTRACE


=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDDefines.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDEndSessionRequest.h
===
/*! @file OIDEndSessionRequest.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2017 The AppAuth Authors. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "OIDExternalUserAgentRequest.h"

@class OIDServiceConfiguration;

NS_ASSUME_NONNULL_BEGIN

@interface OIDEndSessionRequest : NSObject
    <NSCopying, NSSecureCoding, OIDExternalUserAgentRequest>

/*! @brief The service's configuration.
    @remarks This configuration specifies how to connect to a particular OAuth provider.
        Configurations may be created manually, or via an OpenID Connect Discovery Document.
 */
@property(nonatomic, readonly) OIDServiceConfiguration *configuration;

/*! @brief The client's redirect URI.
    @remarks post_logout_redirect_uri
    @see http://openid.net/specs/openid-connect-session-1_0.html#RPLogout
 */
@property(nonatomic, readonly, nullable) NSURL *postLogoutRedirectURL;

/*! @brief Previously issued ID Token passed to the end session endpoint as a hint about the End-User's current authenticated
        session with the Client
    @remarks id_token_hint
    @see http://openid.net/specs/openid-connect-session-1_0.html#RPLogout
 */
@property(nonatomic, readonly, nullable) NSString *idTokenHint;

/*! @brief An opaque value used by the client to maintain state between the request and callback.
    @remarks state
    @discussion If this value is not explicitly set, this library will automatically add state and
        perform appropriate validation of the state in the authorization response. It is recommended
        that the default implementation of this parameter be used wherever possible. Typically used
        to prevent CSRF attacks, as recommended in RFC6819 Section 5.3.5.
    @see http://openid.net/specs/openid-connect-session-1_0.html#RPLogout
 */
@property(nonatomic, readonly, nullable) NSString *state;

/*! @brief The client's additional authorization parameters.
    @see https://tools.ietf.org/html/rfc6749#section-3.1
 */
@property(nonatomic, readonly, nullable) NSDictionary<NSString *, NSString *> *additionalParameters;

/*! @internal
    @brief Unavailable. Please use @c initWithConfiguration:clientId:scopes:redirectURL:additionalParameters:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Creates an authorization request with opinionated defaults (a secure @c state).
    @param configuration The service's configuration.
    @param idTokenHint The previously issued ID Token
    @param postLogoutRedirectURL The client's post-logout redirect URI.
        callback.
    @param additionalParameters The client's additional authorization parameters.
*/
- (instancetype)
    initWithConfiguration:(OIDServiceConfiguration *)configuration
              idTokenHint:(NSString *)idTokenHint
    postLogoutRedirectURL:(NSURL *)postLogoutRedirectURL
     additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @brief Designated initializer.
    @param configuration The service's configuration.
    @param idTokenHint The previously issued ID Token
    @param postLogoutRedirectURL The client's post-logout redirect URI.
    @param state An opaque value used by the client to maintain state between the request and
        callback.
    @param additionalParameters The client's additional authorization parameters.
 */
- (instancetype)
    initWithConfiguration:(OIDServiceConfiguration *)configuration
              idTokenHint:(NSString *)idTokenHint
    postLogoutRedirectURL:(NSURL *)postLogoutRedirectURL
                    state:(NSString *)state
     additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters
    NS_DESIGNATED_INITIALIZER;

/*! @brief Constructs the request URI by adding the request parameters to the query component of the
        authorization endpoint URI using the "application/x-www-form-urlencoded" format.
    @return A URL representing the authorization request.
    @see http://openid.net/specs/openid-connect-session-1_0.html#RPLogout
 */
- (NSURL *)endSessionRequestURL;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDEndSessionRequest.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDEndSessionResponse.h
===
/*! @file OIDEndSessionResponse.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2017 The AppAuth Authors. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDEndSessionRequest;

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents the response to an End Session request.
    @see http://openid.net/specs/openid-connect-session-1_0.html#RPLogout
 */

@interface OIDEndSessionResponse : NSObject <NSCopying, NSSecureCoding>

/*! @brief The request which was serviced.
 */
@property(nonatomic, readonly) OIDEndSessionRequest *request;

/*! @brief REQUIRED if the "state" parameter was present in the client end-session request. The
        exact value received from the client.
    @remarks state
 */
@property(nonatomic, readonly, nullable) NSString *state;

/*! @brief Additional parameters returned from the end session endpoint.
 */
@property(nonatomic, readonly, nullable)
    NSDictionary<NSString *, NSObject<NSCopying> *> *additionalParameters;

/*! @internal
    @brief Unavailable. Please use initWithParameters:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Designated initializer.
    @param request The serviced request.
    @param parameters The decoded parameters returned from the End Session Endpoint.
    @remarks Known parameters are extracted from the @c parameters parameter and the normative
        properties are populated. Non-normative parameters are placed in the
        @c #additionalParameters dictionary.
 */
- (instancetype)initWithRequest:(OIDEndSessionRequest *)request
                     parameters:(NSDictionary<NSString *, NSObject<NSCopying> *> *)parameters
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDEndSessionResponse.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDError.h
===
/*! @file OIDError.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/*! @brief The error domain for all NSErrors returned from the AppAuth library.
 */
extern NSString *const OIDGeneralErrorDomain;

/*! @brief The error domain for OAuth specific errors on the authorization endpoint.
    @discussion This error domain is used when the server responds to an authorization request
        with an explicit OAuth error, as defined by RFC6749 Section 4.1.2.1. If the authorization
        response is invalid and not explicitly an error response, another error domain will be used.
        The error response parameter dictionary is available in the
        \NSError_userInfo dictionary using the @c ::OIDOAuthErrorResponseErrorKey key.
        The \NSError_code will be one of the @c ::OIDErrorCodeOAuthAuthorization enum values.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
 */
extern NSString *const OIDOAuthAuthorizationErrorDomain;

/*! @brief The error domain for OAuth specific errors on the token endpoint.
    @discussion This error domain is used when the server responds with HTTP 400 and an OAuth error,
        as defined RFC6749 Section 5.2. If an HTTP 400 response does not parse as an OAuth error
        (i.e. no 'error' field is present or the JSON is invalid), another error domain will be
        used. The entire OAuth error response dictionary is available in the \NSError_userInfo
        dictionary using the @c ::OIDOAuthErrorResponseErrorKey key. Unlike transient network
        errors, errors in this domain invalidate the authentication state, and either indicate a
        client error or require user interaction (i.e. reauthentication) to resolve.
        The \NSError_code will be one of the @c ::OIDErrorCodeOAuthToken enum values.
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
extern NSString *const OIDOAuthTokenErrorDomain;

/*! @brief The error domain for dynamic client registration errors.
    @discussion This error domain is used when the server responds with HTTP 400 and an OAuth error,
         as defined in OpenID Connect Dynamic Client Registration 1.0 Section 3.3. If an HTTP 400
         response does not parse as an OAuth error (i.e. no 'error' field is present or the JSON is
         invalid), another error domain will be  used. The entire OAuth error response dictionary is
         available in the \NSError_userInfo dictionary using the @c ::OIDOAuthErrorResponseErrorKey
         key. Unlike transient network errors, errors in this domain invalidate the authentication
         state, and indicates a client error.
         The \NSError_code will be one of the @c ::OIDErrorCodeOAuthToken enum values.
     @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationError
 */
extern NSString *const OIDOAuthRegistrationErrorDomain;

/*! @brief The error domain for authorization errors encountered out of band on the resource server.
 */
extern NSString *const OIDResourceServerAuthorizationErrorDomain;

/*! @brief An error domain representing received HTTP errors.
 */
extern NSString *const OIDHTTPErrorDomain;

/*! @brief An error key for the original OAuth error response (if any).
 */
extern NSString *const OIDOAuthErrorResponseErrorKey;

/*! @brief The key of the 'error' response field in a RFC6749 Section 5.2 response.
    @remark error
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
extern NSString *const OIDOAuthErrorFieldError;

/*! @brief The key of the 'error_description' response field in a RFC6749 Section 5.2 response.
    @remark error_description
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
extern NSString *const OIDOAuthErrorFieldErrorDescription;

/*! @brief The key of the 'error_uri' response field in a RFC6749 Section 5.2 response.
    @remark error_uri
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
extern NSString *const OIDOAuthErrorFieldErrorURI;

/*! @brief The various error codes returned from the AppAuth library.
 */
typedef NS_ENUM(NSInteger, OIDErrorCode) {
  /*! @brief Indicates a problem parsing an OpenID Connect Service Discovery document.
   */
  OIDErrorCodeInvalidDiscoveryDocument = -2,

  /*! @brief Indicates the user manually canceled the OAuth authorization code flow.
   */
  OIDErrorCodeUserCanceledAuthorizationFlow = -3,

  /*! @brief Indicates an OAuth authorization flow was programmatically cancelled.
   */
  OIDErrorCodeProgramCanceledAuthorizationFlow = -4,

  /*! @brief Indicates a network error or server error occurred.
   */
  OIDErrorCodeNetworkError = -5,

  /*! @brief Indicates a server error occurred.
   */
  OIDErrorCodeServerError = -6,

  /*! @brief Indicates a problem occurred deserializing the response/JSON.
   */
  OIDErrorCodeJSONDeserializationError = -7,

  /*! @brief Indicates a problem occurred constructing the token response from the JSON.
   */
  OIDErrorCodeTokenResponseConstructionError = -8,

  /*! @brief @c UIApplication.openURL: returned NO when attempting to open the authorization
          request in mobile Safari.
   */
  OIDErrorCodeSafariOpenError = -9,

  /*! @brief @c NSWorkspace.openURL returned NO when attempting to open the authorization
          request in the default browser.
   */
  OIDErrorCodeBrowserOpenError = -10,

  /*! @brief Indicates a problem when trying to refresh the tokens.
   */
  OIDErrorCodeTokenRefreshError = -11,

  /*! @brief Indicates a problem occurred constructing the registration response from the JSON.
   */
  OIDErrorCodeRegistrationResponseConstructionError = -12,

  /*! @brief Indicates a problem occurred deserializing the response/JSON.
   */
  OIDErrorCodeJSONSerializationError = -13,

  /*! @brief The ID Token did not parse.
   */
  OIDErrorCodeIDTokenParsingError = -14,

  /*! @brief The ID Token did not pass validation (e.g. issuer, audience checks).
   */
  OIDErrorCodeIDTokenFailedValidationError = -15,
};

/*! @brief Enum of all possible OAuth error codes as defined by RFC6749
    @discussion Used by @c ::OIDErrorCodeOAuthAuthorization and @c ::OIDErrorCodeOAuthToken
        which define endpoint-specific subsets of OAuth codes. Those enum types are down-castable
        to this one.
    @see https://tools.ietf.org/html/rfc6749#section-11.4
    @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
typedef NS_ENUM(NSInteger, OIDErrorCodeOAuth) {

  /*! @remarks invalid_request
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthInvalidRequest = -2,

  /*! @remarks unauthorized_client
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthUnauthorizedClient = -3,

  /*! @remarks access_denied
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthAccessDenied = -4,

  /*! @remarks unsupported_response_type
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthUnsupportedResponseType = -5,

  /*! @remarks invalid_scope
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthInvalidScope = -6,

  /*! @remarks server_error
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthServerError = -7,

  /*! @remarks temporarily_unavailable
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthTemporarilyUnavailable = -8,

  /*! @remarks invalid_client
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthInvalidClient = -9,

  /*! @remarks invalid_grant
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthInvalidGrant = -10,

  /*! @remarks unsupported_grant_type
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthUnsupportedGrantType = -11,

  /*! @remarks invalid_redirect_uri
      @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationError
   */
  OIDErrorCodeOAuthInvalidRedirectURI = -12,

  /*! @remarks invalid_client_metadata
      @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationError
   */
  OIDErrorCodeOAuthInvalidClientMetadata = -13,

  /*! @brief An authorization error occurring on the client rather than the server. For example,
        due to a state mismatch or misconfiguration. Should be treated as an unrecoverable
        authorization error.
   */
  OIDErrorCodeOAuthClientError = -0xEFFF,

  /*! @brief An OAuth error not known to this library
      @discussion Indicates an OAuth error as per RFC6749, but the error code was not in our
          list. It could be a custom error code, or one from an OAuth extension. See the "error" key
          of the \NSError_userInfo property. Such errors are assumed to invalidate the
          authentication state
   */
  OIDErrorCodeOAuthOther = -0xF000,
};

/*! @brief The error codes for the @c ::OIDOAuthAuthorizationErrorDomain error domain
    @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
 */
typedef NS_ENUM(NSInteger, OIDErrorCodeOAuthAuthorization) {
  /*! @remarks invalid_request
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthAuthorizationInvalidRequest = OIDErrorCodeOAuthInvalidRequest,

  /*! @remarks unauthorized_client
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthAuthorizationUnauthorizedClient = OIDErrorCodeOAuthUnauthorizedClient,

  /*! @remarks access_denied
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthAuthorizationAccessDenied =
      OIDErrorCodeOAuthAccessDenied,

  /*! @remarks unsupported_response_type
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthAuthorizationUnsupportedResponseType =
      OIDErrorCodeOAuthUnsupportedResponseType,

  /*! @brief Indicates a network error or server error occurred.
      @remarks invalid_scope
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthAuthorizationAuthorizationInvalidScope = OIDErrorCodeOAuthInvalidScope,

  /*! @brief Indicates a server error occurred.
      @remarks server_error
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthAuthorizationServerError = OIDErrorCodeOAuthServerError,

  /*! @remarks temporarily_unavailable
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthAuthorizationTemporarilyUnavailable = OIDErrorCodeOAuthTemporarilyUnavailable,

  /*! @brief An authorization error occurring on the client rather than the server. For example,
        due to a state mismatch or client misconfiguration. Should be treated as an unrecoverable
        authorization error.
   */
  OIDErrorCodeOAuthAuthorizationClientError = OIDErrorCodeOAuthClientError,

  /*! @brief An authorization OAuth error not known to this library
      @discussion this indicates an OAuth error as per RFC6749, but the error code was not in our
          list. It could be a custom error code, or one from an OAuth extension. See the "error" key
          of the \NSError_userInfo property. We assume such errors are not transient.
      @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
   */
  OIDErrorCodeOAuthAuthorizationOther = OIDErrorCodeOAuthOther,
};


/*! @brief The error codes for the @c ::OIDOAuthTokenErrorDomain error domain
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
typedef NS_ENUM(NSInteger, OIDErrorCodeOAuthToken) {
  /*! @remarks invalid_request
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthTokenInvalidRequest = OIDErrorCodeOAuthInvalidRequest,

  /*! @remarks invalid_client
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthTokenInvalidClient = OIDErrorCodeOAuthInvalidClient,

  /*! @remarks invalid_grant
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthTokenInvalidGrant = OIDErrorCodeOAuthInvalidGrant,

  /*! @remarks unauthorized_client
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthTokenUnauthorizedClient = OIDErrorCodeOAuthUnauthorizedClient,

  /*! @remarks unsupported_grant_type
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthTokenUnsupportedGrantType = OIDErrorCodeOAuthUnsupportedGrantType,

  /*! @remarks invalid_scope
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthTokenInvalidScope = OIDErrorCodeOAuthInvalidScope,

  /*! @brief An unrecoverable token error occurring on the client rather than the server.
   */
  OIDErrorCodeOAuthTokenClientError = OIDErrorCodeOAuthClientError,

  /*! @brief A token endpoint OAuth error not known to this library
      @discussion this indicates an OAuth error as per RFC6749, but the error code was not in our
          list. It could be a custom error code, or one from an OAuth extension. See the "error" key
          of the \NSError_userInfo property. We assume such errors are not transient.
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthTokenOther = OIDErrorCodeOAuthOther,
};

/*! @brief The error codes for the @c ::OIDOAuthRegistrationErrorDomain error domain
    @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationError
 */
typedef NS_ENUM(NSInteger, OIDErrorCodeOAuthRegistration) {
  /*! @remarks invalid_request
      @see http://tools.ietf.org/html/rfc6750#section-3.1
   */
  OIDErrorCodeOAuthRegistrationInvalidRequest = OIDErrorCodeOAuthInvalidRequest,

  /*! @remarks invalid_redirect_uri
      @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationError
   */
  OIDErrorCodeOAuthRegistrationInvalidRedirectURI = OIDErrorCodeOAuthInvalidRedirectURI,

  /*! @remarks invalid_client_metadata
      @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationError
   */
  OIDErrorCodeOAuthRegistrationInvalidClientMetadata = OIDErrorCodeOAuthInvalidClientMetadata,

  /*! @brief An unrecoverable token error occurring on the client rather than the server.
   */
  OIDErrorCodeOAuthRegistrationClientError = OIDErrorCodeOAuthClientError,

  /*! @brief A registration endpoint OAuth error not known to this library
      @discussion this indicates an OAuth error, but the error code was not in our
          list. It could be a custom error code, or one from an OAuth extension. See the "error" key
          of the \NSError_userInfo property. We assume such errors are not transient.
      @see https://tools.ietf.org/html/rfc6749#section-5.2
   */
  OIDErrorCodeOAuthRegistrationOther = OIDErrorCodeOAuthOther,
};


/*! @brief The exception text for the exception which occurs when a
        @c OIDExternalUserAgentSession receives a message after it has already completed.
 */
extern NSString *const OIDOAuthExceptionInvalidAuthorizationFlow;

/*! @brief The text for the exception which occurs when a Token Request is constructed
        with a null redirectURL for a grant_type that requires a nonnull Redirect
 */
extern NSString *const OIDOAuthExceptionInvalidTokenRequestNullRedirectURL;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDError.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDErrorUtilities.h
===
/*! @file OIDErrorUtilities.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "OIDError.h"

NS_ASSUME_NONNULL_BEGIN

/*! @brief Convenience methods for creating standardized \NSError instances.
 */
@interface OIDErrorUtilities : NSObject

/*! @brief Creates a standard \NSError from an @c ::OIDErrorCode and custom user info.
        Automatically populates the localized error description.
    @param code The error code.
    @param underlyingError The underlying error which occurred, if applicable.
    @param description A custom description, if applicable.
    @return An \NSError representing the error code.
 */
+ (NSError *)errorWithCode:(OIDErrorCode)code
           underlyingError:(nullable NSError *)underlyingError
               description:(nullable NSString *)description;

/*! @brief Creates a standard \NSError from an @c ::OIDErrorCode and custom user info.
        Automatically populates the localized error description.
    @param OAuthErrorDomain The OAuth error domain. Must be @c ::OIDOAuthAuthorizationErrorDomain or
        @c ::OIDOAuthTokenErrorDomain.
    @param errorResponse The dictionary from an OAuth error response (as per RFC6749 Section 5.2).
    @param underlyingError The underlying error which occurred, if applicable.
    @return An \NSError representing the OAuth error.
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
+ (NSError *)OAuthErrorWithDomain:(NSString *)OAuthErrorDomain
                    OAuthResponse:(NSDictionary *)errorResponse
                  underlyingError:(nullable NSError *)underlyingError;

/*! @brief Creates a \NSError indicating that the resource server responded with an authorization
        error.
    @param code Your error code.
    @param errorResponse The resource server error response, if any.
    @param underlyingError The underlying error which occurred, if applicable.
    @return An \NSError representing the authorization error from the resource server.
 */
+ (NSError *)resourceServerAuthorizationErrorWithCode:(NSInteger)code
                                        errorResponse:(nullable NSDictionary *)errorResponse
                                      underlyingError:(nullable NSError *)underlyingError;


/*! @brief Creates a standard \NSError from an \NSHTTPURLResponse. Automatically
        populates the localized error description with the response data associated with the
        \NSHTTPURLResponse, if available.
    @param HTTPURLResponse The response which indicates an error occurred.
    @param data The response data associated with the response which should be converted to an
        @c NSString assuming a UTF-8 encoding, if available.
    @return An \NSError representing the error.
 */
+ (NSError *)HTTPErrorWithHTTPResponse:(NSHTTPURLResponse *)HTTPURLResponse
                                  data:(nullable NSData *)data;

/*! @brief Raises an exception with the given name as both the name, and the message.
    @param name The name of the exception.
 */
+ (void)raiseException:(NSString *)name;

/*! @brief Raises an exception with the given name and message.
    @param name The name of the exception.
    @param message The message of the exception.
 */
+ (void)raiseException:(NSString *)name message:(NSString *)message;

/*! @brief Converts an OAuth error code into an @c ::OIDErrorCodeOAuth error code.
    @param errorCode The OAuth error code.
    @discussion Returns @c ::OIDErrorCodeOAuthOther if the string is not in AppAuth's list.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
+ (OIDErrorCodeOAuth)OAuthErrorCodeFromString:(NSString *)errorCode;

/*! @brief Returns true if the given error domain is an OAuth error domain.
    @param errorDomain The error domain to test.
    @discussion An OAuth error domain is used for errors returned per RFC6749 sections 4.1.2.1 and
        5.2. Other errors, such as network errors can also occur but they will not have an OAuth
        error domain.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.2.1
    @see https://tools.ietf.org/html/rfc6749#section-5.2
 */
+ (BOOL)isOAuthErrorDomain:(NSString*)errorDomain;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDErrorUtilities.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDExternalUserAgent.h
===
/*! @file OIDExternalUserAgent.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2016 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@protocol OIDExternalUserAgentSession;
@protocol OIDExternalUserAgentRequest;

NS_ASSUME_NONNULL_BEGIN

/*! @protocol OIDExternalUserAgent
    @brief An external user-agent UI that presents displays the request to the user. Clients may
        provide custom implementations of an external user-agent to customize the way the requests
        are presented to the end user.
 */
@protocol OIDExternalUserAgent<NSObject>

/*! @brief Presents the request in the external user-agent.
    @param request The request to be presented in the external user-agent.
    @param session The @c OIDExternalUserAgentSession instance that initiates presenting the UI.
        Concrete implementations of a @c OIDExternalUserAgent may call
        resumeExternalUserAgentFlowWithURL or failExternalUserAgentFlowWithError on session to either
        resume or fail the request.
    @return YES If the request UI was successfully presented to the user.
 */
- (BOOL)presentExternalUserAgentRequest:(id<OIDExternalUserAgentRequest> )request
                                session:(id<OIDExternalUserAgentSession>)session;

/*! @brief Dimisses the external user-agent and calls completion when the dismiss operation ends.
    @param animated Whether or not the dismiss operation should be animated.
    @remarks Has no effect if no UI is presented.
    @param completion The block to be called when the dismiss operations ends
 */
- (void)dismissExternalUserAgentAnimated:(BOOL)animated completion:(void (^)(void))completion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDExternalUserAgent.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDExternalUserAgentRequest.h
===
/*! @file OIDExternalUserAgent.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2017 The AppAuth Authors. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

/*! @protocol OIDExternalUserAgent
    @brief An interface that any external user-agent request may implement to use the
        @c OIDExternalUserAgent flow.
 */
@protocol OIDExternalUserAgentRequest

/*! @brief Method to create and return the complete request URL instance.
    @return A @c NSURL instance which contains the URL to be opened in an external UI (i.e. browser)
 */
- (NSURL*)externalUserAgentRequestURL;

/*! @brief If this external user-agent request has a redirect URL, this should return its scheme.
        Since some external requests have optional callbacks (such as the end session endpoint), the
        return value of this method is nullable.
    @return A @c NSString instance that contains the scheme of a callback url, or nil if there is
        no callback url for this request.
 */
- (NSString*)redirectScheme;
@end

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDExternalUserAgentRequest.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDExternalUserAgentSession.h
===
/*! @file OIDExternalUserAgentSession.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2017 The AppAuth Authors. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents an in-flight external user-agent session.
 */
@protocol OIDExternalUserAgentSession <NSObject>

/*! @brief Cancels the code flow session, invoking the request's callback with a cancelled error.
    @remarks Has no effect if called more than once, or after a
        @c OIDExternalUserAgentSession.resumeExternalUserAgentFlowWithURL: message was received.
        Will cause an error with code: @c ::OIDErrorCodeProgramCanceledAuthorizationFlow to be
        passed to the @c callback block passed to
        @c OIDAuthorizationService.presentAuthorizationRequest:presentingViewController:callback:
 */
- (void)cancel;

/*! @brief Cancels the code flow session, invoking the request's callback with a cancelled error.
    @remarks Has no effect if called more than once, or after a
        @c OIDExternalUserAgentSession.resumeExternalUserAgentFlowWithURL: message was received.
        Will cause an error with code: @c ::OIDErrorCodeProgramCanceledAuthorizationFlow to be
        passed to the @c callback block passed to
        @c OIDAuthorizationService.presentAuthorizationRequest:presentingViewController:callback:
    @param completion The block to be called when the cancel operation ends
 */
- (void)cancelWithCompletion:(nullable void (^)(void))completion;

/*! @brief Clients should call this method with the result of the external user-agent code flow if
        it becomes available.
    @param URL The redirect URL invoked by the server.
    @discussion When the URL represented a valid response, implementations should clean up any
        left-over UI state from the request, for example by closing the
        \SFSafariViewController or loopback HTTP listener if those were used. The completion block
        of the pending request should then be invoked.
    @remarks Has no effect if called more than once, or after a @c cancel message was received.
    @return YES if the passed URL matches the expected redirect URL and was consumed, NO otherwise.
 */
- (BOOL)resumeExternalUserAgentFlowWithURL:(NSURL *)URL;

/*! @brief @c OIDExternalUserAgent or clients should call this method when the
        external user-agent flow failed with a non-OAuth error.
    @param error The error that is the reason for the failure of this external flow.
    @remarks Has no effect if called more than once, or after a @c cancel message was received.
 */
- (void)failExternalUserAgentFlowWithError:(NSError *)error;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDExternalUserAgentSession.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDFieldMapping.h
===
/*! @file OIDFieldMapping.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents a function which transforms incoming source values into instance variable
        values.
 */
typedef _Nullable id(^OIDFieldMappingConversionFunction)(NSObject *_Nullable value);

/*! @brief Describes the mapping of a key/value pair to an iVar with an optional conversion
        function.
 */
@interface OIDFieldMapping : NSObject

/*! @brief The name of the instance variable the field should be mapped to.
 */
@property(nonatomic, readonly) NSString *name;

/*! @brief The type of the instance variable.
 */
@property(nonatomic, readonly) Class expectedType;

/*! @brief An optional conversion function which specifies a transform from the incoming data to the
        instance variable value.
 */
@property(nonatomic, readonly, nullable) OIDFieldMappingConversionFunction conversion;

/*! @internal
    @brief Unavailable. Please use initWithName:type:conversion:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief The designated initializer.
    @param name The name of the instance variable the field should be mapped to.
    @param type The type of the instance variable.
    @param conversion An optional conversion function which specifies a transform from the incoming
        data to the instance variable value. Used during the process performed by
        @c OIDFieldMapping.remainingParametersWithMap:parameters:instance: but not during
        encoding/decoding, since the encoded and decoded values should already be of the type
        specified by the @c type parameter.
 */
- (instancetype)initWithName:(NSString *)name
                        type:(Class)type
                  conversion:(nullable OIDFieldMappingConversionFunction)conversion
    NS_DESIGNATED_INITIALIZER;

/*! @brief A convenience initializer.
    @param name The name of the instance variable the field should be mapped to.
    @param type The type of the instance variable.
 */
- (instancetype)initWithName:(NSString *)name
                        type:(Class)type;

/*! @brief Performs a mapping of key/value pairs in an incoming parameters dictionary to instance
        variables, returning a dictionary of parameter key/values which didn't map to instance
        variables.
    @param map A mapping of incoming keys to instance variables.
    @param parameters Incoming key value pairs to map to an instance's variables.
    @param instance The instance whose variables should be set based on the mapping.
    @return A dictionary of parameter key/values which didn't map to instance variables.
 */
+ (NSDictionary<NSString *, NSObject<NSCopying> *> *)remainingParametersWithMap:
    (NSDictionary<NSString *, OIDFieldMapping *> *)map
    parameters:(NSDictionary<NSString *, NSObject<NSCopying> *> *)parameters
      instance:(id)instance;

/*! @brief This helper method for @c NSCoding implementations performs a serialization of fields
        defined in a field mapping.
    @param aCoder An @c NSCoder instance to serialize instance variable values to.
    @param map A mapping of keys to instance variables.
    @param instance The instance whose variables should be serialized based on the mapping.
 */
+ (void)encodeWithCoder:(NSCoder *)aCoder
                    map:(NSDictionary<NSString *, OIDFieldMapping *> *)map
               instance:(id)instance;

/*! @brief This helper method for @c NSCoding implementations performs a deserialization of
        fields defined in a field mapping.
    @param aCoder An @c NSCoder instance from which to deserialize instance variable values from.
    @param map A mapping of keys to instance variables.
    @param instance The instance whose variables should be deserialized based on the mapping.
 */
+ (void)decodeWithCoder:(NSCoder *)aCoder
                    map:(NSDictionary<NSString *, OIDFieldMapping *> *)map
               instance:(id)instance;

/*! @brief Returns an @c NSSet of classes suitable for deserializing JSON content in an
        @c NSSecureCoding context.
 */
+ (NSSet *)JSONTypes;

/*! @brief Returns a function for converting an @c NSString to an @c NSURL.
 */
+ (OIDFieldMappingConversionFunction)URLConversion;

/*! @brief Returns a function for converting an @c NSNumber number of seconds from now to an
        @c NSDate.
 */
+ (OIDFieldMappingConversionFunction)dateSinceNowConversion;

/*! @brief Returns a function for converting an @c NSNumber representing a unix time stamp to an
        @c NSDate.
 */
+ (OIDFieldMappingConversionFunction)dateEpochConversion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDFieldMapping.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDGrantTypes.h
===
/*! @file OIDGrantTypes.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

/*! @brief For exchanging an authorization code for an access token.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
 */
extern NSString *const OIDGrantTypeAuthorizationCode;

/*! @brief For refreshing an access token with a refresh token.
    @see https://tools.ietf.org/html/rfc6749#section-6
 */
extern NSString *const OIDGrantTypeRefreshToken;

/*! @brief For obtaining an access token with a username and password.
    @see https://tools.ietf.org/html/rfc6749#section-4.3.2
 */
extern NSString *const OIDGrantTypePassword;

/*! @brief For obtaining an access token from the token endpoint using client credentials.
    @see https://tools.ietf.org/html/rfc6749#section-3.2.1
    @see https://tools.ietf.org/html/rfc6749#section-4.4.2
 */
extern NSString *const OIDGrantTypeClientCredentials;

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDGrantTypes.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDIDToken.h
===
/*! @file OIDIDToken.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2017 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */
#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/*! @brief A convenience class that parses an ID Token and extracts the claims _but does not_
           verify its signature. AppAuth only supports the OpenID Code flow, meaning ID Tokens
           received by AppAuth are sent from the token endpoint on a TLS protected channel,
           offering some assurances as to the origin of the token. You may wish to additionally
           verify the ID Token signature using a JWT signature verification library of your
           choosing.
    @see http://openid.net/specs/openid-connect-core-1_0.html#IDToken
    @see https://tools.ietf.org/html/rfc7519
    @see https://jwt.io/
 */
@interface OIDIDToken : NSObject

/*! @internal
    @brief Unavailable. Please use @c initWithAuthorizationResponse:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Parses the given ID Token string.
    @param idToken The ID Token spring.
 */
- (nullable instancetype)initWithIDTokenString:(NSString *)idToken;

/*! @brief The header JWT values.
 */
@property(nonatomic, readonly) NSDictionary *header;

/*! @brief All ID Token claims.
 */
@property(nonatomic, readonly) NSDictionary *claims;

/*! @brief Issuer Identifier for the Issuer of the response.
    @remarks iss
    @see http://openid.net/specs/openid-connect-core-1_0.html#IDToken
 */
@property(nonatomic, readonly) NSURL *issuer;

/*! @brief Subject Identifier.
    @remarks sub
    @see http://openid.net/specs/openid-connect-core-1_0.html#IDToken
 */
@property(nonatomic, readonly) NSString *subject;

/*! @brief Audience(s) that this ID Token is intended for.
    @remarks aud
    @see http://openid.net/specs/openid-connect-core-1_0.html#IDToken
 */
@property(nonatomic, readonly) NSArray *audience;

/*! @brief Expiration time on or after which the ID Token MUST NOT be accepted for processing.
    @remarks exp
    @see http://openid.net/specs/openid-connect-core-1_0.html#IDToken
 */
@property(nonatomic, readonly) NSDate *expiresAt;

/*! @brief Time at which the JWT was issued.
    @remarks iat
    @see http://openid.net/specs/openid-connect-core-1_0.html#IDToken
 */
@property(nonatomic, readonly) NSDate *issuedAt;

/*! @brief String value used to associate a Client session with an ID Token, and to mitigate replay
        attacks.
    @remarks nonce
    @see http://openid.net/specs/openid-connect-core-1_0.html#IDToken
 */
@property(nonatomic, readonly, nullable) NSString *nonce;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDIDToken.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDRegistrationRequest.h
===
/*! @file OIDRegistrationRequest.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2016 The AppAuth for iOS Authors. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDAuthorizationResponse;
@class OIDServiceConfiguration;

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents a registration request.
    @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationRequest
 */
@interface OIDRegistrationRequest : NSObject <NSCopying, NSSecureCoding>

/*! @brief The service's configuration.
    @remarks This configuration specifies how to connect to a particular OAuth provider.
        Configurations may be created manually, or via an OpenID Connect Discovery Document.
 */
@property(nonatomic, readonly) OIDServiceConfiguration *configuration;

/*! @brief The initial access token to access the Client Registration Endpoint
        (if required by the OpenID Provider).
    @remarks OAuth 2.0 Access Token optionally issued by an Authorization Server granting
        access to its Client Registration Endpoint. This token (if required) is
        provisioned out of band.
    @see Section 3 of OpenID Connect Dynamic Client Registration 1.0
        https://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration
 */
@property(nonatomic, readonly) NSString *initialAccessToken;

/*! @brief The application type to register, will always be 'native'.
    @remarks application_type
    @see https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata
 */
@property(nonatomic, readonly) NSString *applicationType;

/*! @brief The client's redirect URI's.
    @remarks redirect_uris
    @see https://tools.ietf.org/html/rfc6749#section-3.1.2
 */
@property(nonatomic, readonly) NSArray<NSURL *> *redirectURIs;

/*! @brief The response types to register for usage by this client.
    @remarks response_types
    @see http://openid.net/specs/openid-connect-core-1_0.html#Authentication
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *responseTypes;

/*! @brief The grant types to register for usage by this client.
    @remarks grant_types
 @see https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *grantTypes;

/*! @brief The subject type to to request.
    @remarks subject_type
    @see http://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes
 */
@property(nonatomic, readonly, nullable) NSString *subjectType;

/*! @brief The client authentication method to use at the token endpoint.
    @remarks token_endpoint_auth_method
    @see http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication
 */
@property(nonatomic, readonly, nullable) NSString *tokenEndpointAuthenticationMethod;

/*! @brief The client's additional token request parameters.
 */
@property(nonatomic, readonly, nullable) NSDictionary<NSString *, NSString *> *additionalParameters;

/*! @internal
    @brief Unavailable. Please use initWithConfiguration
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Create a Client Registration Request to an OpenID Provider that supports open Dynamic
        Registration.
    @param configuration The service's configuration.
    @param redirectURIs The redirect URIs to register for the client.
    @param responseTypes The response types to register for the client.
    @param grantTypes The grant types to register for the client.
    @param subjectType The subject type to register for the client.
    @param tokenEndpointAuthMethod The token endpoint authentication method to register for the
        client.
    @param additionalParameters The client's additional registration request parameters.
 */
- (instancetype)initWithConfiguration:(OIDServiceConfiguration *)configuration
               redirectURIs:(NSArray<NSURL *> *)redirectURIs
              responseTypes:(nullable NSArray<NSString *> *)responseTypes
                 grantTypes:(nullable NSArray<NSString *> *)grantTypes
                subjectType:(nullable NSString *)subjectType
    tokenEndpointAuthMethod:(nullable NSString *)tokenEndpointAuthMethod
       additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @brief Designated initializer.
    @param configuration The service's configuration.
    @param redirectURIs The redirect URIs to register for the client.
    @param responseTypes The response types to register for the client.
    @param grantTypes The grant types to register for the client.
    @param subjectType The subject type to register for the client.
    @param tokenEndpointAuthMethod The token endpoint authentication method to register for the
        client.
    @param initialAccessToken The initial access token to access the Client Registration Endpoint
        (if required by the OpenID Provider).
    @param additionalParameters The client's additional registration request parameters.
    @see https://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration
 */
- (instancetype)initWithConfiguration:(OIDServiceConfiguration *)configuration
               redirectURIs:(NSArray<NSURL *> *)redirectURIs
              responseTypes:(nullable NSArray<NSString *> *)responseTypes
                 grantTypes:(nullable NSArray<NSString *> *)grantTypes
                subjectType:(nullable NSString *)subjectType
    tokenEndpointAuthMethod:(nullable NSString *)tokenEndpointAuthMethod
         initialAccessToken:(nullable NSString *)initialAccessToken
       additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters
    NS_DESIGNATED_INITIALIZER;

/*! @brief Constructs an @c NSURLRequest representing the registration request.
    @return An @c NSURLRequest representing the registration request.
 */
- (NSURLRequest *)URLRequest;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDRegistrationRequest.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDRegistrationResponse.h
===
/*! @file OIDRegistrationResponse.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2016 The AppAuth for iOS Authors. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */


#import <Foundation/Foundation.h>

@class OIDRegistrationRequest;

NS_ASSUME_NONNULL_BEGIN

/*! @brief Parameter name for the client id.
 */
extern NSString *const OIDClientIDParam;

/*! @brief Parameter name for the client id issuance timestamp.
 */
extern NSString *const OIDClientIDIssuedAtParam;

/*! @brief Parameter name for the client secret.
 */
extern NSString *const OIDClientSecretParam;

/*! @brief Parameter name for the client secret expiration time.
 */
extern NSString *const OIDClientSecretExpirestAtParam;

/*! @brief Parameter name for the registration access token.
 */
extern NSString *const OIDRegistrationAccessTokenParam;

/*! @brief Parameter name for the client configuration URI.
 */
extern NSString *const OIDRegistrationClientURIParam;

/*! @brief Represents a registration response.
    @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationResponse
 */
@interface OIDRegistrationResponse : NSObject <NSCopying, NSSecureCoding>

/*! @brief The request which was serviced.
 */
@property(nonatomic, readonly) OIDRegistrationRequest *request;

/*! @brief The registered client identifier.
    @remarks client_id
    @see https://tools.ietf.org/html/rfc6749#section-4
    @see https://tools.ietf.org/html/rfc6749#section-4.1.1
 */
@property(nonatomic, readonly) NSString *clientID;

/*! @brief Timestamp of when the client identifier was issued, if provided.
    @remarks client_id_issued_at
    @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationResponse
 */
@property(nonatomic, readonly, nullable) NSDate *clientIDIssuedAt;

/*! @brief TThe client secret, which is part of the client credentials, if provided.
    @remarks client_secret
    @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationResponse
 */
@property(nonatomic, readonly, nullable) NSString *clientSecret;

/*! @brief Timestamp of when the client credentials expires, if provided.
    @remarks client_secret_expires_at
    @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationResponse
 */
@property(nonatomic, readonly, nullable) NSDate *clientSecretExpiresAt;

/*! @brief Client registration access token that can be used for subsequent operations upon the
        client registration.
    @remarks registration_access_token
    @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationResponse
 */
@property(nonatomic, readonly, nullable) NSString *registrationAccessToken;

/*! @brief Location of the client configuration endpoint, if provided.
    @remarks registration_client_uri
    @see https://openid.net/specs/openid-connect-registration-1_0.html#RegistrationResponse
 */
@property(nonatomic, readonly, nullable) NSURL *registrationClientURI;

/*! @brief Client authentication method to use at the token endpoint, if provided.
    @remarks token_endpoint_auth_method
    @see http://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication
 */
@property(nonatomic, readonly, nullable) NSString *tokenEndpointAuthenticationMethod;

/*! @brief Additional parameters returned from the token server.
 */
@property(nonatomic, readonly, nullable) NSDictionary<NSString *, NSObject <NSCopying> *>
    *additionalParameters;

/*! @internal
    @brief Unavailable. Please use initWithRequest
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Designated initializer.
    @param request The serviced request.
    @param parameters The decoded parameters returned from the Authorization Server.
    @remarks Known parameters are extracted from the @c parameters parameter and the normative
        properties are populated. Non-normative parameters are placed in the
        @c #additionalParameters dictionary.
 */
- (instancetype)initWithRequest:(OIDRegistrationRequest *)request
                     parameters:(NSDictionary<NSString *, NSObject <NSCopying> *> *)parameters
                     NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDRegistrationResponse.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDResponseTypes.h
===
/*! @file OIDResponseTypes.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

/*! @brief A constant for the standard OAuth2 Response Type of 'code'.
 */
extern NSString *const OIDResponseTypeCode;

/*! @brief A constant for the standard OAuth2 Response Type of 'token'.
 */
extern NSString *const OIDResponseTypeToken;

/*! @brief A constant for the standard OAuth2 Response Type of 'id_token'.
 */
extern NSString *const OIDResponseTypeIDToken;

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDResponseTypes.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDScopeUtilities.h
===
/*! @file OIDScopeUtilities.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/*! @brief Provides convenience methods for dealing with scope strings.
 */
@interface OIDScopeUtilities : NSObject

/*! @internal
    @brief Unavailable. This class should not be initialized.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Converts an array of scope strings to a single scope string per the OAuth 2 spec.
    @param scopes An array of scope strings.
    @return A space-delimited string of scopes.
    @see https://tools.ietf.org/html/rfc6749#section-3.3
 */
+ (NSString *)scopesWithArray:(NSArray<NSString *> *)scopes;

/*! @brief Converts an OAuth 2 spec-compliant scope string to an array of scopes.
    @param scopes An OAuth 2 spec-compliant scope string.
    @return An array of scope strings.
    @see https://tools.ietf.org/html/rfc6749#section-3.3
 */
+ (NSArray<NSString *> *)scopesArrayWithString:(NSString *)scopes;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDScopeUtilities.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDScopes.h
===
/*! @file OIDScopes.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

/*! @brief Scope that indicates this request is an OpenID Connect request.
    @see http://openid.net/specs/openid-connect-core-1_0.html#AuthRequestValidation
 */
extern NSString *const OIDScopeOpenID;

/*! @brief This scope value requests access to the End-User's default profile Claims, which are:
        name, family_name, given_name, middle_name, nickname, preferred_username, profile, picture,
        website, gender, birthdate, zoneinfo, locale, and updated_at.
    @see http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims
 */
extern NSString *const OIDScopeProfile;

/*! @brief This scope value requests access to the email and email_verified Claims.
    @see http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims
 */
extern NSString *const OIDScopeEmail;

/*! @brief This scope value requests access to the address Claim.
    @see http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims
 */
extern NSString *const OIDScopeAddress;

/*! @brief This scope value requests access to the phone_number and phone_number_verified Claims.
    @see http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims
 */
extern NSString *const OIDScopePhone;

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDScopes.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDServiceConfiguration.h
===
/*! @file OIDServiceConfiguration.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDServiceConfiguration;
@class OIDServiceDiscovery;

NS_ASSUME_NONNULL_BEGIN

/*! @brief The type of block called when a @c OIDServiceConfiguration has been created
        by loading a @c OIDServiceDiscovery from an @c NSURL.
 */
typedef void (^OIDServiceConfigurationCreated)
    (OIDServiceConfiguration *_Nullable serviceConfiguration,
     NSError *_Nullable error);

/*! @brief Represents the information needed to construct a @c OIDAuthorizationService.
 */
@interface OIDServiceConfiguration : NSObject <NSCopying, NSSecureCoding>

/*! @brief The authorization endpoint URI.
 */
@property(nonatomic, readonly) NSURL *authorizationEndpoint;

/*! @brief The token exchange and refresh endpoint URI.
 */
@property(nonatomic, readonly) NSURL *tokenEndpoint;

/*! @brief The OpenID Connect issuer.
 */
@property(nonatomic, readonly, nullable) NSURL *issuer;

/*! @brief The dynamic client registration endpoint URI.
 */
@property(nonatomic, readonly, nullable) NSURL *registrationEndpoint;

/*! @brief The end session logout endpoint URI.
 */
@property(nonatomic, readonly, nullable) NSURL *endSessionEndpoint;

/*! @brief The discovery document.
 */
@property(nonatomic, readonly, nullable) OIDServiceDiscovery *discoveryDocument;

/*! @internal
    @brief Unavailable. Please use @c initWithAuthorizationEndpoint:tokenEndpoint: or
        @c initWithDiscoveryDocument:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @param authorizationEndpoint The authorization endpoint URI.
    @param tokenEndpoint The token exchange and refresh endpoint URI.
 */
- (instancetype)initWithAuthorizationEndpoint:(NSURL *)authorizationEndpoint
                                tokenEndpoint:(NSURL *)tokenEndpoint;

/*! @param authorizationEndpoint The authorization endpoint URI.
    @param tokenEndpoint The token exchange and refresh endpoint URI.
    @param registrationEndpoint The dynamic client registration endpoint URI.
 */
- (instancetype)initWithAuthorizationEndpoint:(NSURL *)authorizationEndpoint
                                tokenEndpoint:(NSURL *)tokenEndpoint
                         registrationEndpoint:(nullable NSURL *)registrationEndpoint;

/*! @param authorizationEndpoint The authorization endpoint URI.
    @param tokenEndpoint The token exchange and refresh endpoint URI.
    @param issuer The OpenID Connect issuer.
 */
- (instancetype)initWithAuthorizationEndpoint:(NSURL *)authorizationEndpoint
                                tokenEndpoint:(NSURL *)tokenEndpoint
                                       issuer:(nullable NSURL *)issuer;

/*! @param authorizationEndpoint The authorization endpoint URI.
    @param tokenEndpoint The token exchange and refresh endpoint URI.
    @param issuer The OpenID Connect issuer.
    @param registrationEndpoint The dynamic client registration endpoint URI.
 */
- (instancetype)initWithAuthorizationEndpoint:(NSURL *)authorizationEndpoint
                                tokenEndpoint:(NSURL *)tokenEndpoint
                                       issuer:(nullable NSURL *)issuer
                         registrationEndpoint:(nullable NSURL *)registrationEndpoint;

/*! @param authorizationEndpoint The authorization endpoint URI.
    @param tokenEndpoint The token exchange and refresh endpoint URI.
    @param issuer The OpenID Connect issuer.
    @param registrationEndpoint The dynamic client registration endpoint URI.
    @param endSessionEndpoint The end session endpoint (logout) URI.
 */
- (instancetype)initWithAuthorizationEndpoint:(NSURL *)authorizationEndpoint
                                tokenEndpoint:(NSURL *)tokenEndpoint
                                       issuer:(nullable NSURL *)issuer
                         registrationEndpoint:(nullable NSURL *)registrationEndpoint
                           endSessionEndpoint:(nullable NSURL *)endSessionEndpoint;

/*! @param discoveryDocument The discovery document from which to extract the required OAuth
        configuration.
 */
- (instancetype)initWithDiscoveryDocument:(OIDServiceDiscovery *)discoveryDocument;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDServiceConfiguration.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDServiceDiscovery.h
===
/*! @file OIDServiceDiscovery.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents an OpenID Connect 1.0 Discovery Document
    @see https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata
 */
@interface OIDServiceDiscovery : NSObject <NSCopying, NSSecureCoding>

/*! @brief The decoded OpenID Connect 1.0 Discovery Document as a dictionary.
 */
@property(nonatomic, readonly) NSDictionary<NSString *, id> *discoveryDictionary;

/*! @brief REQUIRED. URL using the @c https scheme with no query or fragment component that the OP
        asserts as its Issuer Identifier. If Issuer discovery is supported, this value MUST be
        identical to the issuer value returned by WebFinger. This also MUST be identical to the
        @c iss Claim value in ID Tokens issued from this Issuer.
    @remarks issuer
    @seealso https://openid.net/specs/openid-connect-discovery-1_0.html#IssuerDiscovery
 */
@property(nonatomic, readonly) NSURL *issuer;

/*! @brief REQUIRED. URL of the OP's OAuth 2.0 Authorization Endpoint.
    @remarks authorization_endpoint
    @seealso http://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint
 */
@property(nonatomic, readonly) NSURL *authorizationEndpoint;

/*! @brief OPTIONAL. URL of the OP's OAuth 2.0 Device Authorization Endpoint.
    @remarks device_authorization_endpoint
    @seealso https://tools.ietf.org/html/rfc8628#section-4
 */
@property(nonatomic, readonly, nullable) NSURL *deviceAuthorizationEndpoint;

/*! @brief URL of the OP's OAuth 2.0 Token Endpoint. This is REQUIRED unless only the Implicit Flow
        is used.
    @remarks token_endpoint
    @seealso http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint
 */
@property(nonatomic, readonly) NSURL *tokenEndpoint;

/*! @brief RECOMMENDED. URL of the OP's UserInfo Endpoint. This URL MUST use the https scheme and
        MAY contain port, path, and query parameter components.
    @remarks userinfo_endpoint
    @seealso http://openid.net/specs/openid-connect-core-1_0.html#UserInfo
 */
@property(nonatomic, readonly, nullable) NSURL *userinfoEndpoint;

/*! @brief REQUIRED. URL of the OP's JSON Web Key Set document. This contains the signing key(s) the
        RP uses to validate signatures from the OP. The JWK Set MAY also contain the Server's
        encryption key(s), which are used by RPs to encrypt requests to the Server. When both
        signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED
        for all keys in the referenced JWK Set to indicate each key's intended usage. Although some
        algorithms allow the same key to be used for both signatures and encryption, doing so is NOT
        RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509
        representations of keys provided. When used, the bare key values MUST still be present and
        MUST match those in the certificate.
    @remarks jwks_uri
    @seealso http://tools.ietf.org/html/rfc7517
 */
@property(nonatomic, readonly) NSURL *jwksURL;

/*! @brief RECOMMENDED. URL of the OP's Dynamic Client Registration Endpoint.
    @remarks registration_endpoint
    @seealso http://openid.net/specs/openid-connect-registration-1_0.html
 */
@property(nonatomic, readonly, nullable) NSURL *registrationEndpoint;

/* @brief OPTIONAL. URL of the OP's RP-Initiated Logout endpoint.
   @remarks end_session_endpoint
   @seealso http://openid.net/specs/openid-connect-session-1_0.html#OPMetadata
 */
@property(nonatomic, readonly, nullable) NSURL *endSessionEndpoint;

/*! @brief RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that
        this server supports. The server MUST support the openid scope value. Servers MAY choose not
        to advertise some supported scope values even when this parameter is used, although those
        defined in [OpenID.Core] SHOULD be listed, if supported.
    @remarks scopes_supported
    @seealso http://tools.ietf.org/html/rfc6749#section-3.3
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *scopesSupported;

/*! @brief REQUIRED. JSON array containing a list of the OAuth 2.0 @c response_type values that this
        OP supports. Dynamic OpenID Providers MUST support the @c code, @c id_token, and the token
        @c id_token Response Type values.
    @remarks response_types_supported
 */
@property(nonatomic, readonly) NSArray<NSString *> *responseTypesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the OAuth 2.0 @c response_mode values that this
        OP supports, as specified in OAuth 2.0 Multiple Response Type Encoding Practices. If
        omitted, the default for Dynamic OpenID Providers is @c ["query", "fragment"].
    @remarks response_modes_supported
    @seealso http://openid.net/specs/oauth-v2-multiple-response-types-1_0.html
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *responseModesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the OAuth 2.0 Grant Type values that this OP
        supports. Dynamic OpenID Providers MUST support the @c authorization_code and @c implicit
        Grant Type values and MAY support other Grant Types. If omitted, the default value is
        @c ["authorization_code", "implicit"].
    @remarks grant_types_supported
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *grantTypesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the Authentication Context Class References
        that this OP supports.
    @remarks acr_values_supported
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *acrValuesSupported;

/*! @brief REQUIRED. JSON array containing a list of the Subject Identifier types that this OP
        supports. Valid types include @c pairwise and @c public.
    @remarks subject_types_supported
 */
@property(nonatomic, readonly) NSArray<NSString *> *subjectTypesSupported;

/*! @brief REQUIRED. JSON array containing a list of the JWS signing algorithms (@c alg values)
        supported by the OP for the ID Token to encode the Claims in a JWT. The algorithm @c RS256
        MUST be included. The value @c none MAY be supported, but MUST NOT be used unless the
        Response Type used returns no ID Token from the Authorization Endpoint (such as when using
        the Authorization Code Flow).
    @remarks id_token_signing_alg_values_supported
    @seealso https://tools.ietf.org/html/rfc7519
 */
@property(nonatomic, readonly) NSArray<NSString *> *IDTokenSigningAlgorithmValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the JWE encryption algorithms (@c alg values)
        supported by the OP for the ID Token to encode the Claims in a JWT.
    @remarks id_token_encryption_alg_values_supported
    @seealso https://tools.ietf.org/html/rfc7519
 */
@property(nonatomic, readonly, nullable)
    NSArray<NSString *> *IDTokenEncryptionAlgorithmValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the JWE encryption algorithms (@c enc values)
        supported by the OP for the ID Token to encode the Claims in a JWT.
    @remarks id_token_encryption_enc_values_supported
    @seealso https://tools.ietf.org/html/rfc7519
 */
@property(nonatomic, readonly, nullable)
    NSArray<NSString *> *IDTokenEncryptionEncodingValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the JWS signing algorithms (@c alg values)
        supported by the UserInfo Endpoint to encode the Claims in a JWT. The value none MAY be
        included.
    @remarks userinfo_signing_alg_values_supported
    @seealso https://tools.ietf.org/html/rfc7515
    @seealso https://tools.ietf.org/html/rfc7518
    @seealso https://tools.ietf.org/html/rfc7519
 */
@property(nonatomic, readonly, nullable)
    NSArray<NSString *> *userinfoSigningAlgorithmValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the JWE encryption algorithms (alg values)
        supported by the UserInfo Endpoint to encode the Claims in a JWT.
    @remarks userinfo_encryption_alg_values_supported
    @seealso https://tools.ietf.org/html/rfc7516
    @seealso https://tools.ietf.org/html/rfc7518
    @seealso https://tools.ietf.org/html/rfc7519
 */
@property(nonatomic, readonly, nullable)
    NSArray<NSString *> *userinfoEncryptionAlgorithmValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the JWE encryption algorithms (@c enc values)
        supported by the UserInfo Endpoint to encode the Claims in a JWT.
    @remarks userinfo_encryption_enc_values_supported
    @seealso https://tools.ietf.org/html/rfc7519
 */
@property(nonatomic, readonly, nullable)
    NSArray<NSString *> *userinfoEncryptionEncodingValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the JWS signing algorithms (@c alg values)
        supported by the OP for Request Objects, which are described in Section 6.1 of OpenID
        Connect Core 1.0. These algorithms are used both when the Request Object is passed by value
        (using the request parameter) and when it is passed by reference (using the @c request_uri
        parameter). Servers SHOULD support @c none and @c RS256.
    @remarks request_object_signing_alg_values_supported
    @seealso http://openid.net/specs/openid-connect-core-1_0.html
 */
@property(nonatomic, readonly, nullable)
    NSArray<NSString *> *requestObjectSigningAlgorithmValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the JWE encryption algorithms (@c alg values)
        supported by the OP for Request Objects. These algorithms are used both when the Request
        Object is passed by value and when it is passed by reference.
    @remarks request_object_encryption_alg_values_supported
 */
@property(nonatomic, readonly, nullable)
    NSArray<NSString *> *requestObjectEncryptionAlgorithmValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the JWE encryption algorithms (@c enc values)
        supported by the OP for Request Objects. These algorithms are used both when the Request
        Object is passed by value and when it is passed by reference.
    @remarks request_object_encryption_enc_values_supported
 */
@property(nonatomic, readonly, nullable)
    NSArray<NSString *> *requestObjectEncryptionEncodingValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of Client Authentication methods supported by this
        Token Endpoint. The options are @c client_secret_post, @c client_secret_basic,
        @c client_secret_jwt, and @c private_key_jwt, as described in Section 9 of OpenID Connect
        Core 1.0. Other authentication methods MAY be defined by extensions. If omitted, the default
        is @c client_secret_basic -- the HTTP Basic Authentication Scheme specified in Section 2.3.1
        of OAuth 2.0.
    @remarks token_endpoint_auth_methods_supported
    @seealso http://openid.net/specs/openid-connect-core-1_0.html
    @seealso http://tools.ietf.org/html/rfc6749#section-2.3.1
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *tokenEndpointAuthMethodsSupported;

/*! @brief OPTIONAL. JSON array containing a list of the JWS signing algorithms (@c alg values)
        supported by the Token Endpoint for the signature on the JWT used to authenticate the Client
        at the Token Endpoint for the @c private_key_jwt and @c client_secret_jwt authentication
        methods. Servers SHOULD support @c RS256. The value @c none MUST NOT be used.
    @remarks token_endpoint_auth_signing_alg_values_supported
    @seealso https://tools.ietf.org/html/rfc7519
 */
@property(nonatomic, readonly, nullable)
    NSArray<NSString *> *tokenEndpointAuthSigningAlgorithmValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the @c display parameter values that the OpenID
        Provider supports. These values are described in Section 3.1.2.1 of OpenID Connect Core 1.0.
    @remarks display_values_supported
    @seealso http://openid.net/specs/openid-connect-core-1_0.html
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *displayValuesSupported;

/*! @brief OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider
        supports. These Claim Types are described in Section 5.6 of OpenID Connect Core 1.0. Values
        defined by this specification are @c normal, @c aggregated, and @c distributed. If omitted,
        the implementation supports only @c normal Claims.
    @remarks claim_types_supported
    @seealso http://openid.net/specs/openid-connect-core-1_0.html
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *claimTypesSupported;

/*! @brief RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the
        OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons,
        this might not be an exhaustive list.
    @remarks claims_supported
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *claimsSupported;

/*! @brief OPTIONAL. URL of a page containing human-readable information that developers might want
        or need to know when using the OpenID Provider. In particular, if the OpenID Provider does
        not support Dynamic Client Registration, then information on how to register Clients needs
        to be provided in this documentation.
    @remarks service_documentation
 */
@property(nonatomic, readonly, nullable) NSURL *serviceDocumentation;

/*! @brief OPTIONAL. Languages and scripts supported for values in Claims being returned,
        represented as a JSON array of BCP47 language tag values. Not all languages and scripts are
        necessarily supported for all Claim values.
    @remarks claims_locales_supported
    @seealso http://tools.ietf.org/html/rfc5646
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *claimsLocalesSupported;

/*! @brief OPTIONAL. Languages and scripts supported for the user interface, represented as a JSON
        array of BCP47 language tag values.
    @remarks ui_locales_supported
    @seealso http://tools.ietf.org/html/rfc5646
 */
@property(nonatomic, readonly, nullable) NSArray<NSString *> *UILocalesSupported;

/*! @brief OPTIONAL. Boolean value specifying whether the OP supports use of the claims parameter,
        with @c true indicating support. If omitted, the default value is @c false.
    @remarks claims_parameter_supported
 */
@property(nonatomic, readonly) BOOL claimsParameterSupported;

/*! @brief OPTIONAL. Boolean value specifying whether the OP supports use of the request parameter,
        with @c true indicating support. If omitted, the default value is @c false.
    @remarks request_parameter_supported
 */
@property(nonatomic, readonly) BOOL requestParameterSupported;

/*! @brief OPTIONAL. Boolean value specifying whether the OP supports use of the @c request_uri
        parameter, with true indicating support. If omitted, the default value is @c true.
    @remarks request_uri_parameter_supported
 */
@property(nonatomic, readonly) BOOL requestURIParameterSupported;

/*! @brief OPTIONAL. Boolean value specifying whether the OP requires any @c request_uri values used
        to be pre-registered using the @c request_uris registration parameter. Pre-registration is
        REQUIRED when the value is @c true. If omitted, the default value is @c false.
    @remarks require_request_uri_registration
 */
@property(nonatomic, readonly) BOOL requireRequestURIRegistration;

/*! @brief OPTIONAL. URL that the OpenID Provider provides to the person registering the Client to
        read about the OP's requirements on how the Relying Party can use the data provided by the
        OP. The registration process SHOULD display this URL to the person registering the Client if
        it is given.
    @remarks op_policy_uri
 */
@property(nonatomic, readonly, nullable) NSURL *OPPolicyURI;

/*! @brief OPTIONAL. URL that the OpenID Provider provides to the person registering the Client to
        read about OpenID Provider's terms of service. The registration process SHOULD display this
        URL to the person registering the Client if it is given.
    @remarks op_tos_uri
 */
@property(nonatomic, readonly, nullable) NSURL *OPTosURI;

/*! @internal
    @brief Unavailable. Please use @c initWithDictionary:error:, @c initWithJSON:error, or the
        @c discoverServiceConfigurationForDiscoveryURL:callback: from @c OIDAuthorizationService.
 */
- (nonnull instancetype)init NS_UNAVAILABLE;

/*! @brief Decodes a OpenID Connect Discovery 1.0 JSON document.
    @param serviceDiscoveryJSON An OpenID Connect Service Discovery document.
    @param error If a required field is missing from the dictionary, an error with domain
        @c ::OIDGeneralErrorDomain and code @c ::OIDErrorCodeInvalidDiscoveryDocument will be
        returned.
 */
- (nullable instancetype)initWithJSON:(NSString *)serviceDiscoveryJSON
                                error:(NSError **_Nullable)error;

/*! @brief Decodes a OpenID Connect Discovery 1.0 JSON document.
    @param serviceDiscoveryJSONData An OpenID Connect Service Discovery document.
    @param error If a required field is missing from the dictionary, an error with domain
        @c ::OIDGeneralErrorDomain and code @c ::OIDErrorCodeInvalidDiscoveryDocument will be
        returned.
 */
- (nullable instancetype)initWithJSONData:(NSData *)serviceDiscoveryJSONData
                                    error:(NSError **_Nullable)error;

/*! @brief Designated initializer. The dictionary keys should match the keys defined in the OpenID
        Connect Discovery 1.0 standard for OpenID Provider Metadata.
    @param serviceDiscoveryDictionary A dictionary representing an OpenID Connect Service Discovery
        document.
    @param error If a required field is missing from the dictionary, an error with domain
        @c ::OIDGeneralErrorDomain and code @c ::OIDErrorCodeInvalidDiscoveryDocument will be
        returned.
 */
- (nullable instancetype)initWithDictionary:(NSDictionary *)serviceDiscoveryDictionary
                                      error:(NSError **_Nullable)error NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDServiceDiscovery.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDTokenRequest.h
===
/*! @file OIDTokenRequest.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

// This file only declares string constants useful for constructing a @c OIDTokenRequest, so it is
// imported here for convenience.
#import "OIDGrantTypes.h"

@class OIDAuthorizationResponse;
@class OIDServiceConfiguration;

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents a token request.
    @see https://tools.ietf.org/html/rfc6749#section-3.2
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
 */
@interface OIDTokenRequest : NSObject <NSCopying, NSSecureCoding>

/*! @brief The service's configuration.
    @remarks This configuration specifies how to connect to a particular OAuth provider.
        Configurations may be created manually, or via an OpenID Connect Discovery Document.
 */
@property(nonatomic, readonly) OIDServiceConfiguration *configuration;

/*! @brief The type of token being sent to the token endpoint, i.e. "authorization_code" for the
        authorization code exchange, or "refresh_token" for an access token refresh request.
    @remarks grant_type
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
    @see https://www.google.com/url?sa=D&q=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc6749%23section-6
 */
@property(nonatomic, readonly) NSString *grantType;

/*! @brief The authorization code received from the authorization server.
    @remarks code
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
 */
@property(nonatomic, readonly, nullable) NSString *authorizationCode;

/*! @brief The client's redirect URI.
    @remarks redirect_uri
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
 */
@property(nonatomic, readonly, nullable) NSURL *redirectURL;

/*! @brief The client identifier.
    @remarks client_id
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
 */
@property(nonatomic, readonly) NSString *clientID;

/*! @brief The client secret.
    @remarks client_secret
    @see https://tools.ietf.org/html/rfc6749#section-2.3.1
 */
@property(nonatomic, readonly, nullable) NSString *clientSecret;

/*! @brief The value of the scope parameter is expressed as a list of space-delimited,
        case-sensitive strings.
    @remarks scope
    @see https://tools.ietf.org/html/rfc6749#section-3.3
 */
@property(nonatomic, readonly, nullable) NSString *scope;

/*! @brief The refresh token, which can be used to obtain new access tokens using the same
        authorization grant.
    @remarks refresh_token
    @see https://tools.ietf.org/html/rfc6749#section-5.1
 */
@property(nonatomic, readonly, nullable) NSString *refreshToken;

/*! @brief The PKCE code verifier used to redeem the authorization code.
    @remarks code_verifier
    @see https://tools.ietf.org/html/rfc7636#section-4.3
 */
@property(nonatomic, readonly, nullable) NSString *codeVerifier;

/*! @brief The client's additional token request parameters.
 */
@property(nonatomic, readonly, nullable) NSDictionary<NSString *, NSString *> *additionalParameters;

/*! @brief The client's additional token request headers.
 */
@property(nonatomic, readonly, nullable) NSDictionary<NSString *, NSString *> *additionalHeaders;

/*! @internal
    @brief Unavailable. Please use
        initWithConfiguration:grantType:code:redirectURL:clientID:additionalParameters:additionalHeaders:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @param configuration The service's configuration.
    @param grantType the type of token being sent to the token endpoint, i.e. "authorization_code"
        for the authorization code exchange, or "refresh_token" for an access token refresh request.
        @see OIDGrantTypes.h
    @param code The authorization code received from the authorization server.
    @param redirectURL The client's redirect URI.
    @param clientID The client identifier.
    @param clientSecret The client secret.
    @param scopes An array of scopes to combine into a single scope string per the OAuth2 spec.
    @param refreshToken The refresh token.
    @param codeVerifier The PKCE code verifier.
    @param additionalParameters The client's additional token request parameters.
 */
- (instancetype)initWithConfiguration:(OIDServiceConfiguration *)configuration
               grantType:(NSString *)grantType
       authorizationCode:(nullable NSString *)code
             redirectURL:(nullable NSURL *)redirectURL
                clientID:(NSString *)clientID
            clientSecret:(nullable NSString *)clientSecret
                  scopes:(nullable NSArray<NSString *> *)scopes
            refreshToken:(nullable NSString *)refreshToken
            codeVerifier:(nullable NSString *)codeVerifier
    additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @param configuration The service's configuration.
    @param grantType the type of token being sent to the token endpoint, i.e. "authorization_code"
        for the authorization code exchange, or "refresh_token" for an access token refresh request.
        @see OIDGrantTypes.h
    @param code The authorization code received from the authorization server.
    @param redirectURL The client's redirect URI.
    @param clientID The client identifier.
    @param clientSecret The client secret.
    @param scope The value of the scope parameter is expressed as a list of space-delimited,
        case-sensitive strings.
    @param refreshToken The refresh token.
    @param codeVerifier The PKCE code verifier.
    @param additionalParameters The client's additional token request parameters.
 */
- (instancetype)initWithConfiguration:(OIDServiceConfiguration *)configuration
               grantType:(NSString *)grantType
       authorizationCode:(nullable NSString *)code
             redirectURL:(nullable NSURL *)redirectURL
                clientID:(NSString *)clientID
            clientSecret:(nullable NSString *)clientSecret
                   scope:(nullable NSString *)scope
            refreshToken:(nullable NSString *)refreshToken
            codeVerifier:(nullable NSString *)codeVerifier
    additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters;

/*! @param configuration The service's configuration.
    @param grantType the type of token being sent to the token endpoint, i.e. "authorization_code"
        for the authorization code exchange, or "refresh_token" for an access token refresh request.
        @see OIDGrantTypes.h
    @param code The authorization code received from the authorization server.
    @param redirectURL The client's redirect URI.
    @param clientID The client identifier.
    @param clientSecret The client secret.
    @param scopes An array of scopes to combine into a single scope string per the OAuth2 spec.
    @param refreshToken The refresh token.
    @param codeVerifier The PKCE code verifier.
    @param additionalParameters The client's additional token request parameters.
    @param additionalHeaders The client's additional token request headers.
 */
- (instancetype)initWithConfiguration:(OIDServiceConfiguration *)configuration
               grantType:(NSString *)grantType
       authorizationCode:(nullable NSString *)code
             redirectURL:(nullable NSURL *)redirectURL
                clientID:(NSString *)clientID
            clientSecret:(nullable NSString *)clientSecret
                  scopes:(nullable NSArray<NSString *> *)scopes
            refreshToken:(nullable NSString *)refreshToken
            codeVerifier:(nullable NSString *)codeVerifier
    additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters
       additionalHeaders:(nullable NSDictionary<NSString *, NSString *> *)additionalHeaders;

/*! @brief Designated initializer.
    @param configuration The service's configuration.
    @param grantType the type of token being sent to the token endpoint, i.e. "authorization_code"
        for the authorization code exchange, or "refresh_token" for an access token refresh request.
        @see OIDGrantTypes.h
    @param code The authorization code received from the authorization server.
    @param redirectURL The client's redirect URI.
    @param clientID The client identifier.
    @param clientSecret The client secret.
    @param scope The value of the scope parameter is expressed as a list of space-delimited,
        case-sensitive strings.
    @param refreshToken The refresh token.
    @param codeVerifier The PKCE code verifier.
    @param additionalParameters The client's additional token request parameters.
    @param additionalHeaders The client's additional token request headers.
 */
- (instancetype)initWithConfiguration:(OIDServiceConfiguration *)configuration
               grantType:(NSString *)grantType
       authorizationCode:(nullable NSString *)code
             redirectURL:(nullable NSURL *)redirectURL
                clientID:(NSString *)clientID
            clientSecret:(nullable NSString *)clientSecret
                   scope:(nullable NSString *)scope
            refreshToken:(nullable NSString *)refreshToken
            codeVerifier:(nullable NSString *)codeVerifier
    additionalParameters:(nullable NSDictionary<NSString *, NSString *> *)additionalParameters
       additionalHeaders:(nullable NSDictionary<NSString *, NSString *> *)additionalHeaders
    NS_DESIGNATED_INITIALIZER;

/*! @brief Designated initializer for NSSecureCoding.
    @param aDecoder Unarchiver object to decode
 */
- (instancetype)initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER;

/*! @brief Constructs an @c NSURLRequest representing the token request.
    @return An @c NSURLRequest representing the token request.
 */
- (NSURLRequest *)URLRequest;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDTokenRequest.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDTokenResponse.h
===
/*! @file OIDTokenResponse.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDTokenRequest;

NS_ASSUME_NONNULL_BEGIN

/*! @brief Represents the response to an token request.
    @see https://tools.ietf.org/html/rfc6749#section-3.2
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
 */
@interface OIDTokenResponse : NSObject <NSCopying, NSSecureCoding>

/*! @brief The request which was serviced.
 */
@property(nonatomic, readonly) OIDTokenRequest *request;

/*! @brief The access token generated by the authorization server.
    @remarks access_token
    @see https://tools.ietf.org/html/rfc6749#section-4.1.4
    @see https://tools.ietf.org/html/rfc6749#section-5.1
 */
@property(nonatomic, readonly, nullable) NSString *accessToken;

/*! @brief The approximate expiration date & time of the access token.
    @remarks expires_in
    @seealso OIDTokenResponse.accessToken
    @see https://tools.ietf.org/html/rfc6749#section-4.1.4
    @see https://tools.ietf.org/html/rfc6749#section-5.1
 */
@property(nonatomic, readonly, nullable) NSDate *accessTokenExpirationDate;

/*! @brief Typically "Bearer" when present. Otherwise, another token_type value that the Client has
        negotiated with the Authorization Server.
    @remarks token_type
    @see https://tools.ietf.org/html/rfc6749#section-4.1.4
    @see https://tools.ietf.org/html/rfc6749#section-5.1
 */
@property(nonatomic, readonly, nullable) NSString *tokenType;

/*! @brief ID Token value associated with the authenticated session. Always present for the
        authorization code grant exchange when OpenID Connect is used, optional for responses to
        access token refresh requests. Note that AppAuth does NOT verify the JWT signature. Users
        of AppAuth are encouraged to verifying the JWT signature using the validation library of
        their choosing.
    @remarks id_token
    @see http://openid.net/specs/openid-connect-core-1_0.html#TokenResponse
    @see http://openid.net/specs/openid-connect-core-1_0.html#RefreshTokenResponse
    @see http://openid.net/specs/openid-connect-core-1_0.html#IDToken
    @see https://jwt.io
    @discussion @c OIDIDToken can be used to parse the ID Token and extract the claims. As noted,
        this class does not verify the JWT signature.
*/
@property(nonatomic, readonly, nullable) NSString *idToken;

/*! @brief The refresh token, which can be used to obtain new access tokens using the same
        authorization grant
    @remarks refresh_token
    @see https://tools.ietf.org/html/rfc6749#section-5.1
 */
@property(nonatomic, readonly, nullable) NSString *refreshToken;

/*! @brief The scope of the access token. OPTIONAL, if identical to the scopes requested, otherwise,
        REQUIRED.
    @remarks scope
    @see https://tools.ietf.org/html/rfc6749#section-5.1
 */
@property(nonatomic, readonly, nullable) NSString *scope;

/*! @brief Additional parameters returned from the token server.
 */
@property(nonatomic, readonly, nullable)
    NSDictionary<NSString *, NSObject<NSCopying> *> *additionalParameters;

/*! @internal
    @brief Unavailable. Please use initWithParameters:.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Designated initializer.
    @param request The serviced request.
    @param parameters The decoded parameters returned from the Authorization Server.
    @remarks Known parameters are extracted from the @c parameters parameter and the normative
        properties are populated. Non-normative parameters are placed in the
        @c #additionalParameters dictionary.
 */
- (instancetype)initWithRequest:(OIDTokenRequest *)request
                     parameters:(NSDictionary<NSString *, NSObject<NSCopying> *> *)parameters
                     NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDTokenResponse.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDTokenUtilities.h
===
/*! @file OIDTokenUtilities.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/*! @brief Provides data encoding/decoding methods, random string generators, etc.
 */
@interface OIDTokenUtilities : NSObject

/*! @internal
    @brief Unavailable. This class should not be initialized.
 */
- (instancetype)init NS_UNAVAILABLE;

/*! @brief Base64url-nopadding encodes the given data.
    @param data The input data.
    @return The base64url encoded data as a NSString.
    @discussion Base64url-nopadding is used in several identity specs such as PKCE and
        OpenID Connect.
 */
+ (NSString *)encodeBase64urlNoPadding:(NSData *)data;

/*! @brief Generates a URL-safe string of random data.
    @param size The number of random bytes to encode. NB. the length of the output string will be
        greater than the number of random bytes, due to the URL-safe encoding.
    @return Random data encoded with base64url.
 */
+ (nullable NSString *)randomURLSafeStringWithSize:(NSUInteger)size;

/*! @brief SHA256 hashes the input string.
    @param inputString The input string.
    @return The SHA256 data.
 */
+ (NSData *)sha256:(NSString *)inputString;

/*! @brief Truncated intput string after first 6 characters followed by ellipses
    @param inputString The input string.
    @return Truncated string.
 */
+ (nullable NSString *)redact:(nullable NSString *)inputString;

/*! @brief Form url encode the input string by applying application/x-www-form-urlencoded algorithm
    @param inputString The input string.
    @return The encoded string.
 */
+ (NSString*)formUrlEncode:(NSString*)inputString;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDTokenUtilities.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDURLQueryComponent.h
===
/*! @file OIDURLQueryComponent.h
    @brief AppAuth iOS SDK
    @copyright
        Copyright 2015 Google Inc. All Rights Reserved.
    @copydetails
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDAuthorizationRequest;

NS_ASSUME_NONNULL_BEGIN

/*! @brief If set to YES, will force the iOS 7-only code for @c OIDURLQueryComponent to be used,
        even on non-iOS 7 devices and simulators. Useful for testing the iOS 7 code paths on the
        simulator. Defaults to NO.
 */
extern BOOL gOIDURLQueryComponentForceIOS7Handling;

/*! @brief A utility class for creating and parsing URL query components encoded with the
        application/x-www-form-urlencoded format.
    @description Supports application/x-www-form-urlencoded encoding and decoding, specifically
        '+' is replaced with space before percent decoding. For encoding, simply percent encodes
        space, as this is valid application/x-www-form-urlencoded.
    @see https://tools.ietf.org/html/rfc6749#section-4.1.2
    @see https://tools.ietf.org/html/rfc6749#section-4.1.3
    @see https://tools.ietf.org/html/rfc6749#appendix-B
    @see https://url.spec.whatwg.org/#urlencoded-parsing
 */
@interface OIDURLQueryComponent : NSObject

/*! @brief The parameter names in the query.
 */
@property(nonatomic, readonly) NSArray<NSString *> *parameters;

/*! @brief The parameters represented as a dictionary.
    @remarks All values are @c NSString except for parameters which contain multiple values, in
        which case the value is an @c NSArray<NSString *> *.
 */
@property(nonatomic, readonly) NSDictionary<NSString *, NSObject<NSCopying> *> *dictionaryValue;

/*! @brief Creates an @c OIDURLQueryComponent by parsing the query string in a URL.
    @param URL The URL from which to extract a query component.
 */
- (nullable instancetype)initWithURL:(NSURL *)URL;

/*! @brief The value (or values) for a named parameter in the query.
    @param parameter The parameter name. Case sensitive.
    @return The value (or values) for a named parameter in the query.
 */
- (NSArray<NSString *> *)valuesForParameter:(NSString *)parameter;

/*! @brief Adds a parameter value to the query.
    @param parameter The name of the parameter. Case sensitive.
    @param value The value to add.
 */
- (void)addParameter:(NSString *)parameter value:(NSString *)value;

/*! @brief Adds multiple parameters with associated values to the query.
    @param parameters The parameter name value pairs to add to the query.
 */
- (void)addParameters:(NSDictionary<NSString *, NSString *> *)parameters;

/*! @param URL The URL to add the query component to.
    @return The original URL with the query component replaced by the parameters from this query.
 */
- (NSURL *)URLByReplacingQueryInURL:(NSURL *)URL;

/*! @brief Builds an x-www-form-urlencoded string representing the parameters.
    @return The x-www-form-urlencoded string representing the parameters.
 */
- (NSString *)URLEncodedParameters;

/*! @brief A NSMutableCharacterSet containing allowed characters in URL parameter values (that is
        the "value" part of "?key=value"). This has less allowed characters than
        @c URLQueryAllowedCharacterSet, as the query component includes both the key & value.
 */
+ (NSMutableCharacterSet *)URLParamValueAllowedCharacters;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDURLQueryComponent.h ===

===
Path: iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDURLSessionProvider.h
===
/*! @file OIDURLSessionProvider.h
 @brief AppAuth iOS SDK
 @copyright
 Copyright 2015 Google Inc. All Rights Reserved.
 @copydetails
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/*! @brief A NSURLSession provider that allows clients to provide custom implementation
        for NSURLSession
 */
@interface OIDURLSessionProvider : NSObject

/*! @brief Obtains the current @c NSURLSession; using the +[NSURLSession sharedSession] if
        no custom implementation is provided.
    @return NSURLSession object to be used for making network requests.
 */
+ (NSURLSession *)session;

/*! @brief Allows library consumers to change the @c NSURLSession instance used to make
        network requests.
    @param session The @c NSURLSession instance that should be used for making network requests.
 */
+ (void)setSession:(NSURLSession *)session;
@end
NS_ASSUME_NONNULL_END

=== end iosApp/Pods/AppAuth/Sources/AppAuthCore/OIDURLSessionProvider.h ===

===
Path: iosApp/Pods/FirebaseAppCheckInterop/FirebaseAppCheck/Interop/Public/FirebaseAppCheckInterop/FIRAppCheckInterop.h
===
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@protocol FIRAppCheckTokenResultInterop;

NS_ASSUME_NONNULL_BEGIN

NS_SWIFT_NAME(AppCheckTokenHandlerInterop)
typedef void (^FIRAppCheckTokenHandlerInterop)(id<FIRAppCheckTokenResultInterop> tokenResult);

NS_SWIFT_NAME(AppCheckInterop) @protocol FIRAppCheckInterop

/// Retrieve a cached or generate a new FAA Token. If forcingRefresh == YES always generates a new
/// token and updates the cache.
- (void)getTokenForcingRefresh:(BOOL)forcingRefresh
                    completion:(FIRAppCheckTokenHandlerInterop)handler
    NS_SWIFT_NAME(getToken(forcingRefresh:completion:));

/// A notification with the specified name is sent to the default notification center
/// (`NotificationCenter.default`) each time a Firebase app check token is refreshed.
/// The user info dictionary contains `-[self notificationTokenKey]` and
/// `-[self notificationAppNameKey]` keys.
- (NSString *)tokenDidChangeNotificationName;

/// `userInfo` key for the FAC token in a notification for `tokenDidChangeNotificationName`.
- (NSString *)notificationTokenKey;
/// `userInfo` key for the `FirebaseApp.name` in a notification for
/// `tokenDidChangeNotificationName`.
- (NSString *)notificationAppNameKey;

// MARK: - Optional API

@optional

/// Retrieve a new limited-use Firebase App Check token
- (void)getLimitedUseTokenWithCompletion:(FIRAppCheckTokenHandlerInterop)handler
    NS_SWIFT_NAME(getLimitedUseToken(completion:));

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAppCheckInterop/FirebaseAppCheck/Interop/Public/FirebaseAppCheckInterop/FIRAppCheckInterop.h ===

===
Path: iosApp/Pods/FirebaseAppCheckInterop/FirebaseAppCheck/Interop/Public/FirebaseAppCheckInterop/FIRAppCheckProtocol.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAppCheckToken;

NS_ASSUME_NONNULL_BEGIN

NS_SWIFT_NAME(AppCheckProtocol)
@protocol FIRAppCheckProtocol <NSObject>

/// Requests Firebase app check token. This method should *only* be used if you need to authorize
/// requests to a non-Firebase backend. Requests to Firebase backend are authorized automatically if
/// configured.
///
/// If your non-Firebase backend exposes sensitive or expensive endpoints that have low traffic
/// volume, consider protecting it with [Replay
/// Protection](https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection).
/// In this case, use the ``limitedUseToken(completion:)`` instead to obtain a limited-use token.
/// @param forcingRefresh If `YES`,  a new Firebase app check token is requested and the token
/// cache is ignored. If `NO`, the cached token is used if it exists and has not expired yet. In
/// most cases, `NO` should be used. `YES` should only be used if the server explicitly returns an
/// error, indicating a revoked token.
/// @param handler The completion handler. Includes the app check token if the request succeeds,
/// or an error if the request fails.
- (void)tokenForcingRefresh:(BOOL)forcingRefresh
                 completion:
                     (void (^)(FIRAppCheckToken *_Nullable token, NSError *_Nullable error))handler
    NS_SWIFT_NAME(token(forcingRefresh:completion:));

/// Requests a limited-use Firebase App Check token. This method should be used only if you need to
/// authorize requests to a non-Firebase backend.
///
/// Returns limited-use tokens that are intended for use with your non-Firebase backend endpoints
/// that are protected with [Replay
/// Protection](https://firebase.google.com/docs/app-check/custom-resource-backend#replay-protection).
/// This method does not affect the token generation behavior of the
/// ``tokenForcingRefresh()`` method.
- (void)limitedUseTokenWithCompletion:(void (^)(FIRAppCheckToken *_Nullable token,
                                                NSError *_Nullable error))handler;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAppCheckInterop/FirebaseAppCheck/Interop/Public/FirebaseAppCheckInterop/FIRAppCheckProtocol.h ===

===
Path: iosApp/Pods/FirebaseAppCheckInterop/FirebaseAppCheck/Interop/Public/FirebaseAppCheckInterop/FIRAppCheckTokenResultInterop.h
===
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@protocol FIRAppCheckTokenResultInterop <NSObject>

/// App Check token in the case of success or a dummy token in the case of a failure.
/// In general, the value of the token should always be set to the request header.
@property(nonatomic, readonly) NSString *token;

/// A token fetch error in the case of a failure or `nil` in the case of success.
@property(nonatomic, readonly, nullable) NSError *error;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAppCheckInterop/FirebaseAppCheck/Interop/Public/FirebaseAppCheckInterop/FIRAppCheckTokenResultInterop.h ===

===
Path: iosApp/Pods/FirebaseAppCheckInterop/FirebaseAppCheck/Interop/Public/FirebaseAppCheckInterop/FirebaseAppCheckInterop.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FIRAppCheckInterop.h"
#import "FIRAppCheckProtocol.h"
#import "FIRAppCheckTokenResultInterop.h"

=== end iosApp/Pods/FirebaseAppCheckInterop/FirebaseAppCheck/Interop/Public/FirebaseAppCheckInterop/FirebaseAppCheckInterop.h ===

===
Path: iosApp/Pods/FirebaseAppCheckInterop/README.md
===
<p align="center">
  <a href="https://cocoapods.org/pods/Firebase">
    <img src="https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=CocoaPods"/>
  </a>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=Swift%20Package%20Index&color=red"/>
  </a>
  <a href="https://cocoapods.org/pods/Firebase">
    <img src="https://img.shields.io/github/license/Firebase/firebase-ios-sdk?style=flat"/>
  </a><br/>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dplatforms"/>
  </a>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dswift-versions"/>
  </a>
</p>

# Firebase Apple Open Source Development

This repository contains the source code for all Apple platform Firebase SDKs except FirebaseAnalytics.

Firebase is an app development platform with tools to help you build, grow, and
monetize your app. More information about Firebase can be found on the
[official Firebase website](https://firebase.google.com).

## Installation

See the subsections below for details about the different installation methods. Where
available, it's recommended to install any libraries with a `Swift` suffix to get the
best experience when writing your app in Swift.

1. [Standard pod install](#standard-pod-install)
2. [Swift Package Manager](#swift-package-manager)
3. [Installing from the GitHub repo](#installing-from-github)
4. [Experimental Carthage](#carthage-ios-only)

### Standard pod install

For instructions on the standard pod install, visit:
[https://firebase.google.com/docs/ios/setup](https://firebase.google.com/docs/ios/setup).

### Swift Package Manager

Instructions for [Swift Package Manager](https://swift.org/package-manager/) support can be
found in the [SwiftPackageManager.md](SwiftPackageManager.md) Markdown file.

### Installing from GitHub

These instructions can be used to access the Firebase repo at other branches,
tags, or commits.

#### Background

See [the Podfile Syntax Reference](https://guides.cocoapods.org/syntax/podfile.html#pod)
for instructions and options about overriding pod source locations.

#### Accessing Firebase Source Snapshots

All official releases are tagged in this repo and available via CocoaPods. To access a local
source snapshot or unreleased branch, use Podfile directives like the following:

To access FirebaseFirestore via a branch:
```ruby
pod 'FirebaseCore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'
pod 'FirebaseFirestore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'
```

To access FirebaseMessaging via a checked-out version of the firebase-ios-sdk repo:
```ruby
pod 'FirebaseCore', :path => '/path/to/firebase-ios-sdk'
pod 'FirebaseMessaging', :path => '/path/to/firebase-ios-sdk'
```

### Carthage (iOS only)

Instructions for the experimental Carthage distribution can be found at
[Carthage.md](Carthage.md).

### Using Firebase from a Framework or a library

For details on using Firebase from a Framework or a library, refer to [firebase_in_libraries.md](docs/firebase_in_libraries.md).

## Development

To develop Firebase software in this repository, ensure that you have at least
the following software:

* Xcode 15.2 (or later)

CocoaPods is still the canonical way to develop, but much of the repo now supports
development with Swift Package Manager.

### CocoaPods

Install the following:
* CocoaPods 1.12.0 (or later)
* [CocoaPods generate](https://github.com/square/cocoapods-generate)

For the pod that you want to develop:

```ruby
pod gen Firebase{name here}.podspec --local-sources=./ --auto-open --platforms=ios
```

Note: If the CocoaPods cache is out of date, you may need to run
`pod repo update` before the `pod gen` command.

Note: Set the `--platforms` option to `macos` or `tvos` to develop/test for
those platforms. Since 10.2, Xcode does not properly handle multi-platform
CocoaPods workspaces.

Firestore has a self-contained Xcode project. See
[Firestore/README](Firestore/README.md) Markdown file.

#### Development for Catalyst
* `pod gen {name here}.podspec --local-sources=./ --auto-open --platforms=ios`
* Check the Mac box in the App-iOS Build Settings
* Sign the App in the Settings Signing & Capabilities tab
* Click Pods in the Project Manager
* Add Signing to the iOS host app and unit test targets
* Select the Unit-unit scheme
* Run it to build and test

Alternatively, disable signing in each target:
* Go to Build Settings tab
* Click `+`
* Select `Add User-Defined Setting`
* Add `CODE_SIGNING_REQUIRED` setting with a value of `NO`

### Swift Package Manager
* To enable test schemes: `./scripts/setup_spm_tests.sh`
* `open Package.swift` or double click `Package.swift` in Finder.
* Xcode will open the project
  * Choose a scheme for a library to build or test suite to run
  * Choose a target platform by selecting the run destination along with the scheme

### Adding a New Firebase Pod

Refer to [AddNewPod](AddNewPod.md) Markdown file for details.

### Managing Headers and Imports

For information about managing headers and imports, see [HeadersImports](HeadersImports.md) Markdown file.

### Code Formatting

To ensure that the code is formatted consistently, run the script
[./scripts/check.sh](https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/check.sh)
before creating a pull request (PR).

GitHub Actions will verify that any code changes are done in a style-compliant
way. Install `clang-format` and `mint`:

```console
brew install clang-format@18
brew install mint
```

### Running Unit Tests

Select a scheme and press Command-u to build a component and run its unit tests.

### Running Sample Apps
To run the sample apps and integration tests, you'll need a valid
`GoogleService-Info.plist
` file. The Firebase Xcode project contains dummy plist
files without real values, but they can be replaced with real plist files. To get your own
`GoogleService-Info.plist` files:

1. Go to the [Firebase Console](https://console.firebase.google.com/)
2. Create a new Firebase project, if you don't already have one
3. For each sample app you want to test, create a new Firebase app with the sample app's bundle
identifier (e.g., `com.google.Database-Example`)
4. Download the resulting `GoogleService-Info.plist` and add it to the Xcode project.

### Coverage Report Generation

For coverage report generation instructions, see [scripts/code_coverage_report/README](scripts/code_coverage_report/README.md) Markdown file.

## Specific Component Instructions
See the sections below for any special instructions for those components.

### Firebase Auth

For specific Firebase Auth development, refer to the [Auth Sample README](FirebaseAuth/Tests/Sample/README.md) for instructions about
building and running the FirebaseAuth pod along with various samples and tests.

### Firebase Database

The Firebase Database Integration tests can be run against a locally running Database Emulator
or against a production instance.

To run against a local emulator instance, invoke `./scripts/run_database_emulator.sh start` before
running the integration test.

To run against a production instance, provide a valid `GoogleServices-Info.plist` and copy it to
`FirebaseDatabase/Tests/Resources/GoogleService-Info.plist`. Your Security Rule must be set to
[public](https://firebase.google.com/docs/database/security/quickstart) while your tests are
running.

### Firebase Dynamic Links

Firebase Dynamic Links is **deprecated** and should not be used in new projects. The service will shut down on August 25, 2025.

Please see our [Dynamic Links Deprecation FAQ documentation](https://firebase.google.com/support/dynamic-links-faq) for more guidance.

### Firebase Performance Monitoring

For specific Firebase Performance Monitoring development, see
[the Performance README](FirebasePerformance/README.md) for instructions about building the SDK
and [the Performance TestApp README](FirebasePerformance/Tests/TestApp/README.md) for instructions about
integrating Performance with the dev test App.

### Firebase Storage

To run the Storage Integration tests, follow the instructions in
[StorageIntegration.swift](FirebaseStorage/Tests/Integration/StorageIntegration.swift).

#### Push Notifications

Push notifications can only be delivered to specially provisioned App IDs in the developer portal.
In order to test receiving push notifications, you will need to:

1. Change the bundle identifier of the sample app to something you own in your Apple Developer
account and enable that App ID for push notifications.
2. You'll also need to
[upload your APNs Provider Authentication Key or certificate to the
Firebase Console](https://firebase.google.com/docs/cloud-messaging/ios/certs)
at **Project Settings > Cloud Messaging > [Your Firebase App]**.
3. Ensure your iOS device is added to your Apple Developer portal as a test device.

#### iOS Simulator

The iOS Simulator cannot register for remote notifications and will not receive push notifications.
To receive push notifications, follow the steps above and run the app on a physical device.

## Building with Firebase on Apple platforms

Firebase provides official beta support for macOS, Catalyst, and tvOS. visionOS and watchOS
are community supported. Thanks to community contributions for many of the multi-platform PRs.

At this time, most of Firebase's products are available across Apple platforms. There are still
a few gaps, especially on visionOS and watchOS. For details about the current support matrix, see
[this chart](https://firebase.google.com/docs/ios/learn-more#firebase_library_support_by_platform)
in Firebase's documentation.

### visionOS

Where supported, visionOS works as expected with the exception of Firestore via Swift Package
Manager where it is required to use the source distribution.

To enable the Firestore source distribution, quit Xcode and open the desired
project from the command line with the `FIREBASE_SOURCE_FIRESTORE` environment
variable: `open --env FIREBASE_SOURCE_FIRESTORE /path/to/project.xcodeproj`.
To go back to using the binary distribution of Firestore, quit Xcode and open
Xcode like normal, without the environment variable.

### watchOS
Thanks to contributions from the community, many of Firebase SDKs now compile, run unit tests, and
work on watchOS. See the [Independent Watch App Sample](Example/watchOSSample).

Keep in mind that watchOS is not officially supported by Firebase. While we can catch basic unit
test issues with GitHub Actions, there may be some changes where the SDK no longer works as expected
on watchOS. If you encounter this, please
[file an issue](https://github.com/firebase/firebase-ios-sdk/issues).

During app setup in the console, you may get to a step that mentions something like "Checking if the
app has communicated with our servers". This relies on Analytics and will not work on watchOS.
**It's safe to ignore the message and continue**, the rest of the SDKs will work as expected.

#### Additional Crashlytics Notes
* watchOS has limited support. Due to watchOS restrictions, mach exceptions and signal crashes are
not recorded. (Crashes in SwiftUI are generated as mach exceptions, so will not be recorded)

## Combine
Thanks to contributions from the community, _FirebaseCombineSwift_ contains support for Apple's Combine
framework. This module is currently under development and not yet supported for use in production
environments. For more details, please refer to the [docs](FirebaseCombineSwift/README.md).

## Roadmap

See [Roadmap](ROADMAP.md) for more about the Firebase Apple SDK Open Source
plans and directions.

## Contributing

See [Contributing](CONTRIBUTING.md) for more information on contributing to the Firebase
Apple SDK.

## License

The contents of this repository are licensed under the
[Apache License, version 2.0](http://www.apache.org/licenses/LICENSE-2.0).

Your use of Firebase is governed by the
[Terms of Service for Firebase Services](https://firebase.google.com/terms/).

=== end iosApp/Pods/FirebaseAppCheckInterop/README.md ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/CHANGELOG.md
===
# 10.21.0
- [fixed] Fixed multifactor resolver to use the correct Auth instance instead of
  always the default. (#12265)

# 10.19.0
- [changed] Deprecate `updateEmail(to email: String)` and `fetchSignInMethods(forEmail email: String)`. (#12081)

# 10.18.0
- [fixed] Fix a bug where anonymous account can't be linked with email password credential. (#11911)

# 10.16.0
- [added] Added custom auth domain support in recaptcha v2 authentication flows. (#7553)

# 10.14.0
- [added] Added reCAPTCHA verification support in email authentication flows. (#11231)

# 10.13.0
- [fixed] Fixed a compilation error regression introduced in 10.12.0 building iOS App Extensions. (#11537)

# 10.12.0
- [added] Added support to Firebase Auth to enroll and sign in a user with
  TOTP second factor. (#11261)

# 10.8.0
- [added] Added Firebase App Check support to Firebase Auth. (#11056)
- [added] Added Sign in with Apple token revocation support. (#9906)

# 10.7.0
- [added] Added an API for developers to pass the fullName from the Sign in with Apple credential to Firebase. (#10068)

# 10.6.0
- [fixed] Fixed a bug where user is created in a specific tenant although tenantID was not specified. (#10748)
- [fixed] Fixed a bug where the resolver exposed in MFA is not associated to the correct app. (#10690)

# 10.5.0
- [fixed] Use team player ID, game player ID and fetchItems for signature verification. (#10441)
- [fixed] Prevent keychain pop-up when accessing Auth keychain in a Mac
   app. Note that using Firebase Auth in a Mac app requires that the app
   is signed with a provisioning profile that has the Keychain Sharing
   capability enabled (see Firebase 9.6.0 release notes). (#10582)

# 10.4.0
- [fixed] Fix secure coding bugs in MFA. (#10632)
- [fixed] Added handling of error returned from a blocking cloud function. (#10628)

# 10.2.0
- [fixed] Fix a bug where the linking/reauth flows errors are not caught. (#10267)
- [fixed] Force to recaptcha verification flow for phone auth in simulators. (#10426)

# 10.1.0
- [fixed] Fix a bug where multi factor phone number returns `NULL`. (#10296)

# 9.5.0
- [fixed] Fix a bug where phone multi factor id is not correctly retrieved. (#10061)

# 9.2.0
- [fixed] Catch keychain errors instead of using the `isProtectedDataAvailable` API for handling prewarming issue. (#9869)

# 9.0.0
- [fixed] **Breaking change:** Fixed an ObjC-to-Swift API conversion error where `getStoredUser(forAccessGroup:)` returned a non-optional type. This change is breaking for Swift users only (#8599).
- [fixed] Fixed an iOS 15 keychain access issue related to prewarming. (#8695)

# 8.14.0
- [added] Started to collect the Firebase user agent for Firebase Auth. (#9066)

# 8.12.0
- [added] Added documentation note and error logging to `getStoredUser(forAccessGroup:)` regarding tvOS keychain sharing issues. (#8878)
- [fixed] Partial fix for expired ID token issue. (#6521)

# 8.11.0
- [changed] Added a `X-Firebase-GMPID` header to network requests. (#9046)
- [fixed] Added multi-tenancy support to generic OAuth providers. (#7990)
- [fixed] macOS Extension access to Shared Keychain by adding `kSecUseDataProtectionKeychain` recommended key. (#6876)

# 8.9.0
- [changed] Improved error logging. (#8704)
- [added] Added MFA support for email link sign-in. (#8705)

# 8.8.0
- [fixed] Fall back to reCAPTCHA for phone auth app verification if the push notification is not received before the timeout. (#8653)

# 8.6.0
- [fixed] Annotated platform-level availability using `API_UNAVAILABLE` instead of conditionally compiling certain methods with `#if` directives. (#8451)

# 8.5.0
- [fixed] Fixed an analyze issue introduced in Xcode 12.5. (#8411)

# 8.2.0
- [fixed] Fixed analyze issues introduced in Xcode 12.5. (#8210)
- [fixed] Fixed a bug in the link with email link, Game Center, and phone auth flows. (#8196)

# 8.0.0
- [fixed] Fixed a crash that occurred when assigning auth settings. (#7670)

# 7.8.0
- [fixed] Fixed auth state sharing during first app launch. (#7472)

# 7.6.0
- [fixed] Auth emulator now works across the local network. (#7350)
- [fixed] Fixed incorrect import for watchOS (#7425)

# 7.4.0
- [fixed] Check if the reverse client ID is configured as a custom URL scheme before setting it as the callback scheme. (#7211)
- [added] Add ability to sync auth state across devices. (#6924)
- [fixed] Add multi-tenancy support for email link sign-in. (#7246)

# 7.3.0
- [fixed] Catalyst browser issue with `verifyPhoneNumber` API. (#7049)

# 7.1.0
- [fixed] Fixed completion handler issue in `application(_:didReceiveRemoteNotification:fetchCompletionHandler:)` method. (#6863)

# 7.0.0
- [removed] Remove deprecated APIs `dataForKey`,`fetchProvidersForEmail:completion`, `signInAndRetrieveDataWithCredential:completion`, `reauthenticateAndRetrieveDataWithCredential:completion`, `linkAndRetrieveDataWithCredential:completion`. (#6607)
- [added] Add support for the auth emulator. (#6624)
- [changed] The global variables `FirebaseAuthVersionNum` and `FirebaseAuthVersionStr` are deleted.
  `FirebaseVersion()` or `FIRFirebaseVersion()` should be used instead.

# 6.9.1
- [fixed] Internal source documentation. (#6371)

# 6.9.0
- [added] Added support for multi-tenancy (#6142).
- [added] Added basic watchOS support. (#4621)
- [changed] Improved Xcode completion of public API completion handlers in Swift. (#6283)

# 6.8.0
- [fixed] Fix bug where multiple keychain entries would result in user persistence failure. (#5906)
- [changed] Added support for using GOOGLE_APP_ID in generic IDP and phone auth reCAPTCHA fallback flows. (#6121)

# 6.7.1
- [fixed] Fixed a multithreaded memory access issue on iOS. (#5979)

# 6.7.0
- [changed] Functionally neutral source reorganization for preliminary Swift Package Manager support. (#5856)

# 6.5.3
- [changed] Remove unused mfa request field "mfa_provider" (#5397)
- [fixed] Suppress deprecation warnings when targeting iOS versions up to iOS 13. (#5437)

# 6.5.2
- [fixed] Handle calls to `useUserAccessGroup` soon after configure. (#4175)

# 6.5.1
- [changed] File structure changes. No functional change.
- [changed] Code formatting changes.

# 6.5.0
- [feature] Added support of Multi-factor Authentication. (#4823)

# 6.4.1
- [fixed] Added support of UISceneDelegate for URL redirect. (#4380)
- [fixed] Fixed rawNonce in encoder. (#4337)

# 6.4.0
- [feature] Added support for Sign-in with Apple. (#4183)

# 6.3.1
- [fixed] Removed usage of a deprecated property on iOS 13. (#4066)

# 6.3.0
- [added] Added methods allowing developers to link and reauthenticate with federated providers. (#3971)

# 6.2.3
- [fixed] Make sure the first valid auth domain is retrieved. (#3493)
- [fixed] Add assertion for Facebook generic IDP flow. (#3208)
- [fixed] Build for Catalyst. (#3549)

# 6.2.2
- [fixed] Fixed an issue where unlinking an email auth provider raised an incorrect error stating the account was not linked to an email auth provider. (#3405)
- [changed] Renamed internal Keychain classes. (#3473)

# 6.2.1
- [added] Add new client error MISSING_CLIENT_IDENTIFIER. (#3341)

# 6.2.0
- [feature] Expose `secret` of OAuth credential in public header. (#3089)
- [fixed] Fix a keychain issue where API key is incorrectly set. (#3239)

# 6.1.2
- [fixed] Fix line limits and linter warnings in public documentation. (#3139)

# 6.1.1
- [fixed] Fix an issue where a user can't link with email provider by email link. (#3030)

# 6.1.0
- [added] Add support of web.app as an auth domain. (#2959)
- [fixed] Fix an issue where the return type of `getStoredUserForAccessGroup:error:` is nonnull. (#2879)

# 6.0.0
- [added] Add support of single sign on. (#2684)
- [deprecated] Deprecate `reauthenticateAndRetrieveDataWithCredential:completion:`, `signInAndRetrieveDataWithCredential:completion:`, `linkAndRetrieveDataWithCredential:completion:`, `fetchProvidersForEmail:completion:`. (#2723, #2756)
- [added] Returned oauth secret token in Generic IDP sign-in for Twitter. (#2663)
- [removed] Remove pendingToken from public API. (#2676)
- [changed] `GULAppDelegateSwizzler` is used for the app delegate swizzling. (#2591)

# 5.4.2
- [added] Support new error code ERROR_INVALID_PROVIDER_ID. (#2629)

# 5.4.1
- [deprecated] Deprecate Microsoft and Yahoo OAuth Provider ID (#2517)
- [fixed] Fix an issue where an exception was thrown when linking OAuth credentials. (#2521)
- [fixed] Fix an issue where a wrong error was thrown when handling error with
  FEDERATED_USER_ID_ALREADY_LINKED. (#2522)

# 5.4.0
- [added] Add support of Generic IDP (#2405).

# 5.3.0
- [changed] Use the new registerInternalLibrary API to register with FirebaseCore. (#2137)

# 5.2.0
- [added] Add support of Game Center sign in (#2127).

# 5.1.0
- [added] Add support of custom FDL domain link (#2121).

# 5.0.5
- [changed] Restore SafariServices framework dependency (#2002).

# 5.0.4
- [fixed] Fix analyzer issues (#1740).

# 5.0.3
- [added] Add `FIRAuthErrorCodeMalformedJWT`, which is raised on JWT token parsing.
  failures during auth operations (#1436).
- [changed] Migrate to use FirebaseAuthInterop interfaces to access FirebaseAuth (#1501).

# 5.0.2
- [fixed] Fix an issue where JWT date timestamps weren't parsed correctly. (#1319)
- [fixed] Fix an issue where anonymous accounts weren't correctly promoted to
  non-anonymous when linked with passwordless email auth accounts. (#1383)
- [fixed] Fix an exception from using an invalidated NSURLSession. (#1261)
- [fixed] Fix a data race issue caught by the sanitizer. (#1446)

# 5.0.1
- [fixed] Restore 4.x level of support for extensions (#1357).

# 5.0.0
- [added] Adds APIs for phone Auth testing to bypass the verification flow (#1192).
- [feature] Changes the callback block signature for sign in and create user methods
  to provide an AuthDataResult that includes the user and user info (#1123, #1186).
- [changed] Removes GoogleToolboxForMac dependency (#1175).
- [removed] Removes miscellaneous deprecated APIs (#1188, #1200).

# 4.6.1
- [fixed] Fixes crash which occurred when certain Firebase IDTokens were being parsed (#1076).

# 4.6.0
- [added] Adds `getIDTokenResultWithCompletion:` and `getIDTokenResultForcingRefresh:completion:` APIs which
  call back with an AuthTokenResult object. The Auth token result object contains the ID token JWT string and other properties associated with the token including the decoded available payload claims (#1004).
- [added] Adds the `updateCurrentUser:completion:` API which sets the currentUser on the calling Auth instance to the provided user object (#1018).
- [added] Adds client-side validation to prevent setting `handleCodeInApp` to false when performing
  email-link authentication. If `handleCodeInApp` is set to false an invalid argument exception
  is thrown (#931).
- [added] Adds support for passing the deep link (which is embedded in the sign-in link sent via email) to the
  `signInWithEmail:link:completion:` and `isSignInWithEmailLink:` methods during an
  email/link sign-in flow (#1023).

# 4.5.0
- [added] Adds new API which provides a way to determine the sign-in methods associated with an
  email address.
- [added] Adds new API which allows authentication using only an email link (Passwordless Authentication
  with email link).

# 4.4.4
- [fixed] Addresses CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF warnings that surface in newer versions of
  Xcode and CocoaPods.
- [fixed] Improves FIRUser documentation with clear message explaining when Firebase Auth attempts to validate
  users and what happens when an invalidated user is detected (#694) .

# 4.4.3
- [added] Adds an explicit dependency on CoreGraphics from Firebase Auth.

# 4.4.2
- [fixed] Fixes bug where the FIRAuthResult object returned following a Phone Number authentication
  always contained a nil FIRAdditionalUserInfo object. Now the FIRAdditionalUserInfo object is
  never nil and its newUser field is populated correctly.

# 4.4.0
- [fixed] Adds new APIs which return an AuthDataResult object after successfully creating an
  Email/Password user, signing in anonymously, signing in with Email/Password and signing
  in with Custom Token. The AuthDataResult object contains the new user and additional
  information pertaining to the new user.

# 4.3.2
- [fixed] Improves error handling for the phone number sign-in reCAPTCHA flow.
- [fixed] Improves error handling for phone number linking flow.
- [fixed] Fixes issue where after linking an anonymous user to a phone number the user remained
  anonymous.

# 4.3.1
- [changed] Internal clean up.

# 4.3.0
- [added] Provides account creation and last sign-in dates as metadata to the user
  object.
- [added] Returns more descriptive errors for some error cases of the phone number
  sign-in reCAPTCHA flow.
- [fixed] Fixes an issue that invalid users were not automatically signed out earlier.
- [fixed] Fixes an issue that ID token listeners were not fired in some cases.

# 4.2.1
- [fixed] Fixes a threading issue in phone number auth that completion block was not
  executed on the main thread in some error cases.

# 4.2.0
- [added] Adds new phone number verification API which makes use of an intelligent reCAPTCHA to verify the application.

# 4.1.1
- [changed] Improves some method documentation in headers.

# 4.1.0
- [added] Allows the app to handle continue URL natively, e.g., from password reset
  email.
- [added] Allows the app to set language code, e.g., for sending password reset email.
- [fixed] Fixes an issue that user's phone number did not persist on client.
- [fixed] Fixes an issue that recover email action code type was reported as unknown.
- [feature] Improves app start-up time by moving initialization off from the main
  thread.
- [fixed] Better reports missing email error when creating a new password user.
- [fixed] Changes console message logging levels to be more consistent with other
  Firebase products on the iOS platform.

# 4.0.0
- [added] Adds Phone Number Authentication.
- [added] Adds support for generic OAuth2 identity providers.
- [added] Adds methods that return additional user data from identity providers if
  available when authenticating users.
- [added] Improves session management by automatically refreshing tokens if possible
  and signing out users if the session is detected invalidated, for example,
  after the user changed password or deleted account from another device.
- [fixed] Fixes an issue that reauthentication creates new user account if the user
  credential is valid but does not match the currently signed in user.
- [fixed] Fixes an issue that the "password" provider is not immediately listed on the
  client side after adding a password to an account.
- [changed] Changes factory methods to return non-null FIRAuth instances or raises an
  exception, instead of returning nullable instances.
- [changed] Changes auth state change listener to only be triggered when the user changes.
- [added] Adds a new listener which is triggered whenever the ID token is changed.
- [changed] Switches ERROR_EMAIL_ALREADY_IN_USE to
  ERROR_ACCOUNT_EXISTS_WITH_DIFFERENT_CREDENTIAL when the email used in the
  signInWithCredential: call is already in use by another account.
- [deprecated] Deprecates FIREmailPasswordAuthProvider in favor of FIREmailAuthProvider.
- [deprecated] Deprecates getTokenWithCompletion in favor of getIDTokenWithCompletion on
  FIRUser.
- [fixed] Changes Swift API names to better align with Swift convention.

# 3.1.1
- [added] Allows handling of additional errors when sending OOB action emails. The
  server can respond with the following new error messages:
  INVALID_MESSAGE_PAYLOAD,INVALID_SENDER and INVALID_RECIPIENT_EMAIL.
- [fixed] Removes incorrect reference to FIRAuthErrorCodeCredentialTooOld in FIRUser.h.
- [added] Provides additional error information from server if available.

# 3.1.0
- [added] Adds FIRAuth methods that enable the app to follow up with user actions
  delivered by email, such as verifying email address or reset password.
- [fixed] No longer applies the keychain workaround introduced in v3.0.5 on iOS 10.2
  simulator or above since the issue has been fixed.
- [fixed] Fixes nullability compilation warnings when used in Swift.
- [fixed] Better reports missing password error.

# 3.0.6
- [changed] Switches to depend on open sourced GoogleToolboxForMac and GTMSessionFetcher.
- [fixed] Improves logging of keychain error when initializing.

# 3.0.5
- [fixed] Works around a keychain issue in iOS 10 simulator.
- [fixed] Reports the correct error for invalid email when signing in with email and
  password.

# 3.0.4
- [fixed] Fixes a race condition bug that could crash the app with an exception from
  NSURLSession on iOS 9.

# 3.0.3
- [added] Adds documentation for all possible errors returned by each method.
- [fixed] Improves error handling and messages for a variety of error conditions.
- [fixed] Whether or not an user is considered anonymous is now consistent with other
  platforms.
- [changed] A saved signed in user is now siloed between different Firebase projects
  within the same app.

# 3.0.2
- Initial public release.

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/CHANGELOG.md ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Interop/FIRAuthInterop.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef FIRAuthInterop_h
#define FIRAuthInterop_h

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRTokenCallback
 @brief The type of block which gets called when a token is ready.
 */
typedef void (^FIRTokenCallback)(NSString *_Nullable_result token, NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/// Common methods for Auth interoperability.
NS_SWIFT_NAME(AuthInterop)
@protocol FIRAuthInterop

/// Retrieves the Firebase authentication token, possibly refreshing it if it has expired.
- (void)getTokenForcingRefresh:(BOOL)forceRefresh
                  withCallback:
                      (void (^)(NSString *_Nullable_result token, NSError *_Nullable error))callback
    NS_SWIFT_NAME(getToken(forcingRefresh:completion:));

/// Get the current Auth user's UID. Returns nil if there is no user signed in.
- (nullable NSString *)getUserID;

@end

NS_ASSUME_NONNULL_END

#endif /* FIRAuthInterop_h */

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Interop/FIRAuthInterop.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/README.md
===
# Firebase Auth for iOS

Firebase Auth enables apps to easily support multiple authentication options
for their end users.

Please visit [our developer site](https://firebase.google.com/docs/auth/) for
integration instructions, documentation, support information, and terms of
service.

# Firebase Auth Development

Example/Auth contains a set of samples and tests that integrate with
FirebaseAuth.

The unit tests run without any additional configuration along with the rest of
Firebase. See [Tests/Sample/README.md](Tests/Sample/README.md) for
information about setting up, running, and testing the samples.

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/README.md ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthDataResult_Internal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthDataResult.h"

@class FIROAuthCredential;

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthDataResult () <NSSecureCoding>

/** @fn initWithUser:additionalUserInfo:
    @brief Designated initializer.
    @param user The signed in user reference.
    @param additionalUserInfo The additional user info if available.
 */
- (nullable instancetype)initWithUser:(FIRUser *)user
                   additionalUserInfo:(nullable FIRAdditionalUserInfo *)additionalUserInfo;

/** @fn initWithUser:additionalUserInfo:
    @brief Designated initializer.
    @param user The signed in user reference.
    @param additionalUserInfo The additional user info if available.
    @param credential The updated OAuth credential if available.
 */
- (nullable instancetype)initWithUser:(FIRUser *)user
                   additionalUserInfo:(nullable FIRAdditionalUserInfo *)additionalUserInfo
                           credential:(nullable FIROAuthCredential *)credential
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthDataResult_Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthDispatcher.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRAuthDispatcherImplBlock
    @brief The type of block which can be set as the implementation for @c
        dispatchAfterDelay:queue:callback: .

    @param delay The delay in seconds after which the task will be scheduled to execute.
    @param queue The dispatch queue on which the task will be submitted.
    @param task The task (block) to be scheduled for future execution.
 */
typedef void (^FIRAuthDispatcherImplBlock)(NSTimeInterval delay,
                                           dispatch_queue_t queue,
                                           void (^task)(void));

/** @class FIRAuthDispatchAfter
    @brief A utility class used to facilitate scheduling tasks to be executed in the future.
 */
@interface FIRAuthDispatcher : NSObject

/** @property dispatchAfterImplementation
    @brief Allows custom implementation of dispatchAfterDelay:queue:callback:.
    @remarks Set to nil to restore default implementation.
 */
@property(nonatomic, nullable, copy) FIRAuthDispatcherImplBlock dispatchAfterImplementation;

/** @fn dispatchAfterDelay:queue:callback:
    @brief Schedules task in the future after a specified delay.

    @param delay The delay in seconds after which the task will be scheduled to execute.
    @param queue The dispatch queue on which the task will be submitted.
    @param task The task (block) to be scheduled for future execution.
 */
- (void)dispatchAfterDelay:(NSTimeInterval)delay
                     queue:(dispatch_queue_t)queue
                      task:(void (^)(void))task;

/** @fn sharedInstance
    @brief Gets the shared instance of this class.
    @return The shared instance of this clss
 */
+ (instancetype)sharedInstance;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthDispatcher.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthGlobalWorkQueue.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @fn FIRAuthGlobalWorkQueue
    @brief Retrieves the global serial work queue for Firebase Auth.
    @return The global serial dispatch queue.
    @remarks To ensure thread safety, all auth code must be executed in either this global work
        queue, or a serial queue that has its target queue set to this work queue. All public method
        implementations that may involve contested code shall dispatch to this work queue as the
        first thing they do.
 */
extern dispatch_queue_t FIRAuthGlobalWorkQueue(void);

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthGlobalWorkQueue.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthOperationType.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
    @brief Indicates the type of operation performed for RPCs that support the operation
        parameter.
 */
typedef NS_ENUM(NSInteger, FIRAuthOperationType) {
  /** Indicates that the operation type is uspecified.
   */
  FIRAuthOperationTypeUnspecified = 0,

  /** Indicates that the operation type is sign in or sign up.
   */
  FIRAuthOperationTypeSignUpOrSignIn = 1,

  /** Indicates that the operation type is reauthentication.
   */
  FIRAuthOperationTypeReauth = 2,

  /** Indicates that the operation type is update.
   */
  FIRAuthOperationTypeUpdate = 3,

  /** Indicates that the operation type is link.
   */
  FIRAuthOperationTypeLink = 4,
};

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthOperationType.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthSerialTaskQueue.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRAuthSerialTaskCompletionBlock
    @brief The type of method a @c FIRAuthSerialTask must call when it is complete.
 */
typedef void (^FIRAuthSerialTaskCompletionBlock)(void);

/** @typedef FIRAuthSerialTask
    @brief Represents a unit of work submitted to a task queue.
    @param complete The task MUST call the complete method when done.
 */
typedef void (^FIRAuthSerialTask)(FIRAuthSerialTaskCompletionBlock complete);

/** @class FIRAuthSerialTaskQueue
    @brief An easy to use serial task queue which supports a callback-based completion notification
        system for easy asyncronous call chaining.
 */
@interface FIRAuthSerialTaskQueue : NSObject

/** @fn enqueueTask:
    @brief Enqueues a task for serial execution in the queue.
    @remarks The task MUST call the complete method when done. This method is thread-safe.
        The task block won't be executed concurrently with any other blocks in other task queues or
        the global work queue as returned by @c FIRAuthGlobalWorkQueue , but an uncompleted task
        (e.g. task block finished executation before complete method is called at a later time)
        does not affect other task queues or the global work queue.
 */
- (void)enqueueTask:(FIRAuthSerialTask)task;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthSerialTaskQueue.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthTokenResult_Internal.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthTokenResult.h"

NS_ASSUME_NONNULL_BEGIN

/** @extension FIRAuthAPNSTokenResult
    @brief An internal class used to expose internal methods of FIRAuthAPNSTokenResult.
 */
@interface FIRAuthTokenResult () <NSSecureCoding>

/** @fn tokenResultWithToken:
    @brief Parse a token string to a structured token.
    @param token The token string to parse.
    @return A structured token result.
*/
+ (nullable FIRAuthTokenResult *)tokenResultWithToken:(NSString *)token;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuthTokenResult_Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuth_Internal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Interop/FIRAuthInterop.h"
#import "FirebaseAuth/Sources/Backend/FIRAuthBackend.h"
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuth.h"
#import "FirebaseCore/Extension/FIRLogger.h"

@class FIRAuthRequestConfiguration;
@class FIRAuthURLPresenter;

#if TARGET_OS_IOS
@class FIRAuthAPNSTokenManager;
@class FIRAuthAppCredentialManager;
@class FIRAuthNotificationManager;
#endif

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuth () <FIRAuthInterop>

/** @property requestConfiguration
    @brief The configuration object comprising of paramters needed to make a request to Firebase
        Auth's backend.
 */
@property(nonatomic, copy, readonly) FIRAuthRequestConfiguration *requestConfiguration;

#if TARGET_OS_IOS

/** @property tokenManager
    @brief The manager for APNs tokens used by phone number auth.
 */
@property(nonatomic, strong, readonly) FIRAuthAPNSTokenManager *tokenManager;

/** @property appCredentailManager
    @brief The manager for app credentials used by phone number auth.
 */
@property(nonatomic, strong, readonly) FIRAuthAppCredentialManager *appCredentialManager;

/** @property notificationManager
    @brief The manager for remote notifications used by phone number auth.
 */
@property(nonatomic, strong, readonly) FIRAuthNotificationManager *notificationManager;

#endif  // TARGET_OS_IOS

/** @property authURLPresenter
    @brief An object that takes care of presenting URLs via the auth instance.
 */
@property(nonatomic, strong, readonly) FIRAuthURLPresenter *authURLPresenter;

/** @fn initWithAPIKey:appName:
    @brief Designated initializer.
    @param APIKey The Google Developers Console API key for making requests from your app.
    @param appName The name property of the previously created @c FIRApp instance.
    @param appID The app ID of the Firebase application.
 */
- (nullable instancetype)initWithAPIKey:(NSString *)APIKey
                                appName:(NSString *)appName
                                  appID:(NSString *)appID;

/** @fn getUserID
    @brief Gets the identifier of the current user, if any.
    @return The identifier of the current user, or nil if there is no current user.
 */
- (nullable NSString *)getUserID;

/** @fn updateKeychainWithUser:error:
    @brief Updates the keychain for the given user.
    @param user The user to be updated.
    @param error The error caused the method to fail if the method returns NO.
    @return Whether updating keychain has succeeded or not.
    @remarks Called by @c FIRUser when user info or token changes occur.
 */
- (BOOL)updateKeychainWithUser:(FIRUser *)user error:(NSError *_Nullable *_Nullable)error;

/** @fn internalSignInWithCredential:callback:
    @brief Convenience method for @c internalSignInAndRetrieveDataWithCredential:callback:
        This method doesn't return additional identity provider data.
*/
- (void)internalSignInWithCredential:(FIRAuthCredential *)credential
                            callback:(FIRAuthResultCallback)callback;

/** @fn internalSignInAndRetrieveDataWithCredential:callback:
    @brief Asynchronously signs in Firebase with the given 3rd party credentials (e.g. a Facebook
        login Access Token, a Google ID Token/Access Token pair, etc.) and returns additional
        identity provider data.
    @param credential The credential supplied by the IdP.
    @param isReauthentication Indicates whether or not the current invocation originated from an
        attempt to reauthenticate.
    @param callback A block which is invoked when the sign in finishes (or is cancelled.) Invoked
        asynchronously on the auth global work queue in the future.
    @remarks This is the internal counterpart of this method, which uses a callback that does not
        update the current user.
 */
- (void)internalSignInAndRetrieveDataWithCredential:(FIRAuthCredential *)credential
                                 isReauthentication:(BOOL)isReauthentication
                                           callback:(nullable FIRAuthDataResultCallback)callback;

/** @fn signOutByForceWithUserID:error:
    @brief Signs out the current user.
    @param userID The ID of the user to force sign out.
    @param error An optional out parameter for error results.
    @return @YES when the sign out request was successful. @NO otherwise.
 */
- (BOOL)signOutByForceWithUserID:(NSString *)userID error:(NSError *_Nullable *_Nullable)error;

/** @fn completeSignInWithTokenService:callback:
    @brief Completes a sign-in flow once we have access and refresh tokens for the user.
    @param accessToken The STS access token.
    @param accessTokenExpirationDate The approximate expiration date of the access token.
    @param refreshToken The STS refresh token.
    @param anonymous Whether or not the user is anonymous.
    @param callback Called when the user has been signed in or when an error occurred. Invoked
        asynchronously on the global auth work queue in the future.
*/
- (void)completeSignInWithAccessToken:(nullable NSString *)accessToken
            accessTokenExpirationDate:(nullable NSDate *)accessTokenExpirationDate
                         refreshToken:(nullable NSString *)refreshToken
                            anonymous:(BOOL)anonymous
                             callback:(FIRAuthResultCallback)callback;

/** @fn signInFlowAuthResultCallbackByDecoratingCallback:
    @brief Creates a FIRAuthResultCallback block which wraps another FIRAuthResultCallback; trying
        to update the current user before forwarding it's invocations along to a subject block
    @param callback Called when the user has been updated or when an error has occurred. Invoked
        asynchronously on the main thread in the future.
    @return Returns a block that updates the current user.
    @remarks Typically invoked as part of the complete sign-in flow. For any other uses please
        consider alternative ways of updating the current user.
*/
- (FIRAuthDataResultCallback)signInFlowAuthDataResultCallbackByDecoratingCallback:
    (nullable FIRAuthDataResultCallback)callback;

@end

/// Logger Service String

extern FIRLoggerService kFIRLoggerAuth;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Auth/FIRAuth_Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Email/FIREmailPasswordAuthCredential.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/AuthProvider/FIRAuthCredential_Internal.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIREmailPasswordAuthCredential
    @brief Internal implementation of FIRAuthCredential for Email/Password credentials.
 */
@interface FIREmailPasswordAuthCredential : FIRAuthCredential <NSSecureCoding>

/** @property email
    @brief The user's email address.
 */
@property(nonatomic, readonly) NSString *email;

/** @property password
    @brief The user's password.
 */
@property(nonatomic, readonly) NSString *password;

/** @property link
    @brief The email sign-in link.
 */
@property(nonatomic, readonly) NSString *link;

/** @fn initWithEmail:password:
    @brief Designated initializer.
    @param email The user's email address.
    @param password The user's password.
 */
- (nullable instancetype)initWithEmail:(NSString *)email
                              password:(NSString *)password NS_DESIGNATED_INITIALIZER;

/** @fn initWithEmail:link:
    @brief Designated initializer.
    @param email The user's email address.
    @param link The email sign-in link.
 */
- (nullable instancetype)initWithEmail:(NSString *)email
                                  link:(NSString *)link NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Email/FIREmailPasswordAuthCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/FIRAuthCredential_Internal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthCredential.h"

@class FIRVerifyAssertionRequest;

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthCredential ()

/** @fn initWithProvider:
    @brief Designated initializer.
    @remarks This is the designated initializer for internal/friend subclasses.
    @param provider The provider name.
 */
- (nullable instancetype)initWithProvider:(NSString *)provider NS_DESIGNATED_INITIALIZER;

/** @fn prepareVerifyAssertionRequest:
    @brief Called immediately before a request to the verifyAssertion endpoint is made. Implementers
        should update the passed request instance with their credentials.
    @param request The request to be updated with credentials.
 */
- (void)prepareVerifyAssertionRequest:(FIRVerifyAssertionRequest *)request;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/FIRAuthCredential_Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Facebook/FIRFacebookAuthCredential.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/AuthProvider/FIRAuthCredential_Internal.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRFacebookAuthCredential
    @brief Internal implementation of FIRAuthCredential for the Facebook IdP.
 */
@interface FIRFacebookAuthCredential : FIRAuthCredential <NSSecureCoding>

/** @fn initWithAccessToken:
    @brief Designated initializer.
    @param accessToken The Access Token obtained from Facebook.
 */
- (nullable instancetype)initWithAccessToken:(NSString *)accessToken NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Facebook/FIRFacebookAuthCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/GameCenter/FIRGameCenterAuthCredential.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthCredential.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRGameCenterAuthCredential
    @brief Internal implementation of FIRAuthCredential for Game Center credentials.
 */
@interface FIRGameCenterAuthCredential : FIRAuthCredential <NSSecureCoding>

/** @property playerID
    @brief The ID of the Game Center local player.
 */
@property(nonatomic, readonly) NSString *playerID;

/** @property teamPlayerID
    @brief The team player ID of the Game Center local player.
 */
@property(nonatomic, readonly) NSString *teamPlayerID;

/** @property gamePlayerID
    @brief The game player ID of the Game Center local player.
 */
@property(nonatomic, readonly) NSString *gamePlayerID;

/** @property publicKeyURL
    @brief The URL for the public encryption key.
 */
@property(nonatomic, readonly) NSURL *publicKeyURL;

/** @property signature
    @brief The verification signature data generated.
 */
@property(nonatomic, readonly) NSData *signature;

/** @property salt
    @brief A random string used to compute the hash and keep it randomized.
 */
@property(nonatomic, readonly) NSData *salt;

/** @property timestamp
    @brief The date and time that the signature was created.
 */
@property(nonatomic, readonly) uint64_t timestamp;

/** @property displayName
    @brief The display name of the local Game Center player.
 */
@property(nonatomic, readonly) NSString *displayName;

/** @fn initWithPlayerID:publicKeyURL:signature:salt:timestamp:displayName:
    @brief Designated initializer.
    @param publicKeyURL The URL for the public encryption key.
    @param signature The verification signature generated.
    @param salt A random string used to compute the hash and keep it randomized.
    @param timestamp The date and time that the signature was created.
    @param displayName The display name of the Game Center player.
 */
- (nullable instancetype)initWithPlayerID:(NSString *)playerID
                             teamPlayerID:(nullable NSString *)teamPlayerID
                             gamePlayerID:(nullable NSString *)gamePlayerID
                             publicKeyURL:(NSURL *)publicKeyURL
                                signature:(NSData *)signature
                                     salt:(NSData *)salt
                                timestamp:(uint64_t)timestamp
                              displayName:(NSString *)displayName NS_DESIGNATED_INITIALIZER;

/** @fn initWithProvider:
    @brief Initializer with a provider name.
    @param provider The provider name.
 */
- (nullable instancetype)initWithProvider:(NSString *)provider NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/GameCenter/FIRGameCenterAuthCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/GitHub/FIRGitHubAuthCredential.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/AuthProvider/FIRAuthCredential_Internal.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRGitHubAuthCredential
    @brief Internal implementation of FIRAuthCredential for GitHub credentials.
 */
@interface FIRGitHubAuthCredential : FIRAuthCredential <NSSecureCoding>

/** @property token
    @brief The GitHub OAuth access token.
 */
@property(nonatomic, readonly) NSString *token;

/** @fn initWithToken:
    @brief Designated initializer.
    @param token The GitHub OAuth access token.
 */
- (nullable instancetype)initWithToken:(NSString *)token NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/GitHub/FIRGitHubAuthCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Google/FIRGoogleAuthCredential.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/AuthProvider/FIRAuthCredential_Internal.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRGoogleAuthCredential
    @brief Internal implementation of FIRAuthCredential for the Google IdP.
 */
@interface FIRGoogleAuthCredential : FIRAuthCredential <NSSecureCoding>

/** @fn initWithIDToken:accessToken:
    @brief Designated initializer.
    @param IDToken The ID Token obtained from Google.
    @param accessToken The Access Token obtained from Google.
 */
- (nullable instancetype)initWithIDToken:(NSString *)IDToken
                             accessToken:(NSString *)accessToken NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Google/FIRGoogleAuthCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/OAuth/FIROAuthCredential_Internal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIROAuthCredential.h"

@class FIRVerifyAssertionResponse;

NS_ASSUME_NONNULL_BEGIN

/** @extension FIROAuthCredential
    @brief Internal implementation of FIRAuthCredential for generic credentials.
 */
@interface FIROAuthCredential ()

/** @property OAuthResponseURLString
    @brief A string representation of the response URL corresponding to this OAuthCredential.
 */
@property(nonatomic, readonly, nullable) NSString *OAuthResponseURLString;

/** @property sessionID
    @brief The session ID used when completing the headful-lite flow.
 */
@property(nonatomic, readonly, nullable) NSString *sessionID;

/** @property pendingToken
    @brief The pending token used when completing the headful-lite flow.
 */
@property(nonatomic, readonly, nullable) NSString *pendingToken;

/** @property fullName
    @brief The full name of the user associated with this OAuthCredential.
 */
@property(nonatomic, readonly, nullable) NSPersonNameComponents *fullName;

/** @fn initWithProviderId:IDToken:rawNonce:accessToken:secret:fullName:pendingToken
    @brief Designated initializer.
    @param providerID The provider ID associated with the credential being created.
    @param IDToken The ID Token associated with the credential being created.
    @param rawNonce The raw nonce associated with the Auth credential being created.
    @param accessToken The access token associated with the credential being created.
    @param secret The secret associated with the credential being created.
    @param fullName The full name associated with the credential being created.
    @param pendingToken The pending token associated with the credential being created.
 */
- (instancetype)initWithProviderID:(NSString *)providerID
                           IDToken:(nullable NSString *)IDToken
                          rawNonce:(nullable NSString *)rawNonce
                       accessToken:(nullable NSString *)accessToken
                            secret:(nullable NSString *)secret
                          fullName:(nullable NSPersonNameComponents *)fullName
                      pendingToken:(nullable NSString *)pendingToken NS_DESIGNATED_INITIALIZER;

/** @fn initWithProviderId:sessionID:OAuthResponseURLString:
    @brief Intitializer which takes a sessionID and an OAuthResponseURLString.
    @param providerID The provider ID associated with the credential being created.
    @param sessionID The session ID used when completing the headful-lite flow.
    @param OAuthResponseURLString The error that occurred if any.
 */
- (instancetype)initWithProviderID:(NSString *)providerID
                         sessionID:(NSString *)sessionID
            OAuthResponseURLString:(NSString *)OAuthResponseURLString;

/** @fn initWithVerifyAssertionResponse
    @brief Intitializer which takes an verifyAssertion response.
    @param response The verifyAssertion Response to create the credential instance.
 */
- (nullable instancetype)initWithVerifyAssertionResponse:(FIRVerifyAssertionResponse *)response;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/OAuth/FIROAuthCredential_Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Phone/FIRPhoneAuthCredential_Internal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneAuthCredential.h"

NS_ASSUME_NONNULL_BEGIN

/** @extension FIRPhoneAuthCredential
    @brief Internal implementation of FIRAuthCredential for Phone Auth credentials.
 */
@interface FIRPhoneAuthCredential ()

/** @var verificationID
    @brief The verification ID obtained from invoking @c verifyPhoneNumber:completion:
 */
@property(nonatomic, readonly, nonnull) NSString *verificationID;

/** @var verificationCode
    @brief The verification code provided by the user.
 */
@property(nonatomic, readonly, nonnull) NSString *verificationCode;

/** @var temporaryProof
    @brief The a temporary proof code perftaining to this credential, returned from the backend.
 */
@property(nonatomic, readonly, nonnull) NSString *temporaryProof;

/** @var phoneNumber
    @brief The a phone number pertaining to this credential, returned from the backend.
 */
@property(nonatomic, readonly, nonnull) NSString *phoneNumber;

/** @var initWithTemporaryProof:phoneNumber:
    @brief Designated Initializer.
    @param providerID The provider ID associated with the phone auth credential being created.
 */
- (instancetype)initWithTemporaryProof:(NSString *)temporaryProof
                           phoneNumber:(NSString *)phoneNumber
                            providerID:(NSString *)providerID NS_DESIGNATED_INITIALIZER;

/** @var initWithProviderID:verificationID:verificationCode:
    @brief Designated Initializer.
    @param providerID The provider ID associated with the phone auth credential being created.
    @param verificationID The verification ID associated witht Phone Auth credential being created.
    @param verificationCode The verification code associated witht Phone Auth credential being
        created.
 */
- (instancetype)initWithProviderID:(NSString *)providerID
                    verificationID:(NSString *)verificationID
                  verificationCode:(NSString *)verificationCode NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Phone/FIRPhoneAuthCredential_Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Twitter/FIRTwitterAuthCredential.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/AuthProvider/FIRAuthCredential_Internal.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRTwitterAuthCredential
    @brief Internal implementation of FIRAuthCredential for Twitter credentials.
 */
@interface FIRTwitterAuthCredential : FIRAuthCredential <NSSecureCoding>

/** @property token
    @brief The Twitter OAuth token.
 */
@property(nonatomic, readonly) NSString *token;

/** @property secret
    @brief The Twitter OAuth secret.
 */
@property(nonatomic, readonly) NSString *secret;

/** @fn initWithToken:secret:
    @brief Designated initializer.
    @param token The Twitter OAuth token.
    @param secret The Twitter OAuth secret.
 */
- (nullable instancetype)initWithToken:(NSString *)token
                                secret:(NSString *)secret NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/AuthProvider/Twitter/FIRTwitterAuthCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthBackend+MultiFactor.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Backend/FIRAuthBackend.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRFinalizeMFAEnrollmentRequest.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRFinalizeMFAEnrollmentResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRStartMFAEnrollmentRequest.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRStartMFAEnrollmentResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRFinalizeMFASignInRequest.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRFinalizeMFASignInResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRStartMFASignInRequest.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRStartMFASignInResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/Unenroll/FIRWithdrawMFARequest.h"
#import "FirebaseAuth/Sources/Backend/RPC/MultiFactor/Unenroll/FIRWithdrawMFAResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRStartMFAEnrollmentResponseCallback
    @brief The type of block used to return the result of a call to the startMFAEnroll endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
*/
typedef void (^FIRStartMFAEnrollmentResponseCallback)(
    FIRStartMFAEnrollmentResponse *_Nullable response, NSError *_Nullable error);

/** @typedef FIRFinalizeMFAEnrollmentResponseCallback
    @brief The type of block used to return the result of a call to the finalizeMFAEnroll endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
*/
typedef void (^FIRFinalizeMFAEnrollmentResponseCallback)(
    FIRFinalizeMFAEnrollmentResponse *_Nullable response, NSError *_Nullable error);

/** @typedef FIRStartMFASignInResponseCallback
    @brief The type of block used to return the result of a call to the startMFASignIn endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
*/
typedef void (^FIRStartMFASignInResponseCallback)(FIRStartMFASignInResponse *_Nullable response,
                                                  NSError *_Nullable error);

/** @typedef FIRFinalizeMFASignInResponseCallback
    @brief The type of block used to return the result of a call to the finalizeMFASignIn endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
*/
typedef void (^FIRFinalizeMFASignInResponseCallback)(
    FIRFinalizeMFASignInResponse *_Nullable response, NSError *_Nullable error);

/** @typedef FIRWithdrawMFAResponseCallback
    @brief The type of block used to return the result of a call to the MFAUnenroll endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
*/
typedef void (^FIRWithdrawMFAResponseCallback)(FIRWithdrawMFAResponse *_Nullable response,
                                               NSError *_Nullable error);

@interface FIRAuthBackend (MultiFactor)

/** @fn startMultiFactorEnrollment:callback:
    @brief Calls the startMFAEnrollment endpoint.
    @param request The request parameters.
    @param callback The callback.
*/
+ (void)startMultiFactorEnrollment:(FIRStartMFAEnrollmentRequest *)request
                          callback:(FIRStartMFAEnrollmentResponseCallback)callback;

/** @fn finalizeMultiFactorEnrollment:callback:
    @brief Calls the finalizeMultiFactorEnrollment endpoint.
    @param request The request parameters.
    @param callback The callback.
*/
+ (void)finalizeMultiFactorEnrollment:(FIRFinalizeMFAEnrollmentRequest *)request
                             callback:(FIRFinalizeMFAEnrollmentResponseCallback)callback;

/** @fn startMultiFactorSignIn:callback:
    @brief Calls the startMultiFactorSignIn endpoint.
    @param request The request parameters.
    @param callback The callback.
*/
+ (void)startMultiFactorSignIn:(FIRStartMFASignInRequest *)request
                      callback:(FIRStartMFASignInResponseCallback)callback;

/** @fn finalizeMultiFactorSignIn:callback:
    @brief Calls the finalizeMultiFactorSignIn endpoint.
    @param request The request parameters.
    @param callback The callback.
*/
+ (void)finalizeMultiFactorSignIn:(FIRFinalizeMFASignInRequest *)request
                         callback:(FIRFinalizeMFASignInResponseCallback)callback;

/** @fn withdrawMultiFactor:callback:
    @brief Calls the withdrawMultiFactor endpoint.
    @param request The request parameters.
    @param callback The callback.
*/
+ (void)withdrawMultiFactor:(FIRWithdrawMFARequest *)request
                   callback:(FIRWithdrawMFAResponseCallback)callback;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthBackend+MultiFactor.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthBackend.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

@class FIRAuthRequestConfiguration;
@class FIRCreateAuthURIRequest;
@class FIRCreateAuthURIResponse;
@class FIRDeleteAccountRequest;
@class FIRDeleteAccountResponse;
@class FIREmailLinkSignInRequest;
@class FIREmailLinkSignInResponse;
@class FIRGetAccountInfoRequest;
@class FIRGetAccountInfoResponse;
@class FIRGetProjectConfigRequest;
@class FIRGetProjectConfigResponse;
@class FIRGetOOBConfirmationCodeRequest;
@class FIRGetOOBConfirmationCodeResponse;
@class FIRResetPasswordRequest;
@class FIRResetPasswordResponse;
@class FIRSecureTokenRequest;
@class FIRSecureTokenResponse;
@class FIRSetAccountInfoRequest;
@class FIRSetAccountInfoResponse;
@class FIRVerifyAssertionRequest;
@class FIRVerifyAssertionResponse;
@class FIRVerifyClientRequest;
@class FIRVerifyClientResponse;
@class FIRVerifyCustomTokenRequest;
@class FIRVerifyCustomTokenResponse;
@class FIRVerifyPasswordRequest;
@class FIRVerifyPasswordResponse;
@class FIRVerifyPhoneNumberRequest;
@class FIRVerifyPhoneNumberResponse;
@class FIRSendVerificationCodeRequest;
@class FIRSendVerificationCodeResponse;
@class FIRSignInWithGameCenterRequest;
@class FIRSignInWithGameCenterResponse;
@class FIRSignUpNewUserRequest;
@class FIRSignUpNewUserResponse;
@class FIRRevokeTokenRequest;
@class FIRRevokeTokenResponse;
@class FIRGetRecaptchaConfigRequest;
@class FIRGetRecaptchaConfigResponse;

@protocol FIRAuthBackendImplementation;
@protocol FIRAuthBackendRPCIssuer;

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRAuthBackendRPCIssuerCompletionHandler
    @brief The type of block used to return the result of a call to an endpoint.
    @param data The HTTP response body.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRAuthBackendRPCIssuerCompletionHandler)(NSData *_Nullable data,
                                                         NSError *_Nullable error);

/** @typedef FIRCreateAuthURIResponseCallback
    @brief The type of block used to return the result of a call to the createAuthURI
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRCreateAuthURIResponseCallback)(FIRCreateAuthURIResponse *_Nullable response,
                                                 NSError *_Nullable error);

/** @typedef FIRGetAccountInfoResponseCallback
    @brief The type of block used to return the result of a call to the getAccountInfo
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRGetAccountInfoResponseCallback)(FIRGetAccountInfoResponse *_Nullable response,
                                                  NSError *_Nullable error);

/** @typedef FIRGetProjectConfigResponseCallback
    @brief The type of block used to return the result of a call to the getProjectInfo
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRGetProjectConfigResponseCallback)(FIRGetProjectConfigResponse *_Nullable response,
                                                    NSError *_Nullable error);

/** @typedef FIRSetAccountInfoResponseCallback
    @brief The type of block used to return the result of a call to the setAccountInfo
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRSetAccountInfoResponseCallback)(FIRSetAccountInfoResponse *_Nullable response,
                                                  NSError *_Nullable error);

/** @typedef FIRSecureTokenResponseCallback
    @brief The type of block used to return the result of a call to the token endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRSecureTokenResponseCallback)(FIRSecureTokenResponse *_Nullable response,
                                               NSError *_Nullable error);

/** @typedef FIRVerifyAssertionResponseCallback
    @brief The type of block used to return the result of a call to the verifyAssertion
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRVerifyAssertionResponseCallback)(FIRVerifyAssertionResponse *_Nullable response,
                                                   NSError *_Nullable error);

/** @typedef FIRVerifyPasswordResponseCallback
    @brief The type of block used to return the result of a call to the verifyPassword
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRVerifyPasswordResponseCallback)(FIRVerifyPasswordResponse *_Nullable response,
                                                  NSError *_Nullable error);

/** @typedef FIREmailLinkSigninResponseCallback
    @brief The type of block used to return the result of a call to the emailLinkSignin
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIREmailLinkSigninResponseCallback)(FIREmailLinkSignInResponse *_Nullable response,
                                                   NSError *_Nullable error);

/** @typedef FIRVerifyCustomTokenResponseCallback
    @brief The type of block used to return the result of a call to the verifyCustomToken
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRVerifyCustomTokenResponseCallback)(
    FIRVerifyCustomTokenResponse *_Nullable response, NSError *_Nullable error);

/** @typedef FIRDeleteCallBack
    @brief The type of block called when a request delete account has finished.
    @param error The error which occurred, or nil if the request was successful.
 */
typedef void (^FIRDeleteCallBack)(NSError *_Nullable error);

/** @typedef FIRGetOOBConfirmationCodeResponseCallback
    @brief The type of block used to return the result of a call to the getOOBConfirmationCode
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRGetOOBConfirmationCodeResponseCallback)(
    FIRGetOOBConfirmationCodeResponse *_Nullable response, NSError *_Nullable error);

/** @typedef FIRSignupNewUserCallback
    @brief The type of block used to return the result of a call to the signupNewUser endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRSignupNewUserCallback)(FIRSignUpNewUserResponse *_Nullable response,
                                         NSError *_Nullable error);

/** @typedef FIRResetPasswordCallback
    @brief The type of block used to return the result of a call to the resetPassword endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRResetPasswordCallback)(FIRResetPasswordResponse *_Nullable response,
                                         NSError *_Nullable error);

/** @typedef FIRSendVerificationCodeResponseCallback
    @brief The type of block used to return the result of a call to the sendVerificationCode
        endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRSendVerificationCodeResponseCallback)(
    FIRSendVerificationCodeResponse *_Nullable response, NSError *_Nullable error);

/** @typedef FIRVerifyPhoneNumberResponseCallback
    @brief The type of block used to return the result of a call to the verifyPhoneNumber endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRVerifyPhoneNumberResponseCallback)(
    FIRVerifyPhoneNumberResponse *_Nullable response, NSError *_Nullable error);

/** @typedef FIRVerifyClientResponseCallback
    @brief The type of block used to return the result of a call to the verifyClient endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRVerifyClientResponseCallback)(FIRVerifyClientResponse *_Nullable response,
                                                NSError *_Nullable error);

/** @typedef FIRRevokeTokenResponseCallback
    @brief The type of block used to return the result of a call to the revokeToken endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRRevokeTokenResponseCallback)(FIRRevokeTokenResponse *_Nullable response,
                                               NSError *_Nullable error);

/** @typedef FIRSignInWithGameCenterResponseCallback
    @brief The type of block used to return the result of a call to the SignInWithGameCenter
   endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRSignInWithGameCenterResponseCallback)(
    FIRSignInWithGameCenterResponse *_Nullable response, NSError *_Nullable error);

/** @typedef FIRGetRecaptchaConfigResponseCallback
    @brief The type of block used to return the result of a call to the getRecaptchaConfig endpoint.
    @param response The received response, if any.
    @param error The error which occurred, if any.
    @remarks One of response or error will be non-nil.
 */
typedef void (^FIRGetRecaptchaConfigResponseCallback)(
    FIRGetRecaptchaConfigResponse *_Nullable response, NSError *_Nullable error);

/** @class FIRAuthBackend
    @brief Simple static class with methods representing the backend RPCs.
    @remarks All callback blocks passed as method parameters are invoked asynchronously on the
        global work queue in the future. See
        https://github.com/firebase/firebase-ios-sdk/tree/main/FirebaseAuth/Docs/threading.md
 */
@interface FIRAuthBackend : NSObject

/** @fn authUserAgent
    @brief Retrieves the Firebase Auth user agent.
    @return The Firebase Auth user agent.
 */
+ (NSString *)authUserAgent;

+ (id<FIRAuthBackendImplementation>)implementation;

/** @fn setBackendImplementation:
    @brief Changes the default backend implementation to something else.
    @param backendImplementation The backend implementation to use.
    @remarks This is not, generally, safe to call in a scenario where other backend requests may
        be occuring. This is specifically to help mock the backend for testing purposes.
 */
+ (void)setBackendImplementation:(id<FIRAuthBackendImplementation>)backendImplementation;

/** @fn setDefaultBackendImplementationWithRPCIssuer:
    @brief Uses the default backend implementation, but with a custom RPC issuer.
    @param RPCIssuer The RPC issuer to use. If @c nil, will use the default implementation.
    @remarks This is not, generally, safe to call in a scenario where other backend requests may
        be occuring. This is specifically to help test the backend interfaces (requests, responses,
        and shared FIRAuthBackend logic.)
 */
+ (void)setDefaultBackendImplementationWithRPCIssuer:
    (nullable id<FIRAuthBackendRPCIssuer>)RPCIssuer;

/** @fn createAuthURI:callback:
    @brief Calls the createAuthURI endpoint, which is responsible for creating the URI used by the
        IdP to authenticate the user.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)createAuthURI:(FIRCreateAuthURIRequest *)request
             callback:(FIRCreateAuthURIResponseCallback)callback;

/** @fn getAccountInfo:callback:
    @brief Calls the getAccountInfo endpoint, which returns account info for a given account.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)getAccountInfo:(FIRGetAccountInfoRequest *)request
              callback:(FIRGetAccountInfoResponseCallback)callback;

/** @fn getProjectConfig:callback:
    @brief Calls the getProjectConfig endpoint, which returns configuration information for a given
        project.
    @param request An object wrapping the backend get request.
    @param callback The callback.
 */
+ (void)getProjectConfig:(FIRGetProjectConfigRequest *)request
                callback:(FIRGetProjectConfigResponseCallback)callback;

/** @fn setAccountInfo:callback:
    @brief Calls the setAccountInfo endpoint, which is responsible for setting account info for a
        user, for example, to sign up a new user with email and password.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)setAccountInfo:(FIRSetAccountInfoRequest *)request
              callback:(FIRSetAccountInfoResponseCallback)callback;

/** @fn verifyAssertion:callback:
    @brief Calls the verifyAssertion endpoint, which is responsible for authenticating a
        user who has IDP-related credentials (an ID Token, an Access Token, etc.)
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)verifyAssertion:(FIRVerifyAssertionRequest *)request
               callback:(FIRVerifyAssertionResponseCallback)callback;

/** @fn verifyCustomToken:callback:
    @brief Calls the verifyCustomToken endpoint, which is responsible for authenticating a
        user who has BYOAuth credentials (a self-signed token using their BYOAuth private key.)
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)verifyCustomToken:(FIRVerifyCustomTokenRequest *)request
                 callback:(FIRVerifyCustomTokenResponseCallback)callback;

/** @fn verifyPassword:callback:
    @brief Calls the verifyPassword endpoint, which is responsible for authenticating a
        user who has email and password credentials.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)verifyPassword:(FIRVerifyPasswordRequest *)request
              callback:(FIRVerifyPasswordResponseCallback)callback;

/** @fn emailLinkSignin:callback:
    @brief Calls the emailLinkSignin endpoint, which is responsible for authenticating a
        user through passwordless sign-in.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)emailLinkSignin:(FIREmailLinkSignInRequest *)request
               callback:(FIREmailLinkSigninResponseCallback)callback;

/** @fn secureToken:callback:
    @brief Calls the token endpoint, which is responsible for performing STS token exchanges and
        token refreshes.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)secureToken:(FIRSecureTokenRequest *)request
           callback:(FIRSecureTokenResponseCallback)callback;

/** @fn getOOBConfirmationCode:callback:
    @brief Calls the getOOBConfirmationCode endpoint, which is responsible for sending email change
        request emails, and password reset emails.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)getOOBConfirmationCode:(FIRGetOOBConfirmationCodeRequest *)request
                      callback:(FIRGetOOBConfirmationCodeResponseCallback)callback;

/** @fn signUpNewUser:
    @brief Calls the signUpNewUser endpoint, which is responsible anonymously signing up a user
        or signing in a user anonymously.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)signUpNewUser:(FIRSignUpNewUserRequest *)request
             callback:(FIRSignupNewUserCallback)callback;

/** @fn resetPassword:callback
    @brief Calls the resetPassword endpoint, which is responsible for resetting a user's password
      given an OOB code and new password.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)resetPassword:(FIRResetPasswordRequest *)request
             callback:(FIRResetPasswordCallback)callback;

/** @fn deleteAccount:
    @brief Calls the DeleteAccount endpoint, which is responsible for deleting a user.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)deleteAccount:(FIRDeleteAccountRequest *)request callback:(FIRDeleteCallBack)callback;

/** @fn SignInWithGameCenter:callback:
    @brief Calls the SignInWithGameCenter endpoint, which is responsible for authenticating a user
      who has Game Center credentials.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)signInWithGameCenter:(FIRSignInWithGameCenterRequest *)request
                    callback:(FIRSignInWithGameCenterResponseCallback)callback;

/** @fn getRecaptchaConfig:callback:
    @brief Calls the getRecaptchaConfig endpoint, which is responsible for retrieving the recaptcha
   configs including site key, provider enablement status.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)getRecaptchaConfig:(FIRGetRecaptchaConfigRequest *)request
                  callback:(FIRGetRecaptchaConfigResponseCallback)callback;

#if TARGET_OS_IOS
/** @fn sendVerificationCode:callback:
    @brief Calls the sendVerificationCode endpoint, which is responsible for sending the
        verification code to a phone number specified in the request parameters.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)sendVerificationCode:(FIRSendVerificationCodeRequest *)request
                    callback:(FIRSendVerificationCodeResponseCallback)callback;

/** @fn verifyPhoneNumber:callback:
    @brief Calls the verifyPhoneNumber endpoint, which is responsible for sending the verification
        code to a phone number specified in the request parameters.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)verifyPhoneNumber:(FIRVerifyPhoneNumberRequest *)request
                 callback:(FIRVerifyPhoneNumberResponseCallback)callback;

/** @fn verifyClient:callback:
    @brief Calls the verifyClient endpoint, which is responsible for sending the silent push
        notification used for app validation to the device provided in the request parameters.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)verifyClient:(FIRVerifyClientRequest *)request
            callback:(FIRVerifyClientResponseCallback)callback;

#endif

/** @fn revokeToken:callback:
    @brief Calls the revokeToken endpoint, which is responsible for revoking the given token
        provided in the request parameters.
    @param request The request parameters.
    @param callback The callback.
 */
+ (void)revokeToken:(FIRRevokeTokenRequest *)request
           callback:(FIRRevokeTokenResponseCallback)callback;

@end

/** @protocol FIRAuthBackendRPCIssuer
    @brief Used to make FIRAuthBackend
 */
@protocol FIRAuthBackendRPCIssuer <NSObject>

/** @fn asyncCallToURLWithRequestConfiguration:URL:body:contentType:completionHandler:
    @brief Asynchronously sends a HTTP request.
    @param requestConfiguration The request to be made.
    @param URL The request URL.
    @param body Request body.
    @param contentType Content type of the body.
    @param handler provided that handles HTTP response. Invoked asynchronously on the auth global
        work queue in the future.
 */
- (void)asyncCallToURLWithRequestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
                                           URL:(NSURL *)URL
                                          body:(nullable NSData *)body
                                   contentType:(NSString *)contentType
                             completionHandler:(FIRAuthBackendRPCIssuerCompletionHandler)handler;

@end

/** @protocol FIRAuthBackendImplementation
    @brief Used to make FIRAuthBackend provide a layer of indirection to an actual RPC-based backend
        or a mock backend.
 */
@protocol FIRAuthBackendImplementation <NSObject>

/** @fn createAuthURI:callback:
    @brief Calls the createAuthURI endpoint, which is responsible for creating the URI used by the
        IdP to authenticate the user.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)createAuthURI:(FIRCreateAuthURIRequest *)request
             callback:(FIRCreateAuthURIResponseCallback)callback;

/** @fn getAccountInfo:callback:
    @brief Calls the getAccountInfo endpoint, which returns account info for a given account.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)getAccountInfo:(FIRGetAccountInfoRequest *)request
              callback:(FIRGetAccountInfoResponseCallback)callback;

/** @fn getProjectConfig:callback:
    @brief Calls the getProjectInfo endpoint, which returns configuration information for a given
        project.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)getProjectConfig:(FIRGetProjectConfigRequest *)request
                callback:(FIRGetProjectConfigResponseCallback)callback;

/** @fn setAccountInfo:callback:
    @brief Calls the setAccountInfo endpoint, which is responsible for setting account info for a
        user, for example, to sign up a new user with email and password.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)setAccountInfo:(FIRSetAccountInfoRequest *)request
              callback:(FIRSetAccountInfoResponseCallback)callback;

/** @fn verifyAssertion:callback:
    @brief Calls the verifyAssertion endpoint, which is responsible for authenticating a
        user who has IDP-related credentials (an ID Token, an Access Token, etc.)
    @param request The request parameters.
    @param callback The callback.
 */
- (void)verifyAssertion:(FIRVerifyAssertionRequest *)request
               callback:(FIRVerifyAssertionResponseCallback)callback;

/** @fn verifyCustomToken:callback:
    @brief Calls the verifyCustomToken endpoint, which is responsible for authenticating a
        user who has BYOAuth credentials (a self-signed token using their BYOAuth private key.)
    @param request The request parameters.
    @param callback The callback.
 */
- (void)verifyCustomToken:(FIRVerifyCustomTokenRequest *)request
                 callback:(FIRVerifyCustomTokenResponseCallback)callback;

/** @fn verifyPassword:callback:
    @brief Calls the verifyPassword endpoint, which is responsible for authenticating a
        user who has email and password credentials.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)verifyPassword:(FIRVerifyPasswordRequest *)request
              callback:(FIRVerifyPasswordResponseCallback)callback;

/** @fn emailLinkSignin:callback:
    @brief Calls the emailLinkSignin endpoint, which is responsible for authenticating a
        user through passwordless sign-in.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)emailLinkSignin:(FIREmailLinkSignInRequest *)request
               callback:(FIREmailLinkSigninResponseCallback)callback;

/** @fn secureToken:callback:
    @brief Calls the token endpoint, which is responsible for performing STS token exchanges and
        token refreshes.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)secureToken:(FIRSecureTokenRequest *)request
           callback:(FIRSecureTokenResponseCallback)callback;

/** @fn getOOBConfirmationCode:callback:
    @brief Calls the getOOBConfirmationCode endpoint, which is responsible for sending email change
        request emails, email sign-in link emails, and password reset emails.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)getOOBConfirmationCode:(FIRGetOOBConfirmationCodeRequest *)request
                      callback:(FIRGetOOBConfirmationCodeResponseCallback)callback;

/** @fn signUpNewUser:
    @brief Calls the signUpNewUser endpoint, which is responsible anonymously signing up a user
        or signing in a user anonymously.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)signUpNewUser:(FIRSignUpNewUserRequest *)request
             callback:(FIRSignupNewUserCallback)callback;

/** @fn deleteAccount:
    @brief Calls the DeleteAccount endpoint, which is responsible for deleting a user.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)deleteAccount:(FIRDeleteAccountRequest *)request callback:(FIRDeleteCallBack)callback;

#if TARGET_OS_IOS
/** @fn sendVerificationCode:callback:
    @brief Calls the sendVerificationCode endpoint, which is responsible for sending the
        verification code to a phone number specified in the request parameters.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)sendVerificationCode:(FIRSendVerificationCodeRequest *)request
                    callback:(FIRSendVerificationCodeResponseCallback)callback;

/** @fn verifyPhoneNumber:callback:
    @brief Calls the verifyPhoneNumber endpoint, which is responsible for sending the verification
        code to a phone number specified in the request parameters.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)verifyPhoneNumber:(FIRVerifyPhoneNumberRequest *)request
                 callback:(FIRVerifyPhoneNumberResponseCallback)callback;

/** @fn verifyClient:callback:
    @brief Calls the verifyClient endpoint, which is responsible for sending the silent push
        notification used for app validation to the device provided in the request parameters.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)verifyClient:(FIRVerifyClientRequest *)request
            callback:(FIRVerifyClientResponseCallback)callback;

#endif

/** @fn revokeToken:callback:
    @brief Calls the revokeToken endpoint, which is responsible for revoking the given token
        provided in the request parameters.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)revokeToken:(FIRRevokeTokenRequest *)request
           callback:(FIRRevokeTokenResponseCallback)callback;

/** @fn SignInWithGameCenter:callback:
    @brief Calls the SignInWithGameCenter endpoint, which is responsible for authenticating a user
      who has Game Center credentials.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)signInWithGameCenter:(FIRSignInWithGameCenterRequest *)request
                    callback:(FIRSignInWithGameCenterResponseCallback)callback;

/** @fn getRecaptchaConfig:callback:
    @brief Calls the getRecaptchaConfig endpoint, which is responsible for retrieving the recaptcha
   configs including site key, provider enablement status.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)getRecaptchaConfig:(FIRGetRecaptchaConfigRequest *)request
                  callback:(FIRGetRecaptchaConfigResponseCallback)callback;

/** @fn resetPassword:callback
    @brief Calls the resetPassword endpoint, which is responsible for resetting a user's password
      given an OOB code and new password.
    @param request The request parameters.
    @param callback The callback.
 */
- (void)resetPassword:(FIRResetPasswordRequest *)request
             callback:(FIRResetPasswordCallback)callback;

/** @fn callWithRequest:response:callback:
    @brief Calls the RPC using HTTP request.
    @remarks Possible error responses:
        @see FIRAuthInternalErrorCodeRPCRequestEncodingError
        @see FIRAuthInternalErrorCodeJSONSerializationError
        @see FIRAuthInternalErrorCodeNetworkError
        @see FIRAuthInternalErrorCodeUnexpectedErrorResponse
        @see FIRAuthInternalErrorCodeUnexpectedResponse
        @see FIRAuthInternalErrorCodeRPCResponseDecodingError
    @param request The request.
    @param response The empty response to be filled.
    @param callback The callback for both success and failure.
*/
- (void)callWithRequest:(id<FIRAuthRPCRequest>)request
               response:(id<FIRAuthRPCResponse>)response
               callback:(void (^)(NSError *_Nullable error))callback;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthBackend.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuthRequestConfiguration;

NS_ASSUME_NONNULL_BEGIN

/** @protocol FIRAuthRPCRequest
    @brief The generic interface for an RPC request needed by @c FIRAuthBackend.
 */
@protocol FIRAuthRPCRequest <NSObject>

/** @fn requestURL
    @brief Gets the request's full URL.
 */
- (NSURL *)requestURL;

@optional

/** @fn containsPostBody
    @brief Returns whether the request contains a post body or not. Requests without a post body
        are get requests.
    @remarks The default implementation returns YES.
 */
- (BOOL)containsPostBody;

/** @fn UnencodedHTTPRequestBodyWithError:
    @brief Creates unencoded HTTP body representing the request.
    @param error An out field for an error which occurred constructing the request.
    @return The HTTP body data representing the request before any encoding, or nil for error.
 */
- (nullable id)unencodedHTTPRequestBodyWithError:(NSError *_Nullable *_Nullable)error;

/** @fn requestConfiguration
    @brief Obtains the request configurations if available.
    @return Returns the request configurations.
 */
- (FIRAuthRequestConfiguration *)requestConfiguration;

- (void)injectRecaptchaFields:(NSString *_Nullable)recaptchaResponse
             recaptchaVersion:(NSString *)recaptchaVersion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @protocol FIRAuthRPCResponse
    @brief The generic interface for an RPC response needed by @c FIRAuthBackend.
 */
@protocol FIRAuthRPCResponse <NSObject>

/** @fn setFieldsWithDictionary:error:
    @brief Sets the response instance from the decoded JSON response.
    @param dictionary The dictionary decoded from HTTP JSON response.
    @param error An out field for an error which occurred constructing the request.
    @return Whether the operation was successful or not.
 */
- (BOOL)setWithDictionary:(NSDictionary *)dictionary error:(NSError *_Nullable *_Nullable)error;

@optional

/** @fn clientErrorWithshortErrorMessage:detailErrorMessage
    @brief This optional method allows response classes to create client errors given a short error
        message and a detail error message from the server.
    @param shortErrorMessage The short error message from the server.
    @param detailErrorMessage The detailed error message from the server.
    @return A client error, if any.
 */
- (nullable NSError *)clientErrorWithShortErrorMessage:(NSString *)shortErrorMessage
                                    detailErrorMessage:(nullable NSString *)detailErrorMessage;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthRequestConfiguration.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import <FirebaseAppCheckInterop/FirebaseAppCheckInterop.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuth.h"

@protocol FIRHeartbeatLoggerProtocol;

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthRequestConfiguration
    @brief Defines configurations to be added to a request to Firebase Auth's backend.
  */
@interface FIRAuthRequestConfiguration : NSObject

/** @property APIKey
    @brief The Firebase Auth API key used in the request.
 */
@property(nonatomic, copy, readonly) NSString *APIKey;

/** @property appID
    @brief The Firebase appID used in the request.
 */
@property(nonatomic, copy, readonly) NSString *appID;

/** @property auth
    @brief The FIRAuth instance used in the request.
 */
@property(nonatomic, weak, readonly, nullable) FIRAuth *auth;

/** @property heartbeatLogger
    @brief The heartbeat logger used to add heartbeats to the corresponding request's header.
 */
@property(nonatomic, copy, nullable) id<FIRHeartbeatLoggerProtocol> heartbeatLogger;
/** @property appCheck
    @brief The appCheck is used to generate a token.
 */
@property(nonatomic, copy, nullable) id<FIRAppCheckInterop> appCheck;

/** @property LanguageCode
    @brief The language code used in the request.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** @property HTTPMethod
    @brief The HTTP method used in the request.
 */
@property(nonatomic, copy, nonnull) NSString *HTTPMethod;

/** @property additionalFrameworkMarker
    @brief Additional framework marker that will be added as part of the header of every request.
 */
@property(nonatomic, copy, nullable) NSString *additionalFrameworkMarker;

/** @property emulatorHostAndPort
    @brief If set, the local emulator host and port to point to instead of the remote backend.
 */
@property(nonatomic, copy, nullable) NSString *emulatorHostAndPort;

- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithAPIKey:appID:
    @brief Convenience initializer.
    @param APIKey The API key to be used in the request.
    @param appID The Firebase app ID to be passed in the request header.
 */
- (nullable instancetype)initWithAPIKey:(NSString *)APIKey appID:(NSString *)appID;

/** @fn initWithAPIKey:appID:auth:
    @brief Convenience initializer.
    @param APIKey The API key to be used in the request.
    @param appID The Firebase app ID to be passed in the request header.
    @param auth The FIRAuth instance used in the request.
 */
- (nullable instancetype)initWithAPIKey:(NSString *)APIKey
                                  appID:(NSString *)appID
                                   auth:(nullable FIRAuth *)auth;

/** @fn initWithAPIKey:appID:auth:heartbeatLogger:appCheck:
    @brief Designated initializer.
    @param APIKey The API key to be used in the request.
    @param appID The Firebase app ID to be passed in the request header.
    @param auth The FIRAuth instance used in the request.
    @param heartbeatLogger The heartbeat logger used to add heartbeats to the request header.
    @param appCheck The appCheck interop is a library to generate app check token.
 */
- (nullable instancetype)initWithAPIKey:(NSString *)APIKey
                                  appID:(NSString *)appID
                                   auth:(nullable FIRAuth *)auth
                        heartbeatLogger:(nullable id<FIRHeartbeatLoggerProtocol>)heartbeatLogger
                               appCheck:(nullable id<FIRAppCheckInterop>)appCheck
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRAuthRequestConfiguration.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRequestConfiguration.h"

@class FIRAuthRequestConfiguration;

NS_ASSUME_NONNULL_BEGIN

/** @class FIRIdentityToolkitRequest
    @brief Represents a request to an identity toolkit endpoint.
 */
@interface FIRIdentityToolkitRequest : NSObject

/** @property endpoint
    @brief Gets the RPC's endpoint.
 */
@property(nonatomic, copy, readonly) NSString *endpoint;

/** @property APIKey
    @brief Gets the client's API key used for the request.
 */
@property(nonatomic, copy, readonly) NSString *APIKey;

/** @property tenantID
    @brief The tenant ID of the request. nil if none is available.
 */
@property(nonatomic, copy, readonly, nullable) NSString *tenantID;

/** @property useIdentityPlatform
    @brief The toggle of using Identity Platform endpoints.
 */
@property(nonatomic) BOOL useIdentityPlatform;

/** @property useStaging
    @brief The toggle of using staging endpoints.
 */
@property(nonatomic) BOOL useStaging;

/** @property clientType
    @brief The type of the client that the request sent from, which should be CLIENT_TYPE_IOS;
 */
@property(nonatomic, copy) NSString *clientType;

/** @fn init
    @brief Please use initWithEndpoint:APIKey:
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithEndpoint:APIKey:
    @brief Designated initializer.
    @param endpoint The endpoint name.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

/** @fn requestURL
    @brief Gets the request's full URL.
 */
- (NSURL *)requestURL;

/** @fn queryParams
    @brief Gets the request's query parameters.
 */
- (nullable NSString *)queryParams;

/** @fn requestConfiguration
    @brief Gets the request's configuration.
 */
- (FIRAuthRequestConfiguration *)requestConfiguration;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRCreateAuthURIRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRCreateAuthURIRequest
    @brief Represents the parameters for the createAuthUri endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/createAuthUri
 */
@interface FIRCreateAuthURIRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property identifier
    @brief The email or federated ID of the user.
 */
@property(nonatomic, copy) NSString *identifier;

/** @property continueURI
    @brief The URI to which the IDP redirects the user after the federated login flow.
 */
@property(nonatomic, copy) NSString *continueURI;

/** @property openIDRealm
    @brief Optional realm for OpenID protocol. The sub string "scheme://domain:port" of the param
        "continueUri" is used if this is not set.
 */
@property(nonatomic, copy, nullable) NSString *openIDRealm;

/** @property providerID
    @brief The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com,
        live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
 */
@property(nonatomic, copy, nullable) NSString *providerID;

/** @property clientID
    @brief The relying party OAuth client ID.
 */
@property(nonatomic, copy, nullable) NSString *clientID;

/** @property context
    @brief The opaque value used by the client to maintain context info between the authentication
        request and the IDP callback.
 */
@property(nonatomic, copy, nullable) NSString *context;

/** @property appID
    @brief The iOS client application's bundle identifier.
 */
@property(nonatomic, copy, nullable) NSString *appID;

/** @fn initWithEndpoint:requestConfiguration:requestConfiguration.
    @brief Please use initWithIdentifier:continueURI:requestConfiguration: instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithIdentifier:continueURI:requestConfiguration:
    @brief Designated initializer.
    @param identifier The email or federated ID of the user.
    @param continueURI The URI to which the IDP redirects the user after the federated login flow.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithIdentifier:(NSString *)identifier
                                continueURI:(NSString *)continueURI
                       requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRCreateAuthURIRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRCreateAuthURIResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRCreateAuthURIResponse
    @brief Represents the parameters for the createAuthUri endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/createAuthUri
 */
@interface FIRCreateAuthURIResponse : NSObject <FIRAuthRPCResponse>

/** @property authUri
    @brief The URI used by the IDP to authenticate the user.
 */
@property(nonatomic, strong, readonly, nullable) NSString *authURI;

/** @property registered
    @brief Whether the user is registered if the identifier is an email.
 */
@property(nonatomic, assign, readonly) BOOL registered;

/** @property providerId
    @brief The provider ID of the auth URI.
 */
@property(nonatomic, strong, readonly, nullable) NSString *providerID;

/** @property forExistingProvider
    @brief True if the authUri is for user's existing provider.
 */
@property(nonatomic, assign, readonly) BOOL forExistingProvider;

/** @property allProviders
    @brief A list of provider IDs the passed @c identifier could use to sign in with.
 */
@property(nonatomic, copy, readonly, nullable) NSArray<NSString *> *allProviders;

/** @property signinMethods
    @brief A list of sign-in methods available for the passed @c identifier.
 */
@property(nonatomic, copy, readonly, nullable) NSArray<NSString *> *signinMethods;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRCreateAuthURIResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRDeleteAccountRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRDeleteAccountRequest
    @brief Represents the parameters for the deleteAccount endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/deleteAccount
 */
@interface FIRDeleteAccountRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @fn initWithEndpoint:requestConfiguration:requestConfiguration.
    @brief Please use initWitLocalID:accessToken:requestConfiguration instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWitLocalID:accessToken:requestConfiguration.
    @brief Designated initializer.
    @param localID The local ID.
    @param accessToken The access token.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWitLocalID:(NSString *)localID
                            accessToken:(NSString *)accessToken
                   requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRDeleteAccountRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRDeleteAccountResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRDeleteAccountResponse
    @brief Represents the response from the deleteAccount endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/deleteAccount
 */
@interface FIRDeleteAccountResponse : NSObject <FIRAuthRPCResponse>
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRDeleteAccountResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIREmailLinkSignInRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIREmailLinkSignInRequest
    @brief Represents the parameters for the emailLinkSignin endpoint.
 */
@interface FIREmailLinkSignInRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

#pragma mark - Components of "postBody"

/** @property email
    @brief The email identifier used to complete the email link sign-in.
 */
@property(nonatomic, copy, readonly) NSString *email;

/** @property oobCode
    @brief The OOB code used to complete the email link sign-in flow.
 */
@property(nonatomic, copy, readonly) NSString *oobCode;

/** @property IDToken
    @brief The ID Token code potentially used to complete the email link sign-in flow.
 */
@property(nonatomic, copy) NSString *IDToken;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithProviderID:requestConfifuration instead.
 */
- (instancetype)initWithEndpoint:(NSString *)endpoint
            requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration NS_UNAVAILABLE;

/** @fn initWithProviderID:requestConfifuration
    @brief Designated initializer.
    @param email The email identifier used to complete hte email link sign-in flow.
    @param oobCode The OOB code used to complete the email link sign-in flow.
    @param requestConfiguration An object containing configurations to be added to the request.

 */
- (instancetype)initWithEmail:(NSString *)email
                      oobCode:(NSString *)oobCode
         requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIREmailLinkSignInRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIREmailLinkSignInResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProtoMFAEnrollment.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRVerifyAssertionResponse
    @brief Represents the response from the emailLinkSignin endpoint.
 */
@interface FIREmailLinkSignInResponse : NSObject <FIRAuthRPCResponse>

/** @property IDToken
    @brief The ID token in the email link sign-in response.
 */
@property(nonatomic, copy, readonly) NSString *IDToken;

/** @property email
    @brief The email returned by the IdP.
 */
@property(nonatomic, strong, readonly, nullable) NSString *email;

/** @property refreshToken
    @brief The refreshToken returned by the server.
 */
@property(nonatomic, strong, readonly, nullable) NSString *refreshToken;

/** @property localID
    @brief The Firebase Auth user ID.
 */
@property(nonatomic, strong, readonly, nullable) NSString *localID;

/** @property approximateExpirationDate
    @brief The approximate expiration date of the access token.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *approximateExpirationDate;

/** @property isNewUser
    @brief Flag indicating that the user signing in is a new user and not a returning user.
 */
@property(nonatomic, assign) BOOL isNewUser;

/** @property MFAPendingCredential
    @brief An opaque string that functions as proof that the user has successfully passed the first
   factor check.
*/
@property(nonatomic, strong, readonly, nullable) NSString *MFAPendingCredential;

/** @property MFAInfo
    @brief Info on which multi-factor authentication providers are enabled.
*/
@property(nonatomic, strong, readonly, nullable) NSArray<FIRAuthProtoMFAEnrollment *> *MFAInfo;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIREmailLinkSignInResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetAccountInfoRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRGetAccountInfoRequest
    @brief Represents the parameters for the getAccountInfo endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/getAccountInfo
 */
@interface FIRGetAccountInfoRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property accessToken
    @brief The STS Access Token for the authenticated user.
 */
@property(nonatomic, copy) NSString *accessToken;

/** @fn initWithEndpoint:requestConfiguration:requestConfiguration
    @brief Please use initWithAccessToken:requestConfiguration: instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithAccessToken:requestConfiguration
    @brief Designated initializer.
    @param accessToken The Access Token of the authenticated user.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithAccessToken:(NSString *)accessToken
                        requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetAccountInfoRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetAccountInfoResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProtoMFAEnrollment.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRGetAccountInfoResponseProviderUserInfo
    @brief Represents the provider user info part of the response from the getAccountInfo endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/getAccountInfo
 */
@interface FIRGetAccountInfoResponseProviderUserInfo : NSObject

/** @property providerID
    @brief The ID of the identity provider.
 */
@property(nonatomic, strong, readonly, nullable) NSString *providerID;

/** @property displayName
    @brief The user's display name at the identity provider.
 */
@property(nonatomic, strong, readonly, nullable) NSString *displayName;

/** @property photoURL
    @brief The user's photo URL at the identity provider.
 */
@property(nonatomic, strong, readonly, nullable) NSURL *photoURL;

/** @property federatedID
    @brief The user's identifier at the identity provider.
 */
@property(nonatomic, strong, readonly, nullable) NSString *federatedID;

/** @property email
    @brief The user's email at the identity provider.
 */
@property(nonatomic, strong, readonly, nullable) NSString *email;

/** @property phoneNumber
    @brief A phone number associated with the user.
 */
@property(nonatomic, readonly, nullable) NSString *phoneNumber;

/** @fn init
    @brief Please use initWithDictionary:
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithAPIKey:
    @brief Designated initializer.
    @param dictionary The provider user info data from endpoint.
 */
- (instancetype)initWithDictionary:(NSDictionary *)dictionary NS_DESIGNATED_INITIALIZER;

@end

/** @class FIRGetAccountInfoResponseUser
    @brief Represents the firebase user info part of the response from the getAccountInfo endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/getAccountInfo
 */
@interface FIRGetAccountInfoResponseUser : NSObject

/** @property localID
    @brief The ID of the user.
 */
@property(nonatomic, strong, readonly, nullable) NSString *localID;

/** @property email
    @brief The email or the user.
 */
@property(nonatomic, strong, readonly, nullable) NSString *email;

/** @property emailVerified
    @brief Whether the email has been verified.
 */
@property(nonatomic, assign, readonly) BOOL emailVerified;

/** @property displayName
    @brief The display name of the user.
 */
@property(nonatomic, strong, readonly, nullable) NSString *displayName;

/** @property photoURL
    @brief The user's photo URL.
 */
@property(nonatomic, strong, readonly, nullable) NSURL *photoURL;

/** @property creationDate
    @brief The user's creation date.
 */
@property(nonatomic, strong, readonly, nullable) NSDate *creationDate;

/** @property lastSignInDate
    @brief The user's last login date.
 */
@property(nonatomic, strong, readonly, nullable) NSDate *lastLoginDate;

/** @property providerUserInfo
    @brief The user's profiles at the associated identity providers.
 */
@property(nonatomic, strong, readonly, nullable)
    NSArray<FIRGetAccountInfoResponseProviderUserInfo *> *providerUserInfo;

/** @property passwordHash
    @brief Information about user's password.
    @remarks This is not necessarily the hash of user's actual password.
 */
@property(nonatomic, strong, readonly, nullable) NSString *passwordHash;

/** @property phoneNumber
    @brief A phone number associated with the user.
 */
@property(nonatomic, readonly, nullable) NSString *phoneNumber;

@property(nonatomic, strong, readonly, nullable)
    NSArray<FIRAuthProtoMFAEnrollment *> *MFAEnrollments;

/** @fn init
    @brief Please use initWithDictionary:
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithAPIKey:
    @brief Designated initializer.
    @param dictionary The provider user info data from endpoint.
 */
- (instancetype)initWithDictionary:(NSDictionary *)dictionary NS_DESIGNATED_INITIALIZER;

@end

/** @class FIRGetAccountInfoResponse
    @brief Represents the response from the setAccountInfo endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/getAccountInfo
 */
@interface FIRGetAccountInfoResponse : NSObject <FIRAuthRPCResponse>

/** @property providerUserInfo
    @brief The requested users' profiles.
 */
@property(nonatomic, strong, readonly, nullable) NSArray<FIRGetAccountInfoResponseUser *> *users;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetAccountInfoResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetOOBConfirmationCodeRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

@class FIRActionCodeSettings;

NS_ASSUME_NONNULL_BEGIN

/** @enum FIRGetOOBConfirmationCodeRequestType
    @brief Types of OOB Confirmation Code requests.
 */
typedef NS_ENUM(NSInteger, FIRGetOOBConfirmationCodeRequestType) {
  /** @var FIRGetOOBConfirmationCodeRequestTypePasswordReset
      @brief Requests a password reset code.
   */
  FIRGetOOBConfirmationCodeRequestTypePasswordReset,

  /** @var FIRGetOOBConfirmationCodeRequestTypeVerifyEmail
      @brief Requests an email verification code.
   */
  FIRGetOOBConfirmationCodeRequestTypeVerifyEmail,

  /** @var FIRGetOOBConfirmationCodeRequestTypeEmailLink
      @brief Requests an email sign-in link.
   */
  FIRGetOOBConfirmationCodeRequestTypeEmailLink,

  /** @var FIRGetOOBConfirmationCodeRequestTypeVerifyBeforeUpdateEmail
      @brief Requests an verify before update email.
   */
  FIRGetOOBConfirmationCodeRequestTypeVerifyBeforeUpdateEmail,
};

/** @enum FIRGetOOBConfirmationCodeRequest
    @brief Represents the parameters for the getOOBConfirmationCode endpoint.
 */
@interface FIRGetOOBConfirmationCodeRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property requestType
    @brief The types of OOB Confirmation Code to request.
 */
@property(nonatomic, assign, readonly) FIRGetOOBConfirmationCodeRequestType requestType;

/** @property email
    @brief The email of the user.
    @remarks For password reset.
 */
@property(nonatomic, copy, nullable, readonly) NSString *email;

/** @property updatedEmail
    @brief The new email to be updated.
    @remarks For verifyBeforeUpdateEmail.
 */
@property(nonatomic, copy, nullable, readonly) NSString *updatedEmail;

/** @property accessToken
    @brief The STS Access Token of the authenticated user.
    @remarks For email change.
 */
@property(nonatomic, copy, nullable, readonly) NSString *accessToken;

/** @property continueURL
    @brief This URL represents the state/Continue URL in the form of a universal link.
 */
@property(nonatomic, copy, nullable, readonly) NSString *continueURL;

/** @property iOSBundleID
    @brief The iOS bundle Identifier, if available.
 */
@property(nonatomic, copy, nullable, readonly) NSString *iOSBundleID;

/** @property androidPackageName
    @brief The Android package name, if available.
 */
@property(nonatomic, copy, nullable, readonly) NSString *androidPackageName;

/** @property androidMinimumVersion
    @brief The minimum Android version supported, if available.
 */
@property(nonatomic, copy, nullable, readonly) NSString *androidMinimumVersion;

/** @property androidInstallIfNotAvailable
    @brief Indicates whether or not the Android app should be installed if not already available.
 */
@property(nonatomic, assign, readonly) BOOL androidInstallApp;

/** @property handleCodeInApp
    @brief Indicates whether the action code link will open the app directly or after being
        redirected from a Firebase owned web widget.
 */
@property(assign, nonatomic) BOOL handleCodeInApp;

/** @property dynamicLinkDomain
    @brief The Firebase Dynamic Link domain used for out of band code flow.
 */
@property(copy, nonatomic, nullable) NSString *dynamicLinkDomain;

/** @property captchaResponse
    @brief Response to the captcha.
 */
@property(nonatomic, copy, nullable) NSString *captchaResponse;

/** @property captchaResponse
    @brief The reCAPTCHA version.
 */
@property(nonatomic, copy, nullable) NSString *recaptchaVersion;

/** @fn passwordResetRequestWithEmail:actionCodeSettings:requestConfiguration:
    @brief Creates a password reset request.
    @param email The user's email address.
    @param actionCodeSettings An object of FIRActionCodeSettings which specifies action code
        settings to be applied to the password reset request.
    @param requestConfiguration An object containing configurations to be added to the request.
    @return A password reset request.
 */
+ (nullable FIRGetOOBConfirmationCodeRequest *)
    passwordResetRequestWithEmail:(NSString *)email
               actionCodeSettings:(nullable FIRActionCodeSettings *)actionCodeSettings
             requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

/** @fn verifyEmailRequestWithAccessToken:actionCodeSettings:requestConfiguration:
    @brief Creates a password reset request.
    @param accessToken The user's STS Access Token.
    @param actionCodeSettings An object of FIRActionCodeSettings which specifies action code
        settings to be applied to the email verification request.
    @param requestConfiguration An object containing configurations to be added to the request.
    @return A password reset request.
 */
+ (nullable FIRGetOOBConfirmationCodeRequest *)
    verifyEmailRequestWithAccessToken:(NSString *)accessToken
                   actionCodeSettings:(nullable FIRActionCodeSettings *)actionCodeSettings
                 requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

/** @fn signInWithEmailLinkRequest:actionCodeSettings:requestConfiguration:
    @brief Creates a sign-in with email link.
    @param email The user's email address.
    @param actionCodeSettings An object of FIRActionCodeSettings which specifies action code
        settings to be applied to the email sign-in link.
    @param requestConfiguration An object containing configurations to be added to the request.
    @return An email sign-in link request.
 */
+ (nullable FIRGetOOBConfirmationCodeRequest *)
    signInWithEmailLinkRequest:(NSString *)email
            actionCodeSettings:(nullable FIRActionCodeSettings *)actionCodeSettings
          requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

/** @fn verifyBeforeUpdateEmailWithAccessToken:newEmail:actionCodeSettings:requestConfiguration:
    @brief Creates a verifyBeforeUpdateEmail request.
    @param accessToken The user's STS Access Token.
    @param newEmail The user's email address to be updated.
    @param actionCodeSettings An object of FIRActionCodeSettings which specifies action code
        settings to be applied to the password reset request.
    @param requestConfiguration An object containing configurations to be added to the request.
    @return A verifyBeforeUpdateEmail request.
 */
+ (nullable FIRGetOOBConfirmationCodeRequest *)
    verifyBeforeUpdateEmailWithAccessToken:(NSString *)accessToken
                                  newEmail:(NSString *)newEmail
                        actionCodeSettings:(nullable FIRActionCodeSettings *)actionCodeSettings
                      requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

/** @fn init
    @brief Please use a factory method.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetOOBConfirmationCodeRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetOOBConfirmationCodeResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRGetOOBConfirmationCodeResponse
    @brief Represents the response from the getOobConfirmationCode endpoint.
 */
@interface FIRGetOOBConfirmationCodeResponse : NSObject <FIRAuthRPCResponse>

/** @property OOBCode
    @brief The OOB code returned by the server in some cases.
 */
@property(nonatomic, copy, readonly, nullable) NSString *OOBCode;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetOOBConfirmationCodeResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetProjectConfigRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRGetProjectConfigRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithRequestConfiguration:
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithTemporaryProof:phoneNumberAPIKey
    @brief Designated initializer.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithRequestConfiguration:
    (FIRAuthRequestConfiguration *)requestConfiguration NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetProjectConfigRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetProjectConfigResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRGetProjectConfigResponse
    @brief Represents the response from the getProjectConfig endpoint.
 */
@interface FIRGetProjectConfigResponse : NSObject <FIRAuthRPCResponse>

/** @property projectID
    @brief The unique ID pertaining to the current project.
 */
@property(nonatomic, strong, readonly, nullable) NSString *projectID;

/** @property authorizedDomains
    @brief A list of domains allowlisted for the current project.
 */
@property(nonatomic, strong, readonly, nullable) NSArray *authorizedDomains;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetProjectConfigResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetRecaptchaConfigRequest.h
===
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRGetRecaptchaConfigRequest
    @brief Represents the parameters for the getRecaptchaConfig endpoint.
 */
@interface FIRGetRecaptchaConfigRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithClientType:version:requestConfiguration:
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithEmail:password:requestConfiguration:
    @brief Designated initializer.
    @param requestConfiguration The config.
 */
- (nullable instancetype)initWithRequestConfiguration:
    (FIRAuthRequestConfiguration *)requestConfiguration NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetRecaptchaConfigRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetRecaptchaConfigResponse.h
===
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRVerifyPasswordResponse
    @brief Represents the response from the getRecaptchaConfig endpoint.
 */
@interface FIRGetRecaptchaConfigResponse : NSObject <FIRAuthRPCResponse>

/** @property recaptchaKey
    @brief The recaptcha key of the project.
 */
@property(nonatomic, copy, nullable) NSString *recaptchaKey;

/** @property enforcementState
    @brief The enforcement state array.
 */
@property(nonatomic, nullable) NSArray *enforcementState;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRGetRecaptchaConfigResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRResetPasswordRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRResetPasswordRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property oobCode
    @brief The oobCode sent in the request.
 */
@property(nonatomic, copy, readonly) NSString *oobCode;

/** @property updatedPassword
    @brief The new password sent in the request.
 */
@property(nonatomic, copy, readonly) NSString *updatedPassword;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithOobCode:newPassword:requestConfiguration: instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithOobCode:newPassword:requestConfiguration:
    @brief Designated initializer.
    @param oobCode The OOB Code.
    @param newPassword The new password.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithOobCode:(NSString *)oobCode
                             newPassword:(nullable NSString *)newPassword
                    requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRResetPasswordRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRResetPasswordResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthResetPasswordResponse
    @brief Represents the response from the resetPassword endpoint.
    @remarks Possible error codes:
       - FIRAuthErrorCodeWeakPassword
       - FIRAuthErrorCodeUserDisabled
       - FIRAuthErrorCodeOperationNotAllowed
       - FIRAuthErrorCodeExpiredActionCode
       - FIRAuthErrorCodeInvalidActionCode
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/resetPassword
 */
@interface FIRResetPasswordResponse : NSObject <FIRAuthRPCResponse>

/** @property email
    @brief The email address corresponding to the reset password request.
 */
@property(nonatomic, strong, readonly) NSString *email;

/** @property verifiedEmail
    @brief The verified email returned from the backend.
 */
@property(nonatomic, strong, readonly) NSString *verifiedEmail;

/** @property requestType
    @brief The tpye of request as returned by the backend.
 */
@property(nonatomic, strong, readonly) NSString *requestType;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRResetPasswordResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRRevokeTokenRequest.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRRevokeTokenRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property providerID
    @brief The provider that issued the token to revoke.
 */
@property(nonatomic, copy) NSString *providerID;

/** @property tokenType
    @brief The type of the token to revoke.
 */
@property(nonatomic) NSInteger tokenType;

/** @property token
    @brief The token to be revoked.
 */
@property(nonatomic, copy) NSString *token;

/** @property idToken
    @brief The ID Token associated with this credential.
 */
@property(nonatomic, copy) NSString *idToken;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithToken:requestConfiguration: instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithAppToken:isSandbox:requestConfiguration:
    @brief Designated initializer.
    @param token The token to be revoked.
    @param idToken The id token associated with the current user.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithToken:(NSString *)token
                               idToken:(NSString *)idToken
                  requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRRevokeTokenRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRRevokeTokenResponse.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRRevokeTokenResponse : NSObject <FIRAuthRPCResponse>

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRRevokeTokenResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSecureTokenRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRSecureTokenRequest
    @brief Represents the parameters for the token endpoint.
 */
@interface FIRSecureTokenRequest : NSObject <FIRAuthRPCRequest>

/** @property refreshToken
    @brief The client's refresh token.
 */
@property(nonatomic, copy, readonly, nullable) NSString *refreshToken;

/** @property APIKey
    @brief The client's API Key.
 */
@property(nonatomic, copy, readonly) NSString *APIKey;

/** @fn refreshRequestWithRefreshToken:requestConfiguration:
    @brief Creates a refresh request with the given refresh token.
    @param refreshToken The refresh token.
    @param requestConfiguration An object containing configurations to be added to the request.
    @return A refresh request.
 */
+ (FIRSecureTokenRequest *)refreshRequestWithRefreshToken:(NSString *)refreshToken
                                     requestConfiguration:
                                         (FIRAuthRequestConfiguration *)requestConfiguration;

/** @fn init
    @brief Please use initWithRefreshToken:requestConfiguration:
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithRefreshToken:requestConfiguration:
    @brief Designated initializer.
    @param refreshToken The client's refresh token (for refresh requests.)
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithRefreshToken:(NSString *)refreshToken
                         requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSecureTokenRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSecureTokenResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRSecureTokenResponse
    @brief Represents the response from the token endpoint.
 */
@interface FIRSecureTokenResponse : NSObject <FIRAuthRPCResponse>

/** @property approximateExpirationDate
    @brief The approximate expiration date of the access token.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *approximateExpirationDate;

/** @property refreshToken
    @brief The refresh token. (Possibly an updated one for refresh requests.)
 */
@property(nonatomic, copy, readonly, nullable) NSString *refreshToken;

/** @property accessToken
    @brief The new access token.
 */
@property(nonatomic, copy, readonly, nullable) NSString *accessToken;

/** @property IDToken
    @brief The new ID Token.
 */
@property(nonatomic, copy, readonly, nullable) NSString *IDToken;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSecureTokenResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSendVerificationCodeRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

@class FIRAuthAppCredential;

NS_ASSUME_NONNULL_BEGIN

@interface FIRSendVerificationCodeRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property phoneNumber
    @brief The phone number to which the verification code should be sent.
 */
@property(nonatomic, strong, readonly) NSString *phoneNumber;

/** @property appCredential
    @brief The credential to prove the identity of the app in order to send the verification code.
 */
@property(nonatomic, strong, readonly, nullable) FIRAuthAppCredential *appCredential;

/** @property reCAPTCHAToken
    @brief The reCAPTCHA token to prove the identity of the app in order to send the verification
        code.
 */
@property(nonatomic, strong, readonly, nullable) NSString *reCAPTCHAToken;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithPhoneNumber:appCredentials:requestConfiguration: instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithPhoneNumber:appCredentials:requestConfiguration:
    @brief Designated initializer.
    @param phoneNumber The phone number to which the verification code is to be sent.
    @param appCredential The credential that proves the identity of the app.
    @param reCAPTCHAToken The reCAPTCHA token that proves the identity of the app.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithPhoneNumber:(NSString *)phoneNumber
                               appCredential:(nullable FIRAuthAppCredential *)appCredential
                              reCAPTCHAToken:(nullable NSString *)reCAPTCHAToken
                        requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSendVerificationCodeRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSendVerificationCodeResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRSendVerificationCodeResponse : NSObject <FIRAuthRPCResponse>

/** @property verificationID
    @brief Encrypted session information returned by the backend.
 */
@property(nonatomic, readonly) NSString *verificationID;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSendVerificationCodeResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSetAccountInfoRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

@class FIRGetAccountInfoResponse;

NS_ASSUME_NONNULL_BEGIN

/** @var FIRSetAccountInfoUserAttributeEmail
    @brief Constant for email attribute used in "deleteAttributes".
 */
extern NSString *const FIRSetAccountInfoUserAttributeEmail;

/** @var FIRSetAccountInfoUserAttributeDisplayName
    @brief Constant for displayName attribute used in "deleteAttributes".
 */
extern NSString *const FIRSetAccountInfoUserAttributeDisplayName;

/** @var FIRSetAccountInfoUserAttributeProvider
    @brief Constant for provider attribute used in "deleteAttributes".
 */
extern NSString *const FIRSetAccountInfoUserAttributeProvider;

/** @var FIRSetAccountInfoUserAttributePhotoURL
    @brief Constant for photoURL attribute used in "deleteAttributes".
 */
extern NSString *const FIRSetAccountInfoUserAttributePhotoURL;

/** @var FIRSetAccountInfoUserAttributePassword
    @brief Constant for password attribute used in "deleteAttributes".
 */
extern NSString *const FIRSetAccountInfoUserAttributePassword;

/** @class FIRSetAccountInfoRequest
    @brief Represents the parameters for the setAccountInfo endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/setAccountInfo
 */
@interface FIRSetAccountInfoRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property accessToken
    @brief The STS Access Token of the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *accessToken;

/** @property displayName
    @brief The name of the user.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** @property localID
    @brief The local ID of the user.
 */
@property(nonatomic, copy, nullable) NSString *localID;

/** @property email
    @brief The email of the user.
 */
@property(nonatomic, copy, nullable) NSString *email;

/** @property photoURL
    @brief The photoURL of the user.
 */
@property(nonatomic, copy, nullable) NSURL *photoURL;

/** @property password
    @brief The new password of the user.
 */
@property(nonatomic, copy, nullable) NSString *password;

/** @property providers
    @brief The associated identity providers of the user.
 */
@property(nonatomic, copy, nullable) NSArray<NSString *> *providers;

/** @property OOBCode
    @brief The out-of-band code of the change email request.
 */
@property(nonatomic, copy, nullable) NSString *OOBCode;

/** @property emailVerified
    @brief Whether to mark the email as verified or not.
 */
@property(nonatomic, assign) BOOL emailVerified;

/** @property upgradeToFederatedLogin
    @brief Whether to mark the user to upgrade to federated login.
 */
@property(nonatomic, assign) BOOL upgradeToFederatedLogin;

/** @property captchaChallenge
    @brief The captcha challenge.
 */
@property(nonatomic, copy, nullable) NSString *captchaChallenge;

/** @property captchaResponse
    @brief Response to the captcha.
 */
@property(nonatomic, copy, nullable) NSString *captchaResponse;

/** @property deleteAttributes
    @brief The list of user attributes to delete.
    @remarks Every element of the list must be one of the predefined constant starts with
        "FIRSetAccountInfoUserAttribute".
 */
@property(nonatomic, copy, nullable) NSArray<NSString *> *deleteAttributes;

/** @property deleteProviders
    @brief The list of identity providers to delete.
 */
@property(nonatomic, copy, nullable) NSArray<NSString *> *deleteProviders;

/** @property returnSecureToken
    @brief Whether the response should return access token and refresh token directly.
    @remarks The default value is @c YES .
 */
@property(nonatomic, assign) BOOL returnSecureToken;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithAPIKey:email:password:displayName:requestConfiguration instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithRequestConfiguration:
    @brief Designated initializer.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithRequestConfiguration:
    (FIRAuthRequestConfiguration *)requestConfiguration NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSetAccountInfoRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSetAccountInfoResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRSetAccountInfoResponseProviderUserInfo
    @brief Represents the provider user info part of the response from the setAccountInfo endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/setAccountInfo
 */
@interface FIRSetAccountInfoResponseProviderUserInfo : NSObject

/** @property providerID
    @brief The ID of the identity provider.
 */
@property(nonatomic, strong, readonly, nullable) NSString *providerID;

/** @property displayName
    @brief The user's display name at the identity provider.
 */
@property(nonatomic, strong, readonly, nullable) NSString *displayName;

/** @property photoURL
    @brief The user's photo URL at the identity provider.
 */
@property(nonatomic, strong, readonly, nullable) NSURL *photoURL;

/** @fn init
    @brief Please use initWithDictionary:
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithAPIKey:
    @brief Designated initializer.
    @param dictionary The provider user info data from endpoint.
 */
- (instancetype)initWithDictionary:(NSDictionary *)dictionary NS_DESIGNATED_INITIALIZER;

@end

/** @class FIRSetAccountInfoResponse
    @brief Represents the response from the setAccountInfo endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/setAccountInfo
 */
@interface FIRSetAccountInfoResponse : NSObject <FIRAuthRPCResponse>

/** @property email
    @brief The email or the user.
 */
@property(nonatomic, strong, readonly, nullable) NSString *email;

/** @property displayName
    @brief The display name of the user.
 */
@property(nonatomic, strong, readonly, nullable) NSString *displayName;

/** @property providerUserInfo
    @brief The user's profiles at the associated identity providers.
 */
@property(nonatomic, strong, readonly, nullable)
    NSArray<FIRSetAccountInfoResponseProviderUserInfo *> *providerUserInfo;

/** @property IDToken
    @brief Either an authorization code suitable for performing an STS token exchange, or the
        access token from Secure Token Service, depending on whether @c returnSecureToken is set
        on the request.
 */
@property(nonatomic, strong, readonly, nullable) NSString *IDToken;

/** @property approximateExpirationDate
    @brief The approximate expiration date of the access token.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *approximateExpirationDate;

/** @property refreshToken
    @brief The refresh token from Secure Token Service.
 */
@property(nonatomic, strong, readonly, nullable) NSString *refreshToken;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSetAccountInfoResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSignInWithGameCenterRequest.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRSignInWithGameCenterRequest
    @brief The request to sign in with Game Center account
 */
@interface FIRSignInWithGameCenterRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property playerID
    @brief The playerID to verify.
 */
@property(nonatomic, copy) NSString *playerID;

/** @property teamPlayerID
    @brief The team player ID of the Game Center local player.
 */
@property(nonatomic, readonly) NSString *teamPlayerID;

/** @property gamePlayerID
    @brief The game player ID of the Game Center local player.
 */
@property(nonatomic, readonly) NSString *gamePlayerID;

/** @property publicKeyURL
    @brief The URL for the public encryption key.
 */
@property(nonatomic, copy) NSURL *publicKeyURL;

/** @property signature
    @brief The verification signature data generated by Game Center.
 */
@property(nonatomic, copy) NSData *signature;

/** @property salt
    @brief A random strong used to compute the hash and keep it randomized.
 */
@property(nonatomic, copy) NSData *salt;

/** @property timestamp
    @brief The date and time that the signature was created.
 */
@property(nonatomic, assign) uint64_t timestamp;

/** @property accessToken
    @brief The STS Access Token for the authenticated user, only needed for linking the user.
 */
@property(nonatomic, copy, nullable) NSString *accessToken;

/** @property displayName
    @brief The display name of the local Game Center player.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithPlayerID:publicKeyURL:signature:salt:timestamp:requestConfiguration:.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithPlayerID:publicKeyURL:signature:salt:timestamp:displayName:requestConfiguration:
    @brief Designated initializer.
    @param playerID The ID of the Game Center player.
    @param publicKeyURL The URL for the public encryption key.
    @param signature The verification signature generated.
    @param salt A random string used to compute the hash and keep it randomized.
    @param timestamp The date and time that the signature was created.
    @param displayName The display name of the Game Center player.
 */
- (nullable instancetype)initWithPlayerID:(NSString *)playerID
                             teamPlayerID:(nullable NSString *)teamPlayerID
                             gamePlayerID:(nullable NSString *)gamePlayerID
                             publicKeyURL:(NSURL *)publicKeyURL
                                signature:(NSData *)signature
                                     salt:(NSData *)salt
                                timestamp:(uint64_t)timestamp
                              displayName:(NSString *)displayName
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSignInWithGameCenterRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSignInWithGameCenterResponse.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRSignInWithGameCenterResponse : NSObject <FIRAuthRPCResponse>

/** @property IDToken
    @brief Either an authorization code suitable for performing an STS token exchange, or the access
    token from Secure Token Service, depending on whether @c returnSecureToken is set on the
    request.
 */
@property(nonatomic, copy, readonly, nullable) NSString *IDToken;

/** @property refreshToken
    @brief The refresh token from Secure Token Service.
 */
@property(nonatomic, copy, readonly, nullable) NSString *refreshToken;

/** @property localID
    @brief The Firebase Auth user ID.
 */
@property(nonatomic, copy, readonly, nullable) NSString *localID;

/** @property playerID
    @brief The verified player ID.
 */
@property(nonatomic, copy, readonly, nullable) NSString *playerID;

/** @property teamPlayerID
    @brief The verified team player ID.
 */
@property(nonatomic, copy, readonly, nullable) NSString *teamPlayerID;

/** @property gamePlayerID
    @brief The verified game player ID.
 */
@property(nonatomic, copy, readonly, nullable) NSString *gamePlayerID;

/** @property approximateExpirationDate
    @brief The approximate expiration date of the access token.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *approximateExpirationDate;

/** @property isNewUser
    @brief Flag indicating that the user signing in is a new user and not a returning user.
 */
@property(nonatomic, assign) BOOL isNewUser;

/** @property displayName
    @brief The user's Game Center display name.
 */
@property(nonatomic, copy, readonly, nullable) NSString *displayName;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSignInWithGameCenterResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSignUpNewUserRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRSignUpNewUserRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property email
    @brief The email of the user.
 */
@property(nonatomic, copy, nullable) NSString *email;

/** @property password
    @brief The password inputed by the user.
 */
@property(nonatomic, copy, nullable) NSString *password;

/** @property displayName
    @brief The password inputed by the user.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** @property idToken
    @brief The idToken of the user.
 */
@property(nonatomic, copy, nullable) NSString *idToken;

/** @property captchaResponse
    @brief Response to the captcha.
 */
@property(nonatomic, copy, nullable) NSString *captchaResponse;

/** @property captchaResponse
    @brief The reCAPTCHA version.
 */
@property(nonatomic, copy, nullable) NSString *recaptchaVersion;

/** @property returnSecureToken
    @brief Whether the response should return access token and refresh token directly.
    @remarks The default value is @c YES .
 */
@property(nonatomic, assign) BOOL returnSecureToken;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithAPIKey:email:password:displayName:requestConfiguration instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithEndpoint:requestConfiguration:
    @brief initializer for anonymous sign-in.
 */
- (nullable instancetype)initWithRequestConfiguration:
    (FIRAuthRequestConfiguration *)requestConfiguration;

/** @fn initWithAPIKey:email:password:displayName:requestConfiguration
    @brief Designated initializer.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithEmail:(nullable NSString *)email
                              password:(nullable NSString *)password
                           displayName:(nullable NSString *)displayName
                               idToken:(nullable NSString *)idToken
                  requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSignUpNewUserRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSignUpNewUserResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRSignUpNewUserResponse : NSObject <FIRAuthRPCResponse>

/** @property IDToken
    @brief Either an authorization code suitable for performing an STS token exchange, or the
        access token from Secure Token Service, depending on whether @c returnSecureToken is set
        on the request.
 */
@property(nonatomic, strong, readonly, nullable) NSString *IDToken;

/** @property approximateExpirationDate
    @brief The approximate expiration date of the access token.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *approximateExpirationDate;

/** @property refreshToken
    @brief The refresh token from Secure Token Service.
 */
@property(nonatomic, strong, readonly, nullable) NSString *refreshToken;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRSignUpNewUserResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyAssertionRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRVerifyAssertionRequest
    @brief Represents the parameters for the verifyAssertion endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/verifyAssertion
 */
@interface FIRVerifyAssertionRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property requestURI
    @brief The URI to which the IDP redirects the user back. It may contain federated login result
        params added by the IDP.
 */
@property(nonatomic, copy, nullable) NSString *requestURI;

/** @property pendingToken
    @brief The Firebase ID Token for the IDP pending to be confirmed by the user.
 */
@property(nonatomic, copy, nullable) NSString *pendingToken;

/** @property accessToken
    @brief The STS Access Token for the authenticated user, only needed for linking the user.
 */
@property(nonatomic, copy, nullable) NSString *accessToken;

/** @property returnSecureToken
    @brief Whether the response should return access token and refresh token directly.
    @remarks The default value is @c YES .
 */
@property(nonatomic, assign) BOOL returnSecureToken;

#pragma mark - Components of "postBody"

/** @property providerID
    @brief The ID of the IDP whose credentials are being presented to the endpoint.
 */
@property(nonatomic, copy, readonly) NSString *providerID;

/** @property providerAccessToken
    @brief An access token from the IDP.
 */
@property(nonatomic, copy, nullable) NSString *providerAccessToken;

/** @property providerIDToken
    @brief An ID Token from the IDP.
 */
@property(nonatomic, copy, nullable) NSString *providerIDToken;

/** @property providerRawNonce
    @brief An raw nonce from the IDP.
 */
@property(nonatomic, copy, nullable) NSString *providerRawNonce;

/** @property returnIDPCredential
    @brief Whether the response should return the IDP credential directly.
 */
@property(nonatomic, assign) BOOL returnIDPCredential;

/** @property providerOAuthTokenSecret
    @brief A session ID used to map this request to a headful-lite flow.
 */
@property(nonatomic, copy, nullable) NSString *sessionID;

/** @property providerOAuthTokenSecret
    @brief An OAuth client secret from the IDP.
 */
@property(nonatomic, copy, nullable) NSString *providerOAuthTokenSecret;

/** @property inputEmail
    @brief The originally entered email in the UI.
 */
@property(nonatomic, copy, nullable) NSString *inputEmail;

/** @property autoCreate
    @brief A flag that indicates whether or not the user should be automatically created.
 */
@property(nonatomic, assign) BOOL autoCreate;

/** @property fullName
    @brief A full name from the IdP.
 */
@property(nonatomic, copy, nullable) NSPersonNameComponents *fullName;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithProviderID:requestConfifuration instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithProviderID:requestConfifuration
    @brief Designated initializer.
    @param providerID The auth provider's ID.
    @param requestConfiguration An object containing configurations to be added to the request.

 */
- (nullable instancetype)initWithProviderID:(NSString *)providerID
                       requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyAssertionRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyClientRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRVerifyClientRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property appToken
    @brief The APNS device token.
 */
@property(nonatomic, readonly, nullable) NSString *appToken;

/** @property isSandbox
    @brief The flag that denotes if the appToken  pertains to Sandbox or Production.
 */
@property(nonatomic, assign, readonly) BOOL isSandbox;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithToken:requestConfiguration: instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithAppToken:isSandbox:requestConfiguration:
    @brief Designated initializer.
    @param appToken The APNS device token.
    @param isSandbox The flag indicating whether or not the app token provided is for Sandbox or
        Production.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithAppToken:(nullable NSString *)appToken
                                isSandbox:(BOOL)isSandbox
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyClientRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyClientResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRVerifyClientResponse : NSObject <FIRAuthRPCResponse>

/** @property receipt
    @brief Receipt that the APNS token was successfully validated with APNS.
 */
@property(nonatomic, copy, readonly, nullable) NSString *receipt;

/** @property suggestedTimeOut
    @brief The date after which delivery of the silent push notification is considered to have
        failed.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *suggestedTimeOutDate;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyClientResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyCustomTokenRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRVerifyCustomTokenRequest
    @brief Represents the parameters for the verifyCustomToken endpoint.
 */
@interface FIRVerifyCustomTokenRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property token
    @brief The self-signed token from the client's BYOAuth server.
 */
@property(nonatomic, copy, readonly) NSString *token;

/** @property returnSecureToken
    @brief Whether the response should return access token and refresh token directly.
    @remarks The default value is @c YES .
 */
@property(nonatomic, assign) BOOL returnSecureToken;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithToken:requestConfiguration: instead.
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithToken:requestConfiguration:
    @brief Designated initializer.
    @param token The self-signed token from the client's BYOAuth server.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithToken:(NSString *)token
                  requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyCustomTokenRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyCustomTokenResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRVerifyCustomTokenResponse
    @brief Represents the response from the verifyCustomToken endpoint.
 */
@interface FIRVerifyCustomTokenResponse : NSObject <FIRAuthRPCResponse>

/** @property IDToken
    @brief Either an authorization code suitable for performing an STS token exchange, or the
        access token from Secure Token Service, depending on whether @c returnSecureToken is set
        on the request.
 */
@property(nonatomic, strong, readonly, nullable) NSString *IDToken;

/** @property approximateExpirationDate
    @brief The approximate expiration date of the access token.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *approximateExpirationDate;

/** @property refreshToken
    @brief The refresh token from Secure Token Service.
 */
@property(nonatomic, strong, readonly, nullable) NSString *refreshToken;

/** @property isNewUser
    @brief Flag indicating that the user signing in is a new user and not a returning user.
 */
@property(nonatomic, assign) BOOL isNewUser;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyCustomTokenResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyPasswordRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRVerifyPasswordRequest
    @brief Represents the parameters for the verifyPassword endpoint.
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/verifyPassword
 */
@interface FIRVerifyPasswordRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property email
    @brief The email of the user.
 */
@property(nonatomic, copy) NSString *email;

/** @property password
    @brief The password inputed by the user.
 */
@property(nonatomic, copy) NSString *password;

/** @property pendingIDToken
    @brief The GITKit token for the non-trusted IDP, which is to be confirmed by the user.
 */
@property(nonatomic, copy, nullable) NSString *pendingIDToken;

/** @property captchaChallenge
    @brief The captcha challenge.
 */
@property(nonatomic, copy, nullable) NSString *captchaChallenge;

/** @property captchaResponse
    @brief Response to the captcha.
 */
@property(nonatomic, copy, nullable) NSString *captchaResponse;

/** @property captchaResponse
    @brief The reCAPTCHA version.
 */
@property(nonatomic, copy, nullable) NSString *recaptchaVersion;

/** @property returnSecureToken
    @brief Whether the response should return access token and refresh token directly.
    @remarks The default value is @c YES .
 */
@property(nonatomic, assign) BOOL returnSecureToken;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithEmail:password:requestConfiguration:
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithEmail:password:requestConfiguration:
    @brief Designated initializer.
    @param email The email of the user.
    @param password The password inputed by the user.
    @param requestConfiguration The configu
 */
- (nullable instancetype)initWithEmail:(NSString *)email
                              password:(NSString *)password
                  requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyPasswordRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyPasswordResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProtoMFAEnrollment.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRVerifyPasswordResponse
    @brief Represents the response from the verifyPassword endpoint.
    @remarks Possible error codes:
       - FIRAuthInternalErrorCodeUserDisabled
       - FIRAuthInternalErrorCodeEmailNotFound
    @see https://developers.google.com/identity/toolkit/web/reference/relyingparty/verifyPassword
 */
@interface FIRVerifyPasswordResponse : NSObject <FIRAuthRPCResponse>

/** @property localID
    @brief The RP local ID if it's already been mapped to the IdP account identified by the
        federated ID.
 */
@property(nonatomic, strong, readonly, nullable) NSString *localID;

/** @property email
    @brief The email returned by the IdP. NOTE: The federated login user may not own the email.
 */
@property(nonatomic, strong, readonly, nullable) NSString *email;

/** @property displayName
    @brief The display name of the user.
 */
@property(nonatomic, strong, readonly, nullable) NSString *displayName;

/** @property IDToken
    @brief Either an authorization code suitable for performing an STS token exchange, or the
        access token from Secure Token Service, depending on whether @c returnSecureToken is set
        on the request.
 */
@property(nonatomic, strong, readonly, nullable) NSString *IDToken;

/** @property approximateExpirationDate
    @brief The approximate expiration date of the access token.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *approximateExpirationDate;

/** @property refreshToken
    @brief The refresh token from Secure Token Service.
 */
@property(nonatomic, strong, readonly, nullable) NSString *refreshToken;

/** @property photoURL
    @brief The URI of the public accessible profile picture.
 */
@property(nonatomic, strong, readonly, nullable) NSURL *photoURL;

/** @property MFAPendingCredential
    @brief An opaque string that functions as proof that the user has successfully passed the first
   factor check.
*/
@property(nonatomic, strong, readonly, nullable) NSString *MFAPendingCredential;

/** @property MFAInfo
    @brief Info on which multi-factor authentication providers are enabled.
*/
@property(nonatomic, strong, readonly, nullable) NSArray<FIRAuthProtoMFAEnrollment *> *MFAInfo;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyPasswordResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyPhoneNumberRequest.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Auth/FIRAuthOperationType.h"
#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRVerifyPhoneNumberRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

/** @property verificationID
    @brief The verification ID obtained from the response of @c sendVerificationCode.
*/
@property(nonatomic, readonly, nullable) NSString *verificationID;

/** @property verificationCode
    @brief The verification code provided by the user.
*/
@property(nonatomic, readonly, nullable) NSString *verificationCode;

/** @property accessToken
    @brief The STS Access Token for the authenticated user.
 */
@property(nonatomic, copy, nullable) NSString *accessToken;

/** @var temporaryProof
    @brief The temporary proof code, previously returned from the backend.
 */
@property(nonatomic, readonly, nonnull) NSString *temporaryProof;

/** @var phoneNumber
    @brief The phone number to be verified in the request.
 */
@property(nonatomic, readonly, nonnull) NSString *phoneNumber;

/** @var operation
    @brief The type of operation triggering this verify phone number request.
 */
@property(nonatomic, assign, readonly) FIRAuthOperationType operation;

/** @fn initWithEndpoint:requestConfiguration:
    @brief Please use initWithVerificationID:verificationCode:requestConfiguration
 */
- (nullable instancetype)initWithEndpoint:(NSString *)endpoint
                     requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_UNAVAILABLE;

/** @fn initWithTemporaryProof:phoneNumberAPIKey
    @brief Designated initializer.
    @param temporaryProof The temporary proof sent by the backed.
    @param phoneNumber The phone number associated with the credential to be signed in.
    @param operation Indicates what operation triggered the verify phone number request.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithTemporaryProof:(NSString *)temporaryProof
                                    phoneNumber:(NSString *)phoneNumber
                                      operation:(FIRAuthOperationType)operation
                           requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

/** @fn initWithVerificationID:verificationCode:requestConfiguration
    @brief Designated initializer.
    @param verificationID The verification ID obtained from the response of @c sendVerificationCode.
    @param verificationCode The verification code provided by the user.
    @param operation Indicates what operation triggered the verify phone number request.
    @param requestConfiguration An object containing configurations to be added to the request.
 */
- (nullable instancetype)initWithVerificationID:(NSString *)verificationID
                               verificationCode:(NSString *)verificationCode
                                      operation:(FIRAuthOperationType)operation
                           requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyPhoneNumberRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyPhoneNumberResponse.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRVerifyPhoneNumberResponse : NSObject <FIRAuthRPCResponse>

/** @property IDToken
    @brief Either an authorization code suitable for performing an STS token exchange, or the
        access token from Secure Token Service, depending on whether @c returnSecureToken is set
        on the request.
 */
@property(nonatomic, strong, readonly, nullable) NSString *IDToken;

/** @property refreshToken
    @brief The refresh token from Secure Token Service.
 */
@property(nonatomic, strong, readonly, nullable) NSString *refreshToken;

/** @property localID
    @brief The Firebase Auth user ID.
 */
@property(nonatomic, strong, readonly, nullable) NSString *localID;

/** @property phoneNumber
    @brief The verified phone number.
 */
@property(nonatomic, strong, readonly, nullable) NSString *phoneNumber;

/** @property temporaryProof
    @brief The temporary proof code returned by the backend.
 */
@property(nonatomic, strong, readonly, nullable) NSString *temporaryProof;

/** @property isNewUser
    @brief Flag indicating that the user signing in is a new user and not a returning user.
 */
@property(nonatomic, assign) BOOL isNewUser;

/** @property approximateExpirationDate
    @brief The approximate expiration date of the access token.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *approximateExpirationDate;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/FIRVerifyPhoneNumberResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRFinalizeMFAEnrollmentRequest.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoFinalizeMFAPhoneRequestInfo.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoFinalizeMFATOTPEnrollmentRequestInfo.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRFinalizeMFAEnrollmentRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

@property(nonatomic, copy, readonly, nullable) NSString *IDToken;

@property(nonatomic, copy, readonly, nullable) NSString *displayName;
@property(nonatomic, copy, readonly, nullable)
    FIRAuthProtoFinalizeMFAPhoneRequestInfo *phoneVerificationInfo;
@property(nonatomic, copy, readonly, nullable)
    FIRAuthProtoFinalizeMFATOTPEnrollmentRequestInfo *TOTPVerificationInfo;

- (nullable instancetype)initWithIDToken:(NSString *)IDToken
                             displayName:(NSString *)displayName
                   phoneVerificationInfo:
                       (FIRAuthProtoFinalizeMFAPhoneRequestInfo *)phoneVerificationInfo
                    requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

- (nullable instancetype)initWithIDToken:(NSString *)IDToken
                             displayName:(NSString *)displayName
                    TOTPVerificationInfo:
                        (FIRAuthProtoFinalizeMFATOTPEnrollmentRequestInfo *)TOTPVerificationInfo
                    requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRFinalizeMFAEnrollmentRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRFinalizeMFAEnrollmentResponse.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoFinalizeMFAPhoneResponseInfo.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoFinalizeMFATOTPEnrollmentResponseInfo.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRFinalizeMFAEnrollmentResponse : NSObject <FIRAuthRPCResponse>

@property(nonatomic, copy, readonly, nullable) NSString *IDToken;

@property(nonatomic, copy, readonly, nullable) NSString *refreshToken;
@property(nonatomic, copy, readonly, nullable)
    FIRAuthProtoFinalizeMFAPhoneResponseInfo *phoneAuthInfo;
@property(nonatomic, copy, readonly, nullable)
    FIRAuthProtoFinalizeMFATOTPEnrollmentResponseInfo *TOTPAuthInfo;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRFinalizeMFAEnrollmentResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRStartMFAEnrollmentRequest.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoStartMFAPhoneRequestInfo.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoStartMFATOTPEnrollmentRequestInfo.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRStartMFAEnrollmentRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

@property(nonatomic, copy, readonly, nullable) NSString *IDToken;
@property(nonatomic, copy, readonly, nullable)
    FIRAuthProtoStartMFAPhoneRequestInfo *phoneEnrollmentInfo;
@property(nonatomic, copy, readonly, nullable)
    FIRAuthProtoStartMFATOTPEnrollmentRequestInfo *TOTPEnrollmentInfo;

- (nullable instancetype)initWithIDToken:(NSString *)IDToken
                          enrollmentInfo:(FIRAuthProtoStartMFAPhoneRequestInfo *)phoneEnrollmentInfo
                    requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

- (nullable instancetype)initWithIDToken:(NSString *)IDToken
                      TOTPEnrollmentInfo:
                          (FIRAuthProtoStartMFATOTPEnrollmentRequestInfo *)TOTPEnrollmentInfo
                    requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRStartMFAEnrollmentRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRStartMFAEnrollmentResponse.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoStartMFAPhoneResponseInfo.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoStartMFATOTPEnrollmentResponseInfo.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRStartMFAEnrollmentResponse : NSObject <FIRAuthRPCResponse>
@property(nonatomic, copy, readonly, nullable)
    FIRAuthProtoStartMFAPhoneResponseInfo *phoneSessionInfo;
@property(nonatomic, copy, readonly, nullable)
    FIRAuthProtoStartMFATOTPEnrollmentResponseInfo *TOTPSessionInfo;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Enroll/FIRStartMFAEnrollmentResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRFinalizeMFASignInRequest.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoFinalizeMFAPhoneRequestInfo.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoFinalizeMFATOTPSignInRequestInfo.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRFinalizeMFASignInRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

@property(nonatomic, copy, readonly, nullable) NSString *MFAPendingCredential;

@property(nonatomic, copy, readonly, nullable) NSObject<FIRAuthProto> *verificationInfo;

- (nullable instancetype)initWithMFAPendingCredential:(NSString *)MFAPendingCredential
                                     verificationInfo:(NSObject<FIRAuthProto> *)verificationInfo
                                 requestConfiguration:
                                     (FIRAuthRequestConfiguration *)requestConfiguration;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRFinalizeMFASignInRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRFinalizeMFASignInResponse.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoFinalizeMFAPhoneResponseInfo.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRFinalizeMFASignInResponse : NSObject <FIRAuthRPCResponse>

@property(nonatomic, copy, readonly, nullable) NSString *IDToken;

@property(nonatomic, copy, readonly, nullable) NSString *refreshToken;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRFinalizeMFASignInResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRStartMFASignInRequest.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoStartMFAPhoneRequestInfo.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRStartMFASignInRequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

@property(nonatomic, copy, readonly, nullable) NSString *MFAPendingCredential;

@property(nonatomic, copy, readonly, nullable) NSString *MFAEnrollmentID;

@property(nonatomic, copy, readonly, nullable) FIRAuthProtoStartMFAPhoneRequestInfo *signInInfo;

- (nullable instancetype)
    initWithMFAPendingCredential:(NSString *)MFAPendingCredential
                 MFAEnrollmentID:(NSString *)MFAEnrollmentID
                      signInInfo:(FIRAuthProtoStartMFAPhoneRequestInfo *)signInInfo
            requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRStartMFASignInRequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRStartMFASignInResponse.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoStartMFAPhoneResponseInfo.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRStartMFASignInResponse : NSObject <FIRAuthRPCResponse>

@property(nonatomic, copy, readonly, nullable) FIRAuthProtoStartMFAPhoneResponseInfo *responseInfo;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/SignIn/FIRStartMFASignInResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Unenroll/FIRWithdrawMFARequest.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCRequest.h"
#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRWithdrawMFARequest : FIRIdentityToolkitRequest <FIRAuthRPCRequest>

@property(nonatomic, copy, readonly, nullable) NSString *IDToken;

@property(nonatomic, copy, readonly, nullable) NSString *MFAEnrollmentID;

- (nullable instancetype)initWithIDToken:(NSString *)IDToken
                         MFAEnrollmentID:(NSString *)MFAEnrollmentID
                    requestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Unenroll/FIRWithdrawMFARequest.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Unenroll/FIRWithdrawMFAResponse.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/FIRAuthRPCResponse.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRWithdrawMFAResponse : NSObject <FIRAuthRPCResponse>

@property(nonatomic, copy, readonly, nullable) NSString *IDToken;

@property(nonatomic, copy, readonly, nullable) NSString *refreshToken;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/MultiFactor/Unenroll/FIRWithdrawMFAResponse.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@protocol FIRAuthProto <NSObject>

@optional
- (instancetype)initWithDictionary:(NSDictionary *)dictionary;

- (NSDictionary *)dictionary;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProtoMFAEnrollment.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthProtoMFAEnrollment : NSObject <FIRAuthProto>

@property(nonatomic, copy, readonly, nullable) NSString *phoneInfo;

@property(nonatomic, copy, readonly, nullable) NSObject *TOTPInfo;

@property(nonatomic, copy, readonly, nullable) NSString *MFAEnrollmentID;

@property(nonatomic, copy, readonly, nullable) NSString *displayName;

@property(nonatomic, copy, readonly, nullable) NSDate *enrolledAt;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProtoMFAEnrollment.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoFinalizeMFAPhoneRequestInfo.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthProtoFinalizeMFAPhoneRequestInfo : NSObject <FIRAuthProto>

@property(nonatomic, strong, readonly, nullable) NSString *sessionInfo;

@property(nonatomic, strong, readonly, nullable) NSString *code;

- (instancetype)initWithSessionInfo:(NSString *)sessionInfo
                   verificationCode:(NSString *)verificationCode;
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoFinalizeMFAPhoneRequestInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoFinalizeMFAPhoneResponseInfo.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthProtoFinalizeMFAPhoneResponseInfo : NSObject <FIRAuthProto>

@property(nonatomic, copy, readonly, nullable) NSString *phoneNumber;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoFinalizeMFAPhoneResponseInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoStartMFAPhoneRequestInfo.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"
#import "FirebaseAuth/Sources/SystemService/FIRAuthAppCredential.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthProtoStartMFAPhoneRequestInfo : NSObject <FIRAuthProto>

@property(nonatomic, strong, readonly, nullable) NSString *phoneNumber;

@property(nonatomic, strong, readonly, nullable) FIRAuthAppCredential *appCredential;

@property(nonatomic, strong, readonly, nullable) NSString *reCAPTCHAToken;

- (nullable instancetype)initWithPhoneNumber:(NSString *)phoneNumber
                               appCredential:(nullable FIRAuthAppCredential *)appCredential
                              reCAPTCHAToken:(nullable NSString *)reCAPTCHAToken;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoStartMFAPhoneRequestInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoStartMFAPhoneResponseInfo.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthProtoStartMFAPhoneResponseInfo : NSObject <FIRAuthProto>

@property(nonatomic, copy, readonly, nullable) NSString *sessionInfo;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/Phone/FIRAuthProtoStartMFAPhoneResponseInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoFinalizeMFATOTPEnrollmentRequestInfo.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthProtoFinalizeMFATOTPEnrollmentRequestInfo : NSObject <FIRAuthProto>

@property(nonatomic, copy, readonly, nonnull) NSString *sessionInfo;
@property(nonatomic, copy, readonly, nonnull) NSString *verificationCode;

- (instancetype)initWithSessionInfo:(NSString *)sessionInfo
                   verificationCode:(NSString *)verificationCode;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoFinalizeMFATOTPEnrollmentRequestInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoFinalizeMFATOTPEnrollmentResponseInfo.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthProtoFinalizeMFATOTPEnrollmentResponseInfo : NSObject <FIRAuthProto>

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoFinalizeMFATOTPEnrollmentResponseInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoFinalizeMFATOTPSignInRequestInfo.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"

NS_ASSUME_NONNULL_BEGIN

/**
 @brief FIRAuthProtoFinalizeMFATOTPSignInRequestInfo class.  This class is used to compose
 finalizeMFASignInRequest for TOTP case.
 */
@interface FIRAuthProtoFinalizeMFATOTPSignInRequestInfo : NSObject <FIRAuthProto>

/**
 @brief Multifactor enrollment ID.
 */
@property(nonatomic, strong, readonly, nullable) NSString *mfaEnrollmentID;

/**
 @brief Verification code.
 */
@property(nonatomic, strong, readonly, nullable) NSString *verificationCode;

/**
 @fn initWithMfaEnrollmentID:verificationCode
 @brief initialize function for FIRAuthProtoFinalizeMFATOTPSignInRequestInfo.
 @param mfaEnrollmentID Multifactor enrollment ID.
 @param verificationCode One time verification code.
 */
- (instancetype)initWithMfaEnrollmentID:(NSString *)mfaEnrollmentID
                       verificationCode:(NSString *)verificationCode;
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoFinalizeMFATOTPSignInRequestInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoStartMFATOTPEnrollmentRequestInfo.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthProtoStartMFATOTPEnrollmentRequestInfo : NSObject <FIRAuthProto>

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoStartMFATOTPEnrollmentRequestInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoStartMFATOTPEnrollmentResponseInfo.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProto.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthProtoStartMFATOTPEnrollmentResponseInfo : NSObject <FIRAuthProto>

@property(nonatomic, copy, readonly, nonnull) NSString *sharedSecretKey;
@property(nonatomic, readonly) NSInteger verificationCodeLength;
@property(nonatomic, copy, readonly, nullable) NSString *hashingAlgorithm;
@property(nonatomic, readonly) NSInteger periodSec;
@property(nonatomic, copy, readonly, nullable) NSString *sessionInfo;
@property(nonatomic, copy, readonly, nullable) NSDate *finalizeEnrollmentTime;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoStartMFATOTPEnrollmentResponseInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactor+Internal.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactor.h"

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProtoMFAEnrollment.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRMultiFactor () <NSSecureCoding>

@property(nonatomic, weak) FIRUser *user;

/** @fn initWithMFAEnrollments:
    @brief Initialize a multi factor instance with a list of MFA enrollments.
*/
- (instancetype)initWithMFAEnrollments:(NSArray<FIRAuthProtoMFAEnrollment *> *)MFAEnrollments;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactor+Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactorAssertion+Internal.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorAssertion.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRMultiFactorAssertion () {
 @protected
  NSString *_factorID;
}

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactorAssertion+Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactorInfo+Internal.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorInfo.h"

#import "FirebaseAuth/Sources/Backend/RPC/Proto/FIRAuthProtoMFAEnrollment.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRMultiFactorInfo () {
 @protected
  NSString *_factorID;
}

- (instancetype)initWithProto:(FIRAuthProtoMFAEnrollment *)proto;

#pragma mark - NSSecureCoding
// Note that we're not able to indicate FIRMultiFactorInfo conforming to NSSecureCoding in an
// internal header file, so the following NSSecureCoding methods are explicitly declared.

- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder;

- (void)encodeWithCoder:(NSCoder *)aCoder;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactorInfo+Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactorResolver+Internal.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorResolver.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRMultiFactorResolver ()

@property(nonatomic) NSString *MFAPendingCredential;

- (instancetype)initWithMFAPendingCredential:(NSString *_Nullable)MFAPendingCredential
                                       hints:(NSArray<FIRMultiFactorInfo *> *)hints
                                        auth:(FIRAuth *)auth;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactorResolver+Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactorSession+Internal.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorInfo.h"
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorSession.h"
#import "FirebaseAuth/Sources/User/FIRUser_Internal.h"

NS_ASSUME_NONNULL_BEGIN

/**
 @brief Identifies the current session to enroll a second factor or to complete sign in when
 previously enrolled. It contains additional context on the existing user, notably the confirmation
 that the user passed the first factor challenge.
 */

@interface FIRMultiFactorSession ()
/**
 @brief The ID token for an enroll flow. This has to be retrieved after recent authentication.
 */
@property(nonatomic, readonly) NSString *IDToken;
/**
 @brief The pending credential after an enrolled second factor user signs in successfully with the
 first factor
 */
@property(nonatomic) NSString *MFAPendingCredential;
/**
 @brief Multi factor info for the current user.
 */
@property(nonatomic) FIRMultiFactorInfo *multiFactorInfo;
/**
 @brief Current user object
 */
@property(nonatomic) FIRUser *currentUser;

+ (FIRMultiFactorSession *)sessionForCurrentUser;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/FIRMultiFactorSession+Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/Phone/FIRPhoneMultiFactorAssertion+Internal.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneAuthCredential.h"
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneMultiFactorAssertion.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRPhoneMultiFactorAssertion ()

@property(nonatomic) FIRPhoneAuthCredential *authCredential;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/Phone/FIRPhoneMultiFactorAssertion+Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/Phone/FIRPhoneMultiFactorInfo+Internal.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneMultiFactorInfo.h"

@class FIRAuthProtoMFAEnrollment;

@interface FIRPhoneMultiFactorInfo ()

- (instancetype)initWithProto:(FIRAuthProtoMFAEnrollment *)proto;

@end

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/Phone/FIRPhoneMultiFactorInfo+Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/TOTP/FIRTOTPMultiFactorAssertion+Internal.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRTOTPMultiFactorAssertion.h"
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRTOTPSecret.h"

NS_ASSUME_NONNULL_BEGIN
/**
 @brief The subclass of base class MultiFactorAssertion, used to assert ownership of a TOTP
 (Time-based One Time Password). second factor.
 This class is available on iOS only.
 */
@interface FIRTOTPMultiFactorAssertion ()

/**
 @brief secret TOTPSecret
 */
@property(nonatomic, copy, readonly, nonnull) FIRTOTPSecret *secret;

/**
 @brief one time password string
 */
@property(nonatomic, copy, readonly, nonnull) NSString *oneTimePassword;

/**
 @brief the enrollment ID
 */
@property(nonatomic, copy, readonly, nonnull) NSString *enrollmentID;

/**
 @fn initWithSecret
 @brief initializing function
 @param secret TOTPSecret
 @param oneTimePassword one time password string
 */
- (instancetype)initWithSecret:(FIRTOTPSecret *)secret oneTimePassword:(NSString *)oneTimePassword;

/**
 @fn initWithEnrollmentID:oneTimePassword
 @brief initializing function
 @param enrollmentID enrollment ID
 @param oneTimePassword one time password string
 */
- (instancetype)initWithEnrollmentID:(NSString *)enrollmentID
                     oneTimePassword:(NSString *)oneTimePassword;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/TOTP/FIRTOTPMultiFactorAssertion+Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/TOTP/FIRTOTPMultiFactorInfo.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorInfo.h"

NS_ASSUME_NONNULL_BEGIN

@class FIRAuthProtoMFAEnrollment;

/**
 @class FIRTotpMultiFactorInfo
 @brief Extends the MultiFactorInfo class for time based one-time password second factors.
        The identifier of this second factor is "totp".
        This class is available on iOS only.
*/
NS_SWIFT_NAME(TOTPMultiFactorInfo) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRTOTPMultiFactorInfo : FIRMultiFactorInfo

/**
 @brief This is the totp info for the second factor.
*/
@property(nonatomic, readonly, nullable) NSObject *TOTPInfo;

/**
 @fn initWithProto:
 @brief Initilize the FIRAuthProtoMFAEnrollment instance with proto.
 @param proto FIRAuthProtoMFAEnrollment proto object.
*/
- (instancetype)initWithProto:(FIRAuthProtoMFAEnrollment *)proto;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/TOTP/FIRTOTPMultiFactorInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/TOTP/FIRTOTPSecret+Internal.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import "FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoStartMFATOTPEnrollmentRequestInfo.h"
#import "FirebaseAuth/Sources/Backend/RPC/Proto/TOTP/FIRAuthProtoStartMFATOTPEnrollmentResponseInfo.h"
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuth.h"
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorSession.h"
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRTOTPSecret.h"

NS_ASSUME_NONNULL_BEGIN
/**
 @brief Internal header extending TOTPSecret class.
 */
@interface FIRTOTPSecret ()

/**
 @brief Shared secret key/seed used for enrolling in TOTP MFA and generating OTPs.
 */
@property(nonatomic, copy, readonly, nullable) NSString *secretKey;

/**
 @brief Hashing algorithm used.
 */
@property(nonatomic, copy, readonly, nullable) NSString *hashingAlgorithm;

/**
 @brief Length of the one-time passwords to be generated.
 */
@property(nonatomic, readonly) NSInteger codeLength;

/**
 @brief The interval (in seconds) when the OTP codes should change.
 */
@property(nonatomic, readonly) NSInteger codeIntervalSeconds;

/**
 @brief The timestamp by which TOTP enrollment should be completed. This can be used by callers to
 show a countdown of when to enter OTP code by.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *enrollmentCompletionDeadline;

/**
 @brief Additional session information.
 */
@property(nonatomic, copy, readonly, nullable) NSString *sessionInfo;

/**
 @fn initWithSecretKey
 @brief Initializes an instance of FIRTOTPSecret.
 @param secretKey Shared secret key/seed used for enrolling in TOTP MFA and generating OTPs.
 @param hashingAlgorithm Hashing algorithm used.
 @param codeLength Length of the one-time passwords to be generated.
 @param codeIntervalSeconds The interval (in seconds) when the OTP codes should change.
 @param enrollmentCompletionDeadline The timestamp by which TOTP enrollment should be completed.
 This can be used by callers to show a countdown of when to enter OTP code by.
 @param sessionInfo Additional session information.
 */
- (instancetype)initWithSecretKey:(NSString *)secretKey
                 hashingAlgorithm:(NSString *)hashingAlgorithm
                       codeLength:(NSInteger)codeLength
              codeIntervalSeconds:(NSInteger)codeIntervalSeconds
     enrollmentCompletionDeadline:(NSDate *)enrollmentCompletionDeadline
                      sessionInfo:(NSString *)sessionInfo;
@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/MultiFactor/TOTP/FIRTOTPSecret+Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRActionCodeSettings.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRActionCodeSettings
    @brief Used to set and retrieve settings related to handling action codes.
 */
NS_SWIFT_NAME(ActionCodeSettings)
@interface FIRActionCodeSettings : NSObject

/** @property URL
    @brief This URL represents the state/Continue URL in the form of a universal link.
    @remarks This URL can should be constructed as a universal link that would either directly open
        the app where the action code would be handled or continue to the app after the action code
        is handled by Firebase.
 */
@property(nonatomic, copy, nullable) NSURL *URL;

/** @property handleCodeInApp
    @brief Indicates whether the action code link will open the app directly or after being
        redirected from a Firebase owned web widget.
 */
@property(assign, nonatomic) BOOL handleCodeInApp;

/** @property iOSBundleID
    @brief The iOS bundle ID, if available. The default value is the current app's bundle ID.
 */
@property(copy, nonatomic, readonly, nullable) NSString *iOSBundleID;

/** @property androidPackageName
    @brief The Android package name, if available.
 */
@property(nonatomic, copy, readonly, nullable) NSString *androidPackageName;

/** @property androidMinimumVersion
    @brief The minimum Android version supported, if available.
 */
@property(nonatomic, copy, readonly, nullable) NSString *androidMinimumVersion;

/** @property androidInstallIfNotAvailable
    @brief Indicates whether the Android app should be installed on a device where it is not
       available.
 */
@property(nonatomic, assign, readonly) BOOL androidInstallIfNotAvailable;

/** @property dynamicLinkDomain
    @brief The Firebase Dynamic Link domain used for out of band code flow.
 */
@property(copy, nonatomic, nullable) NSString *dynamicLinkDomain;

/** @fn setIOSBundleID
    @brief Sets the iOS bundle Id.
    @param iOSBundleID The iOS bundle ID.
 */
- (void)setIOSBundleID:(NSString *)iOSBundleID;

/** @fn setAndroidPackageName:installIfNotAvailable:minimumVersion:
    @brief Sets the Android package name, the flag to indicate whether or not to install the app
        and the minimum Android version supported.
    @param androidPackageName The Android package name.
    @param installIfNotAvailable Indicates whether or not the app should be installed if not
        available.
    @param minimumVersion The minimum version of Android supported.
    @remarks If installIfNotAvailable is set to YES and the link is opened on an android device, it
        will try to install the app if not already available. Otherwise the web URL is used.
 */
- (void)setAndroidPackageName:(NSString *)androidPackageName
        installIfNotAvailable:(BOOL)installIfNotAvailable
               minimumVersion:(nullable NSString *)minimumVersion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRActionCodeSettings.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAdditionalUserInfo.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRVerifyAssertionResponse;

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAdditionalUserInfo
    @brief Represents additional user data returned from an identity provider.
 */
NS_SWIFT_NAME(AdditionalUserInfo)
@interface FIRAdditionalUserInfo : NSObject

/** @fn init
    @brief This class should not be initialized manually. `AdditionalUserInfo` can be retrieved
        from from an instance of `AuthDataResult`.
 */
- (instancetype)init NS_UNAVAILABLE;

/** @property providerID
    @brief The provider identifier.
 */
@property(nonatomic, readonly) NSString *providerID;

/** @property profile
    @brief Dictionary containing the additional IdP specific information.
 */
@property(nonatomic, readonly, nullable) NSDictionary<NSString *, NSObject *> *profile;

/** @property username
    @brief username The name of the user.
 */
@property(nonatomic, readonly, nullable) NSString *username;

/** @property newUser
    @brief Indicates whether or not the current user was signed in for the first time.
 */
@property(nonatomic, readonly, getter=isNewUser) BOOL newUser;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAdditionalUserInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuth.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <AvailabilityMacros.h>
#import <Foundation/Foundation.h>

#import "FIRAuthAPNSTokenType.h"
#import "FIRAuthErrors.h"

@class FIRActionCodeSettings;
@class FIRApp;
@class FIRAuth;
@class FIRAuthCredential;
@class FIRAuthDataResult;
@class FIRAuthSettings;
@class FIRUser;
@protocol FIRAuthUIDelegate;
@protocol FIRFederatedAuthProvider;

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRUserUpdateCallback
    @brief The type of block invoked when a request to update the current user is completed.
 */
typedef void (^FIRUserUpdateCallback)(NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRAuthStateDidChangeListenerHandle
    @brief The type of handle returned by `Auth.addAuthStateDidChangeListener(_:)`.
 */
// clang-format off
// clang-format12 merges the next two lines.
typedef id<NSObject> FIRAuthStateDidChangeListenerHandle
    NS_SWIFT_NAME(AuthStateDidChangeListenerHandle);
// clang-format on

/** @typedef FIRAuthStateDidChangeListenerBlock
    @brief The type of block which can be registered as a listener for auth state did change events.

    @param auth The Auth object on which state changes occurred.
    @param user Optionally; the current signed in user, if any.
 */
typedef void (^FIRAuthStateDidChangeListenerBlock)(FIRAuth *auth, FIRUser *_Nullable user)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRIDTokenDidChangeListenerHandle
    @brief The type of handle returned by `Auth.addIDTokenDidChangeListener(_:)`.
 */
// clang-format off
// clang-format12 merges the next two lines.
typedef id<NSObject> FIRIDTokenDidChangeListenerHandle
    NS_SWIFT_NAME(IDTokenDidChangeListenerHandle);
// clang-format on

/** @typedef FIRIDTokenDidChangeListenerBlock
    @brief The type of block which can be registered as a listener for ID token did change events.

    @param auth The Auth object on which ID token changes occurred.
    @param user Optionally; the current signed in user, if any.
 */
typedef void (^FIRIDTokenDidChangeListenerBlock)(FIRAuth *auth, FIRUser *_Nullable user)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRAuthDataResultCallback
    @brief The type of block invoked when sign-in related events complete.

    @param authResult Optionally; Result of sign-in request containing both the user and
       the additional user info associated with the user.
    @param error Optionally; the error which occurred - or nil if the request was successful.
 */
typedef void (^FIRAuthDataResultCallback)(FIRAuthDataResult *_Nullable authResult,
                                          NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");
/**
    @brief The name of the `NSNotificationCenter` notification which is posted when the auth state
        changes (for example, a new token has been produced, a user signs in or signs out). The
        object parameter of the notification is the sender `Auth` instance.
 */
extern const NSNotificationName FIRAuthStateDidChangeNotification NS_SWIFT_NAME(AuthStateDidChange);

/** @typedef FIRAuthResultCallback
    @brief The type of block invoked when sign-in related events complete.

    @param user Optionally; the signed in user, if any.
    @param error Optionally; if an error occurs, this is the NSError object that describes the
        problem. Set to nil otherwise.
 */
typedef void (^FIRAuthResultCallback)(FIRUser *_Nullable user, NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRProviderQueryCallback
    @brief The type of block invoked when a list of identity providers for a given email address is
        requested.

    @param providers Optionally; a list of provider identifiers, if any.
        @see GoogleAuthProviderID etc.
    @param error Optionally; if an error occurs, this is the NSError object that describes the
        problem. Set to nil otherwise.
 */
typedef void (^FIRProviderQueryCallback)(NSArray<NSString *> *_Nullable providers,
                                         NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRSignInMethodQueryCallback
    @brief The type of block invoked when a list of sign-in methods for a given email address is
        requested.
 */
typedef void (^FIRSignInMethodQueryCallback)(NSArray<NSString *> *_Nullable, NSError *_Nullable)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRSendPasswordResetCallback
    @brief The type of block invoked when sending a password reset email.

    @param error Optionally; if an error occurs, this is the NSError object that describes the
        problem. Set to nil otherwise.
 */
typedef void (^FIRSendPasswordResetCallback)(NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRSendSignInLinkToEmailCallback
    @brief The type of block invoked when sending an email sign-in link email.
 */
typedef void (^FIRSendSignInLinkToEmailCallback)(NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRConfirmPasswordResetCallback
    @brief The type of block invoked when performing a password reset.

    @param error Optionally; if an error occurs, this is the NSError object that describes the
        problem. Set to nil otherwise.
 */
typedef void (^FIRConfirmPasswordResetCallback)(NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRVerifyPasswordResetCodeCallback
    @brief The type of block invoked when verifying that an out of band code should be used to
        perform password reset.

    @param email Optionally; the email address of the user for which the out of band code applies.
    @param error Optionally; if an error occurs, this is the NSError object that describes the
        problem. Set to nil otherwise.
 */
typedef void (^FIRVerifyPasswordResetCodeCallback)(NSString *_Nullable email,
                                                   NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRApplyActionCodeCallback
    @brief The type of block invoked when applying an action code.

    @param error Optionally; if an error occurs, this is the NSError object that describes the
        problem. Set to nil otherwise.
 */
typedef void (^FIRApplyActionCodeCallback)(NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

typedef void (^FIRAuthVoidErrorCallback)(NSError *_Nullable)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @class FIRActionCodeInfo
    @brief Manages information regarding action codes.
 */
NS_SWIFT_NAME(ActionCodeInfo)
@interface FIRActionCodeInfo : NSObject

/**
    @brief Operations which can be performed with action codes.
  */
typedef NS_ENUM(NSInteger, FIRActionCodeOperation) {
  /** Action code for unknown operation. */
  FIRActionCodeOperationUnknown = 0,

  /** Action code for password reset operation. */
  FIRActionCodeOperationPasswordReset = 1,

  /** Action code for verify email operation. */
  FIRActionCodeOperationVerifyEmail = 2,

  /** Action code for recover email operation. */
  FIRActionCodeOperationRecoverEmail = 3,

  /** Action code for email link operation. */
  FIRActionCodeOperationEmailLink = 4,

  /** Action code for verifying and changing email */
  FIRActionCodeOperationVerifyAndChangeEmail = 5,

  /** Action code for reverting second factor addition */
  FIRActionCodeOperationRevertSecondFactorAddition = 6,

} NS_SWIFT_NAME(ActionCodeOperation);

/**
    @brief The operation being performed.
 */
@property(nonatomic, readonly) FIRActionCodeOperation operation;

/** @property email
    @brief The email address to which the code was sent. The new email address in the case of
        `ActionCodeOperationRecoverEmail`.
 */
@property(nonatomic, nullable, readonly, copy) NSString *email;

/** @property previousEmail
    @brief The email that is being recovered in the case of `ActionCodeOperationRecoverEmail`.
 */
@property(nonatomic, nullable, readonly, copy) NSString *previousEmail;

/** @fn init
    @brief please use initWithOperation: instead.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

/** @class FIRActionCodeURL
    @brief This class will allow developers to easily extract information about out of band links.
 */
NS_SWIFT_NAME(ActionCodeURL)
@interface FIRActionCodeURL : NSObject

/** @property APIKey
    @brief Returns the API key from the link. nil, if not provided.
 */
@property(nonatomic, nullable, copy, readonly) NSString *APIKey;

/** @property operation
    @brief Returns the mode of oob action. The property will be of `FIRActionCodeOperation` type.
        It will return `FIRActionCodeOperationUnknown` if no oob action is provided.
 */
@property(nonatomic, readonly) FIRActionCodeOperation operation;

/** @property code
    @brief Returns the email action code from the link. nil, if not provided.
 */
@property(nonatomic, nullable, copy, readonly) NSString *code;

/** @property continueURL
    @brief Returns the continue URL from the link. nil, if not provided.
 */
@property(nonatomic, nullable, copy, readonly) NSURL *continueURL;

/** @property languageCode
    @brief Returns the language code from the link. nil, if not provided.
 */
@property(nonatomic, nullable, copy, readonly) NSString *languageCode;

/** @fn actionCodeURLWithLink:
    @brief Construct an `ActionCodeURL` from an out of band link (e.g. email link).
    @param link The oob link string used to construct the action code URL.
    @return The `ActionCodeURL` object constructed based on the oob link provided.
 */
+ (nullable instancetype)actionCodeURLWithLink:(NSString *)link;

/** @fn init
    @brief Please use `init(link:)` in Swift or `actionCodeURLWithLink:` in Objective-C
        instead.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

/** @typedef FIRCheckActionCodeCallBack
    @brief The type of block invoked when performing a check action code operation.

    @param info Metadata corresponding to the action code.
    @param error Optionally; if an error occurs, this is the NSError object that describes the
        problem. Set to nil otherwise.
 */
typedef void (^FIRCheckActionCodeCallBack)(FIRActionCodeInfo *_Nullable info,
                                           NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @class FIRAuth
    @brief Manages authentication for Firebase apps.
    @remarks This class is thread-safe.
 */
NS_SWIFT_NAME(Auth)
@interface FIRAuth : NSObject

/** @fn auth
    @brief Gets the auth object for the default Firebase app.
    @remarks The default Firebase app must have already been configured or an exception will be
        raised.
 */
+ (FIRAuth *)auth NS_SWIFT_NAME(auth());

/** @fn authWithApp:
    @brief Gets the auth object for a `FirebaseApp`.

    @param app The app for which to retrieve the associated `Auth` instance.
    @return The `Auth` instance associated with the given app.
 */
+ (FIRAuth *)authWithApp:(FIRApp *)app NS_SWIFT_NAME(auth(app:));

/** @property app
    @brief Gets the `FirebaseApp` object that this auth object is connected to.
 */
@property(nonatomic, weak, readonly, nullable) FIRApp *app;

/** @property currentUser
    @brief Synchronously gets the cached current user, or null if there is none.
 */
@property(nonatomic, strong, readonly, nullable) FIRUser *currentUser;

/** @property languageCode
    @brief The current user language code. This property can be set to the app's current language by
        calling `useAppLanguage()`.

    @remarks The string used to set this property must be a language code that follows BCP 47.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/** @property settings
    @brief Contains settings related to the auth object.
 */
@property(nonatomic, copy, nullable) FIRAuthSettings *settings;

/** @property userAccessGroup
    @brief The current user access group that the Auth instance is using. Default is nil.
 */
@property(readonly, nonatomic, copy, nullable) NSString *userAccessGroup;

/** @property shareAuthStateAcrossDevices
    @brief Contains shareAuthStateAcrossDevices setting related to the auth object.
    @remarks If userAccessGroup is not set, setting shareAuthStateAcrossDevices will
        have no effect. You should set shareAuthStateAcrossDevices to it's desired
        state and then set the userAccessGroup after.
 */
@property(nonatomic) BOOL shareAuthStateAcrossDevices;

/** @property tenantID
    @brief The tenant ID of the auth instance. nil if none is available.
 */
@property(nonatomic, copy, nullable) NSString *tenantID;

/** @property APNSToken
    @brief The APNs token used for phone number authentication. The type of the token (production
        or sandbox) will be automatically detected based on your provisioning profile.
        This property is available on iOS only.
    @remarks If swizzling is disabled, the APNs Token must be set for phone number auth to work,
        by either setting this property or by calling `setAPNSToken(_:type:)`.
 */
@property(nonatomic, strong, nullable) NSData *APNSToken API_UNAVAILABLE(macos, tvos, watchos);

/**
 * @property customAuthDomain
 * @brief The custom authentication domain used to handle all sign-in redirects. End-users will see
 * this domain when signing in. This domain must be allowlisted in the Firebase Console.
 */
@property(nonatomic, copy, nullable) NSString *customAuthDomain;

/** @fn init
    @brief Please access auth instances using `Auth.auth()` and `Auth.auth(app:)`.
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn updateCurrentUser:completion:
    @brief Sets the `currentUser` on the receiver to the provided user object.
    @param user The user object to be set as the current user of the calling Auth instance.
    @param completion Optionally; a block invoked after the user of the calling Auth instance has
        been updated or an error was encountered.
 */
- (void)updateCurrentUser:(FIRUser *)user
               completion:(nullable void (^)(NSError *_Nullable error))completion;

/** @fn fetchSignInMethodsForEmail:completion:
    @brief [Deprecated] Fetches the list of all sign-in methods previously used for the provided
   email address. This method returns an empty list when [Email Enumeration
   Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection)
   is enabled, irrespective of the number of authentication methods available for the given email.
    @param email The email address for which to obtain a list of sign-in methods.
    @param completion Optionally; a block which is invoked when the list of sign in methods for the
        specified email address is ready or an error was encountered. Invoked asynchronously on the
        main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeInvalidEmail` - Indicates the email address is malformed.

    @remarks See @c AuthErrors for a list of error codes that are common to all API methods.
 */

- (void)fetchSignInMethodsForEmail:(NSString *)email
                        completion:(nullable void (^)(NSArray<NSString *> *_Nullable,
                                                      NSError *_Nullable))completion
    DEPRECATED_MSG_ATTRIBUTE(
        "This method is deprecated and will be removed in a future release. This method returns an "
        "empty list when Email Enumeration Protection is enabled.");

/** @fn signInWithEmail:password:completion:
    @brief Signs in using an email address and password. When [Email Enumeration
   Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection)
   is enabled, this method fails with FIRAuthErrorCodeInvalidCredentials in case of an invalid
   email/password.

    @param email The user's email address.
    @param password The user's password.
    @param completion Optionally; a block which is invoked when the sign in flow finishes, or is
        canceled. Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeOperationNotAllowed` - Indicates that email and password
            accounts are not enabled. Enable them in the Auth section of the
            Firebase console.
        + `AuthErrorCodeUserDisabled` - Indicates the user's account is disabled.
        + `AuthErrorCodeWrongPassword` - Indicates the user attempted
            sign in with an incorrect password.
        + `AuthErrorCodeInvalidEmail` - Indicates the email address is malformed.


    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)signInWithEmail:(NSString *)email
               password:(NSString *)password
             completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                           NSError *_Nullable error))completion;

/** @fn signInWithEmail:link:completion:
    @brief Signs in using an email address and email sign-in link.

    @param email The user's email address.
    @param link The email sign-in link.
    @param completion Optionally; a block which is invoked when the sign in flow finishes, or is
        canceled. Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeOperationNotAllowed` - Indicates that email and email sign-in link
            accounts are not enabled. Enable them in the Auth section of the
            Firebase console.
        + `AuthErrorCodeUserDisabled` - Indicates the user's account is disabled.
        + `AuthErrorCodeInvalidEmail` - Indicates the email address is invalid.


    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */

- (void)signInWithEmail:(NSString *)email
                   link:(NSString *)link
             completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                           NSError *_Nullable error))completion
    API_UNAVAILABLE(watchos);

/** @fn signInWithProvider:UIDelegate:completion:
    @brief Signs in using the provided auth provider instance.
        This method is available on iOS, macOS Catalyst, and tvOS only.

    @param provider An instance of an auth provider used to initiate the sign-in flow.
    @param UIDelegate Optionally an instance of a class conforming to the AuthUIDelegate
        protocol, this is used for presenting the web context. If nil, a default AuthUIDelegate
        will be used.
    @param completion Optionally; a block which is invoked when the sign in flow finishes, or is
        canceled. Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:
    <ul>
        <li>@c AuthErrorCodeOperationNotAllowed - Indicates that email and password
            accounts are not enabled. Enable them in the Auth section of the
            Firebase console.
        </li>
        <li>@c AuthErrorCodeUserDisabled - Indicates the user's account is disabled.
        </li>
        <li>@c AuthErrorCodeWebNetworkRequestFailed - Indicates that a network request within a
            SFSafariViewController or WKWebView failed.
        </li>
        <li>@c AuthErrorCodeWebInternalError - Indicates that an internal error occurred within a
            SFSafariViewController or WKWebView.
        </li>
        <li>@c AuthErrorCodeWebSignInUserInteractionFailure - Indicates a general failure during
            a web sign-in flow.
        </li>
        <li>@c AuthErrorCodeWebContextAlreadyPresented - Indicates that an attempt was made to
            present a new web context while one was already being presented.
        </li>
        <li>@c AuthErrorCodeWebContextCancelled - Indicates that the URL presentation was
            cancelled prematurely by the user.
        </li>
        <li>@c AuthErrorCodeAccountExistsWithDifferentCredential - Indicates the email asserted
            by the credential (e.g. the email in a Facebook access token) is already in use by an
            existing account, that cannot be authenticated with this sign-in method. Call
            fetchProvidersForEmail for this user’s email and then prompt them to sign in with any of
            the sign-in providers returned. This error will only be thrown if the "One account per
            email address" setting is enabled in the Firebase console, under Auth settings.
        </li>
    </ul>

    @remarks See @c AuthErrors for a list of error codes that are common to all API methods.
 */
- (void)signInWithProvider:(id<FIRFederatedAuthProvider>)provider
                UIDelegate:(nullable id<FIRAuthUIDelegate>)UIDelegate
                completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                              NSError *_Nullable error))completion
    API_UNAVAILABLE(macosx, watchos);

/** @fn signInWithCredential:completion:
    @brief Asynchronously signs in to Firebase with the given 3rd-party credentials (e.g. a Facebook
        login Access Token, a Google ID Token/Access Token pair, etc.) and returns additional
        identity provider data.

    @param credential The credential supplied by the IdP.
    @param completion Optionally; a block which is invoked when the sign in flow finishes, or is
        canceled. Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

    + `AuthErrorCodeInvalidCredential` - Indicates the supplied credential is invalid.
        This could happen if it has expired or it is malformed.
    + `AuthErrorCodeOperationNotAllowed` - Indicates that accounts
        with the identity provider represented by the credential are not enabled.
        Enable them in the Auth section of the Firebase console.
    + `AuthErrorCodeAccountExistsWithDifferentCredential` - Indicates the email asserted
        by the credential (e.g. the email in a Facebook access token) is already in use by an
        existing account, that cannot be authenticated with this sign-in method. Call
        fetchProvidersForEmail for this user’s email and then prompt them to sign in with any of
        the sign-in providers returned. This error will only be thrown if the "One account per
        email address" setting is enabled in the Firebase console, under Auth settings.
    + `AuthErrorCodeUserDisabled` - Indicates the user's account is disabled.
    + `AuthErrorCodeWrongPassword` - Indicates the user attempted sign in with an
        incorrect password, if credential is of the type EmailPasswordAuthCredential.
    + `AuthErrorCodeInvalidEmail` - Indicates the email address is malformed.
    + `AuthErrorCodeMissingVerificationID` - Indicates that the phone auth credential was
        created with an empty verification ID.
    + `AuthErrorCodeMissingVerificationCode` - Indicates that the phone auth credential
        was created with an empty verification code.
    + `AuthErrorCodeInvalidVerificationCode` - Indicates that the phone auth credential
        was created with an invalid verification Code.
    + `AuthErrorCodeInvalidVerificationID` - Indicates that the phone auth credential was
        created with an invalid verification ID.
    + `AuthErrorCodeSessionExpired` - Indicates that the SMS code has expired.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods
*/
- (void)signInWithCredential:(FIRAuthCredential *)credential
                  completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                                NSError *_Nullable error))completion;

/** @fn signInAnonymouslyWithCompletion:
    @brief Asynchronously creates and becomes an anonymous user.
    @param completion Optionally; a block which is invoked when the sign in finishes, or is
        canceled. Invoked asynchronously on the main thread in the future.

    @remarks If there is already an anonymous user signed in, that user will be returned instead.
        If there is any other existing user signed in, that user will be signed out.

    @remarks Possible error codes:

        + `AuthErrorCodeOperationNotAllowed` - Indicates that anonymous accounts are
            not enabled. Enable them in the Auth section of the Firebase console.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)signInAnonymouslyWithCompletion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                                           NSError *_Nullable error))completion;

/** @fn signInWithCustomToken:completion:
    @brief Asynchronously signs in to Firebase with the given Auth token.

    @param token A self-signed custom auth token.
    @param completion Optionally; a block which is invoked when the sign in finishes, or is
        canceled. Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeInvalidCustomToken` - Indicates a validation error with
            the custom token.
        + `AuthErrorCodeCustomTokenMismatch` - Indicates the service account and the API key
            belong to different projects.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)signInWithCustomToken:(NSString *)token
                   completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                                 NSError *_Nullable error))completion;

/** @fn createUserWithEmail:password:completion:
    @brief Creates and, on success, signs in a user with the given email address and password.

    @param email The user's email address.
    @param password The user's desired password.
    @param completion Optionally; a block which is invoked when the sign up flow finishes, or is
        canceled. Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeInvalidEmail` - Indicates the email address is malformed.
        + `AuthErrorCodeEmailAlreadyInUse` - Indicates the email used to attempt sign up
            already exists. Call fetchProvidersForEmail to check which sign-in mechanisms the user
            used, and prompt the user to sign in with one of those.
        + `AuthErrorCodeOperationNotAllowed` - Indicates that email and password accounts
            are not enabled. Enable them in the Auth section of the Firebase console.
        + `AuthErrorCodeWeakPassword` - Indicates an attempt to set a password that is
            considered too weak. The NSLocalizedFailureReasonErrorKey field in the NSError.userInfo
            dictionary object will contain more detailed explanation that can be shown to the user.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)createUserWithEmail:(NSString *)email
                   password:(NSString *)password
                 completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                               NSError *_Nullable error))completion;

/** @fn confirmPasswordResetWithCode:newPassword:completion:
    @brief Resets the password given a code sent to the user outside of the app and a new password
      for the user.

    @param newPassword The new password.
    @param completion Optionally; a block which is invoked when the request finishes. Invoked
        asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeWeakPassword` - Indicates an attempt to set a password that is
            considered too weak.
        + `AuthErrorCodeOperationNotAllowed` - Indicates the administrator disabled sign
            in with the specified identity provider.
        + `AuthErrorCodeExpiredActionCode` - Indicates the OOB code is expired.
        + `AuthErrorCodeInvalidActionCode` - Indicates the OOB code is invalid.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)confirmPasswordResetWithCode:(NSString *)code
                         newPassword:(NSString *)newPassword
                          completion:(void (^)(NSError *_Nullable error))completion;

/** @fn checkActionCode:completion:
    @brief Checks the validity of an out of band code.

    @param code The out of band code to check validity.
    @param completion Optionally; a block which is invoked when the request finishes. Invoked
        asynchronously on the main thread in the future.
 */
- (void)checkActionCode:(NSString *)code
             completion:
                 (void (^)(FIRActionCodeInfo *_Nullable info, NSError *_Nullable error))completion;

/** @fn verifyPasswordResetCode:completion:
    @brief Checks the validity of a verify password reset code.

    @param code The password reset code to be verified.
    @param completion Optionally; a block which is invoked when the request finishes. Invoked
        asynchronously on the main thread in the future.
 */
- (void)verifyPasswordResetCode:(NSString *)code
                     completion:
                         (void (^)(NSString *_Nullable email, NSError *_Nullable error))completion;

/** @fn applyActionCode:completion:
    @brief Applies out of band code.

    @param code The out of band code to be applied.
    @param completion Optionally; a block which is invoked when the request finishes. Invoked
        asynchronously on the main thread in the future.

    @remarks This method will not work for out of band codes which require an additional parameter,
        such as password reset code.
 */
- (void)applyActionCode:(NSString *)code completion:(void (^)(NSError *_Nullable error))completion;

/** @fn sendPasswordResetWithEmail:completion:
    @brief Initiates a password reset for the given email address. This method does not throw an
   error when there's no user account with the given email address and [Email Enumeration
   Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection)
   is enabled.
    @param email The email address of the user.
    @param completion Optionally; a block which is invoked when the request finishes. Invoked
        asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeInvalidRecipientEmail` - Indicates an invalid recipient email was
            sent in the request.
        + `AuthErrorCodeInvalidSender` - Indicates an invalid sender email is set in
            the console for this action.
        + `AuthErrorCodeInvalidMessagePayload` - Indicates an invalid email template for
            sending update email.


 */
- (void)sendPasswordResetWithEmail:(NSString *)email
                        completion:(nullable void (^)(NSError *_Nullable error))completion;

/** @fn sendPasswordResetWithEmail:actionCodeSetting:completion:
    @brief Initiates a password reset for the given email address and `ActionCodeSettings` object.

    @param email The email address of the user.
    @param actionCodeSettings An `ActionCodeSettings` object containing settings related to
        handling action codes.
    @param completion Optionally; a block which is invoked when the request finishes. Invoked
        asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeInvalidRecipientEmail` - Indicates an invalid recipient email was
            sent in the request.
        + `AuthErrorCodeInvalidSender` - Indicates an invalid sender email is set in
            the console for this action.
        + `AuthErrorCodeInvalidMessagePayload` - Indicates an invalid email template for
            sending update email.
        + `AuthErrorCodeMissingIosBundleID` - Indicates that the iOS bundle ID is missing when
            `handleCodeInApp` is set to true.
        + `AuthErrorCodeMissingAndroidPackageName` - Indicates that the android package name
            is missing when the `androidInstallApp` flag is set to true.
        + `AuthErrorCodeUnauthorizedDomain` - Indicates that the domain specified in the
            continue URL is not allowlisted in the Firebase console.
        + `AuthErrorCodeInvalidContinueURI` - Indicates that the domain specified in the
            continue URL is not valid.


 */
- (void)sendPasswordResetWithEmail:(NSString *)email
                actionCodeSettings:(FIRActionCodeSettings *)actionCodeSettings
                        completion:(nullable void (^)(NSError *_Nullable error))completion;

/** @fn sendSignInLinkToEmail:actionCodeSettings:completion:
    @brief Sends a sign in with email link to provided email address.

    @param email The email address of the user.
    @param actionCodeSettings An `ActionCodeSettings` object containing settings related to
        handling action codes.
    @param completion Optionally; a block which is invoked when the request finishes. Invoked
        asynchronously on the main thread in the future.
 */
- (void)sendSignInLinkToEmail:(NSString *)email
           actionCodeSettings:(FIRActionCodeSettings *)actionCodeSettings
                   completion:(nullable void (^)(NSError *_Nullable error))completion
    API_UNAVAILABLE(watchos);

/** @fn signOut:
    @brief Signs out the current user.

    @param error Optionally; if an error occurs, upon return contains an NSError object that
        describes the problem; is nil otherwise.
    @return @YES when the sign out request was successful. @NO otherwise.

    @remarks Possible error codes:

        + `AuthErrorCodeKeychainError` - Indicates an error occurred when accessing the
            keychain. The `NSLocalizedFailureReasonErrorKey` field in the `userInfo`
            dictionary will contain more information about the error encountered.

 */
- (BOOL)signOut:(NSError *_Nullable *_Nullable)error;

/** @fn isSignInWithEmailLink
    @brief Checks if link is an email sign-in link.

    @param link The email sign-in link.
    @return Returns true when the link passed matches the expected format of an email sign-in link.
 */
- (BOOL)isSignInWithEmailLink:(NSString *)link API_UNAVAILABLE(watchos);

/** @fn addAuthStateDidChangeListener:
    @brief Registers a block as an "auth state did change" listener. To be invoked when:

      + The block is registered as a listener,
      + A user with a different UID from the current user has signed in, or
      + The current user has signed out.

    @param listener The block to be invoked. The block is always invoked asynchronously on the main
        thread, even for it's initial invocation after having been added as a listener.

    @remarks The block is invoked immediately after adding it according to it's standard invocation
        semantics, asynchronously on the main thread. Users should pay special attention to
        making sure the block does not inadvertently retain objects which should not be retained by
        the long-lived block. The block itself will be retained by `Auth` until it is
        unregistered or until the `Auth` instance is otherwise deallocated.

    @return A handle useful for manually unregistering the block as a listener.
 */

- (FIRAuthStateDidChangeListenerHandle)addAuthStateDidChangeListener:
    (void (^)(FIRAuth *auth, FIRUser *_Nullable user))listener;

/** @fn removeAuthStateDidChangeListener:
    @brief Unregisters a block as an "auth state did change" listener.

    @param listenerHandle The handle for the listener.
 */
- (void)removeAuthStateDidChangeListener:(FIRAuthStateDidChangeListenerHandle)listenerHandle;

/** @fn addIDTokenDidChangeListener:
    @brief Registers a block as an "ID token did change" listener. To be invoked when:

      + The block is registered as a listener,
      + A user with a different UID from the current user has signed in,
      + The ID token of the current user has been refreshed, or
      + The current user has signed out.

    @param listener The block to be invoked. The block is always invoked asynchronously on the main
        thread, even for it's initial invocation after having been added as a listener.

    @remarks The block is invoked immediately after adding it according to it's standard invocation
        semantics, asynchronously on the main thread. Users should pay special attention to
        making sure the block does not inadvertently retain objects which should not be retained by
        the long-lived block. The block itself will be retained by `Auth` until it is
        unregistered or until the `Auth` instance is otherwise deallocated.

    @return A handle useful for manually unregistering the block as a listener.
 */
- (FIRIDTokenDidChangeListenerHandle)addIDTokenDidChangeListener:
    (void (^)(FIRAuth *auth, FIRUser *_Nullable user))listener;

/** @fn removeIDTokenDidChangeListener:
    @brief Unregisters a block as an "ID token did change" listener.

    @param listenerHandle The handle for the listener.
 */
- (void)removeIDTokenDidChangeListener:(FIRIDTokenDidChangeListenerHandle)listenerHandle;

/** @fn useAppLanguage
    @brief Sets `languageCode` to the app's current language.
 */
- (void)useAppLanguage;

/** @fn useEmulatorWithHost:port
    @brief Configures Firebase Auth to connect to an emulated host instead of the remote backend.
 */
- (void)useEmulatorWithHost:(NSString *)host port:(NSInteger)port;

/** @fn canHandleURL:
    @brief Whether the specific URL is handled by `Auth` .
        This method is available on iOS only.
    @param URL The URL received by the application delegate from any of the openURL method.
    @return Whether or the URL is handled. YES means the URL is for Firebase Auth
        so the caller should ignore the URL from further processing, and NO means the
        the URL is for the app (or another library) so the caller should continue handling
        this URL as usual.
    @remarks If swizzling is disabled, URLs received by the application delegate must be forwarded
        to this method for phone number auth to work.
 */
- (BOOL)canHandleURL:(nonnull NSURL *)URL API_UNAVAILABLE(macos, tvos, watchos);

/** @fn setAPNSToken:type:
    @brief Sets the APNs token along with its type.
        This method is available on iOS only.
    @remarks If swizzling is disabled, the APNs Token must be set for phone number auth to work,
        by either setting calling this method or by setting the `APNSToken` property.
 */
- (void)setAPNSToken:(NSData *)token
                type:(FIRAuthAPNSTokenType)type API_UNAVAILABLE(macos, tvos, watchos);

/** @fn canHandleNotification:
    @brief Whether the specific remote notification is handled by `Auth` .
        This method is available on iOS only.
    @param userInfo A dictionary that contains information related to the
        notification in question.
    @return Whether or the notification is handled. A return value of true means the notification
        is for Firebase Auth so the caller should ignore the notification from further processing,
        and false means the notification is for the app (or another library) so the caller
   should continue handling this notification as usual.
    @remarks If swizzling is disabled, related remote notifications must be forwarded to this method
        for phone number auth to work.
 */
- (BOOL)canHandleNotification:(NSDictionary *)userInfo API_UNAVAILABLE(macos, tvos, watchos);

/** @fn revokeTokenWithAuthorizationCode:Completion
    @brief Revoke the users token with authorization code.
    @param completion (Optional) the block invoked when the request to revoke the token is
        complete, or fails. Invoked asynchronously on the main thread in the future.
 */
- (void)revokeTokenWithAuthorizationCode:(NSString *)authorizationCode
                              completion:(nullable void (^)(NSError *_Nullable error))completion;

#if TARGET_OS_IOS && !TARGET_OS_MACCATALYST && (!defined(TARGET_OS_VISION) || !TARGET_OS_VISION)
/** @fn initializeRecaptchaConfigWithCompletion:completion:
    @brief Initializes reCAPTCHA using the settings configured for the project or
    tenant.

    If you change the tenant ID of the `Auth` instance, the configuration will be
    reloaded.
 */
- (void)initializeRecaptchaConfigWithCompletion:
    (nullable void (^)(NSError *_Nullable error))completion;
#endif

#pragma mark - User sharing

/** @fn useUserAccessGroup:error:
    @brief Switch userAccessGroup and current user to the given accessGroup and the user stored in
        it.
 */
- (BOOL)useUserAccessGroup:(NSString *_Nullable)accessGroup
                     error:(NSError *_Nullable *_Nullable)outError;

/** @fn getStoredUserForAccessGroup:error:
    @brief Get the stored user in the given accessGroup.
    @note This API is not supported on tvOS when `shareAuthStateAcrossDevices` is set to `true`.
        This case will return `nil`.
        Please refer to https://github.com/firebase/firebase-ios-sdk/issues/8878 for details.
 */
- (nullable FIRUser *)getStoredUserForAccessGroup:(NSString *_Nullable)accessGroup
                                            error:(NSError *_Nullable *_Nullable)outError
    __attribute__((swift_error(nonnull_error)));  // This method can return `nil` on success.

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuth.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthAPNSTokenType.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 *  @brief The APNs token type for the app.
 *      This enum is available on iOS, macOS Catalyst, tvOS, and watchOS only.
 */
typedef NS_ENUM(NSInteger, FIRAuthAPNSTokenType) {

  /** Unknown token type.
      The actual token type will be detected from the provisioning profile in the app's bundle.
   */
  FIRAuthAPNSTokenTypeUnknown,

  /** Sandbox token type.
   */
  FIRAuthAPNSTokenTypeSandbox,

  /** Production token type.
   */
  FIRAuthAPNSTokenTypeProd,
} NS_SWIFT_NAME(AuthAPNSTokenType) API_UNAVAILABLE(macosx);

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthAPNSTokenType.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthCredential.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthCredential
    @brief Represents a credential.
 */
NS_SWIFT_NAME(AuthCredential)
@interface FIRAuthCredential : NSObject

/** @property provider
    @brief Gets the name of the identity provider for the credential.
 */
@property(nonatomic, copy, readonly) NSString *provider;

/** @fn init
    @brief This is an abstract base class. Concrete instances should be created via factory
        methods available in the various authentication provider libraries (like the Facebook
        provider or the Google provider libraries.)
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthDataResult.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAdditionalUserInfo;
@class FIRAuthCredential;
@class FIRUser;

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthDataResult
    @brief Helper object that contains the result of a successful sign-in, link and reauthenticate
        action. It contains references to a `User` instance and a `AdditionalUserInfo` instance.
 */
NS_SWIFT_NAME(AuthDataResult)
@interface FIRAuthDataResult : NSObject

/** @fn init
    @brief This class should not be initialized manually. `AuthDataResult` instance is
        returned as part of `AuthDataResultCallback`.
 */
- (instancetype)init NS_UNAVAILABLE;

/** @property user
    @brief The signed in user.
 */
@property(nonatomic, readonly) FIRUser *user;

/** @property additionalUserInfo
    @brief If available contains the additional IdP specific information about signed in user.
 */
@property(nonatomic, readonly, nullable) FIRAdditionalUserInfo *additionalUserInfo;

/** @property credential
    @brief This property will be non-nil after a successful headful-lite sign-in via
        `signIn(with:uiDelegate:completion:)`. May be used to obtain the accessToken and/or IDToken
        pertaining to a recently signed-in user.
 */
@property(nonatomic, readonly, nullable) FIRAuthCredential *credential;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthDataResult.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthErrors.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthErrors
    @remarks Error Codes common to all API Methods:

        + `AuthErrorCodeNetworkError`
        + `AuthErrorCodeUserNotFound`
        + `AuthErrorCodeUserTokenExpired`
        + `AuthErrorCodeTooManyRequests`
        + `AuthErrorCodeInvalidAPIKey`
        + `AuthErrorCodeAppNotAuthorized`
        + `AuthErrorCodeKeychainError`
        + `AuthErrorCodeInternalError`

    @remarks Common error codes for `User` operations:

        + `AuthErrorCodeInvalidUserToken`
        + `AuthErrorCodeUserDisabled`

 */
NS_SWIFT_NAME(AuthErrors)
@interface FIRAuthErrors

/**
    @brief The Firebase Auth error domain.
 */
extern NSString *const FIRAuthErrorDomain NS_SWIFT_NAME(AuthErrorDomain);

/**
    @brief The name of the key for the error short string of an error code.
 */
extern NSString *const FIRAuthErrorUserInfoNameKey NS_SWIFT_NAME(AuthErrorUserInfoNameKey);

/**
    @brief Errors with one of the following three codes:
          - `AuthErrorCodeAccountExistsWithDifferentCredential`
          - `AuthErrorCodeCredentialAlreadyInUse`
          - `AuthErrorCodeEmailAlreadyInUse`
        may contain an `NSError.userInfo` dictinary object which contains this key. The value
        associated with this key is an NSString of the email address of the account that already
        exists.
 */
extern NSString *const FIRAuthErrorUserInfoEmailKey NS_SWIFT_NAME(AuthErrorUserInfoEmailKey);

/**
    @brief The key used to read the updated Auth credential from the userInfo dictionary of the
        NSError object returned. This is the updated auth credential the developer should use for
        recovery if applicable.
 */
// clang-format off
// clang-format12 will merge lines and exceed 100 character limit.
extern NSString *const FIRAuthErrorUserInfoUpdatedCredentialKey
    NS_SWIFT_NAME(AuthErrorUserInfoUpdatedCredentialKey);

/**
    @brief The key used to read the MFA resolver from the userInfo dictionary of the NSError object
        returned when 2FA is required for sign-incompletion.
 */
extern NSString *const FIRAuthErrorUserInfoMultiFactorResolverKey
    NS_SWIFT_NAME(AuthErrorUserInfoMultiFactorResolverKey);
// clang-format on

/**
    @brief Error codes used by Firebase Auth.
 */
typedef NS_ERROR_ENUM(FIRAuthErrorDomain, FIRAuthErrorCode){
    /** Indicates a validation error with the custom token.
     */
    FIRAuthErrorCodeInvalidCustomToken = 17000,

    /** Indicates the service account and the API key belong to different projects.
     */
    FIRAuthErrorCodeCustomTokenMismatch = 17002,

    /** Indicates the IDP token or requestUri is invalid.
     */
    FIRAuthErrorCodeInvalidCredential = 17004,

    /** Indicates the user's account is disabled on the server.
     */
    FIRAuthErrorCodeUserDisabled = 17005,

    /** Indicates the administrator disabled sign in with the specified identity provider.
     */
    FIRAuthErrorCodeOperationNotAllowed = 17006,

    /** Indicates the email used to attempt a sign up is already in use.
     */
    FIRAuthErrorCodeEmailAlreadyInUse = 17007,

    /** Indicates the email is invalid.
     */
    FIRAuthErrorCodeInvalidEmail = 17008,

    /** Indicates the user attempted sign in with a wrong password.
     */
    FIRAuthErrorCodeWrongPassword = 17009,

    /** Indicates that too many requests were made to a server method.
     */
    FIRAuthErrorCodeTooManyRequests = 17010,

    /** Indicates the user account was not found.
     */
    FIRAuthErrorCodeUserNotFound = 17011,

    /** Indicates account linking is required.
     */
    FIRAuthErrorCodeAccountExistsWithDifferentCredential = 17012,

    /** Indicates the user has attemped to change email or password more than 5 minutes after
        signing in.
     */
    FIRAuthErrorCodeRequiresRecentLogin = 17014,

    /** Indicates an attempt to link a provider to which the account is already linked.
     */
    FIRAuthErrorCodeProviderAlreadyLinked = 17015,

    /** Indicates an attempt to unlink a provider that is not linked.
     */
    FIRAuthErrorCodeNoSuchProvider = 17016,

    /** Indicates user's saved auth credential is invalid, the user needs to sign in again.
     */
    FIRAuthErrorCodeInvalidUserToken = 17017,

    /** Indicates a network error occurred (such as a timeout, interrupted connection, or
        unreachable host). These types of errors are often recoverable with a retry. The
        `NSUnderlyingError` field in the `NSError.userInfo` dictionary will contain the error
        encountered.
     */
    FIRAuthErrorCodeNetworkError = 17020,

    /** Indicates the saved token has expired, for example, the user may have changed account
        password on another device. The user needs to sign in again on the device that made this
        request.
     */
    FIRAuthErrorCodeUserTokenExpired = 17021,

    /** Indicates an invalid API key was supplied in the request.
     */
    FIRAuthErrorCodeInvalidAPIKey = 17023,

    /** Indicates that an attempt was made to reauthenticate with a user which is not the current
        user.
     */
    FIRAuthErrorCodeUserMismatch = 17024,

    /** Indicates an attempt to link with a credential that has already been linked with a
        different Firebase account
     */
    FIRAuthErrorCodeCredentialAlreadyInUse = 17025,

    /** Indicates an attempt to set a password that is considered too weak.
     */
    FIRAuthErrorCodeWeakPassword = 17026,

    /** Indicates the App is not authorized to use Firebase Authentication with the
        provided API Key.
     */
    FIRAuthErrorCodeAppNotAuthorized = 17028,

    /** Indicates the OOB code is expired.
     */
    FIRAuthErrorCodeExpiredActionCode = 17029,

    /** Indicates the OOB code is invalid.
     */
    FIRAuthErrorCodeInvalidActionCode = 17030,

    /** Indicates that there are invalid parameters in the payload during a "send password reset
     *  email" attempt.
     */
    FIRAuthErrorCodeInvalidMessagePayload = 17031,

    /** Indicates that the sender email is invalid during a "send password reset email" attempt.
     */
    FIRAuthErrorCodeInvalidSender = 17032,

    /** Indicates that the recipient email is invalid.
     */
    FIRAuthErrorCodeInvalidRecipientEmail = 17033,

    /** Indicates that an email address was expected but one was not provided.
     */
    FIRAuthErrorCodeMissingEmail = 17034,

    // The enum values 17035 is reserved and should NOT be used for new error codes.

    /** Indicates that the iOS bundle ID is missing when a iOS App Store ID is provided.
     */
    FIRAuthErrorCodeMissingIosBundleID = 17036,

    /** Indicates that the android package name is missing when the `androidInstallApp` flag is set
        to true.
     */
    FIRAuthErrorCodeMissingAndroidPackageName = 17037,

    /** Indicates that the domain specified in the continue URL is not allowlisted in the Firebase
        console.
     */
    FIRAuthErrorCodeUnauthorizedDomain = 17038,

    /** Indicates that the domain specified in the continue URI is not valid.
     */
    FIRAuthErrorCodeInvalidContinueURI = 17039,

    /** Indicates that a continue URI was not provided in a request to the backend which requires
        one.
     */
    FIRAuthErrorCodeMissingContinueURI = 17040,

    /** Indicates that a phone number was not provided in a call to
        `verifyPhoneNumber:completion:`.
     */
    FIRAuthErrorCodeMissingPhoneNumber = 17041,

    /** Indicates that an invalid phone number was provided in a call to
        `verifyPhoneNumber:completion:`.
     */
    FIRAuthErrorCodeInvalidPhoneNumber = 17042,

    /** Indicates that the phone auth credential was created with an empty verification code.
     */
    FIRAuthErrorCodeMissingVerificationCode = 17043,

    /** Indicates that an invalid verification code was used in the verifyPhoneNumber request.
     */
    FIRAuthErrorCodeInvalidVerificationCode = 17044,

    /** Indicates that the phone auth credential was created with an empty verification ID.
     */
    FIRAuthErrorCodeMissingVerificationID = 17045,

    /** Indicates that an invalid verification ID was used in the verifyPhoneNumber request.
     */
    FIRAuthErrorCodeInvalidVerificationID = 17046,

    /** Indicates that the APNS device token is missing in the verifyClient request.
     */
    FIRAuthErrorCodeMissingAppCredential = 17047,

    /** Indicates that an invalid APNS device token was used in the verifyClient request.
     */
    FIRAuthErrorCodeInvalidAppCredential = 17048,

    // The enum values between 17048 and 17051 are reserved and should NOT be used for new error
    // codes.

    /** Indicates that the SMS code has expired.
     */
    FIRAuthErrorCodeSessionExpired = 17051,

    /** Indicates that the quota of SMS messages for a given project has been exceeded.
     */
    FIRAuthErrorCodeQuotaExceeded = 17052,

    /** Indicates that the APNs device token could not be obtained. The app may not have set up
        remote notification correctly, or may fail to forward the APNs device token to Auth
        if app delegate swizzling is disabled.
     */
    FIRAuthErrorCodeMissingAppToken = 17053,

    /** Indicates that the app fails to forward remote notification to Auth.
     */
    FIRAuthErrorCodeNotificationNotForwarded = 17054,

    /** Indicates that the app could not be verified by Firebase during phone number authentication.
     */
    FIRAuthErrorCodeAppNotVerified = 17055,

    /** Indicates that the reCAPTCHA token is not valid.
     */
    FIRAuthErrorCodeCaptchaCheckFailed = 17056,

    /** Indicates that an attempt was made to present a new web context while one was already being
        presented.
     */
    FIRAuthErrorCodeWebContextAlreadyPresented = 17057,

    /** Indicates that the URL presentation was cancelled prematurely by the user.
     */
    FIRAuthErrorCodeWebContextCancelled = 17058,

    /** Indicates a general failure during the app verification flow.
     */
    FIRAuthErrorCodeAppVerificationUserInteractionFailure = 17059,

    /** Indicates that the clientID used to invoke a web flow is invalid.
     */
    FIRAuthErrorCodeInvalidClientID = 17060,

    /** Indicates that a network request within a SFSafariViewController or WKWebView failed.
     */
    FIRAuthErrorCodeWebNetworkRequestFailed = 17061,

    /** Indicates that an internal error occurred within a SFSafariViewController or WKWebView.
     */
    FIRAuthErrorCodeWebInternalError = 17062,

    /** Indicates a general failure during a web sign-in flow.
     */
    FIRAuthErrorCodeWebSignInUserInteractionFailure = 17063,

    /** Indicates that the local player was not authenticated prior to attempting Game Center
        signin.
     */
    FIRAuthErrorCodeLocalPlayerNotAuthenticated = 17066,

    /** Indicates that a non-null user was expected as an argmument to the operation but a null
        user was provided.
     */
    FIRAuthErrorCodeNullUser = 17067,

    /** Indicates that a Firebase Dynamic Link is not activated.
     */
    FIRAuthErrorCodeDynamicLinkNotActivated = 17068,

    /**
     * Represents the error code for when the given provider id for a web operation is invalid.
     */
    FIRAuthErrorCodeInvalidProviderID = 17071,

    /**
     * Represents the error code for when an attempt is made to update the current user with a
     * tenantId that differs from the current FirebaseAuth instance's tenantId.
     */
    FIRAuthErrorCodeTenantIDMismatch = 17072,

    /**
     * Represents the error code for when a request is made to the backend with an associated tenant
     * ID for an operation that does not support multi-tenancy.
     */
    FIRAuthErrorCodeUnsupportedTenantOperation = 17073,

    /** Indicates that the Firebase Dynamic Link domain used is either not configured or is
        unauthorized for the current project.
     */
    FIRAuthErrorCodeInvalidDynamicLinkDomain = 17074,

    /** Indicates that the credential is rejected because it's misformed or mismatching.
     */
    FIRAuthErrorCodeRejectedCredential = 17075,

    /** Indicates that the GameKit framework is not linked prior to attempting Game Center signin.
     */
    FIRAuthErrorCodeGameKitNotLinked = 17076,

    /** Indicates that the second factor is required for signin.
     */
    FIRAuthErrorCodeSecondFactorRequired = 17078,

    /** Indicates that the multi factor session is missing.
     */
    FIRAuthErrorCodeMissingMultiFactorSession = 17081,

    /** Indicates that the multi factor info is missing.
     */
    FIRAuthErrorCodeMissingMultiFactorInfo = 17082,

    /** Indicates that the multi factor session is invalid.
     */
    FIRAuthErrorCodeInvalidMultiFactorSession = 17083,

    /** Indicates that the multi factor info is not found.
     */
    FIRAuthErrorCodeMultiFactorInfoNotFound = 17084,

    /** Indicates that the operation is admin restricted.
     */
    FIRAuthErrorCodeAdminRestrictedOperation = 17085,

    /** Indicates that the email is required for verification.
     */
    FIRAuthErrorCodeUnverifiedEmail = 17086,

    /** Indicates that the second factor is already enrolled.
     */
    FIRAuthErrorCodeSecondFactorAlreadyEnrolled = 17087,

    /** Indicates that the maximum second factor count is exceeded.
     */
    FIRAuthErrorCodeMaximumSecondFactorCountExceeded = 17088,

    /** Indicates that the first factor is not supported.
     */
    FIRAuthErrorCodeUnsupportedFirstFactor = 17089,

    /** Indicates that the a verifed email is required to changed to.
     */
    FIRAuthErrorCodeEmailChangeNeedsVerification = 17090,

    /** Indicates that the request does not contain a client identifier.
     */
    FIRAuthErrorCodeMissingClientIdentifier = 17093,

    /** Indicates that the nonce is missing or invalid.
     */
    FIRAuthErrorCodeMissingOrInvalidNonce = 17094,

    /** Raised when a Cloud Function returns a blocking error. Will include a message returned from
     * the function.
     */
    FIRAuthErrorCodeBlockingCloudFunctionError = 17105,

    /** Indicates that reCAPTCHA Enterprise integration is not enabled for this project.
     */
    FIRAuthErrorCodeRecaptchaNotEnabled = 17200,

    /** Indicates that the reCAPTCHA token is missing from the backend request.
     */
    FIRAuthErrorCodeMissingRecaptchaToken = 17201,

    /** Indicates that the reCAPTCHA token sent with the backend request is invalid.
     */
    FIRAuthErrorCodeInvalidRecaptchaToken = 17202,

    /** Indicates that the requested reCAPTCHA action is invalid.
     */
    FIRAuthErrorCodeInvalidRecaptchaAction = 17203,

    /** Indicates that the client type is missing from the request.
     */
    FIRAuthErrorCodeMissingClientType = 17204,

    /** Indicates that the reCAPTCHA version is missing from the request.
     */
    FIRAuthErrorCodeMissingRecaptchaVersion = 17205,

    /** Indicates that the reCAPTCHA version sent to the backend is invalid.
     */
    FIRAuthErrorCodeInvalidRecaptchaVersion = 17206,

    /** Indicates that the request type sent to the backend is invalid.
     */
    FIRAuthErrorCodeInvalidReqType = 17207,

    /** Indicates that the reCAPTCHA SDK is not linked to the app.
     */
    FIRAuthErrorCodeRecaptchaSDKNotLinked = 17208,

    /** Indicates an error occurred while attempting to access the keychain.
     */
    FIRAuthErrorCodeKeychainError = 17995,

    /** Indicates an internal error occurred.
     */
    FIRAuthErrorCodeInternalError = 17999,

    /** Raised when a JWT fails to parse correctly. May be accompanied by an underlying error
        describing which step of the JWT parsing process failed.
     */
    FIRAuthErrorCodeMalformedJWT = 18000,
} NS_SWIFT_NAME(AuthErrorCode);

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthErrors.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthSettings.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthSettings
    @brief Determines settings related to an auth object.
 */
NS_SWIFT_NAME(AuthSettings)
@interface FIRAuthSettings : NSObject <NSCopying>

/** @property appVerificationDisabledForTesting
    @brief Flag to determine whether app verification should be disabled for testing or not.
 */
@property(nonatomic, assign, getter=isAppVerificationDisabledForTesting)
    BOOL appVerificationDisabledForTesting;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthSettings.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthTokenResult.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthTokenResult
    @brief A data class containing the ID token JWT string and other properties associated with the
    token including the decoded payload claims.
 */
NS_SWIFT_NAME(AuthTokenResult)
@interface FIRAuthTokenResult : NSObject

/** @property token
    @brief Stores the JWT string of the ID token.
 */
@property(nonatomic, readonly) NSString *token;

/** @property expirationDate
    @brief Stores the ID token's expiration date.
 */
@property(nonatomic, readonly) NSDate *expirationDate;

/** @property authDate
    @brief Stores the ID token's authentication date.
    @remarks This is the date the user was signed in and NOT the date the token was refreshed.
 */
@property(nonatomic, readonly) NSDate *authDate;

/** @property issuedAtDate
    @brief Stores the date that the ID token was issued.
    @remarks This is the date last refreshed and NOT the last authentication date.
 */
@property(nonatomic, readonly) NSDate *issuedAtDate;

/** @property signInProvider
    @brief Stores sign-in provider through which the token was obtained.
    @remarks This does not necessarily map to provider IDs.
 */
@property(nonatomic, readonly) NSString *signInProvider;

/** @property signInSecondFactor
    @brief Stores sign-in second factor through which the token was obtained.
 */
@property(nonatomic, readonly) NSString *signInSecondFactor;

/** @property claims
    @brief Stores the entire payload of claims found on the ID token. This includes the standard
        reserved claims as well as custom claims set by the developer via the Admin SDK.
 */
@property(nonatomic, readonly) NSDictionary<NSString *, id> *claims;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthTokenResult.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthUIDelegate.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class UIViewController;

NS_ASSUME_NONNULL_BEGIN

/** @protocol FIRAuthUIDelegate
    @brief A protocol to handle user interface interactions for Firebase Auth.
        This protocol is available on iOS, macOS Catalyst, and tvOS only.
 */
NS_SWIFT_NAME(AuthUIDelegate) API_UNAVAILABLE(macosx, watchos) @protocol FIRAuthUIDelegate<NSObject>

/** @fn presentViewController:animated:completion:
    @brief If implemented, this method will be invoked when Firebase Auth needs to display a view
        controller.
    @param viewControllerToPresent The view controller to be presented.
    @param flag Decides whether the view controller presentation should be animated or not.
    @param completion The block to execute after the presentation finishes. This block has no return
        value and takes no parameters.
*/
- (void)presentViewController:(UIViewController *)viewControllerToPresent
                     animated:(BOOL)flag
                   completion:(void (^_Nullable)(void))completion;

/** @fn dismissViewControllerAnimated:completion:
    @brief If implemented, this method will be invoked when Firebase Auth needs to display a view
        controller.
    @param flag Decides whether removing the view controller should be animated or not.
    @param completion The block to execute after the presentation finishes. This block has no return
        value and takes no parameters.
*/
- (void)dismissViewControllerAnimated:(BOOL)flag
                           completion:(void (^_Nullable)(void))completion
    NS_SWIFT_NAME(dismiss(animated:completion:));

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthUIDelegate.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIREmailAuthProvider.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuthCredential;

NS_ASSUME_NONNULL_BEGIN

/**
    @brief A string constant identifying the email & password identity provider.
 */
extern NSString *const FIREmailAuthProviderID NS_SWIFT_NAME(EmailAuthProviderID);

/**
    @brief A string constant identifying the email-link sign-in method.
 */
extern NSString *const FIREmailLinkAuthSignInMethod NS_SWIFT_NAME(EmailLinkAuthSignInMethod);

/**
    @brief A string constant identifying the email & password sign-in method.
 */
// clang-format off
// clang-format12 merges the next two lines.
extern NSString *const FIREmailPasswordAuthSignInMethod
    NS_SWIFT_NAME(EmailPasswordAuthSignInMethod);
// clang-format on

/** @class FIREmailAuthProvider
    @brief A concrete implementation of `AuthProvider` for Email & Password Sign In.
 */
NS_SWIFT_NAME(EmailAuthProvider)
@interface FIREmailAuthProvider : NSObject

/** @fn credentialWithEmail:password:
    @brief Creates an `AuthCredential` for an email & password sign in.

    @param email The user's email address.
    @param password The user's password.
    @return An `AuthCredential` containing the email & password credential.
 */
+ (FIRAuthCredential *)credentialWithEmail:(NSString *)email password:(NSString *)password;

/** @fn credentialWithEmail:Link:
    @brief Creates an `AuthCredential` for an email & link sign in.

    @param email The user's email address.
    @param link The email sign-in link.
    @return An `AuthCredential` containing the email & link credential.
 */
+ (FIRAuthCredential *)credentialWithEmail:(NSString *)email link:(NSString *)link;

/** @fn init
    @brief This class is not meant to be initialized directly.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIREmailAuthProvider.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRFacebookAuthProvider.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuthCredential;

NS_ASSUME_NONNULL_BEGIN

/**
    @brief A string constant identifying the Facebook identity provider.
 */
extern NSString *const FIRFacebookAuthProviderID NS_SWIFT_NAME(FacebookAuthProviderID);

/**
    @brief A string constant identifying the Facebook sign-in method.
 */
extern NSString *const _Nonnull FIRFacebookAuthSignInMethod NS_SWIFT_NAME(FacebookAuthSignInMethod);

/** @class FIRFacebookAuthProvider
    @brief Utility class for constructing Facebook credentials.
 */
NS_SWIFT_NAME(FacebookAuthProvider)
@interface FIRFacebookAuthProvider : NSObject

/** @fn credentialWithAccessToken:
    @brief Creates an `AuthCredential` for a Facebook sign in.

    @param accessToken The access token from Facebook.
    @return An `AuthCredential` containing the Facebook credentials.
 */
+ (FIRAuthCredential *)credentialWithAccessToken:(NSString *)accessToken;

/** @fn init
    @brief This class should not be initialized.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRFacebookAuthProvider.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRFederatedAuthProvider.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRAuthUIDelegate.h"

@class FIRAuthCredential;

NS_ASSUME_NONNULL_BEGIN

/**
    Utility type for constructing federated auth provider credentials.
 */
NS_SWIFT_NAME(FederatedAuthProvider)
@protocol FIRFederatedAuthProvider <NSObject>

/** @typedef FIRAuthCredentialCallback
    @brief The type of block invoked when obtaining an auth credential.
    @param credential The credential obtained.
    @param error The error that occurred if any.
 */
typedef void (^FIRAuthCredentialCallback)(FIRAuthCredential *_Nullable credential,
                                          NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @fn getCredentialWithUIDelegate:completion:
    @brief Used to obtain an auth credential via a mobile web flow.
        This method is available on iOS only.
    @param UIDelegate An optional UI delegate used to present the mobile web flow.
    @param completion Optionally; a block which is invoked asynchronously on the main thread when
        the mobile web flow is completed.
 */
- (void)getCredentialWithUIDelegate:(nullable id<FIRAuthUIDelegate>)UIDelegate
                         completion:(nullable void (^)(FIRAuthCredential *_Nullable credential,
                                                       NSError *_Nullable error))completion
    API_UNAVAILABLE(macos,
                    tvos,
                    watchos
#if defined(TARGET_OS_VISION)
                    ,
                    visionos
#endif  // defined(TARGET_OS_VISION)
    );

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRFederatedAuthProvider.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRGameCenterAuthProvider.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuthCredential;

NS_ASSUME_NONNULL_BEGIN

/**
    @brief A string constant identifying the Game Center identity provider.
 */
extern NSString *const FIRGameCenterAuthProviderID NS_SWIFT_NAME(GameCenterAuthProviderID);

/**
    @brief A string constant identifying the Game Center sign-in method.
 */
extern NSString *const _Nonnull FIRGameCenterAuthSignInMethod NS_SWIFT_NAME(
    GameCenterAuthSignInMethod);

/** @typedef FIRGameCenterCredentialCallback
    @brief The type of block invoked when the Game Center credential code has finished.
    @param credential On success, the credential will be provided, nil otherwise.
    @param error On error, the error that occurred, nil otherwise.
 */
typedef void (^FIRGameCenterCredentialCallback)(FIRAuthCredential *_Nullable credential,
                                                NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @class FIRGameCenterAuthProvider
    @brief A concrete implementation of `AuthProvider` for Game Center Sign In. Not available on
           watchOS.
 */
API_UNAVAILABLE(watchos)
NS_SWIFT_NAME(GameCenterAuthProvider)
@interface FIRGameCenterAuthProvider : NSObject

/** @fn getCredentialWithCompletion:
    @brief Creates an `AuthCredential` for a Game Center sign in.
 */
+ (void)getCredentialWithCompletion:
    (void (^)(FIRAuthCredential *_Nullable credential, NSError *_Nullable error))completion
    NS_SWIFT_NAME(getCredential(completion:));

/** @fn init
    @brief This class is not meant to be initialized.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRGameCenterAuthProvider.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRGitHubAuthProvider.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuthCredential;

NS_ASSUME_NONNULL_BEGIN

/**
    @brief A string constant identifying the GitHub identity provider.
 */
extern NSString *const FIRGitHubAuthProviderID NS_SWIFT_NAME(GitHubAuthProviderID);

/**
    @brief A string constant identifying the GitHub sign-in method.
 */
extern NSString *const _Nonnull FIRGitHubAuthSignInMethod NS_SWIFT_NAME(GitHubAuthSignInMethod);

/** @class FIRGitHubAuthProvider
    @brief Utility class for constructing GitHub credentials.
 */
NS_SWIFT_NAME(GitHubAuthProvider)
@interface FIRGitHubAuthProvider : NSObject

/** @fn credentialWithToken:
    @brief Creates an `AuthCredential` for a GitHub sign in.

    @param token The GitHub OAuth access token.
    @return An AuthCredential containing the GitHub credential.
 */
+ (FIRAuthCredential *)credentialWithToken:(NSString *)token;

/** @fn init
    @brief This class is not meant to be initialized.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRGitHubAuthProvider.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRGoogleAuthProvider.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuthCredential;

NS_ASSUME_NONNULL_BEGIN

/**
    @brief A string constant identifying the Google identity provider.
 */
extern NSString *const FIRGoogleAuthProviderID NS_SWIFT_NAME(GoogleAuthProviderID);

/**
    @brief A string constant identifying the Google sign-in method.
 */
extern NSString *const _Nonnull FIRGoogleAuthSignInMethod NS_SWIFT_NAME(GoogleAuthSignInMethod);

/** @class FIRGoogleAuthProvider
    @brief Utility class for constructing Google Sign In credentials.
 */
NS_SWIFT_NAME(GoogleAuthProvider)
@interface FIRGoogleAuthProvider : NSObject

/** @fn credentialWithIDToken:accessToken:
    @brief Creates an `AuthCredential` for a Google sign in.

    @param IDToken The ID Token from Google.
    @param accessToken The Access Token from Google.
    @return An AuthCredential containing the Google credentials.
 */
+ (FIRAuthCredential *)credentialWithIDToken:(NSString *)IDToken
                                 accessToken:(NSString *)accessToken;

/** @fn init
    @brief This class should not be initialized.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRGoogleAuthProvider.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactor.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRAuth.h"
#import "FIRMultiFactorAssertion.h"
#import "FIRMultiFactorInfo.h"
#import "FIRMultiFactorSession.h"

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRMultiFactorSessionCallback
    @brief The callback that triggered when a developer calls `getSessionWithCompletion`.
        This type is available on iOS only.
    @param session The multi factor session returned, if any.
    @param error The error which occurred, if any.
*/
typedef void (^FIRMultiFactorSessionCallback)(FIRMultiFactorSession *_Nullable session,
                                              NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.")
        API_UNAVAILABLE(macos, tvos, watchos);

/**
   @brief The string identifier for using phone as a second factor.
        This constant is available on iOS only.
*/
extern NSString *const _Nonnull FIRPhoneMultiFactorID NS_SWIFT_NAME(PhoneMultiFactorID)
    API_UNAVAILABLE(macos, tvos, watchos);

/**
   @brief The string identifier for using TOTP as a second factor.
        This constant is available on iOS only.
*/
extern NSString *const _Nonnull FIRTOTPMultiFactorID NS_SWIFT_NAME(TOTPMultiFactorID)
    API_UNAVAILABLE(macos, tvos, watchos);

/** @class FIRMultiFactor
    @brief The interface defining the multi factor related properties and operations pertaining to a
        user.
        This class is available on iOS only.
*/
NS_SWIFT_NAME(MultiFactor) API_UNAVAILABLE(macos, tvos, watchos) @interface FIRMultiFactor
    : NSObject

@property(nonatomic, readonly) NSArray<FIRMultiFactorInfo *> *enrolledFactors;

/** @fn getSessionWithCompletion:
    @brief Get a session for a second factor enrollment operation.
    @param completion A block with the session identifier for a second factor enrollment operation.
        This is used to identify the current user trying to enroll a second factor.
*/
- (void)getSessionWithCompletion:(nullable void (^)(FIRMultiFactorSession *_Nullable credential,
                                                    NSError *_Nullable error))completion;

/** @fn enrollWithAssertion:displayName:completion:
    @brief Enrolls a second factor as identified by the `MultiFactorAssertion` parameter for the
        current user.
    @param displayName An optional display name associated with the multi factor to enroll.
    @param completion The block invoked when the request is complete, or fails.
*/
- (void)enrollWithAssertion:(FIRMultiFactorAssertion *)assertion
                displayName:(nullable NSString *)displayName
                 completion:(nullable void (^)(NSError *_Nullable error))completion;

/** @fn unenrollWithInfo:completion:
    @brief Unenroll the given multi factor.
    @param completion The block invoked when the request to send the verification email is complete,
        or fails.
*/
- (void)unenrollWithInfo:(FIRMultiFactorInfo *)factorInfo
              completion:(nullable void (^)(NSError *_Nullable error))completion;

/** @fn unenrollWithFactorUID:completion:
    @brief Unenroll the given multi factor.
    @param completion The block invoked when the request to send the verification email is complete,
        or fails.
*/
- (void)unenrollWithFactorUID:(NSString *)factorUID
                   completion:(nullable void (^)(NSError *_Nullable error))completion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactor.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorAssertion.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRMultiFactorAssertion
    @brief The base class for asserting ownership of a second factor. This is equivalent to the
        AuthCredential class.
        This class is available on iOS only.
*/
NS_SWIFT_NAME(MultiFactorAssertion) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRMultiFactorAssertion : NSObject

/**
   @brief The second factor identifier for this opaque object asserting a second factor.
*/
@property(nonatomic, readonly, nonnull) NSString *factorID;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorAssertion.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorInfo.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRMultiFactorInfo
    @brief Safe public structure used to represent a second factor entity from a client perspective.
        This class is available on iOS only.
*/
NS_SWIFT_NAME(MultiFactorInfo) API_UNAVAILABLE(macos, tvos, watchos) @interface FIRMultiFactorInfo
    : NSObject

/**
   @brief The multi-factor enrollment ID.
*/
@property(nonatomic, readonly) NSString *UID;

/**
   @brief The user friendly name of the current second factor.
*/
@property(nonatomic, readonly, nullable) NSString *displayName;

/**
   @brief The second factor enrollment date.
*/
@property(nonatomic, readonly) NSDate *enrollmentDate;

/**
   @brief The identifier of the second factor.
*/
@property(nonatomic, readonly) NSString *factorID;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorResolver.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FIRMultiFactor.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRMultiFactorResolver
    @brief The data structure used to help developers resolve 2nd factor requirements on users that
        have opted in to 2 factor authentication.
        This class is available on iOS only.
*/
NS_SWIFT_NAME(MultiFactorResolver) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRMultiFactorResolver : NSObject

/**
   @brief The opaque session identifier for the current sign-in flow.
*/
@property(nonatomic, readonly) FIRMultiFactorSession *session;

/**
   @brief The list of hints for the second factors needed to complete the sign-in for the current
       session.
*/
@property(nonatomic, readonly) NSArray<FIRMultiFactorInfo *> *hints NS_SWIFT_NAME(hints);

/**
   @brief The Auth reference for the current FIRMultiResolver.
*/
@property(nonatomic, readonly) FIRAuth *auth;

/** @fn resolveSignInWithAssertion:completion:
    @brief A helper function to help users complete sign in with a second factor using an
        FIRMultiFactorAssertion confirming the user successfully completed the second factor
   challenge.
    @param completion The block invoked when the request is complete, or fails.
*/
- (void)resolveSignInWithAssertion:(FIRMultiFactorAssertion *)assertion
                        completion:(nullable FIRAuthDataResultCallback)completion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorResolver.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorSession.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRMultiFactorSession
    @brief Opaque object that identifies the current session to enroll a second factor or to
        complete sign in when previously enrolled.
        This class is available on iOS only.
 */
NS_SWIFT_NAME(MultiFactorSession) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRMultiFactorSession : NSObject

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorSession.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIROAuthCredential.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRAuthCredential.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIROAuthCredential
    @brief Internal implementation of FIRAuthCredential for generic credentials.
 */
NS_SWIFT_NAME(OAuthCredential)
@interface FIROAuthCredential : FIRAuthCredential <NSSecureCoding>

/** @property IDToken
    @brief The ID Token associated with this credential.
 */
@property(nonatomic, readonly, nullable) NSString *IDToken;

/** @property accessToken
    @brief The access token associated with this credential.
 */
@property(nonatomic, readonly, nullable) NSString *accessToken;

/** @property secret
    @brief The secret associated with this credential. This will be nil for OAuth 2.0 providers.
    @detail OAuthCredential already exposes a providerId getter. This will help the developer
        determine whether an access token/secret pair is needed.
 */
@property(nonatomic, readonly, nullable) NSString *secret;

/** @fn init
    @brief This class is not supposed to be instantiated directly.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIROAuthCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIROAuthProvider.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRFederatedAuthProvider.h"

@class FIRAuth;
@class FIROAuthCredential;

NS_ASSUME_NONNULL_BEGIN

/** @class FIROAuthProvider
    @brief A concrete implementation of `AuthProvider` for generic OAuth Providers.
 */
NS_SWIFT_NAME(OAuthProvider)
@interface FIROAuthProvider : NSObject <FIRFederatedAuthProvider>

/** @property scopes
    @brief Array used to configure the OAuth scopes.
 */
@property(nonatomic, copy, nullable) NSArray<NSString *> *scopes;

/** @property customParameters
    @brief Dictionary used to configure the OAuth custom parameters.
 */
@property(nonatomic, copy, nullable) NSDictionary<NSString *, NSString *> *customParameters;

/** @property providerID
    @brief The provider ID indicating the specific OAuth provider this OAuthProvider instance
          represents.
 */
@property(nonatomic, copy, readonly) NSString *providerID;

/** @fn providerWithProviderID:
    @param providerID The provider ID of the IDP for which this auth provider instance will be
        configured.
    @return An instance of `OAuthProvider` corresponding to the specified provider ID.
 */
+ (FIROAuthProvider *)providerWithProviderID:(NSString *)providerID;

/** @fn providerWithProviderID:auth:
    @param providerID The provider ID of the IDP for which this auth provider instance will be
        configured.
    @param auth The auth instance to be associated with the `OAuthProvider` instance.
    @return An instance of `OAuthProvider` corresponding to the specified provider ID.
 */
+ (FIROAuthProvider *)providerWithProviderID:(NSString *)providerID auth:(FIRAuth *)auth;

/** @fn credentialWithProviderID:IDToken:accessToken:
    @brief Creates an `AuthCredential` for the OAuth 2 provider identified by provider ID, ID
        token, and access token.

    @param providerID The provider ID associated with the Auth credential being created.
    @param IDToken The IDToken associated with the Auth credential being created.
    @param accessToken The access token associated with the Auth credential be created, if
        available.
    @return A `AuthCredential` for the specified provider ID, ID token and access token.
 */
+ (FIROAuthCredential *)credentialWithProviderID:(NSString *)providerID
                                         IDToken:(NSString *)IDToken
                                     accessToken:(nullable NSString *)accessToken;

/** @fn credentialWithProviderID:accessToken:
    @brief Creates an `AuthCredential` for the OAuth 2 provider identified by provider ID using
      an ID token.

    @param providerID The provider ID associated with the Auth credential being created.
    @param accessToken The access token associated with the Auth credential be created
    @return An `AuthCredential`.
 */
+ (FIROAuthCredential *)credentialWithProviderID:(NSString *)providerID
                                     accessToken:(NSString *)accessToken;

/** @fn credentialWithProviderID:IDToken:rawNonce:accessToken:
    @brief Creates an `AuthCredential` for that OAuth 2 provider identified by provider ID, ID
        token, raw nonce, and access token.

    @param providerID The provider ID associated with the Auth credential being created.
    @param IDToken The IDToken associated with the Auth credential being created.
    @param rawNonce The raw nonce associated with the Auth credential being created.
    @param accessToken The access token associated with the Auth credential be created, if
        available.
    @return A `AuthCredential` for the specified provider ID, ID token and access token.
 */
+ (FIROAuthCredential *)credentialWithProviderID:(NSString *)providerID
                                         IDToken:(NSString *)IDToken
                                        rawNonce:(nullable NSString *)rawNonce
                                     accessToken:(nullable NSString *)accessToken;

/** @fn credentialWithProviderID:IDToken:rawNonce:
    @brief Creates an `AuthCredential` for that OAuth 2 provider identified by providerID using
      an ID token and raw nonce.

    @param providerID The provider ID associated with the Auth credential being created.
    @param IDToken The IDToken associated with the Auth credential being created.
    @param rawNonce The raw nonce associated with the Auth credential being created.
    @return A `AuthCredential`.
 */
+ (FIROAuthCredential *)credentialWithProviderID:(NSString *)providerID
                                         IDToken:(NSString *)IDToken
                                        rawNonce:(nullable NSString *)rawNonce;

/** @fn appleCredentialWithIDToken:rawNonce:fullName:
 *  @brief Creates an `AuthCredential` for the Sign in with Apple OAuth 2 provider identified by ID
 * token, raw nonce, and full name. This method is specific to the Sign in with Apple OAuth 2
 * provider as this provider requires the full name to be passed explicitly.
 *
 *  @param IDToken The IDToken associated with the Sign in with Apple Auth credential being created.
 *  @param rawNonce The raw nonce associated with the Sign in with Apple Auth credential being
 * created.
 *  @param fullName The full name associated with the Sign in with Apple Auth credential being
 * created.
 *  @return An `AuthCredential`.
 */
+ (FIROAuthCredential *)appleCredentialWithIDToken:(NSString *)IDToken
                                          rawNonce:(nullable NSString *)rawNonce
                                          fullName:(nullable NSPersonNameComponents *)fullName;

/** @fn init
    @brief This class is not meant to be initialized.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIROAuthProvider.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneAuthCredential.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRAuthCredential.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRPhoneAuthCredential
    @brief Implementation of FIRAuthCredential for Phone Auth credentials.
        This class is available on iOS only.
 */
NS_SWIFT_NAME(PhoneAuthCredential) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRPhoneAuthCredential : FIRAuthCredential<NSSecureCoding>

/** @fn init
    @brief This class is not supposed to be instantiated directly.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneAuthCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneAuthProvider.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuth;
@class FIRMultiFactorSession;
@class FIRPhoneAuthCredential;
@class FIRPhoneMultiFactorInfo;
@protocol FIRAuthUIDelegate;

NS_ASSUME_NONNULL_BEGIN

/** @var FIRPhoneAuthProviderID
    @brief A string constant identifying the phone identity provider.
        This constant is available on iOS only.
 */
extern NSString *const FIRPhoneAuthProviderID NS_SWIFT_NAME(PhoneAuthProviderID)
    API_UNAVAILABLE(macos, tvos, watchos);

/** @var FIRPhoneAuthProviderID
    @brief A string constant identifying the phone sign-in method.
        This constant is available on iOS only.
 */
extern NSString *const _Nonnull FIRPhoneAuthSignInMethod NS_SWIFT_NAME(PhoneAuthSignInMethod)
    API_UNAVAILABLE(macos, tvos, watchos);

/** @typedef FIRVerificationResultCallback
    @brief The type of block invoked when a request to send a verification code has finished.
        This type is available on iOS only.

    @param verificationID On success, the verification ID provided, nil otherwise.
    @param error On error, the error that occurred, nil otherwise.
 */
typedef void (^FIRVerificationResultCallback)(NSString *_Nullable verificationID,
                                              NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.")
        API_UNAVAILABLE(macos, tvos, watchos);

/** @class FIRPhoneAuthProvider
    @brief A concrete implementation of `AuthProvider` for phone auth providers.
        This class is available on iOS only.
 */
NS_SWIFT_NAME(PhoneAuthProvider) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRPhoneAuthProvider : NSObject

/** @fn provider
    @brief Returns an instance of `PhoneAuthProvider` for the default `Auth` object.
 */
+ (instancetype)provider NS_SWIFT_NAME(provider());

/** @fn providerWithAuth:
    @brief Returns an instance of `PhoneAuthProvider` for the provided `Auth` object.
    @param auth The auth object to associate with the phone auth provider instance.
 */
+ (instancetype)providerWithAuth:(FIRAuth *)auth NS_SWIFT_NAME(provider(auth:));

/** @fn verifyPhoneNumber:UIDelegate:completion:
    @brief Starts the phone number authentication flow by sending a verification code to the
        specified phone number.
    @param phoneNumber The phone number to be verified.
    @param UIDelegate An object used to present the SFSafariViewController. The object is retained
        by this method until the completion block is executed.
    @param completion The callback to be invoked when the verification flow is finished.
    @remarks Possible error codes:

        + `AuthErrorCodeCaptchaCheckFailed` - Indicates that the reCAPTCHA token obtained by
            the Firebase Auth is invalid or has expired.
        + `AuthErrorCodeQuotaExceeded` - Indicates that the phone verification quota for this
            project has been exceeded.
        + `AuthErrorCodeInvalidPhoneNumber` - Indicates that the phone number provided is
            invalid.
        + `AuthErrorCodeMissingPhoneNumber` - Indicates that a phone number was not provided.
 */
- (void)verifyPhoneNumber:(NSString *)phoneNumber
               UIDelegate:(nullable id<FIRAuthUIDelegate>)UIDelegate
               completion:(nullable void (^)(NSString *_Nullable verificationID,
                                             NSError *_Nullable error))completion;

/** @fn verifyPhoneNumber:UIDelegate:multiFactorSession:completion:
    @brief Verify ownership of the second factor phone number by the current user.
    @param phoneNumber The phone number to be verified.
    @param UIDelegate An object used to present the SFSafariViewController. The object is retained
        by this method until the completion block is executed.
    @param session A session to identify the MFA flow. For enrollment, this identifies the user
        trying to enroll. For sign-in, this identifies that the user already passed the first
        factor challenge.
    @param completion The callback to be invoked when the verification flow is finished.
*/
- (void)verifyPhoneNumber:(NSString *)phoneNumber
               UIDelegate:(nullable id<FIRAuthUIDelegate>)UIDelegate
       multiFactorSession:(nullable FIRMultiFactorSession *)session
               completion:(nullable void (^)(NSString *_Nullable verificationID,
                                             NSError *_Nullable error))completion;

/** @fn verifyPhoneNumberWithMultiFactorInfo:UIDelegate:multiFactorSession:completion:
    @brief Verify ownership of the second factor phone number by the current user.
    @param phoneMultiFactorInfo The phone multi factor whose number need to be verified.
    @param UIDelegate An object used to present the SFSafariViewController. The object is retained
        by this method until the completion block is executed.
    @param session A session to identify the MFA flow. For enrollment, this identifies the user
        trying to enroll. For sign-in, this identifies that the user already passed the first
        factor challenge.
    @param completion The callback to be invoked when the verification flow is finished.
*/
- (void)verifyPhoneNumberWithMultiFactorInfo:(FIRPhoneMultiFactorInfo *)phoneMultiFactorInfo
                                  UIDelegate:(nullable id<FIRAuthUIDelegate>)UIDelegate
                          multiFactorSession:(nullable FIRMultiFactorSession *)session
                                  completion:
                                      (nullable void (^)(NSString *_Nullable verificationID,
                                                         NSError *_Nullable error))completion;

/** @fn credentialWithVerificationID:verificationCode:
    @brief Creates an `AuthCredential` for the phone number provider identified by the
        verification ID and verification code.

    @param verificationID The verification ID obtained from invoking
        verifyPhoneNumber:completion:
    @param verificationCode The verification code obtained from the user.
    @return The corresponding phone auth credential for the verification ID and verification code
        provided.
 */
- (FIRPhoneAuthCredential *)credentialWithVerificationID:(NSString *)verificationID
                                        verificationCode:(NSString *)verificationCode;

/** @fn init
    @brief Please use the `provider()` or `provider(auth:)` methods to obtain an instance of
        `PhoneAuthProvider`.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneAuthProvider.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneMultiFactorAssertion.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRMultiFactorAssertion.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRPhoneMultiFactorAssertion
    @brief The subclass of base class FIRMultiFactorAssertion, used to assert ownership of a phone
        second factor.
        This class is available on iOS only.
*/
NS_SWIFT_NAME(PhoneMultiFactorAssertion) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRPhoneMultiFactorAssertion : FIRMultiFactorAssertion

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneMultiFactorAssertion.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneMultiFactorGenerator.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRPhoneAuthCredential.h"
#import "FIRPhoneMultiFactorAssertion.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRPhoneMultiFactorGenerator
    @brief The data structure used to help initialize an assertion for a second factor entity to the
        Firebase Auth/CICP server. Depending on the type of second factor, this will help generate
        the assertion.
        This class is available on iOS only.
*/
NS_SWIFT_NAME(PhoneMultiFactorGenerator) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRPhoneMultiFactorGenerator : NSObject

/** @fn assertionWithCredential:
    @brief Initializes the MFA assertion to confirm ownership of the phone second factor. Note that
        this API is used for both enrolling and signing in with a phone second factor.
    @param phoneAuthCredential The phone auth credential used for multi factor flows.
*/
+ (FIRPhoneMultiFactorAssertion *)assertionWithCredential:
    (FIRPhoneAuthCredential *)phoneAuthCredential;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneMultiFactorGenerator.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneMultiFactorInfo.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRMultiFactorInfo.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRPhoneMultiFactorInfo
    @brief Extends the MultiFactorInfo class for phone number second factors.
        The identifier of this second factor is "phone".
        This class is available on iOS only.
*/
NS_SWIFT_NAME(PhoneMultiFactorInfo) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRPhoneMultiFactorInfo : FIRMultiFactorInfo

/**
   @brief This is the phone number associated with the current second factor.
*/
@property(nonatomic, readonly, nonnull) NSString *phoneNumber;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRPhoneMultiFactorInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRTOTPMultiFactorAssertion.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRMultiFactorAssertion.h"

NS_ASSUME_NONNULL_BEGIN

/**
 @class TOTPMultiFactorAssertion
 @brief The subclass of base class MultiFactorAssertion, used to assert ownership of a TOTP
 (Time-based One Time Password) second factor.
 This class is available on iOS only.
 */
NS_SWIFT_NAME(TOTPMultiFactorAssertion) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRTOTPMultiFactorAssertion : FIRMultiFactorAssertion

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRTOTPMultiFactorAssertion.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRTOTPMultiFactorGenerator.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FIRMultiFactorSession.h"
#import "FIRTOTPMultiFactorAssertion.h"
#import "FIRTOTPSecret.h"

NS_ASSUME_NONNULL_BEGIN

/**
 @class FIRTOTPMultiFactorGenerator
 @brief The data structure used to help initialize an assertion for a second factor entity to the
 Firebase Auth/CICP server. Depending on the type of second factor, this will help generate
 the assertion.
 This class is available on iOS only.
 */
NS_SWIFT_NAME(TOTPMultiFactorGenerator) API_UNAVAILABLE(macos, tvos, watchos)
    @interface FIRTOTPMultiFactorGenerator : NSObject

/**
 @fn generateSecretWithMultiFactorSession
 @brief Creates a TOTP secret as part of enrolling a TOTP second factor. Used for generating a
 QR code URL or inputting into a TOTP app. This method uses the auth instance corresponding to the
 user in the multiFactorSession.
 @param session The multiFactorSession instance.
 @param completion Completion block
 */
+ (void)generateSecretWithMultiFactorSession:(FIRMultiFactorSession *)session
                                  completion:(void (^)(FIRTOTPSecret *_Nullable secret,
                                                       NSError *_Nullable error))completion;

/**
 @fn assertionForEnrollmentWithSecret:
 @brief Initializes the MFA assertion to confirm ownership of the TOTP second factor. This assertion
 is used to complete enrollment of TOTP as a second factor.
 @param secret The TOTP secret.
 @param oneTimePassword one time password string.
 */
+ (FIRTOTPMultiFactorAssertion *)assertionForEnrollmentWithSecret:(FIRTOTPSecret *)secret
                                                  oneTimePassword:(NSString *)oneTimePassword;

/**
 @fn assertionForSignInWithenrollmentID:
 @brief Initializes the MFA assertion to confirm ownership of the TOTP second factor. This
 assertion is used to complete signIn with TOTP as a second factor.
 @param enrollmentID The ID that identifies the enrolled TOTP second factor.
 @param oneTimePassword one time password string.
*/
+ (FIRTOTPMultiFactorAssertion *)assertionForSignInWithEnrollmentID:(NSString *)enrollmentID
                                                    oneTimePassword:(NSString *)oneTimePassword;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRTOTPMultiFactorGenerator.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRTOTPSecret.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRMultiFactorInfo.h"

NS_ASSUME_NONNULL_BEGIN

/**
 @class TOTPSecret
 */
NS_SWIFT_NAME(TOTPSecret)
@interface FIRTOTPSecret : NSObject

/**
 @brief Returns the shared secret key/seed used to generate time-based one-time passwords.
 */
- (NSString *)sharedSecretKey;

/**
 @brief Returns a QRCode URL as described in
 https://github.com/google/google-authenticator/wiki/Key-Uri-Format
 This can be displayed to the user as a QRCode to be scanned into a TOTP app like Google
 Authenticator.

 @param accountName the name of the account/app.
 @param issuer issuer of the TOTP(likely the app name).
 @returns A QRCode URL string.
 */
- (NSString *)generateQRCodeURLWithAccountName:(NSString *)accountName issuer:(NSString *)issuer;

/**
 @brief Opens the specified QR Code URL in a password manager like iCloud Keychain.
 * See more details here:
 https://developer.apple.com/documentation/authenticationservices/securing_logins_with_icloud_keychain_verification_codes
 */
- (void)openInOTPAppWithQRCodeURL:(NSString *)QRCodeURL;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRTOTPSecret.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRTwitterAuthProvider.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuthCredential;

NS_ASSUME_NONNULL_BEGIN

/**
    @brief A string constant identifying the Twitter identity provider.
 */
extern NSString *const FIRTwitterAuthProviderID NS_SWIFT_NAME(TwitterAuthProviderID);
/**
    @brief A string constant identifying the Twitter sign-in method.
 */
extern NSString *const _Nonnull FIRTwitterAuthSignInMethod NS_SWIFT_NAME(TwitterAuthSignInMethod);

/** @class FIRTwitterAuthProvider
    @brief Utility class for constructing Twitter credentials.
 */
NS_SWIFT_NAME(TwitterAuthProvider)
@interface FIRTwitterAuthProvider : NSObject

/** @fn credentialWithToken:secret:
    @brief Creates an `AuthCredential` for a Twitter sign in.

    @param token The Twitter OAuth token.
    @param secret The Twitter OAuth secret.
    @return An AuthCredential containing the Twitter credential.
 */
+ (FIRAuthCredential *)credentialWithToken:(NSString *)token secret:(NSString *)secret;

/** @fn init
    @brief This class is not meant to be initialized.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRTwitterAuthProvider.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRUser.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRAuth.h"
#import "FIRAuthDataResult.h"
#import "FIRMultiFactor.h"
#import "FIRUserInfo.h"

@class FIRAuthTokenResult;
@class FIRPhoneAuthCredential;
@class FIRUserProfileChangeRequest;
@class FIRUserMetadata;
@protocol FIRAuthUIDelegate;

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRAuthTokenCallback
    @brief The type of block called when a token is ready for use.
    @see `User.getIDToken()`
    @see `User.idTokenForcingRefresh(_:)`

    @param token Optionally; an access token if the request was successful.
    @param error Optionally; the error which occurred - or nil if the request was successful.

    @remarks One of `token` or `error` will always be non-nil.
 */
typedef void (^FIRAuthTokenCallback)(NSString *_Nullable token, NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRAuthTokenResultCallback
    @brief The type of block called when a token is ready for use.
    @see `User.getIDToken()`
    @see `User.idTokenForcingRefresh(_:)`

    @param tokenResult Optionally; an object containing the raw access token string as well as other
        useful data pertaining to the token.
    @param error Optionally; the error which occurred - or nil if the request was successful.

    @remarks One of `token` or `error` will always be non-nil.
 */
typedef void (^FIRAuthTokenResultCallback)(FIRAuthTokenResult *_Nullable tokenResult,
                                           NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRUserProfileChangeCallback
    @brief The type of block called when a user profile change has finished.

    @param error Optionally; the error which occurred - or nil if the request was successful.
 */
typedef void (^FIRUserProfileChangeCallback)(NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @typedef FIRSendEmailVerificationCallback
    @brief The type of block called when a request to send an email verification has finished.

    @param error Optionally; the error which occurred - or nil if the request was successful.
 */
typedef void (^FIRSendEmailVerificationCallback)(NSError *_Nullable error)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/** @class FIRUser
    @brief Represents a user. Firebase Auth does not attempt to validate users
        when loading them from the keychain. Invalidated users (such as those
        whose passwords have been changed on another client) are automatically
        logged out when an auth-dependent operation is attempted or when the
        ID token is automatically refreshed.
    @remarks This class is thread-safe.
 */
NS_SWIFT_NAME(User)
@interface FIRUser : NSObject <FIRUserInfo>

/** @property anonymous
    @brief Indicates the user represents an anonymous user.
 */
@property(nonatomic, readonly, getter=isAnonymous) BOOL anonymous;

/** @property emailVerified
    @brief Indicates the email address associated with this user has been verified.
 */
@property(nonatomic, readonly, getter=isEmailVerified) BOOL emailVerified;

/** @property refreshToken
    @brief A refresh token; useful for obtaining new access tokens independently.
    @remarks This property should only be used for advanced scenarios, and is not typically needed.
 */
@property(nonatomic, readonly, nullable) NSString *refreshToken;

/** @property providerData
    @brief Profile data for each identity provider, if any.
    @remarks This data is cached on sign-in and updated when linking or unlinking.
 */
@property(nonatomic, readonly, nonnull) NSArray<id<FIRUserInfo>> *providerData;

/** @property metadata
    @brief Metadata associated with the Firebase user in question.
 */
@property(nonatomic, readonly, nonnull) FIRUserMetadata *metadata;

/** @property tenantID
    @brief The tenant ID of the current user. nil if none is available.
 */
@property(nonatomic, readonly, nullable) NSString *tenantID;

/** @property multiFactor
    @brief Multi factor object associated with the user.
        This property is available on iOS only.
*/
@property(nonatomic, readonly, nonnull)
    FIRMultiFactor *multiFactor API_UNAVAILABLE(macos, tvos, watchos);

/** @fn init
    @brief This class should not be instantiated.
    @remarks To retrieve the current user, use `Auth.currentUser`. To sign a user
        in or out, use the methods on `Auth`.
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn updateEmail:completion:
    @brief [Deprecated] Updates the email address for the user. On success, the cached user profile
   data is updated. Throws FIRAuthErrorCodeInvalidCredentials error when [Email Enumeration
   Protection](https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection)
   is enabled.
    @remarks May fail if there is already an account with this email address that was created using
        email and password authentication.

    @param email The email address for the user.
    @param completion Optionally; the block invoked when the user profile change has finished.
        Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeInvalidRecipientEmail` - Indicates an invalid recipient email was
            sent in the request.
        + `AuthErrorCodeInvalidSender` - Indicates an invalid sender email is set in
            the console for this action.
        + `AuthErrorCodeInvalidMessagePayload` - Indicates an invalid email template for
            sending update email.
        + `AuthErrorCodeEmailAlreadyInUse` - Indicates the email is already in use by another
            account.
        + `AuthErrorCodeInvalidEmail` - Indicates the email address is malformed.
        + `AuthErrorCodeRequiresRecentLogin` - Updating a user’s email is a security
            sensitive operation that requires a recent login from the user. This error indicates
            the user has not signed in recently enough. To resolve, reauthenticate the user by
            calling `reauthenticate(with:)`.

    @remarks See `AuthErrors` for a list of error codes that are common to all `User` methods.
 */
- (void)updateEmail:(NSString *)email
         completion:(nullable void (^)(NSError *_Nullable error))completion
    NS_SWIFT_NAME(updateEmail(to:completion:)) DEPRECATED_MSG_ATTRIBUTE(
        "This method is deprecated and will be removed in a future release. Use "
        "sendEmailVerification(beforeUpdatingEmail email: String) instead.");

/** @fn updatePassword:completion:
    @brief Updates the password for the user. On success, the cached user profile data is updated.

    @param password The new password for the user.
    @param completion Optionally; the block invoked when the user profile change has finished.
        Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeOperationNotAllowed` - Indicates the administrator disabled
            sign in with the specified identity provider.
        + `AuthErrorCodeRequiresRecentLogin` - Updating a user’s password is a security
            sensitive operation that requires a recent login from the user. This error indicates
            the user has not signed in recently enough. To resolve, reauthenticate the user by
            calling `reauthenticate(with:)`.
        + `AuthErrorCodeWeakPassword` - Indicates an attempt to set a password that is
            considered too weak. The `NSLocalizedFailureReasonErrorKey` field in the `userInfo`
            dictionary object will contain more detailed explanation that can be shown to the user.

    @remarks See `AuthErrors` for a list of error codes that are common to all `User` methods.
 */
- (void)updatePassword:(NSString *)password
            completion:(nullable void (^)(NSError *_Nullable error))completion
    NS_SWIFT_NAME(updatePassword(to:completion:));

/** @fn updatePhoneNumberCredential:completion:
    @brief Updates the phone number for the user. On success, the cached user profile data is
        updated.
        This method is available on iOS only.

    @param phoneNumberCredential The new phone number credential corresponding to the phone number
        to be added to the Firebase account, if a phone number is already linked to the account this
        new phone number will replace it.
    @param completion Optionally; the block invoked when the user profile change has finished.
        Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeRequiresRecentLogin` - Updating a user’s phone number is a security
            sensitive operation that requires a recent login from the user. This error indicates
            the user has not signed in recently enough. To resolve, reauthenticate the user by
            calling `reauthenticate(with:)`.

    @remarks See `AuthErrors` for a list of error codes that are common to all `User` methods.
 */
- (void)updatePhoneNumberCredential:(FIRPhoneAuthCredential *)phoneNumberCredential
                         completion:(nullable void (^)(NSError *_Nullable error))completion
    API_UNAVAILABLE(macos, tvos, watchos);

/** @fn profileChangeRequest
    @brief Creates an object which may be used to change the user's profile data.

    @remarks Set the properties of the returned object, then call
        `UserProfileChangeRequest.commitChanges()` to perform the updates atomically.

    @return An object which may be used to change the user's profile data atomically.
 */
- (FIRUserProfileChangeRequest *)profileChangeRequest NS_SWIFT_NAME(createProfileChangeRequest());

/** @fn reloadWithCompletion:
    @brief Reloads the user's profile data from the server.

    @param completion Optionally; the block invoked when the reload has finished. Invoked
        asynchronously on the main thread in the future.

    @remarks May fail with a `AuthErrorCodeRequiresRecentLogin` error code. In this case
        you should call `reauthenticate(with:)` before re-invoking
        `updateEmail(to:)`.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)reloadWithCompletion:(nullable void (^)(NSError *_Nullable error))completion;

/** @fn reauthenticateWithCredential:completion:
    @brief Renews the user's authentication tokens by validating a fresh set of credentials supplied
        by the user  and returns additional identity provider data.

    @param credential A user-supplied credential, which will be validated by the server. This can be
        a successful third-party identity provider sign-in, or an email address and password.
    @param completion Optionally; the block invoked when the re-authentication operation has
        finished. Invoked asynchronously on the main thread in the future.

    @remarks If the user associated with the supplied credential is different from the current user,
        or if the validation of the supplied credentials fails; an error is returned and the current
        user remains signed in.

    @remarks Possible error codes:

        + `AuthErrorCodeInvalidCredential` - Indicates the supplied credential is invalid.
            This could happen if it has expired or it is malformed.
        + `AuthErrorCodeOperationNotAllowed` - Indicates that accounts with the
            identity provider represented by the credential are not enabled. Enable them in the
            Auth section of the Firebase console.
        + `AuthErrorCodeEmailAlreadyInUse` -  Indicates the email asserted by the credential
            (e.g. the email in a Facebook access token) is already in use by an existing account,
            that cannot be authenticated with this method. This error will only be thrown if the
          "One account per email address" setting is enabled in the Firebase console, under Auth
          settings. Please note that the error code raised in this specific situation may not be
          the same on Web and Android.
        + `AuthErrorCodeUserDisabled` - Indicates the user's account is disabled.
        + `AuthErrorCodeWrongPassword` - Indicates the user attempted reauthentication with
            an incorrect password, if credential is of the type `EmailPasswordAuthCredential`.
        + `AuthErrorCodeUserMismatch` -  Indicates that an attempt was made to
            reauthenticate with a user which is not the current user.
        + `AuthErrorCodeInvalidEmail` - Indicates the email address is malformed.

    @remarks See `FIRAuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)reauthenticateWithCredential:(FIRAuthCredential *)credential
                          completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                                        NSError *_Nullable error))completion;

/** @fn reauthenticateWithProvider:UIDelegate:completion:
    @brief Renews the user's authentication using the provided auth provider instance.
        This method is available on iOS, macOS Catalyst, and tvOS only.

    @param provider An instance of an auth provider used to initiate the reauthenticate flow.
    @param UIDelegate Optionally an instance of a class conforming to the `AuthUIDelegate`
        protocol, used for presenting the web context. If nil, a default `AuthUIDelegate`
        will be used.
    @param completion Optionally; a block which is invoked when the reauthenticate flow finishes, or
        is canceled. Invoked asynchronously on the main thread in the future.
 */
- (void)reauthenticateWithProvider:(id<FIRFederatedAuthProvider>)provider
                        UIDelegate:(nullable id<FIRAuthUIDelegate>)UIDelegate
                        completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                                      NSError *_Nullable error))completion
    NS_SWIFT_NAME(reauthenticate(with:uiDelegate:completion:))API_UNAVAILABLE(macosx, watchos);

/** @fn getIDTokenResultWithCompletion:
    @brief Retrieves the Firebase authentication token, possibly refreshing it if it has expired.

    @param completion Optionally; the block invoked when the token is available. Invoked
        asynchronously on the main thread in the future.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)getIDTokenResultWithCompletion:(nullable void (^)(FIRAuthTokenResult *_Nullable tokenResult,
                                                          NSError *_Nullable error))completion
    NS_SWIFT_NAME(getIDTokenResult(completion:));

/** @fn getIDTokenResultForcingRefresh:completion:
    @brief Retrieves the Firebase authentication token, possibly refreshing it if it has expired.

    @param forceRefresh Forces a token refresh. Useful if the token becomes invalid for some reason
        other than an expiration.
    @param completion Optionally; the block invoked when the token is available. Invoked
        asynchronously on the main thread in the future.

    @remarks The authentication token will be refreshed (by making a network request) if it has
        expired, or if `forceRefresh` is YES.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)getIDTokenResultForcingRefresh:(BOOL)forceRefresh
                            completion:(nullable void (^)(FIRAuthTokenResult *_Nullable tokenResult,
                                                          NSError *_Nullable error))completion
    NS_SWIFT_NAME(getIDTokenResult(forcingRefresh:completion:));

/** @fn getIDTokenWithCompletion:
    @brief Retrieves the Firebase authentication token, possibly refreshing it if it has expired.

    @param completion Optionally; the block invoked when the token is available. Invoked
        asynchronously on the main thread in the future.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)getIDTokenWithCompletion:
    (nullable void (^)(NSString *_Nullable token, NSError *_Nullable error))completion
    NS_SWIFT_NAME(getIDToken(completion:));

/** @fn getIDTokenForcingRefresh:completion:
    @brief Retrieves the Firebase authentication token, possibly refreshing it if it has expired.

    @param forceRefresh Forces a token refresh. Useful if the token becomes invalid for some reason
        other than an expiration.
    @param completion Optionally; the block invoked when the token is available. Invoked
        asynchronously on the main thread in the future.

    @remarks The authentication token will be refreshed (by making a network request) if it has
        expired, or if `forceRefresh` is true.

    @remarks See `AuthErrors` for a list of error codes that are common to all API methods.
 */
- (void)getIDTokenForcingRefresh:(BOOL)forceRefresh
                      completion:(nullable void (^)(NSString *_Nullable token,
                                                    NSError *_Nullable error))completion;

/** @fn linkWithCredential:completion:
    @brief Associates a user account from a third-party identity provider with this user and
        returns additional identity provider data.

    @param credential The credential for the identity provider.
    @param completion Optionally; the block invoked when the unlinking is complete, or fails.
        Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeProviderAlreadyLinked` - Indicates an attempt to link a provider of a
            type already linked to this account.
        + `AuthErrorCodeCredentialAlreadyInUse` - Indicates an attempt to link with a
            credential that has already been linked with a different Firebase account.
        + `AuthErrorCodeOperationNotAllowed` - Indicates that accounts with the identity
            provider represented by the credential are not enabled. Enable them in the Auth section
            of the Firebase console.

    @remarks This method may also return error codes associated with `updateEmail(to:)` and
        `updatePassword(to:)` on `User`.

    @remarks See `AuthErrors` for a list of error codes that are common to all `User` methods.
 */
- (void)linkWithCredential:(FIRAuthCredential *)credential
                completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                              NSError *_Nullable error))completion;

/** @fn linkWithProvider:UIDelegate:completion:
    @brief link the user with the provided auth provider instance.
        This method is available on iOS, macOS Catalyst, and tvOS only.

    @param provider An instance of an auth provider used to initiate the link flow.
    @param UIDelegate Optionally an instance of a class conforming to the `AuthUIDelegate`
        protocol used for presenting the web context. If nil, a default `AuthUIDelegate`
        will be used.
    @param completion Optionally; a block which is invoked when the link flow finishes, or
        is canceled. Invoked asynchronously on the main thread in the future.
 */
- (void)linkWithProvider:(id<FIRFederatedAuthProvider>)provider
              UIDelegate:(nullable id<FIRAuthUIDelegate>)UIDelegate
              completion:(nullable void (^)(FIRAuthDataResult *_Nullable authResult,
                                            NSError *_Nullable error))completion
    NS_SWIFT_NAME(link(with:uiDelegate:completion:))API_UNAVAILABLE(macosx, watchos);

/** @fn unlinkFromProvider:completion:
    @brief Disassociates a user account from a third-party identity provider with this user.

    @param provider The provider ID of the provider to unlink.
    @param completion Optionally; the block invoked when the unlinking is complete, or fails.
        Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeNoSuchProvider` - Indicates an attempt to unlink a provider
            that is not linked to the account.
        + `AuthErrorCodeRequiresRecentLogin` - Updating email is a security sensitive
            operation that requires a recent login from the user. This error indicates the user
            has not signed in recently enough. To resolve, reauthenticate the user by calling
            `reauthenticate(with:)`.

    @remarks See `AuthErrors` for a list of error codes that are common to all `User` methods.
 */
- (void)unlinkFromProvider:(NSString *)provider
                completion:(nullable void (^)(FIRUser *_Nullable user,
                                              NSError *_Nullable error))completion;

/** @fn sendEmailVerificationWithCompletion:
    @brief Initiates email verification for the user.

    @param completion Optionally; the block invoked when the request to send an email verification
        is complete, or fails. Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeInvalidRecipientEmail` - Indicates an invalid recipient email was
            sent in the request.
        + `AuthErrorCodeInvalidSender` - Indicates an invalid sender email is set in
            the console for this action.
        + `AuthErrorCodeInvalidMessagePayload` - Indicates an invalid email template for
            sending update email.
        + `AuthErrorCodeUserNotFound` - Indicates the user account was not found.

    @remarks See `AuthErrors` for a list of error codes that are common to all `User` methods.
 */
- (void)sendEmailVerificationWithCompletion:(nullable void (^)(NSError *_Nullable error))completion;

/** @fn sendEmailVerificationWithActionCodeSettings:completion:
    @brief Initiates email verification for the user.

    @param actionCodeSettings An `ActionCodeSettings` object containing settings related to
        handling action codes.

    @remarks Possible error codes:

        + `AuthErrorCodeInvalidRecipientEmail` - Indicates an invalid recipient email was
            sent in the request.
        + `AuthErrorCodeInvalidSender` - Indicates an invalid sender email is set in
            the console for this action.
        + `AuthErrorCodeInvalidMessagePayload` - Indicates an invalid email template for
            sending update email.
        + `AuthErrorCodeUserNotFound` - Indicates the user account was not found.
        + `AuthErrorCodeMissingIosBundleID` - Indicates that the iOS bundle ID is missing when
            a iOS App Store ID is provided.
        + `AuthErrorCodeMissingAndroidPackageName` - Indicates that the android package name
            is missing when the `androidInstallApp` flag is set to true.
        + `AuthErrorCodeUnauthorizedDomain` - Indicates that the domain specified in the
            continue URL is not allowlisted in the Firebase console.
        + `AuthErrorCodeInvalidContinueURI` - Indicates that the domain specified in the
            continue URL is not valid.
 */
- (void)sendEmailVerificationWithActionCodeSettings:(FIRActionCodeSettings *)actionCodeSettings
                                         completion:(nullable void (^)(NSError *_Nullable error))
                                                        completion;

/** @fn deleteWithCompletion:
    @brief Deletes the user account (also signs out the user, if this was the current user).

    @param completion Optionally; the block invoked when the request to delete the account is
        complete, or fails. Invoked asynchronously on the main thread in the future.

    @remarks Possible error codes:

        + `AuthErrorCodeRequiresRecentLogin` - Updating email is a security sensitive
            operation that requires a recent login from the user. This error indicates the user
            has not signed in recently enough. To resolve, reauthenticate the user by calling
            `reauthenticate(with:)`.

    @remarks See `AuthErrors` for a list of error codes that are common to all `User` methods.

 */
- (void)deleteWithCompletion:(nullable void (^)(NSError *_Nullable error))completion;

/** @fn sendEmailVerificationBeforeUpdatingEmail:completion:
    @brief Send an email to verify the ownership of the account then update to the new email.
    @param email The email to be updated to.
    @param completion Optionally; the block invoked when the request to send the verification
        email is complete, or fails.
*/
- (void)sendEmailVerificationBeforeUpdatingEmail:(nonnull NSString *)email
                                      completion:
                                          (nullable void (^)(NSError *_Nullable error))completion;

/** @fn sendEmailVerificationBeforeUpdatingEmail:completion:
    @brief Send an email to verify the ownership of the account then update to the new email.
    @param email The email to be updated to.
    @param actionCodeSettings An `ActionCodeSettings` object containing settings related to
        handling action codes.
    @param completion Optionally; the block invoked when the request to send the verification
        email is complete, or fails.
*/
- (void)sendEmailVerificationBeforeUpdatingEmail:(nonnull NSString *)email
                              actionCodeSettings:(nonnull FIRActionCodeSettings *)actionCodeSettings
                                      completion:
                                          (nullable void (^)(NSError *_Nullable error))completion;

@end

/** @class FIRUserProfileChangeRequest
    @brief Represents an object capable of updating a user's profile data.
    @remarks Properties are marked as being part of a profile update when they are set. Setting a
        property value to nil is not the same as leaving the property unassigned.
 */
NS_SWIFT_NAME(UserProfileChangeRequest)
@interface FIRUserProfileChangeRequest : NSObject

/** @fn init
    @brief Please use `User.createProfileChangeRequest()` instead.
 */
- (instancetype)init NS_UNAVAILABLE;

/** @property displayName
    @brief The user's display name.
    @remarks It is an error to set this property after calling
        `commitChanges()`.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** @property photoURL
    @brief The user's photo URL.
    @remarks It is an error to set this property after calling
        `commitChanges()`.
 */
@property(nonatomic, copy, nullable) NSURL *photoURL;

/** @fn commitChangesWithCompletion:
    @brief Commits any pending changes.
    @remarks This method should only be called once. Once called, property values should not be
        changed.

    @param completion Optionally; the block invoked when the user profile change has been applied.
        Invoked asynchronously on the main thread in the future.
 */
- (void)commitChangesWithCompletion:(nullable void (^)(NSError *_Nullable error))completion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRUser.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRUserInfo.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
    @brief Represents user data returned from an identity provider.
 */
NS_SWIFT_NAME(UserInfo)
@protocol FIRUserInfo <NSObject>

/** @property providerID
    @brief The provider identifier.
 */
@property(nonatomic, copy, readonly) NSString *providerID;

/** @property uid
    @brief The provider's user ID for the user.
 */
@property(nonatomic, copy, readonly) NSString *uid;

/** @property displayName
    @brief The name of the user.
 */
@property(nonatomic, copy, readonly, nullable) NSString *displayName;

/** @property photoURL
    @brief The URL of the user's profile photo.
 */
@property(nonatomic, copy, readonly, nullable) NSURL *photoURL;

/** @property email
    @brief The user's email address.
 */
@property(nonatomic, copy, readonly, nullable) NSString *email;

/** @property phoneNumber
    @brief A phone number associated with the user.
    @remarks This property is only available for users authenticated via phone number auth.
 */
@property(nonatomic, readonly, nullable) NSString *phoneNumber;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRUserInfo.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRUserMetadata.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRUserMetadata
    @brief A data class representing the metadata corresponding to a Firebase user.
 */
NS_SWIFT_NAME(UserMetadata)
@interface FIRUserMetadata : NSObject

/** @property lastSignInDate
    @brief Stores the last sign in date for the corresponding Firebase user.
 */
@property(copy, nonatomic, readonly, nullable) NSDate *lastSignInDate;

/** @property creationDate
    @brief Stores the creation date for the corresponding Firebase user.
 */
@property(copy, nonatomic, readonly, nullable) NSDate *creationDate;

/** @fn init
    @brief This class should not be initialized manually, an instance of this class can be obtained
        from a Firebase user object.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FIRUserMetadata.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FirebaseAuth.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRActionCodeSettings.h"
#import "FIRAdditionalUserInfo.h"
#import "FIRAuth.h"
#import "FIRAuthCredential.h"
#import "FIRAuthDataResult.h"
#import "FIRAuthErrors.h"
#import "FIRAuthTokenResult.h"
#import "FIREmailAuthProvider.h"
#import "FIRFacebookAuthProvider.h"
#import "FIRFederatedAuthProvider.h"
#import "FIRGameCenterAuthProvider.h"
#import "FIRGitHubAuthProvider.h"
#import "FIRGoogleAuthProvider.h"
#import "FIRMultiFactor.h"
#import "FIRMultiFactorAssertion.h"
#import "FIRMultiFactorInfo.h"
#import "FIRMultiFactorResolver.h"
#import "FIRMultiFactorSession.h"
#import "FIROAuthCredential.h"
#import "FIROAuthProvider.h"
#import "FIRTwitterAuthProvider.h"
#import "FIRUser.h"
#import "FIRUserInfo.h"
#import "FIRUserMetadata.h"

#import "FIRAuthAPNSTokenType.h"
#import "FIRAuthSettings.h"
#import "FIRAuthUIDelegate.h"
#import "FIRPhoneAuthCredential.h"
#import "FIRPhoneAuthProvider.h"
#import "FIRPhoneMultiFactorAssertion.h"
#import "FIRPhoneMultiFactorGenerator.h"
#import "FIRPhoneMultiFactorInfo.h"
#import "FIRTOTPMultiFactorAssertion.h"
#import "FIRTOTPMultiFactorGenerator.h"
#import "FIRTOTPSecret.h"

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Public/FirebaseAuth/FirebaseAuth.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Storage/FIRAuthKeychainServices.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
    @brief The protocol for permanant data storage.
 */
@protocol FIRAuthStorage <NSObject>

/** @fn initWithService:
    @brief Initialize a @c FIRAuthStorage instance.
    @param service The name of the storage service to use.
    @return An initialized @c FIRAuthStorage instance for the specified service.
 */
- (id<FIRAuthStorage>)initWithService:(NSString *)service;

/** @fn dataForKey:error:
    @brief Gets the data for @c key in the storage. The key is set for the attribute
        @c kSecAttrAccount of a generic password query.
    @param key The key to use.
    @param error The address to store any error that occurs during the process, if not NULL.
        If the operation was successful, its content is set to @c nil .
    @return The data stored in the storage for @c key, if any.
 */
- (nullable NSData *)dataForKey:(NSString *)key error:(NSError **_Nullable)error;

/** @fn setData:forKey:error:
    @brief Sets the data for @c key in the storage. The key is set for the attribute
        @c kSecAttrAccount of a generic password query.
    @param data The data to store.
    @param key The key to use.
    @param error The address to store any error that occurs during the process, if not NULL.
    @return Whether the operation succeeded or not.
 */
- (BOOL)setData:(NSData *)data forKey:(NSString *)key error:(NSError **_Nullable)error;

/** @fn removeDataForKey:error:
    @brief Removes the data for @c key in the storage. The key is set for the attribute
        @c kSecAttrAccount of a generic password query.
    @param key The key to use.
    @param error The address to store any error that occurs during the process, if not NULL.
    @return Whether the operation succeeded or not.
 */
- (BOOL)removeDataForKey:(NSString *)key error:(NSError **_Nullable)error;

@end

/** @class FIRAuthKeychain
    @brief The utility class to manipulate data in iOS Keychain.
 */
@interface FIRAuthKeychainServices : NSObject <FIRAuthStorage>

/** @fn getItemWithQuery:error:
    @brief Get the item from keychain by given query.
    @param query The query to query the keychain.
    @param outError The address to store any error that occurs during the process, if not nil.
    @return The item of the given query. nil if not exsit.
 */
- (nullable NSData *)getItemWithQuery:(NSDictionary *)query
                                error:(NSError *_Nullable *_Nullable)outError;

/** @fn setItem:withQuery:error:
    @brief Set the item into keychain with given query.
    @param item The item to be added into keychain.
    @param query The query to query the keychain.
    @param outError The address to store any error that occurs during the process, if not nil.
    @return Whether the operation succeed.
 */
- (BOOL)setItem:(NSData *)item
      withQuery:(NSDictionary *)query
          error:(NSError *_Nullable *_Nullable)outError;

/** @fn getItemWithQuery:error:
    @brief Remove the item with given queryfrom keychain.
    @param query The query to query the keychain.
    @param outError The address to store any error that occurs during the process, if not nil.
    @return Whether the operation succeed.
 */
- (BOOL)removeItemWithQuery:(NSDictionary *)query error:(NSError *_Nullable *_Nullable)outError;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Storage/FIRAuthKeychainServices.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Storage/FIRAuthUserDefaults.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Storage/FIRAuthKeychainServices.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthUserDefaults
    @brief The utility class to storage data in NSUserDefaults.
 */
@interface FIRAuthUserDefaults : NSObject <FIRAuthStorage>

/** @fn clear
    @brief Clears all data from the storage.
    @remarks This method is only supposed to be called from tests.
 */
- (void)clear;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Storage/FIRAuthUserDefaults.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthAPNSToken.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if !TARGET_OS_OSX

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthAPNSTokenType.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthAPNSToken
    @brief A data structure for an APNs token.
 */
@interface FIRAuthAPNSToken : NSObject

/** @property data
    @brief The APNs token data.
 */
@property(nonatomic, strong, readonly) NSData *data;

/** @property string
    @brief The uppercase hexadecimal string form of the APNs token data.
 */
@property(nonatomic, strong, readonly) NSString *string;

/** @property type
    @brief The APNs token type.
 */
@property(nonatomic, assign, readonly) FIRAuthAPNSTokenType type;

/** @fn initWithData:type:
    @brief Initializes the instance.
    @param data The APNs token data.
    @param type The APNs token type.
    @return The initialized instance.
 */
- (instancetype)initWithData:(NSData *)data
                        type:(FIRAuthAPNSTokenType)type NS_DESIGNATED_INITIALIZER;

/** @fn init
    @brief Call @c initWithData:type: to get an instance of this class.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthAPNSToken.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthAPNSTokenManager.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if !TARGET_OS_OSX && !TARGET_OS_WATCH

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>

@class FIRAuthAPNSToken;

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRAuthAPNSTokenCallback
    @brief The type of block to receive an APNs token.
    @param token The APNs token if one is available.
    @param error The error happened if any.
    @remarks Both `token` and `error` being `nil` means the request timed-out.
 */
typedef void (^FIRAuthAPNSTokenCallback)(FIRAuthAPNSToken *_Nullable token,
                                         NSError *_Nullable error);

/** @class FIRAuthAPNSTokenManager
    @brief A class to manage APNs token in memory.
 */
@interface FIRAuthAPNSTokenManager : NSObject

/** @property token
    @brief The APNs token, if one is available.
    @remarks Setting a token with FIRAuthAPNSTokenTypeUnknown will automatically converts it to
        a token with the automatically detected type.
 */
@property(nonatomic, strong, nullable) FIRAuthAPNSToken *token;

/** @property timeout
    @brief The timeout for registering for remote notification.
    @remarks Only tests should access this property.
 */
@property(nonatomic, assign) NSTimeInterval timeout;

/** @fn init
    @brief Call @c initWithApplication: to initialize an instance of this class.
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithApplication:
    @brief Initializes the instance.
    @param application The @c UIApplication to request the token from.
    @return The initialized instance.
 */
- (instancetype)initWithApplication:(UIApplication *)application NS_DESIGNATED_INITIALIZER;

/** @fn getTokenWithCallback:
    @brief Attempts to get the APNs token.
    @param callback The block to be called either immediately or in future, either when a token
        becomes available, or when timeout occurs, whichever happens earlier.
 */
- (void)getTokenWithCallback:(FIRAuthAPNSTokenCallback)callback;

/** @fn cancelWithError:
    @brief Cancels any pending `getTokenWithCallback:` request.
    @param error The error to return.
 */
- (void)cancelWithError:(NSError *)error;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthAPNSTokenManager.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthAppCredential.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthAppCredential
    @brief A class represents a credential that proves the identity of the app.
 */
@interface FIRAuthAppCredential : NSObject <NSSecureCoding>

/** @property receipt
    @brief The server acknowledgement of receiving client's claim of identity.
 */
@property(nonatomic, strong, readonly) NSString *receipt;

/** @property secret
    @brief The secret that the client received from server via a trusted channel, if ever.
 */
@property(nonatomic, strong, readonly, nullable) NSString *secret;

/** @fn initWithReceipt:secret:
    @brief Initializes the instance.
    @param receipt The server acknowledgement of receiving client's claim of identity.
    @param secret The secret that the client received from server via a trusted channel, if ever.
    @return The initialized instance.
 */
- (instancetype)initWithReceipt:(NSString *)receipt
                         secret:(nullable NSString *)secret NS_DESIGNATED_INITIALIZER;

/** @fn init
    @brief Call @c initWithReceipt:secret: to get an instance of this class.
 */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthAppCredential.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthAppCredentialManager.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if !TARGET_OS_OSX

#import <Foundation/Foundation.h>

#import "FirebaseAuth/Sources/Storage/FIRAuthKeychainServices.h"
#import "FirebaseAuth/Sources/SystemService/FIRAuthAppCredential.h"

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRAuthAppCredentialCallback
    @brief The type of block to receive an app crdential.
    @param credential The best available app credential at the time.
 */
typedef void (^FIRAuthAppCredentialCallback)(FIRAuthAppCredential *credential);

/** @class FIRAuthAppCredentialManager
    @brief A class to manage app credentials backed by iOS Keychain.
 */
@interface FIRAuthAppCredentialManager : NSObject

/** @property credential
    @brief The full credential (which has a secret) to be used by the app, if one is available.
 */
@property(nonatomic, strong, readonly, nullable) FIRAuthAppCredential *credential;

/** @property maximumNumberOfPendingReceipts
    @brief The maximum (but not necessarily the minimum) number of pending receipts to be kept.
    @remarks Only tests should access this property.
 */
@property(nonatomic, assign, readonly) NSUInteger maximumNumberOfPendingReceipts;

/** @fn init
    @brief Call @c initWithKeychain: to initialize an instance of this class.
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithKeychain:
    @brief Initializes the instance.
    @param keychain The iOS Keychain storage to back up the app credential with.
    @return The initialized instance.
 */
- (instancetype)initWithKeychain:(FIRAuthKeychainServices *)keychain NS_DESIGNATED_INITIALIZER;

/** @fn didStartVerificationWithReceipt:timeout:callback:
    @brief Notifies that the app verification process has started.
    @param receipt The receipt for verification.
    @param timeout The timeout value for how long the callback is waited to be called.
    @param callback The block to be called in future either when the verification finishes, or
        when timeout occurs, whichever happens earlier.
 */
- (void)didStartVerificationWithReceipt:(NSString *)receipt
                                timeout:(NSTimeInterval)timeout
                               callback:(FIRAuthAppCredentialCallback)callback;

/** @fn canFinishVerificationWithReceipt:
    @brief Attempts to finish verification.
    @param receipt The receipt to match the original receipt obtained when verification started.
    @param secret The secret to complete the verification.
    @return Whether or not the receipt matches a pending verification, and finishes verification
        if it does.
 */
- (BOOL)canFinishVerificationWithReceipt:(NSString *)receipt secret:(NSString *)secret;

/** @fn clearCredential
    @brief Clears the saved credential, to be used in the case that it is rejected by the server.
 */
- (void)clearCredential;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthAppCredentialManager.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthNotificationManager.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if !TARGET_OS_OSX && !TARGET_OS_WATCH

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>

@class FIRAuthAppCredentialManager;

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRAuthNotificationForwardingCallback
    @brief The type of block to receive whether or not remote notifications are being forwarded.
    @param isNotificationBeingForwarded Whether or not remote notifications are being forwarded.
 */
typedef void (^FIRAuthNotificationForwardingCallback)(BOOL isNotificationBeingForwarded);

/** @class FIRAuthNotificationManager
 */
@interface FIRAuthNotificationManager : NSObject

/** @property timeout
    @brief The timeout for checking for notification forwarding.
    @remarks Only tests should access this property.
 */
@property(nonatomic, assign) NSTimeInterval timeout;

/** @fn initWithApplication:appCredentialManager:
    @brief Initializes the instance.
    @param application The application.
    @param appCredentialManager The object to handle app credentials delivered via notification.
    @return The initialized instance.
 */
- (instancetype)initWithApplication:(UIApplication *)application
               appCredentialManager:(FIRAuthAppCredentialManager *)appCredentialManager
    NS_DESIGNATED_INITIALIZER;

/** @fn init
    @brief please use initWithAppCredentialManager: instead.
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn checkNotificationForwardingWithCallback:
    @brief Checks whether or not remote notifications are being forwarded to this class.
    @param callback The block to be called either immediately or in future once a result
        is available.
 */
- (void)checkNotificationForwardingWithCallback:(FIRAuthNotificationForwardingCallback)callback;

/** @fn canHandleNotification:
    @brief Attempts to handle the remote notification.
    @param notification The notification in question.
    @return Whether or the notification has been handled.
 */
- (BOOL)canHandleNotification:(NSDictionary *)notification;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthNotificationManager.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthStoredUserManager.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRUser.h"

#import "FirebaseAuth/Sources/Storage/FIRAuthKeychainServices.h"
#import "FirebaseAuth/Sources/Storage/FIRAuthUserDefaults.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthStoredUserManager : NSObject

/** @property keychain
    @brief The mediator object to access to the system Keychain services.
 */
@property(readonly, nonatomic, strong) FIRAuthKeychainServices *keychainServices;

/** @property userDefaults
    @brief The mediator object to access to the system User Defaults services.
 */
@property(readonly, nonatomic, strong) FIRAuthUserDefaults *userDefaults;

/** @fn init
    @brief The default initializer is disabled.
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithServiceName:
    @brief The designated initializer.
    @param serviceName The service name to initialize with.
 */
- (instancetype)initWithServiceName:(NSString *)serviceName NS_DESIGNATED_INITIALIZER;

/** @fn getStoredUserAccessGroupWithError:
    @brief Get the user access group stored locally.
 */
- (nullable NSString *)getStoredUserAccessGroup;

/** @fn setStoredUserAccessGroup:error:
    @brief The setter of the user access group stored locally.
    @param accessGroup The access group to be set.
 */
- (BOOL)setStoredUserAccessGroup:(NSString *_Nullable)accessGroup;

/** @fn getStoredUserForAccessGroup:projectID:error:
    @brief The getter of the user stored locally.
    @param accessGroup The access group to retrieve the user from.
    @param shareAuthStateAcrossDevices If true, the keychain will be synced across the end-user's
   iCloud.
    @param projectIdentifier An identifier of the project that the user associates with. Currently,
        we use API KEY.
    @param outError Return value for any error which occurs.
 */
- (nullable FIRUser *)getStoredUserForAccessGroup:(NSString *)accessGroup
                      shareAuthStateAcrossDevices:(BOOL)shareAuthStateAcrossDevices
                                projectIdentifier:(NSString *)projectIdentifier
                                            error:(NSError *_Nullable *_Nullable)outError;

/** @fn setStoredUser:forAccessGroup:projectID:error:
    @brief The setter of the user stored locally.
    @param user The user to be stored.
    @param accessGroup The access group to store the user in.
    @param shareAuthStateAcrossDevices If true, the keychain will be synced across the end-user's
   iCloud.
    @param projectIdentifier An identifier of the project that the user associates with. Currently,
        we use API KEY.
    @param outError Return value for any error which occurs.
 */
- (BOOL)setStoredUser:(FIRUser *)user
                 forAccessGroup:(NSString *)accessGroup
    shareAuthStateAcrossDevices:(BOOL)shareAuthStateAcrossDevices
              projectIdentifier:(NSString *)projectIdentifier
                          error:(NSError *_Nullable *_Nullable)outError;

/** @fn removeStoredUserForAccessGroup:projectID:error:
    @brief Remove the user that stored locally.
    @param accessGroup The access group to remove the user from.
    @param shareAuthStateAcrossDevices If true, the keychain will be synced across the end-user's
   iCloud.
    @param projectIdentifier An identifier of the project that the user associates with. Currently,
        we use API KEY.
    @param outError Return value for any error which occurs.
 */
- (BOOL)removeStoredUserForAccessGroup:(NSString *)accessGroup
           shareAuthStateAcrossDevices:(BOOL)shareAuthStateAcrossDevices
                     projectIdentifier:(NSString *)projectIdentifier
                                 error:(NSError *_Nullable *_Nullable)outError;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRAuthStoredUserManager.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRSecureTokenService.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuthRequestConfiguration;

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRFetchAccessTokenCallback
    @brief The callback used to return the value of attempting to fetch an access token.

    In the event the operation was successful @c token will be set and @c error will be @c nil.
    In the event of failure @c token will be @c nil and @c error will be set.
    @c tokenUpdated indicates whether either the access or the refresh token has been updated.

    The token returned should be considered ephemeral and not cached. It should be used immediately
    and discarded. All operations that need this token should call fetchAccessToken and do their
    work from the callback.
 */
typedef void (^FIRFetchAccessTokenCallback)(NSString *_Nullable token,
                                            NSError *_Nullable error,
                                            BOOL tokenUpdated);

/** @class FIRSecureTokenService
    @brief Provides services for token exchanges and refreshes.
 */
@interface FIRSecureTokenService : NSObject <NSSecureCoding>

/** @property requestConfiguration
    @brief The configuration for making requests to server.
 */
@property(nonatomic, strong) FIRAuthRequestConfiguration *requestConfiguration;

/** @property rawAccessToken
    @brief The cached access token.
    @remarks This method is specifically for providing the access token to internal clients during
        deserialization and sign-in events, and should not be used to retrieve the access token by
        anyone else.
 */
@property(nonatomic, copy, readonly) NSString *rawAccessToken;

/** @property refreshToken
    @brief The refresh token for the user, or @c nil if the user has yet completed sign-in flow.
    @remarks This property needs to be set manually after the instance is decoded from archive.
 */
@property(nonatomic, copy, readonly, nullable) NSString *refreshToken;

/** @property accessTokenExpirationDate
    @brief The expiration date of the cached access token.
 */
@property(nonatomic, copy, readonly, nullable) NSDate *accessTokenExpirationDate;

/** @fn initWithRequestConfiguration:accessToken:accessTokenExpirationDate:refreshToken
    @brief Creates a @c FIRSecureTokenService with access and refresh tokens.
    @param requestConfiguration The configuration for making requests to server.
    @param accessToken The STS access token.
    @param accessTokenExpirationDate The approximate expiration date of the access token.
    @param refreshToken The STS refresh token.
 */
- (instancetype)initWithRequestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
                                 accessToken:(nullable NSString *)accessToken
                   accessTokenExpirationDate:(nullable NSDate *)accessTokenExpirationDate
                                refreshToken:(NSString *)refreshToken;

/** @fn fetchAccessTokenForcingRefresh:callback:
    @brief Fetch a fresh ephemeral access token for the ID associated with this instance. The token
        received in the callback should be considered short lived and not cached.
    @param forceRefresh Forces the token to be refreshed.
    @param callback Callback block that will be called to return either the token or an error.
        Invoked asyncronously on the auth global work queue in the future.
 */
- (void)fetchAccessTokenForcingRefresh:(BOOL)forceRefresh
                              callback:(FIRFetchAccessTokenCallback)callback;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/SystemService/FIRSecureTokenService.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/User/FIRAdditionalUserInfo_Internal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAdditionalUserInfo.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAdditionalUserInfo () <NSSecureCoding>

/** @fn userInfoWithVerifyAssertionResponse:
    @brief A convenience factory method for constructing a @c FIRAdditionalUserInfo instance from
        data returned by the verifyAssertion endpoint.
    @param verifyAssertionResponse Data returned by the verifyAssertion endpoint.
    @return A new instance of @c FIRAdditionalUserInfo using data from the verifyAssertion endpoint.
 */
+ (nullable instancetype)userInfoWithVerifyAssertionResponse:
    (FIRVerifyAssertionResponse *)verifyAssertionResponse;

/** @fn initWithProviderID:profile:username:
    @brief Designated initializer.
    @param providerID The provider identifier.
    @param profile Dictionary containing the additional IdP specific information.
    @param username The name of the user.
    @param isNewUser Indicates whether or not the current user was signed in for the first time.
 */
- (nullable instancetype)initWithProviderID:(nullable NSString *)providerID
                                    profile:(nullable NSDictionary<NSString *, NSObject *> *)profile
                                   username:(nullable NSString *)username
                                  isNewUser:(BOOL)isNewUser NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/User/FIRAdditionalUserInfo_Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/User/FIRUserInfoImpl.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRUserInfo.h"

@class FIRGetAccountInfoResponseProviderUserInfo;

NS_ASSUME_NONNULL_BEGIN

@interface FIRUserInfoImpl : NSObject <FIRUserInfo, NSSecureCoding>

/** @fn userInfoWithGetAccountInfoResponseProviderUserInfo:
    @brief A convenience factory method for constructing a @c FIRUserInfo instance from data
        returned by the getAccountInfo endpoint.
    @param providerUserInfo Data returned by the getAccountInfo endpoint.
    @return A new instance of @c FIRUserInfo using data from the getAccountInfo endpoint.
 */
+ (nullable instancetype)userInfoWithGetAccountInfoResponseProviderUserInfo:
    (FIRGetAccountInfoResponseProviderUserInfo *)providerUserInfo;

/** @fn init
    @brief This class should not be initialized manually.
    @see FIRUser.providerData
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn initWithProviderID:userID:displayName:photoURL:email:
    @brief Designated initializer.
    @param providerID The provider identifier.
    @param userID The unique user ID for the user (the value of the @c uid field in the token.)
    @param displayName The name of the user.
    @param photoURL The URL of the user's profile photo.
    @param email The user's email address.
    @param phoneNumber The user's phone number.
 */
- (nullable instancetype)initWithProviderID:(NSString *)providerID
                                     userID:(NSString *)userID
                                displayName:(nullable NSString *)displayName
                                   photoURL:(nullable NSURL *)photoURL
                                      email:(nullable NSString *)email
                                phoneNumber:(nullable NSString *)phoneNumber
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/User/FIRUserInfoImpl.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/User/FIRUserMetadata_Internal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRUserMetadata.h"

NS_ASSUME_NONNULL_BEGIN

/** @extension FIRUserMetadata
    @brief An internal class used to expose internal methods of FIRUserMetadata.
 */
@interface FIRUserMetadata () <NSSecureCoding>

/** @fn initWithCreationDate:lastSignInDate:
    @brief Designated initializer.
    @param creationDate The creation date of the corresponding user.
    @param lastSignInDate The date of the last recorded sign-in of the corresponding user.
 */
- (instancetype)initWithCreationDate:(nullable NSDate *)creationDate
                      lastSignInDate:(nullable NSDate *)lastSignInDate NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/User/FIRUserMetadata_Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/User/FIRUser_Internal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRUser.h"

@class FIRAuth;
@class FIRAuthRequestConfiguration;

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRRetrieveUserCallback
    @brief The type of block that is invoked when the construction of a user succeeds or fails.
    @param user The user that was constructed, or nil if user construction failed.
    @param error The error which occurred, or nil if the request was successful.
 */
typedef void (^FIRRetrieveUserCallback)(FIRUser *_Nullable user, NSError *_Nullable error);

/** @typedef FIRVerifyBeforeUpdateEmailCallback
    @brief The type of block called when a request to verify before update email has finished.
    @param error Optionally; the error which occurred - or nil if the request was successful.
 */
typedef void (^FIRVerifyBeforeUpdateEmailCallback)(NSError *_Nullable error);

@interface FIRUser () <NSSecureCoding>

/** @property rawAccessToken
    @brief The cached access token.
    @remarks This method is specifically for providing the access token to internal clients during
        deserialization and sign-in events, and should not be used to retrieve the access token by
        anyone else.
 */
@property(nonatomic, copy, readonly) NSString *rawAccessToken;

/** @property auth
    @brief A weak reference to a FIRAuth instance associated with this instance.
 */
@property(nonatomic, weak) FIRAuth *auth;

/** @property auth
    @brief A strong reference to a requestConfiguration instance associated with this user instance.
 */
@property(nonatomic, strong) FIRAuthRequestConfiguration *requestConfiguration;

/** @var accessTokenExpirationDate
    @brief The expiration date of the cached access token.
 */
@property(nonatomic, copy, readonly) NSDate *accessTokenExpirationDate;

/** @fn retrieveUserWithAuth:accessToken:accessTokenExpirationDate:refreshToken:callback:
    @brief Constructs a user with Secure Token Service tokens, and obtains user details from the
        getAccountInfo endpoint.
    @param auth The associated FIRAuth instance.
    @param accessToken The Secure Token Service access token.
    @param accessTokenExpirationDate The approximate expiration date of the access token.
    @param refreshToken The Secure Token Service refresh token.
    @param anonymous Whether or not the user is anonymous.
    @param callback A block which is invoked when the construction succeeds or fails. Invoked
        asynchronously on the auth global work queue in the future.
 */
+ (void)retrieveUserWithAuth:(FIRAuth *)auth
                  accessToken:(nullable NSString *)accessToken
    accessTokenExpirationDate:(nullable NSDate *)accessTokenExpirationDate
                 refreshToken:(nullable NSString *)refreshToken
                    anonymous:(BOOL)anonymous
                     callback:(FIRRetrieveUserCallback)callback;

/** @fn internalGetTokenForcingRefresh:callback:
    @brief Retrieves the Firebase authentication token, possibly refreshing it if it has expired.
    @param forceRefresh Forces a token refresh. Useful if the token becomes invalid for some reason
        other than an expiration.
    @param callback The block to invoke when the token is available. Invoked asynchronously on the
        global work thread in the future.
 */
- (void)internalGetTokenForcingRefresh:(BOOL)forceRefresh
                              callback:(nonnull FIRAuthTokenCallback)callback;

/** @fn internalVerifyBeforeUpdateEmailWithNewEmail:actionCodeSettings:callback:
    @brief Sends a verification email to newEmail. Upon redemption of the link in the email,
        this user's email will be changed to newEmail and that email will be marked verified.
    @param newEmail the user's new email.
    @param actionCodeSettings the optional FIRActionCodeSettings object to allow linking back
        to your app in the email.
    @param completion The block to invoke when the call succeeds or fails. Invoked asynchronously on
        the global work thread in the future.

 */
- (void)internalVerifyBeforeUpdateEmailWithNewEmail:(NSString *)newEmail
                                 actionCodeSettings:
                                     (nullable FIRActionCodeSettings *)actionCodeSettings
                                         completion:(FIRVerifyBeforeUpdateEmailCallback)completion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/User/FIRUser_Internal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthDefaultUIDelegate.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if !TARGET_OS_OSX && !TARGET_OS_WATCH

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthUIDelegate.h"

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthDefaultUIDelegate
    @brief Class responsible for providing a default FIRAuthUIDelegte.
    @remarks This class should be used in the case that a UIDelegate was expected and necessary to
        continue a given flow, but none was provided.
 */
@interface FIRAuthDefaultUIDelegate : NSObject <FIRAuthUIDelegate>

/** @fn defaultUIDelegate
    @brief Unavailable. Please use @c +defaultUIDelegate:
 */
- (instancetype)init NS_UNAVAILABLE;

/** @fn defaultUIDelegate
    @brief Returns a default FIRAuthUIDelegate object.
    @return The default FIRAuthUIDelegate object.
 */
+ (id<FIRAuthUIDelegate>)defaultUIDelegate;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthDefaultUIDelegate.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthErrorUtils.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuth.h"
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRMultiFactorInfo.h"
#import "FirebaseAuth/Sources/Utilities/FIRAuthInternalErrors.h"

@class FIRAuthCredential;

NS_ASSUME_NONNULL_BEGIN

/** @var kMissingRecaptchaTokenErrorPrefix
    @brief The prefix of the error message of missing recaptcha token during authenticating.
 */
static NSString *const kMissingRecaptchaTokenErrorPrefix = @"MISSING_RECAPTCHA_TOKEN";

/** @class FIRAuthErrorUtils
    @brief Utility class used to construct @c NSError instances.
 */
@interface FIRAuthErrorUtils : NSObject

+ (NSError *)errorWithCode:(FIRAuthInternalErrorCode)code message:(nullable NSString *)message;

/** @fn RPCRequestEncodingErrorWithUnderlyingError
    @brief Constructs an @c NSError with the @c FIRAuthInternalErrorCodeRPCRequestEncodingError
        code and a populated @c NSUnderlyingErrorKey in the @c NSError.userInfo dictionary.
    @param underlyingError The value of the @c NSUnderlyingErrorKey key.
    @remarks This error is used when an @c FIRAuthRPCRequest.unencodedHTTPRequestBodyWithError:
        invocation returns an error. The error returned is wrapped in this internal error code.
 */
+ (NSError *)RPCRequestEncodingErrorWithUnderlyingError:(NSError *)underlyingError;

/** @fn JSONSerializationErrorForUnencodableType
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeJSONSerializationError code.
    @remarks This error is used when an @c NSJSONSerialization.isValidJSONObject: check fails, not
        for when an error is returned from @c NSJSONSerialization.dataWithJSONObject:options:error:.
 */
+ (NSError *)JSONSerializationErrorForUnencodableType;

/** @fn JSONSerializationErrorWithUnderlyingError:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeJSONSerializationError code, and the
        @c underlyingError as the @c NSUnderlyingErrorKey value in the @c NSError.userInfo
        dictionary.
    @param underlyingError The value of the @c NSUnderlyingErrorKey key.
    @remarks This error is used when an invocation of
        @c NSJSONSerialization.dataWithJSONObject:options:error: returns an error.
 */
+ (NSError *)JSONSerializationErrorWithUnderlyingError:(NSError *)underlyingError;

/** @fn networkErrorWithUnderlyingError:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeNetworkError code, and the
        @c underlyingError as the @c NSUnderlyingErrorKey value in the @c NSError.userInfo
        dictionary.
    @param underlyingError The value of the @c NSUnderlyingErrorKey key. Should be the error from
        GTM.
    @remarks This error is used when a network request results in an error, and no body data was
        returned.
 */
+ (NSError *)networkErrorWithUnderlyingError:(NSError *)underlyingError;

/** @fn unexpectedErrorResponseWithUnderlyingError:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeNetworkError code, and the
        @c underlyingError as the @c NSUnderlyingErrorKey value.
    @param data The value of the @c FIRAuthErrorUserInfoDataKey key in the @c NSError.userInfo
        dictionary.
    @param underlyingError The value of the @c NSUnderlyingErrorKey key in the @c NSError.userInfo
        dictionary.
    @remarks This error is used when a network request results in an error, and unserializable body
        data was returned.
 */
+ (NSError *)unexpectedErrorResponseWithData:(NSData *)data
                             underlyingError:(NSError *)underlyingError;

/** @fn unexpectedErrorResponseWithDeserializedResponse:
    @brief Constructs an @c NSError with the @c FIRAuthInternalErrorCodeUnexpectedErrorResponse
        code, and a populated @c FIRAuthErrorUserInfoDeserializedResponseKey key in the
        @c NSError.userInfo dictionary.
    @param deserializedResponse The value of the @c FIRAuthErrorUserInfoDeserializedResponseKey key.
    @remarks This error is used when a network request results in an error, and the body data was
        deserializable as JSON, but couldn't be decoded as an error.
 */
+ (NSError *)unexpectedErrorResponseWithDeserializedResponse:(id)deserializedResponse;

/** @fn unexpectedErrorResponseWithDeserializedResponse:underlyingError:
    @brief Constructs an @c NSError with the @c FIRAuthInternalErrorCodeUnexpectedErrorResponse
        code, and populated @c FIRAuthErrorUserInfoDeserializedResponseKey and
        @c NSUnderlyingErrorKey keys in the @c NSError.userInfo dictionary.
    @param deserializedResponse The value of the @c FIRAuthErrorUserInfoDeserializedResponseKey key.
    @param underlyingError The value of the @c NSUnderlyingErrorKey key.
    @remarks This error is used when a network request results in an error, and the body data was
        deserializable as JSON, but couldn't be decoded as an error.
 */
+ (NSError *)unexpectedErrorResponseWithDeserializedResponse:(id)deserializedResponse
                                             underlyingError:(NSError *)underlyingError;

/** @fn malformedJWTErrorWithToken:underlyingError:
    @brief Constructs an @c NSError with the code set to @c FIRAuthErrorCodeMalformedJWT and
        populates the userInfo dictionary with an error message, the bad token, and an underlying
        error that may have occurred when parsing.
    @param token The token that failed to parse.
    @param underlyingError The error that caused this error. If this parameter is nil, the
        NSUnderlyingErrorKey value will not be set.
    @remarks This error is returned when JWT parsing fails.
    @return An @c FIRAuthErrorCodeMalformedJWT error wrapping an underlying error, if available.
 */
+ (NSError *)malformedJWTErrorWithToken:(NSString *)token
                        underlyingError:(NSError *_Nullable)underlyingError;

/** @fn unexpectedResponseWithData:underlyingError:
    @brief Constructs an @c NSError with the @c FIRAuthInternalErrorCodeUnexpectedResponse
        code, and a populated @c FIRAuthErrorUserInfoDataKey key in the @c NSError.userInfo
        dictionary.
    @param data The value of the @c FIRAuthErrorUserInfoDataKey key in the @c NSError.userInfo
        dictionary.
    @param underlyingError The value of the @c NSUnderlyingErrorKey key in the @c NSError.userInfo
        dictionary.
    @remarks This error is used when a network request is apparently successful, but the body data
        couldn't be deserialized as JSON.
 */
+ (NSError *)unexpectedResponseWithData:(NSData *)data underlyingError:(NSError *)underlyingError;
;

/** @fn unexpectedResponseWithDeserializedResponse:
    @brief Constructs an @c NSError with the @c FIRAuthInternalErrorCodeUnexpectedResponse
        code, and a populated @c FIRAuthErrorUserInfoDeserializedResponseKey key in the
        @c NSError.userInfo dictionary.
    @param deserializedResponse The value of the @c FIRAuthErrorUserInfoDeserializedResponseKey key.
    @remarks This error is used when a network request is apparently successful, the body data was
        successfully deserialized as JSON, but the JSON wasn't a dictionary.
 */
+ (NSError *)unexpectedResponseWithDeserializedResponse:(id)deserializedResponse;

/** @fn unexpectedResponseWithDeserializedResponse:underlyingError:
    @brief Constructs an @c NSError with the @c FIRAuthInternalErrorCodeUnexpectedResponse
        code, and populated @c FIRAuthErrorUserInfoDeserializedResponseKey and
        @c NSUnderlyingErrorKey keys in the @c NSError.userInfo dictionary.
    @param deserializedResponse The value of the @c FIRAuthErrorUserInfoDeserializedResponseKey key.
    @param underlyingError The value of the @c NSUnderlyingErrorKey key.
    @remarks This error is used when a network request was apparently successful, the body data was
        successfully deserialized as JSON, but the data type of the response was unexpected.
 */
+ (NSError *)unexpectedResponseWithDeserializedResponse:(nullable id)deserializedResponse
                                        underlyingError:(NSError *)underlyingError;

/** @fn RPCResponseDecodingErrorWithDeserializedResponse:underlyingError:
    @brief Constructs an @c NSError with the @c FIRAuthInternalErrorCodeRPCResponseDecodingError
        code, and populated @c FIRAuthErrorUserInfoDeserializedResponseKey and
        @c NSUnderlyingErrorKey keys in the @c NSError.userInfo dictionary.
    @param deserializedResponse The value of the @c FIRAuthErrorUserInfoDeserializedResponseKey key.
    @param underlyingError The value of the @c NSUnderlyingErrorKey key.
    @remarks This error is used when an invocation of @c FIRAuthRPCResponse.setWithDictionary:error:
        resulted in an error.
 */
+ (NSError *)RPCResponseDecodingErrorWithDeserializedResponse:(id)deserializedResponse
                                              underlyingError:(NSError *)underlyingError;

/** @fn emailAlreadyInUseErrorWithEmail:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeEmailExists code.
    @param email The email address that is already in use.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)emailAlreadyInUseErrorWithEmail:(nullable NSString *)email;

/** @fn userDisabledErrorWithMessageWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeUserDisabled code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)userDisabledErrorWithMessage:(nullable NSString *)message;

/** @fn wrongPasswordErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeWrongPassword code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)wrongPasswordErrorWithMessage:(nullable NSString *)message;

/** @fn tooManyRequestsErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeTooManyRequests Code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)tooManyRequestsErrorWithMessage:(nullable NSString *)message;

/** @fn invalidCustomTokenErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidCustomToken code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidCustomTokenErrorWithMessage:(nullable NSString *)message;

/** @fn customTokenMistmatchErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeCustomTokenMismatch code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)customTokenMistmatchErrorWithMessage:(nullable NSString *)message;

/** @fn invalidCredentialErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidCredential code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidCredentialErrorWithMessage:(nullable NSString *)message;

/** @fn requiresRecentLoginError
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeRequiresRecentLogin code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)requiresRecentLoginErrorWithMessage:(nullable NSString *)message;

/** @fn invalidUserTokenErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidUserToken code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidUserTokenErrorWithMessage:(nullable NSString *)message;

/** @fn invalidEmailErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidEmail code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidEmailErrorWithMessage:(nullable NSString *)message;

/** @fn accountExistsWithDifferentCredentialErrorWithEmail:
    @brief Constructs an @c NSError with the @c FIRAuthErrorAccountExistsWithDifferentCredential
        code.
    @param email The email address that is already associated with an existing account
    @param updatedCredential The updated credential for the existing account
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)accountExistsWithDifferentCredentialErrorWithEmail:(nullable NSString *)email
                                              updatedCredential:
                                                  (nullable FIRAuthCredential *)updatedCredential;

/** @fn providerAlreadyLinkedErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeProviderAlreadyLinked code.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)providerAlreadyLinkedError;

/** @fn noSuchProviderError
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeNoSuchProvider code.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)noSuchProviderError;

/** @fn userTokenExpiredErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeUserTokenExpired code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)userTokenExpiredErrorWithMessage:(nullable NSString *)message;

/** @fn userNotFoundErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeUserNotFound code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)userNotFoundErrorWithMessage:(nullable NSString *)message;

/** @fn invalidLocalAPIKeyErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidAPIKey code.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidAPIKeyError;

/** @fn userMismatchError
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeUserMismatch code.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)userMismatchError;

/** @fn credentialAlreadyInUseErrorWithMessage:email:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeCredentialAlreadyInUse code.
    @param message Error message from the backend, if any.
    @param credential Auth credential to be added to the Error User Info dictionary.
    @param email Email to be added to the Error User Info dictionary.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)credentialAlreadyInUseErrorWithMessage:(nullable NSString *)message
                                         credential:(nullable FIRAuthCredential *)credential
                                              email:(nullable NSString *)email;
/** @fn operationNotAllowedErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeOperationNotAllowed code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)operationNotAllowedErrorWithMessage:(nullable NSString *)message;

/** @fn weakPasswordErrorWithServerResponseReason:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeWeakPassword code.
    @param serverResponseReason A more detailed explanation string from server response.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)weakPasswordErrorWithServerResponseReason:(nullable NSString *)serverResponseReason;

/** @fn appNotAuthorizedError
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeAppNotAuthorized code.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)appNotAuthorizedError;

/** @fn expiredActionCodeErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeExpiredActionCode code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)expiredActionCodeErrorWithMessage:(nullable NSString *)message;

/** @fn invalidActionCodeErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidActionCode code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidActionCodeErrorWithMessage:(nullable NSString *)message;

/** @fn invalidMessagePayloadError:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidMessagePayload code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidMessagePayloadErrorWithMessage:(nullable NSString *)message;

/** @fn invalidSenderErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidSender code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidSenderErrorWithMessage:(nullable NSString *)message;

/** @fn invalidRecipientEmailError:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidRecipientEmail code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidRecipientEmailErrorWithMessage:(nullable NSString *)message;

/** @fn missingIosBundleIDErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingIosBundleID code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingIosBundleIDErrorWithMessage:(nullable NSString *)message;

/** @fn missingAndroidPackageNameErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingAndroidPackageName code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingAndroidPackageNameErrorWithMessage:(nullable NSString *)message;

/** @fn unauthorizedDomainErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeUnauthorizedDomain code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)unauthorizedDomainErrorWithMessage:(nullable NSString *)message;

/** @fn invalidContinueURIErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidContinueURI code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidContinueURIErrorWithMessage:(nullable NSString *)message;

/** @fn missingContinueURIErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingContinueURI code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingContinueURIErrorWithMessage:(nullable NSString *)message;

/** @fn missingEmailErrorWithMessage
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingEmail code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingEmailErrorWithMessage:(nullable NSString *)message;

/** @fn missingPhoneNumberErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingPhoneNumber code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingPhoneNumberErrorWithMessage:(nullable NSString *)message;

/** @fn invalidPhoneNumberErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidPhoneNumber code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidPhoneNumberErrorWithMessage:(nullable NSString *)message;

/** @fn missingVerificationCodeErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingVerificationCode code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingVerificationCodeErrorWithMessage:(nullable NSString *)message;

/** @fn invalidVerificationCodeErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidVerificationCode code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidVerificationCodeErrorWithMessage:(nullable NSString *)message;

/** @fn missingVerificationIDErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingVerificationID code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingVerificationIDErrorWithMessage:(nullable NSString *)message;

/** @fn invalidVerificationIDErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidVerificationID code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidVerificationIDErrorWithMessage:(nullable NSString *)message;

/** @fn sessionExpiredErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeSessionExpired code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)sessionExpiredErrorWithMessage:(nullable NSString *)message;

/** @fn missingAppCredentialWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorMissingCredential code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingAppCredentialWithMessage:(nullable NSString *)message;

/** @fn invalidAppCredentialWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorInvalidCredential code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)invalidAppCredentialWithMessage:(nullable NSString *)message;

/** @fn quotaExceededErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeQuotaExceeded code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)quotaExceededErrorWithMessage:(nullable NSString *)message;

/** @fn missingAppTokenErrorWithUnderlyingError
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingAppToken code.
    @param underlyingError The underlying error, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingAppTokenErrorWithUnderlyingError:(nullable NSError *)underlyingError;

/** @fn localPlayerNotAuthenticatedError
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeLocalPlayerNotAuthenticated code.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)localPlayerNotAuthenticatedError;

/** @fn gameKitNotLinkedError
   @brief Constructs an @c NSError with the @c FIRAuthErrorCodeGameKitNotLinked code.
   @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)gameKitNotLinkedError;

/** @fn notificationNotForwardedError
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeNotificationNotForwarded code.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)notificationNotForwardedError;

#if TARGET_OS_IOS
/** @fn secondFactorRequiredError
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeSecondFactorRequired code.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)
    secondFactorRequiredErrorWithPendingCredential:(NSString *)MFAPendingCredential
                                             hints:(NSArray<FIRMultiFactorInfo *> *)multiFactorInfo
                                              auth:(FIRAuth *)auth;
#endif

/** @fn appNotVerifiedErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeAppNotVerified code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)appNotVerifiedErrorWithMessage:(nullable NSString *)message;

/** @fn missingClientIdentifierErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingClientIdentifier code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingClientIdentifierErrorWithMessage:(nullable NSString *)message;

/** @fn missingClientTypeErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeMissingClientType code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)missingClientTypeErrorWithMessage:(nullable NSString *)message;

/** @fn captchaCheckFailedErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCaptchaCheckFailed code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)captchaCheckFailedErrorWithMessage:(nullable NSString *)message;

/** @fn webContextAlreadyPresentedErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeWebContextAlreadyPresented code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)webContextAlreadyPresentedErrorWithMessage:(nullable NSString *)message;

/** @fn webContextCancelledErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeWebContextCancelled code.
    @param message Error message from the backend, if any.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)webContextCancelledErrorWithMessage:(nullable NSString *)message;

/** @fn appVerificationUserInteractionFailureWithReason:
    @brief Constructs an @c NSError with the @c
        FIRAuthErrorCodeAppVerificationUserInteractionFailure code.
    @param reason Reason for error, returned via URL response.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)appVerificationUserInteractionFailureWithReason:(NSString *)reason;

/** @fn webSignInUserInteractionFailureWithReason:
    @brief Constructs an @c NSError with the @c
        FIRAuthErrorCodeWebSignInUserInteractionFailure code.
    @param reason Reason for error, returned via URL response.
    @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)webSignInUserInteractionFailureWithReason:(nullable NSString *)reason;

/** @fn URLResponseErrorWithCode:message:
    @brief Constructs an @c NSError with the code and message provided.
    @param message Error message from the backend, if any.
    @return The nullable NSError instance associated with the given error message, if one is found.
 */
+ (nullable NSError *)URLResponseErrorWithCode:(NSString *)code
                                       message:(nullable NSString *)message;

/** @fn nullUserErrorWithMessage:
    @brief Constructs an @c NSError with the code and message provided.
    @param message Error message from the backend, if any.
    @return The nullable NSError instance associated with the given error message, if one is found.
 */
+ (NSError *)nullUserErrorWithMessage:(nullable NSString *)message;

/** @fn invalidProviderIDErrorWithMessage:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeInvalidProviderID code.
    @param message Error message from the backend, if any.
    @remarks This error indicates that the provider id given for the web operation is invalid.
 */
+ (NSError *)invalidProviderIDErrorWithMessage:(nullable NSString *)message;

/** @fn invalidDynamicLinkDomainErrorWithMessage:
    @brief Constructs an @c NSError with the code and message provided.
    @param message Error message from the backend, if any.
    @return The nullable NSError instance associated with the given error message, if one is found.
 */
+ (NSError *)invalidDynamicLinkDomainErrorWithMessage:(nullable NSString *)message;

/** @fn keychainErrorWithFunction:status:
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeKeychainError code.
    @param keychainFunction The keychain function which was invoked and yielded an unexpected
        response. The @c NSLocalizedFailureReasonErrorKey field in the @c NSError.userInfo
        dictionary will contain a string partially comprised of this value.
    @param status The response status from the invoked keychain function. The
        @c NSLocalizedFailureReasonErrorKey field in the @c NSError.userInfo dictionary will contain
        a string partially comprised of this value.
 */
+ (NSError *)keychainErrorWithFunction:(NSString *)keychainFunction status:(OSStatus)status;

/** @fn missingOrInvalidNonceErrorWithMessage:
    @brief Constructs an @c NSError with the code and message provided.
    @param message Error message from the backend, if any.
    @return The nullable NSError instance associated with the given error message, if one is found.
*/
+ (NSError *)missingOrInvalidNonceErrorWithMessage:(nullable NSString *)message;

/** @fn tenantIDMismatchError
    @brief Constructs an @c NSError with the @c FIRAuthErrorCodeTenantIDMismatch code.
    @remarks This error is used when an attempt is made to update the current user with a
        tenantId that differs from the current FirebaseAuth instance's tenantId.
 */
+ (NSError *)tenantIDMismatchError;

/** @fn unsupportedTenantOperationError
    @brief Constructs an @c NSError with the @c FIRUnsupportedTenantOperation code.
    @remarks This error indicates the operation is not supported in a multi-tenant context.
 */
+ (NSError *)unsupportedTenantOperationError;

+ (NSError *)blockingCloudFunctionServerResponseWithMessage:(nullable NSString *)message;

/** @fn recaptchaSDKNotLinkedError
   @brief Constructs an @c NSError with the @c FIRAuthErrorCodeRecaptchaSDKNotLinked code.
   @return The NSError instance associated with the given FIRAuthError.
 */
+ (NSError *)recaptchaSDKNotLinkedError;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthErrorUtils.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthExceptionUtils.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthExceptionUtils
    @brief Utility class used to raise standardized Auth related exceptions.
*/
@interface FIRAuthExceptionUtils : NSObject

/** @fn raiseInvalidParameterExceptionWithReason:
    @brief raises the "invalid parameter" exception
    @param reason string will contain a description of the error.
 */
+ (void)raiseInvalidParameterExceptionWithReason:(nullable NSString *)reason;

/** @fn raiseMethodNotImplementedExceptionWithReason:
    @brief raises the "method not implemented" exception
    @param reason string will contain a description of the error.
    @see FIRMethodNotImplementedException
 */
+ (void)raiseMethodNotImplementedExceptionWithReason:(nullable NSString *)reason;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthExceptionUtils.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthInternalErrors.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "FirebaseAuth/Sources/Public/FirebaseAuth/FIRAuthErrors.h"

NS_ASSUME_NONNULL_BEGIN

/** @var FIRAuthPublicErrorCodeFlag
    @brief Bitmask value indicating the error represents a public error code when this bit is
        zeroed. Error codes which don't contain this flag will be wrapped in an @c NSError whose
        code is @c FIRAuthErrorCodeInternalError.
 */
static const NSInteger FIRAuthPublicErrorCodeFlag = 1 << 20;

/** @var FIRAuthInternalErrorDomain
    @brief The Firebase Auth error domain for internal errors.
 */
extern NSString *const FIRAuthInternalErrorDomain;

/** @var FIRAuthErrorUserInfoDeserializedResponseKey
    @brief Errors with the code @c FIRAuthErrorCodeUnexpectedResponseError,
        @c FIRAuthErrorCodeUnexpectedErrorResponseError, and
        @c FIRAuthInternalErrorCodeRPCResponseDecodingError may contain an @c NSError.userInfo
        dictionary which contains this key. The value associated with this key is an object of
        unspecified contents containing the deserialized server response.
 */
extern NSString *const FIRAuthErrorUserInfoDeserializedResponseKey;

/** @var FIRAuthErrorUserInfoDataKey
    @brief Errors with the code @c FIRAuthErrorCodeUnexpectedResponseError or
        @c FIRAuthErrorCodeUnexpectedErrorResponseError may contain an @c NSError.userInfo
        dictionary which contains this key. The value associated with this key is an @c NSString
        which represents the response from a server to an RPC which could not be deserialized.
 */
extern NSString *const FIRAuthErrorUserInfoDataKey;

/** @var FIRAuthInternalErrorCode
    @brief Error codes used internally by Firebase Auth.
    @remarks All errors are generated using an internal error code. These errors are automatically
        converted to the appropriate public version of the @c NSError by the methods in
        @c FIRAuthErrorUtils
 */
typedef NS_ENUM(NSInteger, FIRAuthInternalErrorCode) {
  /** @var FIRAuthInternalErrorCodeNetworkError
      @brief Indicates a network error occurred (such as a timeout, interrupted connection, or
          unreachable host.)
      @remarks These types of errors are often recoverable with a retry.

          See the @c NSUnderlyingError value in the @c NSError.userInfo dictionary for details about
          the network error which occurred.
   */
  FIRAuthInternalErrorCodeNetworkError = FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeNetworkError,

  /** @var FIRAuthInternalErrorCodeEmailAlreadyInUse
      @brief The email used to attempt a sign-up already exists.
   */
  FIRAuthInternalErrorCodeEmailAlreadyInUse = FIRAuthPublicErrorCodeFlag |
                                              FIRAuthErrorCodeEmailAlreadyInUse,

  /** @var FIRAuthInternalErrorCodeUserDisabled
      @brief Indicates the user's account is disabled on the server side.
   */
  FIRAuthInternalErrorCodeUserDisabled = FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeUserDisabled,

  /** @var FIRAuthInternalErrorCodeWrongPassword
      @brief Indicates the user attempted sign in with a wrong password
   */
  FIRAuthInternalErrorCodeWrongPassword = FIRAuthPublicErrorCodeFlag |
                                          FIRAuthErrorCodeWrongPassword,

  /** @var FIRAuthInternalErrorCodeKeychainError
      @brief Indicates an error occurred accessing the keychain.
      @remarks The @c NSLocalizedFailureReasonErrorKey field in the @c NSError.userInfo dictionary
          will contain more information about the error encountered.
   */
  FIRAuthInternalErrorCodeKeychainError = FIRAuthPublicErrorCodeFlag |
                                          FIRAuthErrorCodeKeychainError,

  /** @var FIRAuthInternalErrorCodeMissingClientType
      @brief Indicates an error for when the client type is missing.
   */
  FIRAuthInternalErrorCodeMissingClientType = FIRAuthPublicErrorCodeFlag |
                                              FIRAuthErrorCodeMissingClientType,

  /** @var FIRAuthInternalErrorCodeInternalError
      @brief An internal error occurred.
      @remarks This value is here for consistency. It's also used to make the implementation of
          wrapping internal errors simpler.
   */
  FIRAuthInternalErrorCodeInternalError = FIRAuthPublicErrorCodeFlag |
                                          FIRAuthErrorCodeInternalError,

  /** @var FIRAuthInternalErrorCodeTooManyRequests
      @brief Indicates that too many requests were made to a server method.
   */
  FIRAuthInternalErrorCodeTooManyRequests = FIRAuthPublicErrorCodeFlag |
                                            FIRAuthErrorCodeTooManyRequests,

  /** @var FIRAuthInternalErrorCodeInvalidCustomToken
      @brief Indicates a validation error with the custom token.
   */
  FIRAuthInternalErrorCodeInvalidCustomToken = FIRAuthPublicErrorCodeFlag |
                                               FIRAuthErrorCodeInvalidCustomToken,

  /** @var FIRAuthInternalErrorCodeCredentialMismatch
      @brief Indicates the service account and the API key belong to different projects.
   */
  FIRAuthInternalErrorCodeCustomTokenMismatch = FIRAuthPublicErrorCodeFlag |
                                                FIRAuthErrorCodeCustomTokenMismatch,

  /** @var FIRAuthInternalErrorCodeInvalidCredential
      @brief Indicates the IDP token or requestUri is invalid.
   */
  FIRAuthInternalErrorCodeInvalidCredential = FIRAuthPublicErrorCodeFlag |
                                              FIRAuthErrorCodeInvalidCredential,

  /** @var FIRAuthInternalErrorCodeRequiresRecentLogin
      @brief Indicates the user has attemped to change email or password more than 5 minutes after
          signing in.
   */
  FIRAuthInternalErrorCodeRequiresRecentLogin = FIRAuthPublicErrorCodeFlag |
                                                FIRAuthErrorCodeRequiresRecentLogin,

  /** @var FIRAuthInternalErrorCodeInvalidUserToken
     @brief Indicates user's saved auth credential is invalid, the user needs to sign in again.
  */
  FIRAuthInternalErrorCodeInvalidUserToken = FIRAuthPublicErrorCodeFlag |
                                             FIRAuthErrorCodeInvalidUserToken,

  /** @var FIRAuthInternalErrorCodeInvalidEmail
     @brief Indicates the email identifier is invalid.
  */
  FIRAuthInternalErrorCodeInvalidEmail = FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeInvalidEmail,

  /** @var FIRAuthInternalErrorCodeAccountExistsWithDifferentCredential
      @brief Indicates account linking is needed.
   */
  FIRAuthInternalErrorCodeAccountExistsWithDifferentCredential =
      FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeAccountExistsWithDifferentCredential,

  /** @var FIRAuthInternalErrorCodeProviderAlreadyLinked
      @brief Indicates an attempt to link a provider to which we are already linked.
   */
  FIRAuthInternalErrorCodeProviderAlreadyLinked = FIRAuthPublicErrorCodeFlag |
                                                  FIRAuthErrorCodeProviderAlreadyLinked,

  /** @var FIRAuthInternalErrorCodeNoSuchProvider
      @brief Indicates an attempt to unlink a provider that is not is not linked.
   */
  FIRAuthInternalErrorCodeNoSuchProvider = FIRAuthPublicErrorCodeFlag |
                                           FIRAuthErrorCodeNoSuchProvider,

  /** @var FIRAuthInternalErrorCodeUserTokenExpired
      @brief Indicates the token issue time is older than account's valid_since time.
   */
  FIRAuthInternalErrorCodeUserTokenExpired = FIRAuthPublicErrorCodeFlag |
                                             FIRAuthErrorCodeUserTokenExpired,

  /** @var FIRAuthInternalErrorCodeUserNotFound
      @brief Indicates the user account was been found.
   */
  FIRAuthInternalErrorCodeUserNotFound = FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeUserNotFound,

  /** @var FIRAuthInternalErrorCodeInvalidAPIKey
      @brief Indicates an invalid API Key was supplied in the request.
   */
  FIRAuthInternalErrorCodeInvalidAPIKey = FIRAuthPublicErrorCodeFlag |
                                          FIRAuthErrorCodeInvalidAPIKey,

  /** @var FIRAuthInternalErrorCodeOperationNotAllowed
      @brief Indicates that admin disabled sign-in with the specified IDP.
   */
  FIRAuthInternalErrorCodeOperationNotAllowed = FIRAuthPublicErrorCodeFlag |
                                                FIRAuthErrorCodeOperationNotAllowed,

  /** @var FIRAuthInternalErrorCodeUserMismatch
      @brief Indicates that user attempted to reauthenticate with a user other than the current
          user.
   */
  FIRAuthInternalErrorCodeUserMismatch = FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeUserMismatch,

  /** @var FIRAuthInternalErrorCodeCredentialAlreadyInUse
      @brief Indicates an attempt to link with a credential that has already been linked with a
          different Firebase account.
   */
  FIRAuthInternalErrorCodeCredentialAlreadyInUse = FIRAuthPublicErrorCodeFlag |
                                                   FIRAuthErrorCodeCredentialAlreadyInUse,

  /** @var FIRAuthInternalErrorCodeWeakPassword
      @brief Indicates an attempt to set a password that is considered too weak.
   */
  FIRAuthInternalErrorCodeWeakPassword = FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeWeakPassword,

  /** @var FIRAuthInternalErrorCodeAppNotAuthorized
      @brief Indicates the App is not authorized to use Firebase Authentication with the
          provided API Key.
   */
  FIRAuthInternalErrorCodeAppNotAuthorized = FIRAuthPublicErrorCodeFlag |
                                             FIRAuthErrorCodeAppNotAuthorized,

  /** @var FIRAuthInternalErrorCodeExpiredActionCode
      @brief Indicates the OOB code is expired.
   */
  FIRAuthInternalErrorCodeExpiredActionCode = FIRAuthPublicErrorCodeFlag |
                                              FIRAuthErrorCodeExpiredActionCode,

  /** @var FIRAuthInternalErrorCodeInvalidActionCode
      @brief Indicates the OOB code is invalid.
  */
  FIRAuthInternalErrorCodeInvalidActionCode = FIRAuthPublicErrorCodeFlag |
                                              FIRAuthErrorCodeInvalidActionCode,

  /** Indicates that there are invalid parameters in the payload during a "send password reset email
   *  " attempt.
   */
  FIRAuthInternalErrorCodeInvalidMessagePayload = FIRAuthPublicErrorCodeFlag |
                                                  FIRAuthErrorCodeInvalidMessagePayload,

  /** Indicates that the sender email is invalid during a "send password reset email" attempt.
   */
  FIRAuthInternalErrorCodeInvalidSender = FIRAuthPublicErrorCodeFlag |
                                          FIRAuthErrorCodeInvalidSender,

  /** Indicates that the recipient email is invalid.
   */
  FIRAuthInternalErrorCodeInvalidRecipientEmail = FIRAuthPublicErrorCodeFlag |
                                                  FIRAuthErrorCodeInvalidRecipientEmail,

  /** Indicates that the iOS bundle ID is missing when a iOS App Store ID is provided.
   */
  FIRAuthinternalErrorCodeMissingIosBundleID = FIRAuthPublicErrorCodeFlag |
                                               FIRAuthErrorCodeMissingIosBundleID,

  /** Indicates that the android package name is missing when the @c androidInstallApp flag is set
        to true.
   */
  FIRAuthInternalErrorCodeMissingAndroidPackageName = FIRAuthPublicErrorCodeFlag |
                                                      FIRAuthErrorCodeMissingAndroidPackageName,

  /** Indicates that the domain specified in the continue URL is not allowlisted in the Firebase
        console.
   */
  FIRAuthInternalErrorCodeUnauthorizedDomain = FIRAuthPublicErrorCodeFlag |
                                               FIRAuthErrorCodeUnauthorizedDomain,

  /** Indicates that the domain specified in the continue URI is not valid.
   */
  FIRAuthInternalErrorCodeInvalidContinueURI = FIRAuthPublicErrorCodeFlag |
                                               FIRAuthErrorCodeInvalidContinueURI,

  /** Indicates that a continue URI was not provided in a request to the backend which requires
        one.
   */
  FIRAuthInternalErrorCodeMissingContinueURI = FIRAuthPublicErrorCodeFlag |
                                               FIRAuthErrorCodeMissingContinueURI,

  /** Indicates that an email address was expected but one was not provided.
   */
  FIRAuthInternalErrorCodeMissingEmail = FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeMissingEmail,

  /** Indicates that a phone number was not provided in a call to @c verifyPhoneNumber:completion:.
   */
  FIRAuthInternalErrorCodeMissingPhoneNumber = FIRAuthPublicErrorCodeFlag |
                                               FIRAuthErrorCodeMissingPhoneNumber,

  /** Indicates that an invalid phone number was provided in a call to @c
      verifyPhoneNumber:completion:.
   */
  FIRAuthInternalErrorCodeInvalidPhoneNumber = FIRAuthPublicErrorCodeFlag |
                                               FIRAuthErrorCodeInvalidPhoneNumber,

  /** Indicates that the phone auth credential was created with an empty verification code.
   */
  FIRAuthInternalErrorCodeMissingVerificationCode = FIRAuthPublicErrorCodeFlag |
                                                    FIRAuthErrorCodeMissingVerificationCode,

  /** Indicates that an invalid verification code was used in the verifyPhoneNumber request.
   */
  FIRAuthInternalErrorCodeInvalidVerificationCode = FIRAuthPublicErrorCodeFlag |
                                                    FIRAuthErrorCodeInvalidVerificationCode,

  /** Indicates that the phone auth credential was created with an empty verification ID.
   */
  FIRAuthInternalErrorCodeMissingVerificationID = FIRAuthPublicErrorCodeFlag |
                                                  FIRAuthErrorCodeMissingVerificationID,

  /** Indicates that the APNS device token is missing in the verifyClient request.
   */
  FIRAuthInternalErrorCodeMissingAppCredential = FIRAuthPublicErrorCodeFlag |
                                                 FIRAuthErrorCodeMissingAppCredential,

  /** Indicates that an invalid APNS device token was used in the verifyClient request.
   */
  FIRAuthInternalErrorCodeInvalidAppCredential = FIRAuthPublicErrorCodeFlag |
                                                 FIRAuthErrorCodeInvalidAppCredential,

  /** Indicates that the reCAPTCHA token is not valid.
   */
  FIRAuthInternalErrorCodeCaptchaCheckFailed = FIRAuthPublicErrorCodeFlag |
                                               FIRAuthErrorCodeCaptchaCheckFailed,

  /** Indicates that an invalid verification ID was used in the verifyPhoneNumber request.
   */
  FIRAuthInternalErrorCodeInvalidVerificationID = FIRAuthPublicErrorCodeFlag |
                                                  FIRAuthErrorCodeInvalidVerificationID,

  /** Indicates that the quota of SMS messages for a given project has been exceeded.
   */
  FIRAuthInternalErrorCodeQuotaExceeded = FIRAuthPublicErrorCodeFlag |
                                          FIRAuthErrorCodeQuotaExceeded,

  /** Indicates that an attempt was made to present a new web context while one was already being
        presented.
   */
  FIRAuthInternalErrorCodeWebContextAlreadyPresented = FIRAuthPublicErrorCodeFlag |
                                                       FIRAuthErrorCodeWebContextAlreadyPresented,

  /** Indicates that the URL presentation was cancelled prematurely by the user.
   */
  FIRAuthInternalErrorCodeWebContextCancelled = FIRAuthPublicErrorCodeFlag |
                                                FIRAuthErrorCodeWebContextCancelled,

  /** Indicates a general failure during the app verification flow.
   */
  FIRAuthInternalErrorCodeAppVerificationUserInteractionFailure =
      FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeAppVerificationUserInteractionFailure,

  /** Indicates that the clientID used to invoke a web flow is invalid.
   */
  FIRAuthInternalErrorCodeInvalidClientID = FIRAuthPublicErrorCodeFlag |
                                            FIRAuthErrorCodeInvalidClientID,

  /** Indicates that a network request within a SFSafariViewController or WKWebView failed.
   */
  FIRAuthInternalErrorCodeWebNetworkRequestFailed = FIRAuthPublicErrorCodeFlag |
                                                    FIRAuthErrorCodeWebNetworkRequestFailed,

  /** Indicates that an internal error occurred within a SFSafariViewController or WKWebView.
   */
  FIRAuthInternalErrorCodeWebInternalError = FIRAuthPublicErrorCodeFlag |
                                             FIRAuthErrorCodeWebInternalError,

  /** Indicates that an internal error occurred within a SFSafariViewController or WKWebView.
   */
  FIRAuthInternalErrorCodeWebSignInUserInteractionFailure =
      FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeWebSignInUserInteractionFailure,

  // The enum values between 17046 and 17051 are reserved and should NOT be used for new error
  // codes.

  /** Indicates that the SMS code has expired
   */
  FIRAuthInternalErrorCodeSessionExpired = FIRAuthPublicErrorCodeFlag |
                                           FIRAuthErrorCodeSessionExpired,

  FIRAuthInternalErrorCodeMissingAppToken = FIRAuthPublicErrorCodeFlag |
                                            FIRAuthErrorCodeMissingAppToken,

  FIRAuthInternalErrorCodeNotificationNotForwarded = FIRAuthPublicErrorCodeFlag |
                                                     FIRAuthErrorCodeNotificationNotForwarded,

  FIRAuthInternalErrorCodeAppNotVerified = FIRAuthPublicErrorCodeFlag |
                                           FIRAuthErrorCodeAppNotVerified,

  /** Indicates that the Game Center local player was not authenticated.
   */
  FIRAuthInternalErrorCodeLocalPlayerNotAuthenticated = FIRAuthPublicErrorCodeFlag |
                                                        FIRAuthErrorCodeLocalPlayerNotAuthenticated,

  /** Indicates that the Game Center local player was not authenticated.
   */
  FIRAuthInternalErrorCodeGameKitNotLinked = FIRAuthPublicErrorCodeFlag |
                                             FIRAuthErrorCodeGameKitNotLinked,

  /** Indicates that the second factor is required for sign in.
   */
  FIRAuthInternalErrorCodeSecondFactorRequired = FIRAuthPublicErrorCodeFlag |
                                                 FIRAuthErrorCodeSecondFactorRequired,

  /** Indicates that the multi factor session is missing.
   */
  FIRAuthInternalErrorCodeMissingMultiFactorSession = FIRAuthPublicErrorCodeFlag |
                                                      FIRAuthErrorCodeMissingMultiFactorSession,

  /** Indicates that the multi factor info is missing.
   */
  FIRAuthInternalErrorCodeMissingMultiFactorInfo = FIRAuthPublicErrorCodeFlag |
                                                   FIRAuthErrorCodeMissingMultiFactorInfo,

  /** Indicates that the multi factor session is invalid.
   */
  FIRAuthInternalErrorCodeInvalidMultiFactorSession = FIRAuthPublicErrorCodeFlag |
                                                      FIRAuthErrorCodeInvalidMultiFactorSession,

  /** Indicates that the multi factor info is not found.
   */
  FIRAuthInternalErrorCodeMultiFactorInfoNotFound = FIRAuthPublicErrorCodeFlag |
                                                    FIRAuthErrorCodeMultiFactorInfoNotFound,

  /** Indicates that the operation is admin only.
   */
  FIRAuthInternalErrorCodeAdminRestrictedOperation = FIRAuthPublicErrorCodeFlag |
                                                     FIRAuthErrorCodeAdminRestrictedOperation,

  /** Indicates that the email is unverified.
   */
  FIRAuthInternalErrorCodeUnverifiedEmail = FIRAuthPublicErrorCodeFlag |
                                            FIRAuthErrorCodeUnverifiedEmail,

  /** Indicates that the second factor is already enrolled.
   */
  FIRAuthInternalErrorCodeSecondFactorAlreadyEnrolled = FIRAuthPublicErrorCodeFlag |
                                                        FIRAuthErrorCodeSecondFactorAlreadyEnrolled,

  /** Indicates that the number of multi factors reached the limit.
   */
  FIRAuthInternalErrorCodeMaximumSecondFactorCountExceeded =
      FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeMaximumSecondFactorCountExceeded,

  /** Indicates that the first factor is not supportted.
   */
  FIRAuthInternalErrorCodeUnsupportedFirstFactor = FIRAuthPublicErrorCodeFlag |
                                                   FIRAuthErrorCodeUnsupportedFirstFactor,

  /** Indicates that the email needs to be verified before changed.
   */
  FIRAuthInternalErrorCodeEmailChangeNeedsVerification =
      FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeEmailChangeNeedsVerification,

  /** Indicates that the request does not contain any client identifier.
   */
  FIRAuthInternalErrorCodeMissingClientIdentifier = FIRAuthPublicErrorCodeFlag |
                                                    FIRAuthErrorCodeMissingClientIdentifier,

  /** Indicates that the nonce is missing or invalid.
   */
  FIRAuthInternalErrorCodeMissingOrInvalidNonce = FIRAuthPublicErrorCodeFlag |
                                                  FIRAuthErrorCodeMissingOrInvalidNonce,

  /** Indicates that a non-null user was expected as an argmument to the operation but a null
        user was provided.
   */
  FIRAuthInternalErrorCodeNullUser = FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeNullUser,

  /** Indicates that the provider id given for the web operation is invalid.
   */
  FIRAuthInternalErrorCodeInvalidProviderID = FIRAuthPublicErrorCodeFlag |
                                              FIRAuthErrorCodeInvalidProviderID,

  /** @var FIRAuthInternalErrorCodeTenantIDMismatch
      @brief Indicates an error occurred when an attempt is made to update the current user with a
          tenantId that differs from the current FirebaseAuth instance's tenantId.
   */
  FIRAuthInternalErrorCodeTenantIDMismatch = FIRAuthPublicErrorCodeFlag |
                                             FIRAuthErrorCodeTenantIDMismatch,

  /** @var FIRAuthInternalErrorCodeUnsupportedTenantOperation
      @brief Indicates an error occurred when operation is not supported in a multi-tenant context.
   */
  FIRAuthInternalErrorCodeUnsupportedTenantOperation = FIRAuthPublicErrorCodeFlag |
                                                       FIRAuthErrorCodeUnsupportedTenantOperation,

  /** Indicates that the Firebase Dynamic Link domain used is either not configured or is
     unauthorized for the current project.
   */
  FIRAuthInternalErrorCodeInvalidDynamicLinkDomain = FIRAuthPublicErrorCodeFlag |
                                                     FIRAuthErrorCodeInvalidDynamicLinkDomain,

  FIRAuthInternalErrorCodeMalformedJWT = FIRAuthPublicErrorCodeFlag | FIRAuthErrorCodeMalformedJWT,

  /** Indicates that an authentication blocking cloud function returned an error.
   */
  FIRAuthInternalErrorBlockingCloudFunctionError = FIRAuthPublicErrorCodeFlag |
                                                   FIRAuthErrorCodeBlockingCloudFunctionError,

  /** Indicates that the recaptcha score sent to backend is invalid.
   */
  FIRAuthInternalErrorCodeInvalidRecaptchaScore = FIRAuthPublicErrorCodeFlag |
                                                  FIRAuthErrorCodeCaptchaCheckFailed,

  /** Indicates that the recaptcha integration is not enabled for this project.
   */
  FIRAuthInternalErrorCodeRecaptchaNotEnabled = FIRAuthPublicErrorCodeFlag |
                                                FIRAuthErrorCodeRecaptchaNotEnabled,

  /** Indicates that the recaptcha sdk is not linked to the app.
   */
  FIRAuthInternalErrorCodeRecaptchaSDKNotLinked = FIRAuthPublicErrorCodeFlag |
                                                  FIRAuthErrorCodeRecaptchaSDKNotLinked,

  /** @var FIRAuthInternalErrorCodeRPCRequestEncodingError
        @brief Indicates an error encoding the RPC request.
        @remarks This is typically due to some sort of unexpected input value.

            See the @c NSUnderlyingError value in the @c NSError.userInfo dictionary for details.
     */
  FIRAuthInternalErrorCodeRPCRequestEncodingError = 1,

  /** @var FIRAuthInternalErrorCodeJSONSerializationError
      @brief Indicates an error serializing an RPC request.
      @remarks This is typically due to some sort of unexpected input value.

          If an @c NSJSONSerialization.isValidJSONObject: check fails, the error will contain no
          @c NSUnderlyingError key in the @c NSError.userInfo dictionary. If an error was
          encountered calling @c NSJSONSerialization.dataWithJSONObject:options:error:, the
          resulting error will be associated with the @c NSUnderlyingError key in the
          @c NSError.userInfo dictionary.
   */
  FIRAuthInternalErrorCodeJSONSerializationError = 2,

  /** @var FIRAuthInternalErrorCodeUnexpectedErrorResponse
      @brief Indicates an HTTP error occurred and the data returned either couldn't be deserialized
          or couldn't be decoded.
      @remarks See the @c NSUnderlyingError value in the @c NSError.userInfo dictionary for details
          about the HTTP error which occurred.

          If the response could be deserialized as JSON then the @c NSError.userInfo dictionary will
          contain a value for the key @c FIRAuthErrorUserInfoDeserializedResponseKey which is the
          deserialized response value.

          If the response could not be deserialized as JSON then the @c NSError.userInfo dictionary
          will contain values for the @c NSUnderlyingErrorKey and @c FIRAuthErrorUserInfoDataKey
          keys.
   */
  FIRAuthInternalErrorCodeUnexpectedErrorResponse = 3,

  /** @var FIRAuthInternalErrorCodeUnexpectedResponse
      @brief Indicates the HTTP response indicated the request was a successes, but the response
          contains something other than a JSON-encoded dictionary, or the data type of the response
          indicated it is different from the type of response we expected.
      @remarks See the @c NSUnderlyingError value in the @c NSError.userInfo dictionary.
          If this key is present in the dictionary, it may contain an error from
          @c NSJSONSerialization error (indicating the response received was of the wrong data
              type).

          See the @c FIRAuthErrorUserInfoDeserializedResponseKey value in the @c NSError.userInfo
          dictionary. If the response could be deserialized, it's deserialized representation will
          be associated with this key. If the @c NSUnderlyingError value in the @c NSError.userInfo
          dictionary is @c nil, this indicates the JSON didn't represent a dictionary.
   */
  FIRAuthInternalErrorCodeUnexpectedResponse = 4,

  /** @var FIRAuthInternalErrorCodeRPCResponseDecodingError
      @brief Indicates an error decoding the RPC response.
          This is typically due to some sort of unexpected response value from the server.
      @remarks See the @c NSUnderlyingError value in the @c NSError.userInfo dictionary for details.

          See the @c FIRErrorUserInfoDecodedResponseKey value in the @c NSError.userInfo dictionary.
          The deserialized representation of the response will be associated with this key.
   */
  FIRAuthInternalErrorCodeRPCResponseDecodingError = 5,
};

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthInternalErrors.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthRecaptchaVerifier.h
===
/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#if TARGET_OS_IOS && !TARGET_OS_MACCATALYST && (!defined(TARGET_OS_VISION) || !TARGET_OS_VISION)
#import <RecaptchaInterop/RCARecaptchaProtocol.h>

#import "FirebaseAuth/Sources/Backend/FIRIdentityToolkitRequest.h"

NS_ASSUME_NONNULL_BEGIN

@interface FIRAuthRecaptchaConfig : NSObject

@property(nonatomic, nonnull, copy) NSString *siteKey;

@property(nonatomic, nonnull, strong) NSDictionary<NSString *, NSNumber *> *enablementStatus;

@end

typedef void (^FIRAuthRecaptchaTokenCallback)(NSString *_Nullable token, NSError *_Nullable error);

typedef void (^FIRAuthRecaptchaConfigCallback)(NSError *_Nullable error);

typedef void (^FIRAuthInjectRequestCallback)(FIRIdentityToolkitRequest<FIRAuthRPCRequest> *request);

typedef NS_ENUM(NSInteger, FIRAuthRecaptchaProvider) {
  FIRAuthRecaptchaProviderPassword,
};

typedef NS_ENUM(NSInteger, FIRAuthRecaptchaAction) {
  FIRAuthRecaptchaActionDefault,
  FIRAuthRecaptchaActionSignInWithPassword,
  FIRAuthRecaptchaActionGetOobCode,
  FIRAuthRecaptchaActionSignUpPassword
};

@interface FIRAuthRecaptchaVerifier : NSObject

@property(nonatomic, weak, nullable) FIRAuth *auth;

@property(nonatomic, strong, nullable) FIRAuthRecaptchaConfig *agentConfig;

@property(nonatomic, strong, nullable)
    NSMutableDictionary<NSString *, FIRAuthRecaptchaConfig *> *tenantConfigs;

@property(nonatomic, strong) id<RCARecaptchaClientProtocol> recaptchaClient;

- (void)verifyForceRefresh:(BOOL)forceRefresh
                    action:(FIRAuthRecaptchaAction)action
                completion:(nullable FIRAuthRecaptchaTokenCallback)completion;

- (void)injectRecaptchaFields:(FIRIdentityToolkitRequest<FIRAuthRPCRequest> *)request
                     provider:(FIRAuthRecaptchaProvider)provider
                       action:(FIRAuthRecaptchaAction)action
                   completion:(nullable FIRAuthInjectRequestCallback)completion;

- (BOOL)enablementStatusForProvider:(FIRAuthRecaptchaProvider)provider;

+ (id)sharedRecaptchaVerifier:(nullable FIRAuth *)auth;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthRecaptchaVerifier.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthURLPresenter.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS && (!defined(TARGET_OS_VISION) || !TARGET_OS_VISION)

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@protocol FIRAuthUIDelegate;

/** @typedef FIRAuthURLPresentationCompletion
    @brief The type of block invoked when the URLPresentation completes.
    @param callbackURL The callback URL if the presentation ends with a matching callback.
    @param error The error if the presentation fails to start or ends with an error.
 */
typedef void (^FIRAuthURLPresentationCompletion)(NSURL *_Nullable callbackURL,
                                                 NSError *_Nullable error);

/** @typedef FIRAuthCallbackMatcher
    @brief The type of block invoked for checking whether a callback URL matches.
    @param callbackURL The callback URL to check for match.
    @return Whether or not the specific callback URL matches or not.
 */
typedef BOOL (^FIRAuthURLCallbackMatcher)(NSURL *_Nullable callbackURL);

/** @class FIRAuthURLPresenter
    @brief A Class responsible for presenting URL via SFSafariViewController or WKWebView.
 */
@interface FIRAuthURLPresenter : NSObject

/** @fn presentURL:UIDelegate:callbackMatcher:completion:
    @brief Presents an URL to interact with user.
    @param URL The URL to present.
    @param UIDelegate The UI delegate to present view controller.
    @param completion A block to be called either synchronously if the presentation fails to start,
        or asynchronously in future on an unspecified thread once the presentation finishes.
 */
- (void)presentURL:(NSURL *)URL
         UIDelegate:(nullable id<FIRAuthUIDelegate>)UIDelegate
    callbackMatcher:(FIRAuthURLCallbackMatcher)callbackMatcher
         completion:(FIRAuthURLPresentationCompletion)completion;

/** @fn canHandleURL:
    @brief Determines if a URL was produced by the currently presented URL.
    @param URL The URL to handle.
    @return Whether the URL could be handled or not.
 */
- (BOOL)canHandleURL:(NSURL *)URL;

@end

NS_ASSUME_NONNULL_END

#endif  // TARGET_OS_IOS && (!defined(TARGET_OS_VISION) || !TARGET_OS_VISION)

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthURLPresenter.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthWebUtils.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRAuthRequestConfiguration;

NS_ASSUME_NONNULL_BEGIN

/** @typedef FIRFetchAuthDomainCallback
    @brief The callback invoked at the end of the flow to fetch the Auth domain.
    @param authDomain The Auth domain.
    @param error The error that occurred while fetching the auth domain, if any.
 */
typedef void (^FIRFetchAuthDomainCallback)(NSString *_Nullable authDomain,
                                           NSError *_Nullable error);

/** @class FIRAuthURLUtils
    @brief A utility class used to facilitate the creation of auth related URLs.
 */
@interface FIRAuthWebUtils : NSObject

/** @fn randomStringWithLength:
    @brief Generates a random string of a specified length.
 */
+ (NSString *)randomStringWithLength:(NSUInteger)length;

/** @fn isCallbackSchemeRegisteredForCustomURLScheme:
    @brief Checks whether or not the provided custom URL scheme has been registered by the app.
    @param URLScheme The custom URL scheme to be checked against all custom URL schemes registered
   by the app.
    @return whether or not the provided custom URL scheme has been registered by the app.
 */
+ (BOOL)isCallbackSchemeRegisteredForCustomURLScheme:(NSString *)URLScheme;

/** @fn isExpectedCallbackURL:eventID:authType
    @brief Parses a URL into all available query items.
    @param URL The actual callback URL.
    @param eventID The expected event ID.
    @param authType The expected auth type.
    @param callbackScheme The expected callback custom scheme.
    @return Whether or not the actual callback URL matches the expected callback URL.
 */
+ (BOOL)isExpectedCallbackURL:(nullable NSURL *)URL
                      eventID:(NSString *)eventID
                     authType:(NSString *)authType
               callbackScheme:(NSString *)callbackScheme;

/** @fn extractDomain:urlString
 @brief Strips url of scheme and path string to extract domain name
 @param urlString URL string for domain
 */
+ (NSString *)extractDomain:(NSString *)urlString;

/** @fn fetchAuthDomainWithCompletion:completion:
    @brief Fetches the auth domain associated with the Firebase Project.
    @param completion The callback invoked after the auth domain has been constructed or an error
        has been encountered.
 */
+ (void)fetchAuthDomainWithRequestConfiguration:(FIRAuthRequestConfiguration *)requestConfiguration
                                     completion:(FIRFetchAuthDomainCallback)completion;

/** @fn queryItemValue:from:
 @brief Utility function to get a value from a NSURLQueryItem array.
 @param name The key.
 @param queryList The NSURLQueryItem array.
 @return The value for the key.
 */

+ (nullable NSString *)queryItemValue:(NSString *)name from:(NSArray<NSURLQueryItem *> *)queryList;

/** @fn dictionaryWithHttpArgumentsString:
    @brief Utility function to get a dictionary from a http argument string.
    @param argString The http argument string.
    @return The resulting dictionary of query arguments.
 */
+ (NSDictionary *)dictionaryWithHttpArgumentsString:(NSString *)argString;

/** @fn stringByUnescapingFromURLArgument:from:
    @brief Utility function to get a string by unescapting URL arguments.
    @param argument The argument string.
    @return The resulting string after unescaping URL argument.
 */
+ (NSString *)stringByUnescapingFromURLArgument:(NSString *)argument;

/** @fn parseURL:
    @brief Parses an incoming URL into all available query items.
    @param urlString The url to be parsed.
    @return A dictionary of available query items in the target URL.
 */
+ (NSDictionary<NSString *, NSString *> *)parseURL:(NSString *)urlString;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthWebUtils.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthWebView.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS && (!defined(TARGET_OS_VISION) || !TARGET_OS_VISION)

#import <UIKit/UIKit.h>
#import <WebKit/WebKit.h>

NS_ASSUME_NONNULL_BEGIN

/** @class FIRAuthWebView
    @brief A class reponsible for creating a WKWebView for use within Firebase Auth.
 */
@interface FIRAuthWebView : UIView

/** @property webView
 *  @brief The web view.
 */
@property(nonatomic, weak) WKWebView *webView;

/** @property spinner
 *  @brief The spinner that indicates web view loading.
 */
@property(nonatomic, weak) UIActivityIndicatorView *spinner;

@end

NS_ASSUME_NONNULL_END

#endif  // TARGET_OS_IOS && (!defined(TARGET_OS_VISION) || !TARGET_OS_VISION)

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthWebView.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthWebViewController.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>
#if TARGET_OS_IOS

#import <UIKit/UIKit.h>

@class FIRAuthWebViewController;

NS_ASSUME_NONNULL_BEGIN

/** @protocol FIRAuthWebViewControllerDelegate
    @brief Defines a delegate for FIRAuthWebViewController
 */
@protocol FIRAuthWebViewControllerDelegate <NSObject>

/** @fn webViewController:canHandleURL:
    @brief Determines if a URL should be handled by the delegate.
    @param URL The URL to handle.
    @return Whether the URL could be handled or not.
 */
- (BOOL)webViewController:(FIRAuthWebViewController *)webViewController canHandleURL:(NSURL *)URL;

/** @fn webViewControllerDidCancel:
    @brief Notifies the delegate that the web view controller is being cancelled by the user.
    @param webViewController The web view controller in question.
 */
- (void)webViewControllerDidCancel:(FIRAuthWebViewController *)webViewController;

/** @fn webViewController:didFailWithError:
    @brief Notifies the delegate that the web view controller failed to load a page.
    @param webViewController The web view controller in question.
    @param error The error that has occurred.
 */
- (void)webViewController:(FIRAuthWebViewController *)webViewController
         didFailWithError:(NSError *)error;

@end

/** @class FIRAuthWebViewController
    @brief Reponsible for creating a UIViewController for presenting a FIRAutWebView.
 */
@interface FIRAuthWebViewController : UIViewController

/** @fn initWithNibName:bundle:
 *  @brief Please call initWithURL:delegate:
 */
- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil
                         bundle:(nullable NSBundle *)nibBundleOrNil NS_UNAVAILABLE;

/** @fn initWithCoder:
 *  @brief Please call initWithURL:delegate:
 */
- (instancetype)initWithCoder:(NSCoder *)aDecoder NS_UNAVAILABLE;

- (instancetype)initWithURL:(NSURL *)URL
                   delegate:(__weak id<FIRAuthWebViewControllerDelegate>)delegate
    NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/FIRAuthWebViewController.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/NSData+FIRBase64.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@interface NSData (FIRBase64)

/** @fn fir_base64URLEncodedStringWithOptions:
    @brief Get a web safe base64 encoded string
    @param options The base64 encoding options
 */
- (NSString *)fir_base64URLEncodedStringWithOptions:(NSDataBase64EncodingOptions)options;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseAuth/Sources/Utilities/NSData+FIRBase64.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRAppInternal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <FirebaseCore/FIRApp.h>

@class FIRComponentContainer;
@class FIRHeartbeatLogger;
@protocol FIRLibrary;

/**
 * The internal interface to `FirebaseApp`. This is meant for first-party integrators, who need to
 * receive `FirebaseApp` notifications, log info about the success or failure of their
 * configuration, and access other internal functionality of `FirebaseApp`.
 */
NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSInteger, FIRConfigType) {
  FIRConfigTypeCore = 1,
  FIRConfigTypeSDK = 2,
};

extern NSString *const kFIRDefaultAppName;
extern NSString *const kFIRAppReadyToConfigureSDKNotification;
extern NSString *const kFIRAppDeleteNotification;
extern NSString *const kFIRAppIsDefaultAppKey;
extern NSString *const kFIRAppNameKey;
extern NSString *const kFIRGoogleAppIDKey;
extern NSString *const kFirebaseCoreErrorDomain;

/** The `UserDefaults` suite name for `FirebaseCore`, for those storage locations that use it. */
extern NSString *const kFirebaseCoreDefaultsSuiteName;

/**
 * The format string for the `UserDefaults` key used for storing the data collection enabled flag.
 * This includes formatting to append the `FirebaseApp`'s name.
 */
extern NSString *const kFIRGlobalAppDataCollectionEnabledDefaultsKeyFormat;

/**
 * The plist key used for storing the data collection enabled flag.
 */
extern NSString *const kFIRGlobalAppDataCollectionEnabledPlistKey;

/** @var FirebaseAuthStateDidChangeInternalNotification
 @brief The name of the @c NotificationCenter notification which is posted when the auth state
 changes (e.g. a new token has been produced, a user logs in or out). The object parameter of
 the notification is a dictionary possibly containing the key:
 @c FirebaseAuthStateDidChangeInternalNotificationTokenKey (the new access token.) If it does not
 contain this key it indicates a sign-out event took place.
 */
extern NSString *const FIRAuthStateDidChangeInternalNotification;

/** @var FirebaseAuthStateDidChangeInternalNotificationTokenKey
 @brief A key present in the dictionary object parameter of the
 @c FirebaseAuthStateDidChangeInternalNotification notification. The value associated with this
 key will contain the new access token.
 */
extern NSString *const FIRAuthStateDidChangeInternalNotificationTokenKey;

/** @var FirebaseAuthStateDidChangeInternalNotificationAppKey
 @brief A key present in the dictionary object parameter of the
 @c FirebaseAuthStateDidChangeInternalNotification notification. The value associated with this
 key will contain the FirebaseApp associated with the auth instance.
 */
extern NSString *const FIRAuthStateDidChangeInternalNotificationAppKey;

/** @var FirebaseAuthStateDidChangeInternalNotificationUIDKey
 @brief A key present in the dictionary object parameter of the
 @c FirebaseAuthStateDidChangeInternalNotification notification. The value associated with this
 key will contain the new user's UID (or nil if there is no longer a user signed in).
 */
extern NSString *const FIRAuthStateDidChangeInternalNotificationUIDKey;

@interface FIRApp ()

/**
 * A flag indicating if this is the default app (has the default app name).
 */
@property(nonatomic, readonly) BOOL isDefaultApp;

/**
 * The container of interop SDKs for this app.
 */
@property(nonatomic) FIRComponentContainer *container;

/**
 * The heartbeat logger associated with this app.
 *
 * Firebase apps have a 1:1 relationship with heartbeat loggers.
 */
@property(readonly) FIRHeartbeatLogger *heartbeatLogger;

/**
 * Checks if the default app is configured without trying to configure it.
 */
+ (BOOL)isDefaultAppConfigured;

/**
 * Registers a given third-party library with the given version number to be reported for
 * analytics.
 *
 * @param name Name of the library.
 * @param version Version of the library.
 */
+ (void)registerLibrary:(nonnull NSString *)name withVersion:(nonnull NSString *)version;

/**
 * Registers a given internal library to be reported for analytics.
 *
 * @param library Optional parameter for component registration.
 * @param name Name of the library.
 */
+ (void)registerInternalLibrary:(nonnull Class<FIRLibrary>)library
                       withName:(nonnull NSString *)name;

/**
 * Registers a given internal library with the given version number to be reported for
 * analytics. This should only be used for non-Firebase libraries that have their own versioning
 * scheme.
 *
 * @param library Optional parameter for component registration.
 * @param name Name of the library.
 * @param version Version of the library.
 */
+ (void)registerInternalLibrary:(nonnull Class<FIRLibrary>)library
                       withName:(nonnull NSString *)name
                    withVersion:(nonnull NSString *)version;

/**
 * A concatenated string representing all the third-party libraries and version numbers.
 */
+ (NSString *)firebaseUserAgent;

/**
 * Can be used by the unit tests in each SDK to reset `FirebaseApp`. This method is thread unsafe.
 */
+ (void)resetApps;

/**
 * Can be used by the unit tests in each SDK to set customized options.
 */
- (instancetype)initInstanceWithName:(NSString *)name options:(FIROptions *)options;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRAppInternal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRComponent.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRApp;
@class FIRComponentContainer;

NS_ASSUME_NONNULL_BEGIN

/// Provides a system to clean up cached instances returned from the component system.
NS_SWIFT_NAME(ComponentLifecycleMaintainer)
@protocol FIRComponentLifecycleMaintainer
/// The associated app will be deleted, clean up any resources as they are about to be deallocated.
- (void)appWillBeDeleted:(FIRApp *)app;
@end

typedef _Nullable id (^FIRComponentCreationBlock)(FIRComponentContainer *container,
                                                  BOOL *isCacheable)
    NS_SWIFT_NAME(ComponentCreationBlock);

@class FIRDependency;

/// Describes the timing of instantiation. Note: new components should default to lazy unless there
/// is a strong reason to be eager.
typedef NS_ENUM(NSInteger, FIRInstantiationTiming) {
  FIRInstantiationTimingLazy,
  FIRInstantiationTimingAlwaysEager,
  FIRInstantiationTimingEagerInDefaultApp
} NS_SWIFT_NAME(InstantiationTiming);

/// A component that can be used from other Firebase SDKs.
NS_SWIFT_NAME(Component)
@interface FIRComponent : NSObject

/// The protocol describing functionality provided from the `Component`.
@property(nonatomic, strong, readonly) Protocol *protocol;

/// The timing of instantiation.
@property(nonatomic, readonly) FIRInstantiationTiming instantiationTiming;

/// An array of dependencies for the component.
@property(nonatomic, copy, readonly) NSArray<FIRDependency *> *dependencies;

/// A block to instantiate an instance of the component with the appropriate dependencies.
@property(nonatomic, copy, readonly) FIRComponentCreationBlock creationBlock;

// There's an issue with long NS_SWIFT_NAMES that causes compilation to fail, disable clang-format
// for the next two methods.
// clang-format off

/// Creates a component with no dependencies that will be lazily initialized.
+ (instancetype)componentWithProtocol:(Protocol *)protocol
                        creationBlock:(FIRComponentCreationBlock)creationBlock
NS_SWIFT_NAME(init(_:creationBlock:));

/// Creates a component to be registered with the component container.
///
/// @param protocol - The protocol describing functionality provided by the component.
/// @param instantiationTiming - When the component should be initialized. Use .lazy unless there's
///                              a good reason to be instantiated earlier.
/// @param dependencies - Any dependencies the `implementingClass` has, optional or required.
/// @param creationBlock - A block to instantiate the component with a container, and if
/// @return A component that can be registered with the component container.
+ (instancetype)componentWithProtocol:(Protocol *)protocol
                  instantiationTiming:(FIRInstantiationTiming)instantiationTiming
                         dependencies:(NSArray<FIRDependency *> *)dependencies
                        creationBlock:(FIRComponentCreationBlock)creationBlock
NS_SWIFT_NAME(init(_:instantiationTiming:dependencies:creationBlock:));

// clang-format on

/// Unavailable.
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRComponent.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRComponentContainer.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/// A type-safe macro to retrieve a component from a container. This should be used to retrieve
/// components instead of using the container directly.
#define FIR_COMPONENT(type, container) \
  [FIRComponentType<id<type>> instanceForProtocol:@protocol(type) inContainer:container]

@class FIRApp;

/// A container that holds different components that are registered via the
/// `registerAsComponentRegistrant` call. These classes should conform to `ComponentRegistrant`
/// in order to properly register components for Core.
NS_SWIFT_NAME(FirebaseComponentContainer)
@interface FIRComponentContainer : NSObject

/// A weak reference to the app that an instance of the container belongs to.
@property(nonatomic, weak, readonly) FIRApp *app;

// TODO: See if we can get improved type safety here.
/// A Swift only API for fetching an instance since the top macro isn't available.
- (nullable id)__instanceForProtocol:(Protocol *)protocol NS_SWIFT_NAME(instance(for:));

/// Unavailable. Use the `container` property on `FirebaseApp`.
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRComponentContainer.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRComponentType.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRComponentContainer;

NS_ASSUME_NONNULL_BEGIN

/// Do not use directly. A placeholder type in order to provide a macro that will warn users of
/// mis-matched protocols.
NS_SWIFT_NAME(ComponentType)
@interface FIRComponentType<__covariant T> : NSObject

/// Do not use directly. A factory method to retrieve an instance that provides a specific
/// functionality.
+ (nullable T)instanceForProtocol:(Protocol *)protocol
                      inContainer:(FIRComponentContainer *)container;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRComponentType.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRDependency.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/// A dependency on a specific protocol's functionality.
NS_SWIFT_NAME(Dependency)
@interface FIRDependency : NSObject

/// The protocol describing functionality being depended on.
@property(nonatomic, strong, readonly) Protocol *protocol;

/// A flag to specify if the dependency is required or not.
@property(nonatomic, readonly) BOOL isRequired;

/// Initializes a dependency that is required. Calls `init(protocol:isRequired:)` with true for
/// the required parameter.
/// Creates a required dependency on the specified protocol's functionality.
+ (instancetype)dependencyWithProtocol:(Protocol *)protocol;

/// Creates a dependency on the specified protocol's functionality and specify if it's required for
/// the class's functionality.
+ (instancetype)dependencyWithProtocol:(Protocol *)protocol isRequired:(BOOL)required;

/// Use `init(withProtocol:isRequired:)` instead.
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRDependency.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRHeartbeatLogger.h
===
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

#ifndef FIREBASE_BUILD_CMAKE
@class FIRHeartbeatsPayload;
#endif  // FIREBASE_BUILD_CMAKE

/// Enum representing different daily heartbeat codes.
/// This enum is only used by clients using platform logging V1. This is because
/// the V1 payload only supports a single daily heartbeat.
typedef NS_ENUM(NSInteger, FIRDailyHeartbeatCode) {
  /// Represents the absence of a daily heartbeat.
  FIRDailyHeartbeatCodeNone = 0,
  /// Represents the presence of a daily heartbeat.
  FIRDailyHeartbeatCodeSome = 2,
};

@protocol FIRHeartbeatLoggerProtocol <NSObject>

/// Asynchronously logs a heartbeat.
- (void)log;

#ifndef FIREBASE_BUILD_CMAKE
/// Flushes heartbeats from storage into a structured payload of heartbeats.
- (FIRHeartbeatsPayload *)flushHeartbeatsIntoPayload;
#endif  // FIREBASE_BUILD_CMAKE

/// Gets the heartbeat code for today.
- (FIRDailyHeartbeatCode)heartbeatCodeForToday;

@end

#ifndef FIREBASE_BUILD_CMAKE
/// Returns a nullable string header value from a given heartbeats payload.
///
/// This API returns `nil` when the given heartbeats payload is considered empty.
///
/// @param heartbeatsPayload The heartbeats payload.
NSString *_Nullable FIRHeaderValueFromHeartbeatsPayload(FIRHeartbeatsPayload *heartbeatsPayload);
#endif  // FIREBASE_BUILD_CMAKE

/// A thread safe, synchronized object that logs and flushes platform logging info.
@interface FIRHeartbeatLogger : NSObject <FIRHeartbeatLoggerProtocol>

/// Designated initializer.
///
/// @param appID The app ID that this heartbeat logger corresponds to.
- (instancetype)initWithAppID:(NSString *)appID;

/// Asynchronously logs a new heartbeat corresponding to the Firebase User Agent, if needed.
///
/// @note This API is thread-safe.
- (void)log;

#ifndef FIREBASE_BUILD_CMAKE
/// Flushes heartbeats from storage into a structured payload of heartbeats.
///
/// This API is for clients using platform logging V2.
///
/// @note This API is thread-safe.
/// @return A payload of heartbeats.
- (FIRHeartbeatsPayload *)flushHeartbeatsIntoPayload;
#endif  // FIREBASE_BUILD_CMAKE

/// Gets today's corresponding heartbeat code.
///
/// This API is for clients using platform logging V1.
///
/// @note This API is thread-safe.
/// @return Heartbeat code indicating whether or not there is an unsent global heartbeat.
- (FIRDailyHeartbeatCode)heartbeatCodeForToday;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRHeartbeatLogger.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRLibrary.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef FIRLibrary_h
#define FIRLibrary_h

#import <Foundation/Foundation.h>

@class FIRApp;
@class FIRComponent;

NS_ASSUME_NONNULL_BEGIN

/// Provide an interface to register a library for userAgent logging and availability to others.
NS_SWIFT_NAME(Library)
@protocol FIRLibrary

/// Returns one or more Components that will be registered in
/// FirebaseApp and participate in dependency resolution and injection.
+ (NSArray<FIRComponent *> *)componentsToRegister;

@optional
/// Implement this method if the library needs notifications for lifecycle events. This method is
/// called when the developer calls `FirebaseApp.configure()`.
+ (void)configureWithApp:(FIRApp *)app;

@end

NS_ASSUME_NONNULL_END

#endif /* FIRLibrary_h */

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRLibrary.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRLogger.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import <FirebaseCore/FIRLoggerLevel.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * The Firebase services used in Firebase logger.
 */
typedef NSString *const FIRLoggerService;

extern FIRLoggerService kFIRLoggerAnalytics;
extern FIRLoggerService kFIRLoggerCrash;
extern FIRLoggerService kFIRLoggerCore;
extern FIRLoggerService kFIRLoggerRemoteConfig;

/**
 * The key used to store the logger's error count.
 */
extern NSString *const kFIRLoggerErrorCountKey;

/**
 * The key used to store the logger's warning count.
 */
extern NSString *const kFIRLoggerWarningCountKey;

#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

/**
 * Enables or disables Analytics debug mode.
 * If set to true, the logging level for Analytics will be set to FirebaseLoggerLevelDebug.
 * Enabling the debug mode has no effect if the app is running from App Store.
 * (required) analytics debug mode flag.
 */
void FIRSetAnalyticsDebugMode(BOOL analyticsDebugMode);

/**
 * Gets the current FIRLoggerLevel.
 */
FIRLoggerLevel FIRGetLoggerLevel(void);

/**
 * Changes the default logging level of FirebaseLoggerLevelNotice to a user-specified level.
 * The default level cannot be set above FirebaseLoggerLevelNotice if the app is running from App
 * Store. (required) log level (one of the FirebaseLoggerLevel enum values).
 */
void FIRSetLoggerLevel(FIRLoggerLevel loggerLevel);

/**
 * Checks if the specified logger level is loggable given the current settings.
 * (required) log level (one of the FirebaseLoggerLevel enum values).
 * (required) whether or not this function is called from the Analytics component.
 */
BOOL FIRIsLoggableLevel(FIRLoggerLevel loggerLevel, BOOL analyticsComponent);

/**
 * Logs a message to the Xcode console and the device log. If running from AppStore, will
 * not log any messages with a level higher than FirebaseLoggerLevelNotice to avoid log spamming.
 * (required) log level (one of the FirebaseLoggerLevel enum values).
 * (required) service name of type FirebaseLoggerService.
 * (required) message code starting with "I-" which means iOS, followed by a capitalized
 *            three-character service identifier and a six digit integer message ID that is unique
 *            within the service.
 *            An example of the message code is @"I-COR000001".
 * (required) message string which can be a format string.
 * (optional) variable arguments list obtained from calling va_start, used when message is a format
 *            string.
 */
extern void FIRLogBasic(FIRLoggerLevel level,
                        FIRLoggerService service,
                        NSString *messageCode,
                        NSString *message,
// On 64-bit simulators, va_list is not a pointer, so cannot be marked nullable
// See: http://stackoverflow.com/q/29095469
#if __LP64__ && TARGET_OS_SIMULATOR || TARGET_OS_OSX
                        va_list args_ptr
#else
                        va_list _Nullable args_ptr
#endif
);

/**
 * The following functions accept the following parameters in order:
 * (required) service name of type FirebaseLoggerService.
 * (required) message code starting from "I-" which means iOS, followed by a capitalized
 *            three-character service identifier and a six digit integer message ID that is unique
 *            within the service.
 *            An example of the message code is @"I-COR000001".
 *            See go/firebase-log-proposal for details.
 * (required) message string which can be a format string.
 * (optional) the list of arguments to substitute into the format string.
 * Example usage:
 * FirebaseLogError(kFirebaseLoggerCore, @"I-COR000001", @"Configuration of %@ failed.", app.name);
 */
extern void FIRLogError(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);
extern void FIRLogWarning(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);
extern void FIRLogNotice(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);
extern void FIRLogInfo(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);
extern void FIRLogDebug(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);

// TODO: Come up with a better logging scheme for Swift.
/**
 * Logs a debug message to the Xcode console and the device log. If running from AppStore, will
 * not log any messages with a level higher than FirebaseLoggerLevelNotice to avoid log spamming.
 * This function is intended to be used by Swift clients that do not support variadic parameters.
 *
 * @param service The service name of type `FirebaseLoggerService`.
 * @param messageCode The mesage code. starting with "I-" which means iOS, followed by a capitalized
 * three-character service identifier and a six digit integer message ID that is unique within the
 * service. An example of the message code is @"I-COR000001".
 * @param message The message string.
 */
extern void FIRLogDebugSwift(FIRLoggerService service, NSString *messageCode, NSString *message);

/**
 * Logs a warning message to the Xcode console and the device log. If running from AppStore, will
 * not log any messages with a level higher than FirebaseLoggerLevelNotice to avoid log spamming.
 * This function is intended to be used by Swift clients that do not support variadic parameters.
 *
 * @param service The service name of type `FirebaseLoggerService`.
 * @param messageCode The mesage code. starting with "I-" which means iOS, followed by a capitalized
 * three-character service identifier and a six digit integer message ID that is unique within the
 * service. An example of the message code is @"I-COR000001".
 * @param message The message string.
 */
extern void FIRLogWarningSwift(FIRLoggerService service, NSString *messageCode, NSString *message);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

NS_SWIFT_NAME(FirebaseLogger)
@interface FIRLoggerWrapper : NSObject

/// Logs a given message at a given log level. This API is effectively a wrapper for the
/// `FIRLogBasic` C API.
///
/// - Parameters:
///   - level: The log level to use (defined by `FirebaseLoggerLevel` enum values).
///   - service: The service name of type `FirebaseLoggerService`.
///   - code: The mesage code. Starting with "I-" which means iOS, followed by a capitalized
///   three-character service identifier and a six digit integer message ID that is unique within
///   the service. An example of the message code is @"I-COR000001".
///   - message: Formatted string to be used as the log's message.
///   - args: Arguments list obtained from calling `va_start`, used when message is a format string.
+ (void)logWithLevel:(FIRLoggerLevel)level
         withService:(FIRLoggerService)service
            withCode:(NSString *)messageCode
         withMessage:(NSString *)message
            withArgs:(va_list)args;

/// Logs a given message at a given log level.
///
/// - Parameters:
///   - level: The log level to use (defined by `FirebaseLoggerLevel` enum values).
///   - service: The service name of type `FirebaseLoggerService`.
///   - code: The mesage code. Starting with "I-" which means iOS, followed by a capitalized
///   three-character service identifier and a six digit integer message ID that is unique within
///   the service. An example of the message code is @"I-COR000001".
///   - message: Formatted string to be used as the log's message.
///   - args: Arguments list obtained from calling `va_start`, used when message is a format string.
+ (void)logWithLevel:(FIRLoggerLevel)level
             service:(FIRLoggerService)service
                code:(NSString *)code
             message:(NSString *)message
    __attribute__((__swift_name__("log(level:service:code:message:)")));

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIRLogger.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIROptionsInternal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <FirebaseCore/FIROptions.h>

/**
 * Keys for the strings in the plist file.
 */
extern NSString *const kFIRAPIKey;
extern NSString *const kFIRTrackingID;
extern NSString *const kFIRGoogleAppID;
extern NSString *const kFIRClientID;
extern NSString *const kFIRGCMSenderID;
extern NSString *const kFIRAndroidClientID;
extern NSString *const kFIRDatabaseURL;
extern NSString *const kFIRStorageBucket;
extern NSString *const kFIRBundleID;
extern NSString *const kFIRProjectID;

/**
 * Keys for the plist file name
 */
extern NSString *const kServiceInfoFileName;

extern NSString *const kServiceInfoFileType;

/**
 * This header file exposes the initialization of FirebaseOptions to internal use.
 */
@interface FIROptions ()

/**
 * `resetDefaultOptions` and `initInternalWithOptionsDictionary` are exposed only for unit tests.
 */
+ (void)resetDefaultOptions;

/**
 * Initializes the options with dictionary. The above strings are the keys of the dictionary.
 * This is the designated initializer.
 */
- (instancetype)initInternalWithOptionsDictionary:(NSDictionary *)serviceInfoDictionary
    NS_DESIGNATED_INITIALIZER;

/**
 * `defaultOptions` and `defaultOptionsDictionary` are exposed in order to be used in FirebaseApp
 * and other first party services.
 */
+ (FIROptions *)defaultOptions;

+ (NSDictionary *)defaultOptionsDictionary;

/**
 * Indicates whether or not Analytics collection was explicitly enabled via a plist flag or at
 * runtime.
 */
@property(nonatomic, readonly) BOOL isAnalyticsCollectionExplicitlySet;

/**
 * Whether or not Analytics Collection was enabled. Analytics Collection is enabled unless
 * explicitly disabled in GoogleService-Info.plist.
 */
@property(nonatomic, readonly) BOOL isAnalyticsCollectionEnabled;

/**
 * Whether or not Analytics Collection was completely disabled. If true, then
 * isAnalyticsCollectionEnabled will be false.
 */
@property(nonatomic, readonly) BOOL isAnalyticsCollectionDeactivated;

/**
 * The version ID of the client library, e.g. @"1100000".
 */
@property(nonatomic, readonly, copy) NSString *libraryVersionID;

/**
 * The flag indicating whether this object was constructed with the values in the default plist
 * file.
 */
@property(nonatomic) BOOL usingOptionsFromDefaultPlist;

/**
 * Whether or not Measurement was enabled. Measurement is enabled unless explicitly disabled in
 * GoogleService-Info.plist.
 */
@property(nonatomic, readonly) BOOL isMeasurementEnabled;

/**
 * Whether or not editing is locked. This should occur after `FirebaseOptions` has been set on a
 * `FirebaseApp`.
 */
@property(nonatomic, getter=isEditingLocked) BOOL editingLocked;

@end

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FIROptionsInternal.h ===

===
Path: iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FirebaseCoreInternal.h
===
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@import FirebaseCore;

#import "FIRAppInternal.h"
#import "FIRComponent.h"
#import "FIRComponentContainer.h"
#import "FIRComponentType.h"
#import "FIRDependency.h"
#import "FIRHeartbeatLogger.h"
#import "FIRLibrary.h"
#import "FIRLogger.h"
#import "FIROptionsInternal.h"

=== end iosApp/Pods/FirebaseAuth/FirebaseCore/Extension/FirebaseCoreInternal.h ===

===
Path: iosApp/Pods/FirebaseAuth/README.md
===
<p align="center">
  <a href="https://cocoapods.org/pods/Firebase">
    <img src="https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=CocoaPods"/>
  </a>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=Swift%20Package%20Index&color=red"/>
  </a>
  <a href="https://cocoapods.org/pods/Firebase">
    <img src="https://img.shields.io/github/license/Firebase/firebase-ios-sdk?style=flat"/>
  </a><br/>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dplatforms"/>
  </a>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dswift-versions"/>
  </a>
</p>

# Firebase Apple Open Source Development

This repository contains the source code for all Apple platform Firebase SDKs except FirebaseAnalytics.

Firebase is an app development platform with tools to help you build, grow, and
monetize your app. More information about Firebase can be found on the
[official Firebase website](https://firebase.google.com).

## Installation

See the subsections below for details about the different installation methods. Where
available, it's recommended to install any libraries with a `Swift` suffix to get the
best experience when writing your app in Swift.

1. [Standard pod install](#standard-pod-install)
2. [Swift Package Manager](#swift-package-manager)
3. [Installing from the GitHub repo](#installing-from-github)
4. [Experimental Carthage](#carthage-ios-only)

### Standard pod install

For instructions on the standard pod install, visit:
[https://firebase.google.com/docs/ios/setup](https://firebase.google.com/docs/ios/setup).

### Swift Package Manager

Instructions for [Swift Package Manager](https://swift.org/package-manager/) support can be
found in the [SwiftPackageManager.md](SwiftPackageManager.md) Markdown file.

### Installing from GitHub

These instructions can be used to access the Firebase repo at other branches,
tags, or commits.

#### Background

See [the Podfile Syntax Reference](https://guides.cocoapods.org/syntax/podfile.html#pod)
for instructions and options about overriding pod source locations.

#### Accessing Firebase Source Snapshots

All official releases are tagged in this repo and available via CocoaPods. To access a local
source snapshot or unreleased branch, use Podfile directives like the following:

To access FirebaseFirestore via a branch:
```ruby
pod 'FirebaseCore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'
pod 'FirebaseFirestore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'
```

To access FirebaseMessaging via a checked-out version of the firebase-ios-sdk repo:
```ruby
pod 'FirebaseCore', :path => '/path/to/firebase-ios-sdk'
pod 'FirebaseMessaging', :path => '/path/to/firebase-ios-sdk'
```

### Carthage (iOS only)

Instructions for the experimental Carthage distribution can be found at
[Carthage.md](Carthage.md).

### Using Firebase from a Framework or a library

For details on using Firebase from a Framework or a library, refer to [firebase_in_libraries.md](docs/firebase_in_libraries.md).

## Development

To develop Firebase software in this repository, ensure that you have at least
the following software:

* Xcode 15.2 (or later)

CocoaPods is still the canonical way to develop, but much of the repo now supports
development with Swift Package Manager.

### CocoaPods

Install the following:
* CocoaPods 1.12.0 (or later)
* [CocoaPods generate](https://github.com/square/cocoapods-generate)

For the pod that you want to develop:

```ruby
pod gen Firebase{name here}.podspec --local-sources=./ --auto-open --platforms=ios
```

Note: If the CocoaPods cache is out of date, you may need to run
`pod repo update` before the `pod gen` command.

Note: Set the `--platforms` option to `macos` or `tvos` to develop/test for
those platforms. Since 10.2, Xcode does not properly handle multi-platform
CocoaPods workspaces.

Firestore has a self-contained Xcode project. See
[Firestore/README](Firestore/README.md) Markdown file.

#### Development for Catalyst
* `pod gen {name here}.podspec --local-sources=./ --auto-open --platforms=ios`
* Check the Mac box in the App-iOS Build Settings
* Sign the App in the Settings Signing & Capabilities tab
* Click Pods in the Project Manager
* Add Signing to the iOS host app and unit test targets
* Select the Unit-unit scheme
* Run it to build and test

Alternatively, disable signing in each target:
* Go to Build Settings tab
* Click `+`
* Select `Add User-Defined Setting`
* Add `CODE_SIGNING_REQUIRED` setting with a value of `NO`

### Swift Package Manager
* To enable test schemes: `./scripts/setup_spm_tests.sh`
* `open Package.swift` or double click `Package.swift` in Finder.
* Xcode will open the project
  * Choose a scheme for a library to build or test suite to run
  * Choose a target platform by selecting the run destination along with the scheme

### Adding a New Firebase Pod

Refer to [AddNewPod](AddNewPod.md) Markdown file for details.

### Managing Headers and Imports

For information about managing headers and imports, see [HeadersImports](HeadersImports.md) Markdown file.

### Code Formatting

To ensure that the code is formatted consistently, run the script
[./scripts/check.sh](https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/check.sh)
before creating a pull request (PR).

GitHub Actions will verify that any code changes are done in a style-compliant
way. Install `clang-format` and `mint`:

```console
brew install clang-format@18
brew install mint
```

### Running Unit Tests

Select a scheme and press Command-u to build a component and run its unit tests.

### Running Sample Apps
To run the sample apps and integration tests, you'll need a valid
`GoogleService-Info.plist
` file. The Firebase Xcode project contains dummy plist
files without real values, but they can be replaced with real plist files. To get your own
`GoogleService-Info.plist` files:

1. Go to the [Firebase Console](https://console.firebase.google.com/)
2. Create a new Firebase project, if you don't already have one
3. For each sample app you want to test, create a new Firebase app with the sample app's bundle
identifier (e.g., `com.google.Database-Example`)
4. Download the resulting `GoogleService-Info.plist` and add it to the Xcode project.

### Coverage Report Generation

For coverage report generation instructions, see [scripts/code_coverage_report/README](scripts/code_coverage_report/README.md) Markdown file.

## Specific Component Instructions
See the sections below for any special instructions for those components.

### Firebase Auth

For specific Firebase Auth development, refer to the [Auth Sample README](FirebaseAuth/Tests/Sample/README.md) for instructions about
building and running the FirebaseAuth pod along with various samples and tests.

### Firebase Database

The Firebase Database Integration tests can be run against a locally running Database Emulator
or against a production instance.

To run against a local emulator instance, invoke `./scripts/run_database_emulator.sh start` before
running the integration test.

To run against a production instance, provide a valid `GoogleServices-Info.plist` and copy it to
`FirebaseDatabase/Tests/Resources/GoogleService-Info.plist`. Your Security Rule must be set to
[public](https://firebase.google.com/docs/database/security/quickstart) while your tests are
running.

### Firebase Dynamic Links

Firebase Dynamic Links is **deprecated** and should not be used in new projects. The service will shut down on August 25, 2025.

Please see our [Dynamic Links Deprecation FAQ documentation](https://firebase.google.com/support/dynamic-links-faq) for more guidance.

### Firebase Performance Monitoring

For specific Firebase Performance Monitoring development, see
[the Performance README](FirebasePerformance/README.md) for instructions about building the SDK
and [the Performance TestApp README](FirebasePerformance/Tests/TestApp/README.md) for instructions about
integrating Performance with the dev test App.

### Firebase Storage

To run the Storage Integration tests, follow the instructions in
[StorageIntegration.swift](FirebaseStorage/Tests/Integration/StorageIntegration.swift).

#### Push Notifications

Push notifications can only be delivered to specially provisioned App IDs in the developer portal.
In order to test receiving push notifications, you will need to:

1. Change the bundle identifier of the sample app to something you own in your Apple Developer
account and enable that App ID for push notifications.
2. You'll also need to
[upload your APNs Provider Authentication Key or certificate to the
Firebase Console](https://firebase.google.com/docs/cloud-messaging/ios/certs)
at **Project Settings > Cloud Messaging > [Your Firebase App]**.
3. Ensure your iOS device is added to your Apple Developer portal as a test device.

#### iOS Simulator

The iOS Simulator cannot register for remote notifications and will not receive push notifications.
To receive push notifications, follow the steps above and run the app on a physical device.

## Building with Firebase on Apple platforms

Firebase provides official beta support for macOS, Catalyst, and tvOS. visionOS and watchOS
are community supported. Thanks to community contributions for many of the multi-platform PRs.

At this time, most of Firebase's products are available across Apple platforms. There are still
a few gaps, especially on visionOS and watchOS. For details about the current support matrix, see
[this chart](https://firebase.google.com/docs/ios/learn-more#firebase_library_support_by_platform)
in Firebase's documentation.

### visionOS

Where supported, visionOS works as expected with the exception of Firestore via Swift Package
Manager where it is required to use the source distribution.

To enable the Firestore source distribution, quit Xcode and open the desired
project from the command line with the `FIREBASE_SOURCE_FIRESTORE` environment
variable: `open --env FIREBASE_SOURCE_FIRESTORE /path/to/project.xcodeproj`.
To go back to using the binary distribution of Firestore, quit Xcode and open
Xcode like normal, without the environment variable.

### watchOS
Thanks to contributions from the community, many of Firebase SDKs now compile, run unit tests, and
work on watchOS. See the [Independent Watch App Sample](Example/watchOSSample).

Keep in mind that watchOS is not officially supported by Firebase. While we can catch basic unit
test issues with GitHub Actions, there may be some changes where the SDK no longer works as expected
on watchOS. If you encounter this, please
[file an issue](https://github.com/firebase/firebase-ios-sdk/issues).

During app setup in the console, you may get to a step that mentions something like "Checking if the
app has communicated with our servers". This relies on Analytics and will not work on watchOS.
**It's safe to ignore the message and continue**, the rest of the SDKs will work as expected.

#### Additional Crashlytics Notes
* watchOS has limited support. Due to watchOS restrictions, mach exceptions and signal crashes are
not recorded. (Crashes in SwiftUI are generated as mach exceptions, so will not be recorded)

## Combine
Thanks to contributions from the community, _FirebaseCombineSwift_ contains support for Apple's Combine
framework. This module is currently under development and not yet supported for use in production
environments. For more details, please refer to the [docs](FirebaseCombineSwift/README.md).

## Roadmap

See [Roadmap](ROADMAP.md) for more about the Firebase Apple SDK Open Source
plans and directions.

## Contributing

See [Contributing](CONTRIBUTING.md) for more information on contributing to the Firebase
Apple SDK.

## License

The contents of this repository are licensed under the
[Apache License, version 2.0](http://www.apache.org/licenses/LICENSE-2.0).

Your use of Firebase is governed by the
[Terms of Service for Firebase Services](https://firebase.google.com/terms/).

=== end iosApp/Pods/FirebaseAuth/README.md ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRAppInternal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <FirebaseCore/FIRApp.h>

@class FIRComponentContainer;
@class FIRHeartbeatLogger;
@protocol FIRLibrary;

/**
 * The internal interface to `FirebaseApp`. This is meant for first-party integrators, who need to
 * receive `FirebaseApp` notifications, log info about the success or failure of their
 * configuration, and access other internal functionality of `FirebaseApp`.
 */
NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSInteger, FIRConfigType) {
  FIRConfigTypeCore = 1,
  FIRConfigTypeSDK = 2,
};

extern NSString *const kFIRDefaultAppName;
extern NSString *const kFIRAppReadyToConfigureSDKNotification;
extern NSString *const kFIRAppDeleteNotification;
extern NSString *const kFIRAppIsDefaultAppKey;
extern NSString *const kFIRAppNameKey;
extern NSString *const kFIRGoogleAppIDKey;
extern NSString *const kFirebaseCoreErrorDomain;

/** The `UserDefaults` suite name for `FirebaseCore`, for those storage locations that use it. */
extern NSString *const kFirebaseCoreDefaultsSuiteName;

/**
 * The format string for the `UserDefaults` key used for storing the data collection enabled flag.
 * This includes formatting to append the `FirebaseApp`'s name.
 */
extern NSString *const kFIRGlobalAppDataCollectionEnabledDefaultsKeyFormat;

/**
 * The plist key used for storing the data collection enabled flag.
 */
extern NSString *const kFIRGlobalAppDataCollectionEnabledPlistKey;

/** @var FirebaseAuthStateDidChangeInternalNotification
 @brief The name of the @c NotificationCenter notification which is posted when the auth state
 changes (e.g. a new token has been produced, a user logs in or out). The object parameter of
 the notification is a dictionary possibly containing the key:
 @c FirebaseAuthStateDidChangeInternalNotificationTokenKey (the new access token.) If it does not
 contain this key it indicates a sign-out event took place.
 */
extern NSString *const FIRAuthStateDidChangeInternalNotification;

/** @var FirebaseAuthStateDidChangeInternalNotificationTokenKey
 @brief A key present in the dictionary object parameter of the
 @c FirebaseAuthStateDidChangeInternalNotification notification. The value associated with this
 key will contain the new access token.
 */
extern NSString *const FIRAuthStateDidChangeInternalNotificationTokenKey;

/** @var FirebaseAuthStateDidChangeInternalNotificationAppKey
 @brief A key present in the dictionary object parameter of the
 @c FirebaseAuthStateDidChangeInternalNotification notification. The value associated with this
 key will contain the FirebaseApp associated with the auth instance.
 */
extern NSString *const FIRAuthStateDidChangeInternalNotificationAppKey;

/** @var FirebaseAuthStateDidChangeInternalNotificationUIDKey
 @brief A key present in the dictionary object parameter of the
 @c FirebaseAuthStateDidChangeInternalNotification notification. The value associated with this
 key will contain the new user's UID (or nil if there is no longer a user signed in).
 */
extern NSString *const FIRAuthStateDidChangeInternalNotificationUIDKey;

@interface FIRApp ()

/**
 * A flag indicating if this is the default app (has the default app name).
 */
@property(nonatomic, readonly) BOOL isDefaultApp;

/**
 * The container of interop SDKs for this app.
 */
@property(nonatomic) FIRComponentContainer *container;

/**
 * The heartbeat logger associated with this app.
 *
 * Firebase apps have a 1:1 relationship with heartbeat loggers.
 */
@property(readonly) FIRHeartbeatLogger *heartbeatLogger;

/**
 * Checks if the default app is configured without trying to configure it.
 */
+ (BOOL)isDefaultAppConfigured;

/**
 * Registers a given third-party library with the given version number to be reported for
 * analytics.
 *
 * @param name Name of the library.
 * @param version Version of the library.
 */
+ (void)registerLibrary:(nonnull NSString *)name withVersion:(nonnull NSString *)version;

/**
 * Registers a given internal library to be reported for analytics.
 *
 * @param library Optional parameter for component registration.
 * @param name Name of the library.
 */
+ (void)registerInternalLibrary:(nonnull Class<FIRLibrary>)library
                       withName:(nonnull NSString *)name;

/**
 * Registers a given internal library with the given version number to be reported for
 * analytics. This should only be used for non-Firebase libraries that have their own versioning
 * scheme.
 *
 * @param library Optional parameter for component registration.
 * @param name Name of the library.
 * @param version Version of the library.
 */
+ (void)registerInternalLibrary:(nonnull Class<FIRLibrary>)library
                       withName:(nonnull NSString *)name
                    withVersion:(nonnull NSString *)version;

/**
 * A concatenated string representing all the third-party libraries and version numbers.
 */
+ (NSString *)firebaseUserAgent;

/**
 * Can be used by the unit tests in each SDK to reset `FirebaseApp`. This method is thread unsafe.
 */
+ (void)resetApps;

/**
 * Can be used by the unit tests in each SDK to set customized options.
 */
- (instancetype)initInstanceWithName:(NSString *)name options:(FIROptions *)options;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRAppInternal.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRComponent.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRApp;
@class FIRComponentContainer;

NS_ASSUME_NONNULL_BEGIN

/// Provides a system to clean up cached instances returned from the component system.
NS_SWIFT_NAME(ComponentLifecycleMaintainer)
@protocol FIRComponentLifecycleMaintainer
/// The associated app will be deleted, clean up any resources as they are about to be deallocated.
- (void)appWillBeDeleted:(FIRApp *)app;
@end

typedef _Nullable id (^FIRComponentCreationBlock)(FIRComponentContainer *container,
                                                  BOOL *isCacheable)
    NS_SWIFT_NAME(ComponentCreationBlock);

@class FIRDependency;

/// Describes the timing of instantiation. Note: new components should default to lazy unless there
/// is a strong reason to be eager.
typedef NS_ENUM(NSInteger, FIRInstantiationTiming) {
  FIRInstantiationTimingLazy,
  FIRInstantiationTimingAlwaysEager,
  FIRInstantiationTimingEagerInDefaultApp
} NS_SWIFT_NAME(InstantiationTiming);

/// A component that can be used from other Firebase SDKs.
NS_SWIFT_NAME(Component)
@interface FIRComponent : NSObject

/// The protocol describing functionality provided from the `Component`.
@property(nonatomic, strong, readonly) Protocol *protocol;

/// The timing of instantiation.
@property(nonatomic, readonly) FIRInstantiationTiming instantiationTiming;

/// An array of dependencies for the component.
@property(nonatomic, copy, readonly) NSArray<FIRDependency *> *dependencies;

/// A block to instantiate an instance of the component with the appropriate dependencies.
@property(nonatomic, copy, readonly) FIRComponentCreationBlock creationBlock;

// There's an issue with long NS_SWIFT_NAMES that causes compilation to fail, disable clang-format
// for the next two methods.
// clang-format off

/// Creates a component with no dependencies that will be lazily initialized.
+ (instancetype)componentWithProtocol:(Protocol *)protocol
                        creationBlock:(FIRComponentCreationBlock)creationBlock
NS_SWIFT_NAME(init(_:creationBlock:));

/// Creates a component to be registered with the component container.
///
/// @param protocol - The protocol describing functionality provided by the component.
/// @param instantiationTiming - When the component should be initialized. Use .lazy unless there's
///                              a good reason to be instantiated earlier.
/// @param dependencies - Any dependencies the `implementingClass` has, optional or required.
/// @param creationBlock - A block to instantiate the component with a container, and if
/// @return A component that can be registered with the component container.
+ (instancetype)componentWithProtocol:(Protocol *)protocol
                  instantiationTiming:(FIRInstantiationTiming)instantiationTiming
                         dependencies:(NSArray<FIRDependency *> *)dependencies
                        creationBlock:(FIRComponentCreationBlock)creationBlock
NS_SWIFT_NAME(init(_:instantiationTiming:dependencies:creationBlock:));

// clang-format on

/// Unavailable.
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRComponent.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRComponentContainer.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/// A type-safe macro to retrieve a component from a container. This should be used to retrieve
/// components instead of using the container directly.
#define FIR_COMPONENT(type, container) \
  [FIRComponentType<id<type>> instanceForProtocol:@protocol(type) inContainer:container]

@class FIRApp;

/// A container that holds different components that are registered via the
/// `registerAsComponentRegistrant` call. These classes should conform to `ComponentRegistrant`
/// in order to properly register components for Core.
NS_SWIFT_NAME(FirebaseComponentContainer)
@interface FIRComponentContainer : NSObject

/// A weak reference to the app that an instance of the container belongs to.
@property(nonatomic, weak, readonly) FIRApp *app;

// TODO: See if we can get improved type safety here.
/// A Swift only API for fetching an instance since the top macro isn't available.
- (nullable id)__instanceForProtocol:(Protocol *)protocol NS_SWIFT_NAME(instance(for:));

/// Unavailable. Use the `container` property on `FirebaseApp`.
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRComponentContainer.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRComponentType.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIRComponentContainer;

NS_ASSUME_NONNULL_BEGIN

/// Do not use directly. A placeholder type in order to provide a macro that will warn users of
/// mis-matched protocols.
NS_SWIFT_NAME(ComponentType)
@interface FIRComponentType<__covariant T> : NSObject

/// Do not use directly. A factory method to retrieve an instance that provides a specific
/// functionality.
+ (nullable T)instanceForProtocol:(Protocol *)protocol
                      inContainer:(FIRComponentContainer *)container;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRComponentType.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRDependency.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/// A dependency on a specific protocol's functionality.
NS_SWIFT_NAME(Dependency)
@interface FIRDependency : NSObject

/// The protocol describing functionality being depended on.
@property(nonatomic, strong, readonly) Protocol *protocol;

/// A flag to specify if the dependency is required or not.
@property(nonatomic, readonly) BOOL isRequired;

/// Initializes a dependency that is required. Calls `init(protocol:isRequired:)` with true for
/// the required parameter.
/// Creates a required dependency on the specified protocol's functionality.
+ (instancetype)dependencyWithProtocol:(Protocol *)protocol;

/// Creates a dependency on the specified protocol's functionality and specify if it's required for
/// the class's functionality.
+ (instancetype)dependencyWithProtocol:(Protocol *)protocol isRequired:(BOOL)required;

/// Use `init(withProtocol:isRequired:)` instead.
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRDependency.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRHeartbeatLogger.h
===
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

#ifndef FIREBASE_BUILD_CMAKE
@class FIRHeartbeatsPayload;
#endif  // FIREBASE_BUILD_CMAKE

/// Enum representing different daily heartbeat codes.
/// This enum is only used by clients using platform logging V1. This is because
/// the V1 payload only supports a single daily heartbeat.
typedef NS_ENUM(NSInteger, FIRDailyHeartbeatCode) {
  /// Represents the absence of a daily heartbeat.
  FIRDailyHeartbeatCodeNone = 0,
  /// Represents the presence of a daily heartbeat.
  FIRDailyHeartbeatCodeSome = 2,
};

@protocol FIRHeartbeatLoggerProtocol <NSObject>

/// Asynchronously logs a heartbeat.
- (void)log;

#ifndef FIREBASE_BUILD_CMAKE
/// Flushes heartbeats from storage into a structured payload of heartbeats.
- (FIRHeartbeatsPayload *)flushHeartbeatsIntoPayload;
#endif  // FIREBASE_BUILD_CMAKE

/// Gets the heartbeat code for today.
- (FIRDailyHeartbeatCode)heartbeatCodeForToday;

@end

#ifndef FIREBASE_BUILD_CMAKE
/// Returns a nullable string header value from a given heartbeats payload.
///
/// This API returns `nil` when the given heartbeats payload is considered empty.
///
/// @param heartbeatsPayload The heartbeats payload.
NSString *_Nullable FIRHeaderValueFromHeartbeatsPayload(FIRHeartbeatsPayload *heartbeatsPayload);
#endif  // FIREBASE_BUILD_CMAKE

/// A thread safe, synchronized object that logs and flushes platform logging info.
@interface FIRHeartbeatLogger : NSObject <FIRHeartbeatLoggerProtocol>

/// Designated initializer.
///
/// @param appID The app ID that this heartbeat logger corresponds to.
- (instancetype)initWithAppID:(NSString *)appID;

/// Asynchronously logs a new heartbeat corresponding to the Firebase User Agent, if needed.
///
/// @note This API is thread-safe.
- (void)log;

#ifndef FIREBASE_BUILD_CMAKE
/// Flushes heartbeats from storage into a structured payload of heartbeats.
///
/// This API is for clients using platform logging V2.
///
/// @note This API is thread-safe.
/// @return A payload of heartbeats.
- (FIRHeartbeatsPayload *)flushHeartbeatsIntoPayload;
#endif  // FIREBASE_BUILD_CMAKE

/// Gets today's corresponding heartbeat code.
///
/// This API is for clients using platform logging V1.
///
/// @note This API is thread-safe.
/// @return Heartbeat code indicating whether or not there is an unsent global heartbeat.
- (FIRDailyHeartbeatCode)heartbeatCodeForToday;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRHeartbeatLogger.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRLibrary.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef FIRLibrary_h
#define FIRLibrary_h

#import <Foundation/Foundation.h>

@class FIRApp;
@class FIRComponent;

NS_ASSUME_NONNULL_BEGIN

/// Provide an interface to register a library for userAgent logging and availability to others.
NS_SWIFT_NAME(Library)
@protocol FIRLibrary

/// Returns one or more Components that will be registered in
/// FirebaseApp and participate in dependency resolution and injection.
+ (NSArray<FIRComponent *> *)componentsToRegister;

@optional
/// Implement this method if the library needs notifications for lifecycle events. This method is
/// called when the developer calls `FirebaseApp.configure()`.
+ (void)configureWithApp:(FIRApp *)app;

@end

NS_ASSUME_NONNULL_END

#endif /* FIRLibrary_h */

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRLibrary.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRLogger.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import <FirebaseCore/FIRLoggerLevel.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * The Firebase services used in Firebase logger.
 */
typedef NSString *const FIRLoggerService;

extern FIRLoggerService kFIRLoggerAnalytics;
extern FIRLoggerService kFIRLoggerCrash;
extern FIRLoggerService kFIRLoggerCore;
extern FIRLoggerService kFIRLoggerRemoteConfig;

/**
 * The key used to store the logger's error count.
 */
extern NSString *const kFIRLoggerErrorCountKey;

/**
 * The key used to store the logger's warning count.
 */
extern NSString *const kFIRLoggerWarningCountKey;

#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

/**
 * Enables or disables Analytics debug mode.
 * If set to true, the logging level for Analytics will be set to FirebaseLoggerLevelDebug.
 * Enabling the debug mode has no effect if the app is running from App Store.
 * (required) analytics debug mode flag.
 */
void FIRSetAnalyticsDebugMode(BOOL analyticsDebugMode);

/**
 * Gets the current FIRLoggerLevel.
 */
FIRLoggerLevel FIRGetLoggerLevel(void);

/**
 * Changes the default logging level of FirebaseLoggerLevelNotice to a user-specified level.
 * The default level cannot be set above FirebaseLoggerLevelNotice if the app is running from App
 * Store. (required) log level (one of the FirebaseLoggerLevel enum values).
 */
void FIRSetLoggerLevel(FIRLoggerLevel loggerLevel);

/**
 * Checks if the specified logger level is loggable given the current settings.
 * (required) log level (one of the FirebaseLoggerLevel enum values).
 * (required) whether or not this function is called from the Analytics component.
 */
BOOL FIRIsLoggableLevel(FIRLoggerLevel loggerLevel, BOOL analyticsComponent);

/**
 * Logs a message to the Xcode console and the device log. If running from AppStore, will
 * not log any messages with a level higher than FirebaseLoggerLevelNotice to avoid log spamming.
 * (required) log level (one of the FirebaseLoggerLevel enum values).
 * (required) service name of type FirebaseLoggerService.
 * (required) message code starting with "I-" which means iOS, followed by a capitalized
 *            three-character service identifier and a six digit integer message ID that is unique
 *            within the service.
 *            An example of the message code is @"I-COR000001".
 * (required) message string which can be a format string.
 * (optional) variable arguments list obtained from calling va_start, used when message is a format
 *            string.
 */
extern void FIRLogBasic(FIRLoggerLevel level,
                        FIRLoggerService service,
                        NSString *messageCode,
                        NSString *message,
// On 64-bit simulators, va_list is not a pointer, so cannot be marked nullable
// See: http://stackoverflow.com/q/29095469
#if __LP64__ && TARGET_OS_SIMULATOR || TARGET_OS_OSX
                        va_list args_ptr
#else
                        va_list _Nullable args_ptr
#endif
);

/**
 * The following functions accept the following parameters in order:
 * (required) service name of type FirebaseLoggerService.
 * (required) message code starting from "I-" which means iOS, followed by a capitalized
 *            three-character service identifier and a six digit integer message ID that is unique
 *            within the service.
 *            An example of the message code is @"I-COR000001".
 *            See go/firebase-log-proposal for details.
 * (required) message string which can be a format string.
 * (optional) the list of arguments to substitute into the format string.
 * Example usage:
 * FirebaseLogError(kFirebaseLoggerCore, @"I-COR000001", @"Configuration of %@ failed.", app.name);
 */
extern void FIRLogError(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);
extern void FIRLogWarning(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);
extern void FIRLogNotice(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);
extern void FIRLogInfo(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);
extern void FIRLogDebug(FIRLoggerService service, NSString *messageCode, NSString *message, ...)
    NS_FORMAT_FUNCTION(3, 4);

// TODO: Come up with a better logging scheme for Swift.
/**
 * Logs a debug message to the Xcode console and the device log. If running from AppStore, will
 * not log any messages with a level higher than FirebaseLoggerLevelNotice to avoid log spamming.
 * This function is intended to be used by Swift clients that do not support variadic parameters.
 *
 * @param service The service name of type `FirebaseLoggerService`.
 * @param messageCode The mesage code. starting with "I-" which means iOS, followed by a capitalized
 * three-character service identifier and a six digit integer message ID that is unique within the
 * service. An example of the message code is @"I-COR000001".
 * @param message The message string.
 */
extern void FIRLogDebugSwift(FIRLoggerService service, NSString *messageCode, NSString *message);

/**
 * Logs a warning message to the Xcode console and the device log. If running from AppStore, will
 * not log any messages with a level higher than FirebaseLoggerLevelNotice to avoid log spamming.
 * This function is intended to be used by Swift clients that do not support variadic parameters.
 *
 * @param service The service name of type `FirebaseLoggerService`.
 * @param messageCode The mesage code. starting with "I-" which means iOS, followed by a capitalized
 * three-character service identifier and a six digit integer message ID that is unique within the
 * service. An example of the message code is @"I-COR000001".
 * @param message The message string.
 */
extern void FIRLogWarningSwift(FIRLoggerService service, NSString *messageCode, NSString *message);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

NS_SWIFT_NAME(FirebaseLogger)
@interface FIRLoggerWrapper : NSObject

/// Logs a given message at a given log level. This API is effectively a wrapper for the
/// `FIRLogBasic` C API.
///
/// - Parameters:
///   - level: The log level to use (defined by `FirebaseLoggerLevel` enum values).
///   - service: The service name of type `FirebaseLoggerService`.
///   - code: The mesage code. Starting with "I-" which means iOS, followed by a capitalized
///   three-character service identifier and a six digit integer message ID that is unique within
///   the service. An example of the message code is @"I-COR000001".
///   - message: Formatted string to be used as the log's message.
///   - args: Arguments list obtained from calling `va_start`, used when message is a format string.
+ (void)logWithLevel:(FIRLoggerLevel)level
         withService:(FIRLoggerService)service
            withCode:(NSString *)messageCode
         withMessage:(NSString *)message
            withArgs:(va_list)args;

/// Logs a given message at a given log level.
///
/// - Parameters:
///   - level: The log level to use (defined by `FirebaseLoggerLevel` enum values).
///   - service: The service name of type `FirebaseLoggerService`.
///   - code: The mesage code. Starting with "I-" which means iOS, followed by a capitalized
///   three-character service identifier and a six digit integer message ID that is unique within
///   the service. An example of the message code is @"I-COR000001".
///   - message: Formatted string to be used as the log's message.
///   - args: Arguments list obtained from calling `va_start`, used when message is a format string.
+ (void)logWithLevel:(FIRLoggerLevel)level
             service:(FIRLoggerService)service
                code:(NSString *)code
             message:(NSString *)message
    __attribute__((__swift_name__("log(level:service:code:message:)")));

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIRLogger.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIROptionsInternal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <FirebaseCore/FIROptions.h>

/**
 * Keys for the strings in the plist file.
 */
extern NSString *const kFIRAPIKey;
extern NSString *const kFIRTrackingID;
extern NSString *const kFIRGoogleAppID;
extern NSString *const kFIRClientID;
extern NSString *const kFIRGCMSenderID;
extern NSString *const kFIRAndroidClientID;
extern NSString *const kFIRDatabaseURL;
extern NSString *const kFIRStorageBucket;
extern NSString *const kFIRBundleID;
extern NSString *const kFIRProjectID;

/**
 * Keys for the plist file name
 */
extern NSString *const kServiceInfoFileName;

extern NSString *const kServiceInfoFileType;

/**
 * This header file exposes the initialization of FirebaseOptions to internal use.
 */
@interface FIROptions ()

/**
 * `resetDefaultOptions` and `initInternalWithOptionsDictionary` are exposed only for unit tests.
 */
+ (void)resetDefaultOptions;

/**
 * Initializes the options with dictionary. The above strings are the keys of the dictionary.
 * This is the designated initializer.
 */
- (instancetype)initInternalWithOptionsDictionary:(NSDictionary *)serviceInfoDictionary
    NS_DESIGNATED_INITIALIZER;

/**
 * `defaultOptions` and `defaultOptionsDictionary` are exposed in order to be used in FirebaseApp
 * and other first party services.
 */
+ (FIROptions *)defaultOptions;

+ (NSDictionary *)defaultOptionsDictionary;

/**
 * Indicates whether or not Analytics collection was explicitly enabled via a plist flag or at
 * runtime.
 */
@property(nonatomic, readonly) BOOL isAnalyticsCollectionExplicitlySet;

/**
 * Whether or not Analytics Collection was enabled. Analytics Collection is enabled unless
 * explicitly disabled in GoogleService-Info.plist.
 */
@property(nonatomic, readonly) BOOL isAnalyticsCollectionEnabled;

/**
 * Whether or not Analytics Collection was completely disabled. If true, then
 * isAnalyticsCollectionEnabled will be false.
 */
@property(nonatomic, readonly) BOOL isAnalyticsCollectionDeactivated;

/**
 * The version ID of the client library, e.g. @"1100000".
 */
@property(nonatomic, readonly, copy) NSString *libraryVersionID;

/**
 * The flag indicating whether this object was constructed with the values in the default plist
 * file.
 */
@property(nonatomic) BOOL usingOptionsFromDefaultPlist;

/**
 * Whether or not Measurement was enabled. Measurement is enabled unless explicitly disabled in
 * GoogleService-Info.plist.
 */
@property(nonatomic, readonly) BOOL isMeasurementEnabled;

/**
 * Whether or not editing is locked. This should occur after `FirebaseOptions` has been set on a
 * `FirebaseApp`.
 */
@property(nonatomic, getter=isEditingLocked) BOOL editingLocked;

@end

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FIROptionsInternal.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FirebaseCoreInternal.h
===
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@import FirebaseCore;

#import "FIRAppInternal.h"
#import "FIRComponent.h"
#import "FIRComponentContainer.h"
#import "FIRComponentType.h"
#import "FIRDependency.h"
#import "FIRHeartbeatLogger.h"
#import "FIRLibrary.h"
#import "FIRLogger.h"
#import "FIROptionsInternal.h"

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Extension/FirebaseCoreInternal.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRAnalyticsConfiguration.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

/// Values stored in analyticsEnabledState. Never alter these constants since they must match with
/// values persisted to disk.
typedef NS_ENUM(int64_t, FIRAnalyticsEnabledState) {
  // 0 is the default value for keys not found stored in persisted config, so it cannot represent
  // kFIRAnalyticsEnabledStateSetNo. It must represent kFIRAnalyticsEnabledStateNotSet.
  kFIRAnalyticsEnabledStateNotSet = 0,
  kFIRAnalyticsEnabledStateSetYes = 1,
  kFIRAnalyticsEnabledStateSetNo = 2,
};

/// The user defaults key for the persisted measurementEnabledState value. FIRAPersistedConfig reads
/// measurementEnabledState using this same key.
static NSString *const kFIRAPersistedConfigMeasurementEnabledStateKey =
    @"/google/measurement/measurement_enabled_state";

static NSString *const kFIRAnalyticsConfigurationSetEnabledNotification =
    @"FIRAnalyticsConfigurationSetEnabledNotification";
static NSString *const kFIRAnalyticsConfigurationSetMinimumSessionIntervalNotification =
    @"FIRAnalyticsConfigurationSetMinimumSessionIntervalNotification";
static NSString *const kFIRAnalyticsConfigurationSetSessionTimeoutIntervalNotification =
    @"FIRAnalyticsConfigurationSetSessionTimeoutIntervalNotification";

@interface FIRAnalyticsConfiguration : NSObject

/// Returns the shared instance of FIRAnalyticsConfiguration.
+ (FIRAnalyticsConfiguration *)sharedInstance;

// Sets whether analytics collection is enabled for this app on this device. This setting is
// persisted across app sessions. By default it is enabled.
- (void)setAnalyticsCollectionEnabled:(BOOL)analyticsCollectionEnabled;

/// Sets whether analytics collection is enabled for this app on this device, and a flag to persist
/// the value or not. The setting should not be persisted if being set by the global data collection
/// flag.
- (void)setAnalyticsCollectionEnabled:(BOOL)analyticsCollectionEnabled
                       persistSetting:(BOOL)shouldPersist;

@end

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRAnalyticsConfiguration.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRBundleUtil.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

/**
 * This class provides utilities for accessing resources in bundles.
 */
@interface FIRBundleUtil : NSObject

/**
 * Finds all relevant bundles, starting with [NSBundle mainBundle].
 */
+ (NSArray *)relevantBundles;

/**
 * Reads the options dictionary from one of the provided bundles.
 *
 * @param resourceName The resource name, e.g. @"GoogleService-Info".
 * @param fileType The file type (extension), e.g. @"plist".
 * @param bundles The bundles to expect, in priority order. See also
 * +[FIRBundleUtil relevantBundles].
 */
+ (NSString *)optionsDictionaryPathWithResourceName:(NSString *)resourceName
                                        andFileType:(NSString *)fileType
                                          inBundles:(NSArray *)bundles;

/**
 * Finds URL schemes defined in all relevant bundles, starting with those from
 * [NSBundle mainBundle].
 */
+ (NSArray *)relevantURLSchemes;

/**
 * Checks if any of the given bundles have a matching bundle identifier prefix (removing extension
 * suffixes).
 */
+ (BOOL)hasBundleIdentifierPrefix:(NSString *)bundleIdentifier inBundles:(NSArray *)bundles;

@end

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRBundleUtil.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRComponentContainerInternal.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <Foundation/Foundation.h>

#import "FirebaseCore/Extension/FIRComponentContainer.h"
#import "FirebaseCore/Extension/FIRLibrary.h"

@class FIRApp;

NS_ASSUME_NONNULL_BEGIN

@interface FIRComponentContainer (Private)

/// Initializes a container for a given app. This should only be called by the app itself.
- (instancetype)initWithApp:(FIRApp *)app;

/// Retrieves an instance that conforms to the specified protocol. This will return `nil` if the
/// protocol wasn't registered, or if the instance couldn't be instantiated for the provided app.
- (nullable id)instanceForProtocol:(Protocol *)protocol
    NS_SWIFT_UNAVAILABLE("Use `instance(for:)` from the FirebaseCoreExtension module instead.");

/// Instantiates all the components that have registered as "eager" after initialization.
- (void)instantiateEagerComponents;

/// Remove all of the cached instances stored and allow them to clean up after themselves.
- (void)removeAllCachedInstances;

/// Removes all the components. After calling this method no new instances will be created.
- (void)removeAllComponents;

/// Register a class to provide components for the interoperability system. The class should conform
/// to `FIRComponentRegistrant` and provide an array of `FIRComponent` objects.
+ (void)registerAsComponentRegistrant:(Class<FIRLibrary>)klass;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRComponentContainerInternal.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRConfigurationInternal.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FirebaseCore/Sources/Public/FirebaseCore/FIRConfiguration.h"

@class FIRAnalyticsConfiguration;

@interface FIRConfiguration ()

/**
 * The configuration class for Firebase Analytics. This should be removed once the logic for
 * enabling and disabling Analytics is moved to Analytics.
 */
@property(nonatomic, readwrite) FIRAnalyticsConfiguration *analyticsConfiguration;

@end

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRConfigurationInternal.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRFirebaseUserAgent.h
===
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@interface FIRFirebaseUserAgent : NSObject

/** Returns the firebase user agent which consists of environment part and the components added via
 * `setValue:forComponent` method. */
- (NSString *)firebaseUserAgent;

/** Sets value associated with the specified component. If value is `nil` then the component is
 * removed. */
- (void)setValue:(nullable NSString *)value forComponent:(NSString *)componentName;

/** Resets manually added components. */
- (void)reset;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/FIRFirebaseUserAgent.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIRApp.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FIROptions;

NS_ASSUME_NONNULL_BEGIN

/** A block that takes a BOOL and has no return value. */
typedef void (^FIRAppVoidBoolCallback)(BOOL success)
    NS_SWIFT_UNAVAILABLE("Use Swift's closure syntax instead.");

/**
 * The entry point of Firebase SDKs.
 *
 * Initialize and configure `FirebaseApp` using `FirebaseApp.configure()`
 * or other customized ways as shown below.
 *
 * The logging system has two modes: default mode and debug mode. In default mode, only logs with
 * log level Notice, Warning and Error will be sent to device. In debug mode, all logs will be sent
 * to device. The log levels that Firebase uses are consistent with the ASL log levels.
 *
 * Enable debug mode by passing the `-FIRDebugEnabled` argument to the application. You can add this
 * argument in the application's Xcode scheme. When debug mode is enabled via `-FIRDebugEnabled`,
 * further executions of the application will also be in debug mode. In order to return to default
 * mode, you must explicitly disable the debug mode with the application argument
 * `-FIRDebugDisabled`.
 *
 * It is also possible to change the default logging level in code by calling
 * `FirebaseConfiguration.shared.setLoggerLevel(_:)` with the desired level.
 */
NS_SWIFT_NAME(FirebaseApp)
@interface FIRApp : NSObject

/**
 * Configures a default Firebase app. Raises an exception if any configuration step fails. The
 * default app is named "__FIRAPP_DEFAULT". This method should be called after the app is launched
 * and before using Firebase services. This method should be called from the main thread and
 * contains synchronous file I/O (reading GoogleService-Info.plist from disk).
 */
+ (void)configure;

/**
 * Configures the default Firebase app with the provided options. The default app is named
 * "__FIRAPP_DEFAULT". Raises an exception if any configuration step fails. This method should be
 * called from the main thread.
 *
 * @param options The Firebase application options used to configure the service.
 */
+ (void)configureWithOptions:(FIROptions *)options NS_SWIFT_NAME(configure(options:));

/**
 * Configures a Firebase app with the given name and options. Raises an exception if any
 * configuration step fails. This method should be called from the main thread.
 *
 * @param name The application's name given by the developer. The name should should only contain
               Letters, Numbers and Underscore.
 * @param options The Firebase application options used to configure the services.
 */
// clang-format off
+ (void)configureWithName:(NSString *)name
                  options:(FIROptions *)options NS_SWIFT_NAME(configure(name:options:));
// clang-format on

/**
 * Returns the default app, or `nil` if the default app does not exist.
 */
+ (nullable FIRApp *)defaultApp NS_SWIFT_NAME(app());

/**
 * Returns a previously created `FirebaseApp` instance with the given name, or `nil` if no such app
 * exists. This method is thread safe.
 */
+ (nullable FIRApp *)appNamed:(NSString *)name NS_SWIFT_NAME(app(name:));

/**
 * Returns the set of all extant `FirebaseApp` instances, or `nil` if there are no `FirebaseApp`
 * instances. This method is thread safe.
 */
@property(class, readonly, nullable) NSDictionary<NSString *, FIRApp *> *allApps;

/**
 * Cleans up the current `FirebaseApp`, freeing associated data and returning its name to the pool
 * for future use. This method is thread safe.
 */
- (void)deleteApp:(void (^)(BOOL success))completion;

/**
 * `FirebaseApp` instances should not be initialized directly. Call `FirebaseApp.configure()`,
 * `FirebaseApp.configure(options:)`, or `FirebaseApp.configure(name:options:)` directly.
 */
- (instancetype)init NS_UNAVAILABLE;

/**
 * Gets the name of this app.
 */
@property(nonatomic, copy, readonly) NSString *name;

/**
 * Gets a copy of the options for this app. These are non-modifiable.
 */
@property(nonatomic, copy, readonly) FIROptions *options;

/**
 * Gets or sets whether automatic data collection is enabled for all products. Defaults to `true`
 * unless `FirebaseDataCollectionDefaultEnabled` is set to `NO` in your app's Info.plist. This value
 * is persisted across runs of the app so that it can be set once when users have consented to
 * collection.
 */
@property(nonatomic, readwrite, getter=isDataCollectionDefaultEnabled)
    BOOL dataCollectionDefaultEnabled;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIRApp.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIRConfiguration.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "FIRLoggerLevel.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * This interface provides global level properties that the developer can tweak.
 */
NS_SWIFT_NAME(FirebaseConfiguration)
@interface FIRConfiguration : NSObject

/** Returns the shared configuration object. */
@property(class, nonatomic, readonly) FIRConfiguration *sharedInstance NS_SWIFT_NAME(shared);

/**
 * Sets the logging level for internal Firebase logging. Firebase will only log messages
 * that are logged at or below `loggerLevel`. The messages are logged both to the Xcode
 * console and to the device's log. Note that if an app is running from AppStore, it will
 * never log above `.notice` even if `loggerLevel` is set to a higher (more verbose)
 * setting.
 *
 * @param loggerLevel The maximum logging level. The default level is set to FIRLoggerLevelNotice.
 */
- (void)setLoggerLevel:(FIRLoggerLevel)loggerLevel;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIRConfiguration.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIRLoggerLevel.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Note that importing GULLoggerLevel.h will lead to a non-modular header
// import error.

/**
 * The log levels used by internal logging.
 */
typedef NS_ENUM(NSInteger, FIRLoggerLevel) {
  /** Error level, matches ASL_LEVEL_ERR. */
  FIRLoggerLevelError = 3,
  /** Warning level, matches ASL_LEVEL_WARNING. */
  FIRLoggerLevelWarning = 4,
  /** Notice level, matches ASL_LEVEL_NOTICE. */
  FIRLoggerLevelNotice = 5,
  /** Info level, matches ASL_LEVEL_INFO. */
  FIRLoggerLevelInfo = 6,
  /** Debug level, matches ASL_LEVEL_DEBUG. */
  FIRLoggerLevelDebug = 7,
  /** Minimum log level. */
  FIRLoggerLevelMin = FIRLoggerLevelError,
  /** Maximum log level. */
  FIRLoggerLevelMax = FIRLoggerLevelDebug
} NS_SWIFT_NAME(FirebaseLoggerLevel);

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIRLoggerLevel.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIROptions.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * This class provides constant fields of Google APIs.
 */
NS_SWIFT_NAME(FirebaseOptions)
@interface FIROptions : NSObject <NSCopying>

/**
 * Returns the default options. The first time this is called it synchronously reads
 * GoogleService-Info.plist from disk.
 */
+ (nullable FIROptions *)defaultOptions NS_SWIFT_NAME(defaultOptions());

/**
 * An API key used for authenticating requests from your Apple app, e.g.
 * The key must begin with "A" and contain exactly 39 alphanumeric characters, used to identify your
 * app to Google servers.
 */
@property(nonatomic, copy, nullable) NSString *APIKey NS_SWIFT_NAME(apiKey);

/**
 * The bundle ID for the application. Defaults to `Bundle.main.bundleIdentifier` when not set
 * manually or in a plist.
 */
@property(nonatomic, copy) NSString *bundleID;

/**
 * The OAuth2 client ID for Apple applications used to authenticate Google users, for example
 * @"12345.apps.googleusercontent.com", used for signing in with Google.
 */
@property(nonatomic, copy, nullable) NSString *clientID;

/**
 * Unused.
 */
@property(nonatomic, copy, nullable) NSString *trackingID DEPRECATED_ATTRIBUTE;

/**
 * The Project Number from the Google Developer's console, for example @"012345678901", used to
 * configure Firebase Cloud Messaging.
 */
@property(nonatomic, copy) NSString *GCMSenderID NS_SWIFT_NAME(gcmSenderID);

/**
 * The Project ID from the Firebase console, for example @"abc-xyz-123".
 */
@property(nonatomic, copy, nullable) NSString *projectID;

/**
 * Unused.
 */
@property(nonatomic, copy, nullable) NSString *androidClientID DEPRECATED_ATTRIBUTE;

/**
 * The Google App ID that is used to uniquely identify an instance of an app.
 */
@property(nonatomic, copy) NSString *googleAppID;

/**
 * The database root URL, e.g. @"http://abc-xyz-123.firebaseio.com".
 */
@property(nonatomic, copy, nullable) NSString *databaseURL;

/**
 * The URL scheme used to set up Durable Deep Link service.
 */
@property(nonatomic, copy, nullable) NSString *deepLinkURLScheme;

/**
 * The Google Cloud Storage bucket name, e.g. @"abc-xyz-123.storage.firebase.com".
 */
@property(nonatomic, copy, nullable) NSString *storageBucket;

/**
 * The App Group identifier to share data between the application and the application extensions.
 * The App Group must be configured in the application and on the Apple Developer Portal. Default
 * value `nil`.
 */
@property(nonatomic, copy, nullable) NSString *appGroupID;

/**
 * Initializes a customized instance of FirebaseOptions from the file at the given plist file path.
 * This will read the file synchronously from disk.
 * For example:
 * ```swift
 *   if let path = Bundle.main.path(forResource:"GoogleServices-Info", ofType:"plist") {
 *       let options = FirebaseOptions(contentsOfFile: path)
 *   }
 * ```
 * Note that it is not possible to customize `FirebaseOptions` for Firebase Analytics which expects
 * a static file named `GoogleServices-Info.plist` -
 * https://github.com/firebase/firebase-ios-sdk/issues/230.
 * Returns `nil` if the plist file does not exist or is invalid.
 */
- (nullable instancetype)initWithContentsOfFile:(NSString *)plistPath NS_DESIGNATED_INITIALIZER;

/**
 * Initializes a customized instance of `FirebaseOptions` with required fields. Use the mutable
 * properties to modify fields for configuring specific services. Note that it is not possible to
 * customize `FirebaseOptions` for Firebase Analytics which expects a static file named
 * `GoogleServices-Info.plist` - https://github.com/firebase/firebase-ios-sdk/issues/230.
 */
- (instancetype)initWithGoogleAppID:(NSString *)googleAppID
                        GCMSenderID:(NSString *)GCMSenderID
    NS_SWIFT_NAME(init(googleAppID:gcmSenderID:))NS_DESIGNATED_INITIALIZER;

/** Unavailable. Please use `init(contentsOfFile:)` or `init(googleAppID:gcmSenderID:)` instead. */
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIROptions.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIRVersion.h
===
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** Returns the current version of Firebase. */
NS_SWIFT_NAME(FirebaseVersion())
NSString* FIRFirebaseVersion(void);

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FIRVersion.h ===

===
Path: iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FirebaseCore.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "FIRApp.h"
#import "FIRConfiguration.h"
#import "FIRLoggerLevel.h"
#import "FIROptions.h"
#import "FIRVersion.h"

=== end iosApp/Pods/FirebaseCore/FirebaseCore/Sources/Public/FirebaseCore/FirebaseCore.h ===

===
Path: iosApp/Pods/FirebaseCore/README.md
===
<p align="center">
  <a href="https://cocoapods.org/pods/Firebase">
    <img src="https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=CocoaPods"/>
  </a>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=Swift%20Package%20Index&color=red"/>
  </a>
  <a href="https://cocoapods.org/pods/Firebase">
    <img src="https://img.shields.io/github/license/Firebase/firebase-ios-sdk?style=flat"/>
  </a><br/>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dplatforms"/>
  </a>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dswift-versions"/>
  </a>
</p>

# Firebase Apple Open Source Development

This repository contains the source code for all Apple platform Firebase SDKs except FirebaseAnalytics.

Firebase is an app development platform with tools to help you build, grow, and
monetize your app. More information about Firebase can be found on the
[official Firebase website](https://firebase.google.com).

## Installation

See the subsections below for details about the different installation methods. Where
available, it's recommended to install any libraries with a `Swift` suffix to get the
best experience when writing your app in Swift.

1. [Standard pod install](#standard-pod-install)
2. [Swift Package Manager](#swift-package-manager)
3. [Installing from the GitHub repo](#installing-from-github)
4. [Experimental Carthage](#carthage-ios-only)

### Standard pod install

For instructions on the standard pod install, visit:
[https://firebase.google.com/docs/ios/setup](https://firebase.google.com/docs/ios/setup).

### Swift Package Manager

Instructions for [Swift Package Manager](https://swift.org/package-manager/) support can be
found in the [SwiftPackageManager.md](SwiftPackageManager.md) Markdown file.

### Installing from GitHub

These instructions can be used to access the Firebase repo at other branches,
tags, or commits.

#### Background

See [the Podfile Syntax Reference](https://guides.cocoapods.org/syntax/podfile.html#pod)
for instructions and options about overriding pod source locations.

#### Accessing Firebase Source Snapshots

All official releases are tagged in this repo and available via CocoaPods. To access a local
source snapshot or unreleased branch, use Podfile directives like the following:

To access FirebaseFirestore via a branch:
```ruby
pod 'FirebaseCore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'
pod 'FirebaseFirestore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'
```

To access FirebaseMessaging via a checked-out version of the firebase-ios-sdk repo:
```ruby
pod 'FirebaseCore', :path => '/path/to/firebase-ios-sdk'
pod 'FirebaseMessaging', :path => '/path/to/firebase-ios-sdk'
```

### Carthage (iOS only)

Instructions for the experimental Carthage distribution can be found at
[Carthage.md](Carthage.md).

### Using Firebase from a Framework or a library

For details on using Firebase from a Framework or a library, refer to [firebase_in_libraries.md](docs/firebase_in_libraries.md).

## Development

To develop Firebase software in this repository, ensure that you have at least
the following software:

* Xcode 15.2 (or later)

CocoaPods is still the canonical way to develop, but much of the repo now supports
development with Swift Package Manager.

### CocoaPods

Install the following:
* CocoaPods 1.12.0 (or later)
* [CocoaPods generate](https://github.com/square/cocoapods-generate)

For the pod that you want to develop:

```ruby
pod gen Firebase{name here}.podspec --local-sources=./ --auto-open --platforms=ios
```

Note: If the CocoaPods cache is out of date, you may need to run
`pod repo update` before the `pod gen` command.

Note: Set the `--platforms` option to `macos` or `tvos` to develop/test for
those platforms. Since 10.2, Xcode does not properly handle multi-platform
CocoaPods workspaces.

Firestore has a self-contained Xcode project. See
[Firestore/README](Firestore/README.md) Markdown file.

#### Development for Catalyst
* `pod gen {name here}.podspec --local-sources=./ --auto-open --platforms=ios`
* Check the Mac box in the App-iOS Build Settings
* Sign the App in the Settings Signing & Capabilities tab
* Click Pods in the Project Manager
* Add Signing to the iOS host app and unit test targets
* Select the Unit-unit scheme
* Run it to build and test

Alternatively, disable signing in each target:
* Go to Build Settings tab
* Click `+`
* Select `Add User-Defined Setting`
* Add `CODE_SIGNING_REQUIRED` setting with a value of `NO`

### Swift Package Manager
* To enable test schemes: `./scripts/setup_spm_tests.sh`
* `open Package.swift` or double click `Package.swift` in Finder.
* Xcode will open the project
  * Choose a scheme for a library to build or test suite to run
  * Choose a target platform by selecting the run destination along with the scheme

### Adding a New Firebase Pod

Refer to [AddNewPod](AddNewPod.md) Markdown file for details.

### Managing Headers and Imports

For information about managing headers and imports, see [HeadersImports](HeadersImports.md) Markdown file.

### Code Formatting

To ensure that the code is formatted consistently, run the script
[./scripts/check.sh](https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/check.sh)
before creating a pull request (PR).

GitHub Actions will verify that any code changes are done in a style-compliant
way. Install `clang-format` and `mint`:

```console
brew install clang-format@18
brew install mint
```

### Running Unit Tests

Select a scheme and press Command-u to build a component and run its unit tests.

### Running Sample Apps
To run the sample apps and integration tests, you'll need a valid
`GoogleService-Info.plist
` file. The Firebase Xcode project contains dummy plist
files without real values, but they can be replaced with real plist files. To get your own
`GoogleService-Info.plist` files:

1. Go to the [Firebase Console](https://console.firebase.google.com/)
2. Create a new Firebase project, if you don't already have one
3. For each sample app you want to test, create a new Firebase app with the sample app's bundle
identifier (e.g., `com.google.Database-Example`)
4. Download the resulting `GoogleService-Info.plist` and add it to the Xcode project.

### Coverage Report Generation

For coverage report generation instructions, see [scripts/code_coverage_report/README](scripts/code_coverage_report/README.md) Markdown file.

## Specific Component Instructions
See the sections below for any special instructions for those components.

### Firebase Auth

For specific Firebase Auth development, refer to the [Auth Sample README](FirebaseAuth/Tests/Sample/README.md) for instructions about
building and running the FirebaseAuth pod along with various samples and tests.

### Firebase Database

The Firebase Database Integration tests can be run against a locally running Database Emulator
or against a production instance.

To run against a local emulator instance, invoke `./scripts/run_database_emulator.sh start` before
running the integration test.

To run against a production instance, provide a valid `GoogleServices-Info.plist` and copy it to
`FirebaseDatabase/Tests/Resources/GoogleService-Info.plist`. Your Security Rule must be set to
[public](https://firebase.google.com/docs/database/security/quickstart) while your tests are
running.

### Firebase Dynamic Links

Firebase Dynamic Links is **deprecated** and should not be used in new projects. The service will shut down on August 25, 2025.

Please see our [Dynamic Links Deprecation FAQ documentation](https://firebase.google.com/support/dynamic-links-faq) for more guidance.

### Firebase Performance Monitoring

For specific Firebase Performance Monitoring development, see
[the Performance README](FirebasePerformance/README.md) for instructions about building the SDK
and [the Performance TestApp README](FirebasePerformance/Tests/TestApp/README.md) for instructions about
integrating Performance with the dev test App.

### Firebase Storage

To run the Storage Integration tests, follow the instructions in
[StorageIntegration.swift](FirebaseStorage/Tests/Integration/StorageIntegration.swift).

#### Push Notifications

Push notifications can only be delivered to specially provisioned App IDs in the developer portal.
In order to test receiving push notifications, you will need to:

1. Change the bundle identifier of the sample app to something you own in your Apple Developer
account and enable that App ID for push notifications.
2. You'll also need to
[upload your APNs Provider Authentication Key or certificate to the
Firebase Console](https://firebase.google.com/docs/cloud-messaging/ios/certs)
at **Project Settings > Cloud Messaging > [Your Firebase App]**.
3. Ensure your iOS device is added to your Apple Developer portal as a test device.

#### iOS Simulator

The iOS Simulator cannot register for remote notifications and will not receive push notifications.
To receive push notifications, follow the steps above and run the app on a physical device.

## Building with Firebase on Apple platforms

Firebase provides official beta support for macOS, Catalyst, and tvOS. visionOS and watchOS
are community supported. Thanks to community contributions for many of the multi-platform PRs.

At this time, most of Firebase's products are available across Apple platforms. There are still
a few gaps, especially on visionOS and watchOS. For details about the current support matrix, see
[this chart](https://firebase.google.com/docs/ios/learn-more#firebase_library_support_by_platform)
in Firebase's documentation.

### visionOS

Where supported, visionOS works as expected with the exception of Firestore via Swift Package
Manager where it is required to use the source distribution.

To enable the Firestore source distribution, quit Xcode and open the desired
project from the command line with the `FIREBASE_SOURCE_FIRESTORE` environment
variable: `open --env FIREBASE_SOURCE_FIRESTORE /path/to/project.xcodeproj`.
To go back to using the binary distribution of Firestore, quit Xcode and open
Xcode like normal, without the environment variable.

### watchOS
Thanks to contributions from the community, many of Firebase SDKs now compile, run unit tests, and
work on watchOS. See the [Independent Watch App Sample](Example/watchOSSample).

Keep in mind that watchOS is not officially supported by Firebase. While we can catch basic unit
test issues with GitHub Actions, there may be some changes where the SDK no longer works as expected
on watchOS. If you encounter this, please
[file an issue](https://github.com/firebase/firebase-ios-sdk/issues).

During app setup in the console, you may get to a step that mentions something like "Checking if the
app has communicated with our servers". This relies on Analytics and will not work on watchOS.
**It's safe to ignore the message and continue**, the rest of the SDKs will work as expected.

#### Additional Crashlytics Notes
* watchOS has limited support. Due to watchOS restrictions, mach exceptions and signal crashes are
not recorded. (Crashes in SwiftUI are generated as mach exceptions, so will not be recorded)

## Combine
Thanks to contributions from the community, _FirebaseCombineSwift_ contains support for Apple's Combine
framework. This module is currently under development and not yet supported for use in production
environments. For more details, please refer to the [docs](FirebaseCombineSwift/README.md).

## Roadmap

See [Roadmap](ROADMAP.md) for more about the Firebase Apple SDK Open Source
plans and directions.

## Contributing

See [Contributing](CONTRIBUTING.md) for more information on contributing to the Firebase
Apple SDK.

## License

The contents of this repository are licensed under the
[Apache License, version 2.0](http://www.apache.org/licenses/LICENSE-2.0).

Your use of Firebase is governed by the
[Terms of Service for Firebase Services](https://firebase.google.com/terms/).

=== end iosApp/Pods/FirebaseCore/README.md ===

===
Path: iosApp/Pods/FirebaseCoreInternal/README.md
===
<p align="center">
  <a href="https://cocoapods.org/pods/Firebase">
    <img src="https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=CocoaPods"/>
  </a>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/github/v/release/Firebase/firebase-ios-sdk?style=flat&label=Swift%20Package%20Index&color=red"/>
  </a>
  <a href="https://cocoapods.org/pods/Firebase">
    <img src="https://img.shields.io/github/license/Firebase/firebase-ios-sdk?style=flat"/>
  </a><br/>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dplatforms"/>
  </a>
  <a href="https://swiftpackageindex.com/firebase/firebase-ios-sdk">
    <img src="https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Ffirebase%2Ffirebase-ios-sdk%2Fbadge%3Ftype%3Dswift-versions"/>
  </a>
</p>

# Firebase Apple Open Source Development

This repository contains the source code for all Apple platform Firebase SDKs except FirebaseAnalytics.

Firebase is an app development platform with tools to help you build, grow, and
monetize your app. More information about Firebase can be found on the
[official Firebase website](https://firebase.google.com).

## Installation

See the subsections below for details about the different installation methods. Where
available, it's recommended to install any libraries with a `Swift` suffix to get the
best experience when writing your app in Swift.

1. [Standard pod install](#standard-pod-install)
2. [Swift Package Manager](#swift-package-manager)
3. [Installing from the GitHub repo](#installing-from-github)
4. [Experimental Carthage](#carthage-ios-only)

### Standard pod install

For instructions on the standard pod install, visit:
[https://firebase.google.com/docs/ios/setup](https://firebase.google.com/docs/ios/setup).

### Swift Package Manager

Instructions for [Swift Package Manager](https://swift.org/package-manager/) support can be
found in the [SwiftPackageManager.md](SwiftPackageManager.md) Markdown file.

### Installing from GitHub

These instructions can be used to access the Firebase repo at other branches,
tags, or commits.

#### Background

See [the Podfile Syntax Reference](https://guides.cocoapods.org/syntax/podfile.html#pod)
for instructions and options about overriding pod source locations.

#### Accessing Firebase Source Snapshots

All official releases are tagged in this repo and available via CocoaPods. To access a local
source snapshot or unreleased branch, use Podfile directives like the following:

To access FirebaseFirestore via a branch:
```ruby
pod 'FirebaseCore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'
pod 'FirebaseFirestore', :git => 'https://github.com/firebase/firebase-ios-sdk.git', :branch => 'main'
```

To access FirebaseMessaging via a checked-out version of the firebase-ios-sdk repo:
```ruby
pod 'FirebaseCore', :path => '/path/to/firebase-ios-sdk'
pod 'FirebaseMessaging', :path => '/path/to/firebase-ios-sdk'
```

### Carthage (iOS only)

Instructions for the experimental Carthage distribution can be found at
[Carthage.md](Carthage.md).

### Using Firebase from a Framework or a library

For details on using Firebase from a Framework or a library, refer to [firebase_in_libraries.md](docs/firebase_in_libraries.md).

## Development

To develop Firebase software in this repository, ensure that you have at least
the following software:

* Xcode 15.2 (or later)

CocoaPods is still the canonical way to develop, but much of the repo now supports
development with Swift Package Manager.

### CocoaPods

Install the following:
* CocoaPods 1.12.0 (or later)
* [CocoaPods generate](https://github.com/square/cocoapods-generate)

For the pod that you want to develop:

```ruby
pod gen Firebase{name here}.podspec --local-sources=./ --auto-open --platforms=ios
```

Note: If the CocoaPods cache is out of date, you may need to run
`pod repo update` before the `pod gen` command.

Note: Set the `--platforms` option to `macos` or `tvos` to develop/test for
those platforms. Since 10.2, Xcode does not properly handle multi-platform
CocoaPods workspaces.

Firestore has a self-contained Xcode project. See
[Firestore/README](Firestore/README.md) Markdown file.

#### Development for Catalyst
* `pod gen {name here}.podspec --local-sources=./ --auto-open --platforms=ios`
* Check the Mac box in the App-iOS Build Settings
* Sign the App in the Settings Signing & Capabilities tab
* Click Pods in the Project Manager
* Add Signing to the iOS host app and unit test targets
* Select the Unit-unit scheme
* Run it to build and test

Alternatively, disable signing in each target:
* Go to Build Settings tab
* Click `+`
* Select `Add User-Defined Setting`
* Add `CODE_SIGNING_REQUIRED` setting with a value of `NO`

### Swift Package Manager
* To enable test schemes: `./scripts/setup_spm_tests.sh`
* `open Package.swift` or double click `Package.swift` in Finder.
* Xcode will open the project
  * Choose a scheme for a library to build or test suite to run
  * Choose a target platform by selecting the run destination along with the scheme

### Adding a New Firebase Pod

Refer to [AddNewPod](AddNewPod.md) Markdown file for details.

### Managing Headers and Imports

For information about managing headers and imports, see [HeadersImports](HeadersImports.md) Markdown file.

### Code Formatting

To ensure that the code is formatted consistently, run the script
[./scripts/check.sh](https://github.com/firebase/firebase-ios-sdk/blob/main/scripts/check.sh)
before creating a pull request (PR).

GitHub Actions will verify that any code changes are done in a style-compliant
way. Install `clang-format` and `mint`:

```console
brew install clang-format@18
brew install mint
```

### Running Unit Tests

Select a scheme and press Command-u to build a component and run its unit tests.

### Running Sample Apps
To run the sample apps and integration tests, you'll need a valid
`GoogleService-Info.plist
` file. The Firebase Xcode project contains dummy plist
files without real values, but they can be replaced with real plist files. To get your own
`GoogleService-Info.plist` files:

1. Go to the [Firebase Console](https://console.firebase.google.com/)
2. Create a new Firebase project, if you don't already have one
3. For each sample app you want to test, create a new Firebase app with the sample app's bundle
identifier (e.g., `com.google.Database-Example`)
4. Download the resulting `GoogleService-Info.plist` and add it to the Xcode project.

### Coverage Report Generation

For coverage report generation instructions, see [scripts/code_coverage_report/README](scripts/code_coverage_report/README.md) Markdown file.

## Specific Component Instructions
See the sections below for any special instructions for those components.

### Firebase Auth

For specific Firebase Auth development, refer to the [Auth Sample README](FirebaseAuth/Tests/Sample/README.md) for instructions about
building and running the FirebaseAuth pod along with various samples and tests.

### Firebase Database

The Firebase Database Integration tests can be run against a locally running Database Emulator
or against a production instance.

To run against a local emulator instance, invoke `./scripts/run_database_emulator.sh start` before
running the integration test.

To run against a production instance, provide a valid `GoogleServices-Info.plist` and copy it to
`FirebaseDatabase/Tests/Resources/GoogleService-Info.plist`. Your Security Rule must be set to
[public](https://firebase.google.com/docs/database/security/quickstart) while your tests are
running.

### Firebase Dynamic Links

Firebase Dynamic Links is **deprecated** and should not be used in new projects. The service will shut down on August 25, 2025.

Please see our [Dynamic Links Deprecation FAQ documentation](https://firebase.google.com/support/dynamic-links-faq) for more guidance.

### Firebase Performance Monitoring

For specific Firebase Performance Monitoring development, see
[the Performance README](FirebasePerformance/README.md) for instructions about building the SDK
and [the Performance TestApp README](FirebasePerformance/Tests/TestApp/README.md) for instructions about
integrating Performance with the dev test App.

### Firebase Storage

To run the Storage Integration tests, follow the instructions in
[StorageIntegration.swift](FirebaseStorage/Tests/Integration/StorageIntegration.swift).

#### Push Notifications

Push notifications can only be delivered to specially provisioned App IDs in the developer portal.
In order to test receiving push notifications, you will need to:

1. Change the bundle identifier of the sample app to something you own in your Apple Developer
account and enable that App ID for push notifications.
2. You'll also need to
[upload your APNs Provider Authentication Key or certificate to the
Firebase Console](https://firebase.google.com/docs/cloud-messaging/ios/certs)
at **Project Settings > Cloud Messaging > [Your Firebase App]**.
3. Ensure your iOS device is added to your Apple Developer portal as a test device.

#### iOS Simulator

The iOS Simulator cannot register for remote notifications and will not receive push notifications.
To receive push notifications, follow the steps above and run the app on a physical device.

## Building with Firebase on Apple platforms

Firebase provides official beta support for macOS, Catalyst, and tvOS. visionOS and watchOS
are community supported. Thanks to community contributions for many of the multi-platform PRs.

At this time, most of Firebase's products are available across Apple platforms. There are still
a few gaps, especially on visionOS and watchOS. For details about the current support matrix, see
[this chart](https://firebase.google.com/docs/ios/learn-more#firebase_library_support_by_platform)
in Firebase's documentation.

### visionOS

Where supported, visionOS works as expected with the exception of Firestore via Swift Package
Manager where it is required to use the source distribution.

To enable the Firestore source distribution, quit Xcode and open the desired
project from the command line with the `FIREBASE_SOURCE_FIRESTORE` environment
variable: `open --env FIREBASE_SOURCE_FIRESTORE /path/to/project.xcodeproj`.
To go back to using the binary distribution of Firestore, quit Xcode and open
Xcode like normal, without the environment variable.

### watchOS
Thanks to contributions from the community, many of Firebase SDKs now compile, run unit tests, and
work on watchOS. See the [Independent Watch App Sample](Example/watchOSSample).

Keep in mind that watchOS is not officially supported by Firebase. While we can catch basic unit
test issues with GitHub Actions, there may be some changes where the SDK no longer works as expected
on watchOS. If you encounter this, please
[file an issue](https://github.com/firebase/firebase-ios-sdk/issues).

During app setup in the console, you may get to a step that mentions something like "Checking if the
app has communicated with our servers". This relies on Analytics and will not work on watchOS.
**It's safe to ignore the message and continue**, the rest of the SDKs will work as expected.

#### Additional Crashlytics Notes
* watchOS has limited support. Due to watchOS restrictions, mach exceptions and signal crashes are
not recorded. (Crashes in SwiftUI are generated as mach exceptions, so will not be recorded)

## Combine
Thanks to contributions from the community, _FirebaseCombineSwift_ contains support for Apple's Combine
framework. This module is currently under development and not yet supported for use in production
environments. For more details, please refer to the [docs](FirebaseCombineSwift/README.md).

## Roadmap

See [Roadmap](ROADMAP.md) for more about the Firebase Apple SDK Open Source
plans and directions.

## Contributing

See [Contributing](CONTRIBUTING.md) for more information on contributing to the Firebase
Apple SDK.

## License

The contents of this repository are licensed under the
[Apache License, version 2.0](http://www.apache.org/licenses/LICENSE-2.0).

Your use of Firebase is governed by the
[Terms of Service for Firebase Services](https://firebase.google.com/terms/).

=== end iosApp/Pods/FirebaseCoreInternal/README.md ===

===
Path: iosApp/Pods/GTMSessionFetcher/README.md
===
# Google Toolbox for Mac - Session Fetcher

**Project site** <https://github.com/google/gtm-session-fetcher><br>
**Discussion group** <http://groups.google.com/group/google-toolbox-for-mac>

[![SwiftPM](https://github.com/google/gtm-session-fetcher/actions/workflows/swiftpm.yml/badge.svg?branch=main)](https://github.com/google/gtm-session-fetcher/actions/workflows/swiftpm.yml)
[![CocoaPods](https://github.com/google/gtm-session-fetcher/actions/workflows/cocoapods.yml/badge.svg?branch=main)](https://github.com/google/gtm-session-fetcher/actions/workflows/cocoapods.yml)

`GTMSessionFetcher` makes it easy for Cocoa applications to perform http
operations. The fetcher is implemented as a wrapper on `NSURLSession`, so its
behavior is asynchronous and uses operating-system settings.

Features include:
- Simple to build; only one source/header file pair is required
- Simple to use: takes just two lines of code to fetch a request
- Supports upload and download sessions
- Flexible cookie storage
- Automatic retry on errors, with exponential backoff
- Support for generating multipart MIME upload streams
- Easy, convenient logging of http requests and responses
- Supports plug-in authentication such as with GTMAppAuth
- Easily testable; self-mocking
- Automatic rate limiting when created by the `GTMSessionFetcherService` factory class
- Fully independent of other projects

**To get started** please read
[USING.md](https://github.com/google/google-api-objectivec-client-for-rest/blob/main/USING.md)
for detailed information.
=== end iosApp/Pods/GTMSessionFetcher/README.md ===

===
Path: iosApp/Pods/GTMSessionFetcher/Sources/Core/GTMSessionFetcherService+Internal.h
===
/* Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "GTMSessionFetcher/GTMSessionFetcherService.h"

// Internal methods from GTMSessionFetcherService, not intended for public use.

@interface GTMSessionFetcherService (Internal)

// Methods for use by the fetcher class only.
- (nullable NSURLSession *)session;
- (nullable NSURLSession *)sessionWithCreationBlock:
    (nonnull NS_NOESCAPE GTMSessionFetcherSessionCreationBlock)creationBlock;
- (nullable id<NSURLSessionDelegate>)sessionDelegate;
- (nullable NSDate *)stoppedAllFetchersDate;
- (void)fetcherDidStop:(nonnull GTMSessionFetcher *)fetcher callbacksPending: (BOOL)callbacksPending;

@end

=== end iosApp/Pods/GTMSessionFetcher/Sources/Core/GTMSessionFetcherService+Internal.h ===

===
Path: iosApp/Pods/GTMSessionFetcher/Sources/Core/Public/GTMSessionFetcher/GTMSessionFetcher.h
===
/* Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GTMSessionFetcher is a wrapper around NSURLSession for http operations.
//
// What does this offer on top of of NSURLSession?
//
// - Block-style callbacks for useful functionality like progress rather
//   than delegate methods.
// - Out-of-process uploads and downloads using NSURLSession, including
//   management of fetches after relaunch.
// - Integration with GTMAppAuth for invisible management and refresh of
//   authorization tokens.
// - Pretty-printed http logging.
// - Cookies handling that does not interfere with or get interfered with
//   by WebKit cookies or on Mac by Safari and other apps.
// - Credentials handling for the http operation.
// - Rate-limiting and cookie grouping when fetchers are created with
//   GTMSessionFetcherService.
//
// If the bodyData or bodyFileURL property is set, then a POST request is assumed.
//
// Each fetcher is assumed to be for a one-shot fetch request; don't reuse the object
// for a second fetch.
//
// The fetcher will be self-retained as long as a connection is pending.
//
// To keep user activity private, URLs must have an https scheme (unless the property
// allowedInsecureSchemes is set to permit the scheme.)
//
// Callbacks will be released when the fetch completes or is stopped, so there is no need
// to use weak self references in the callback blocks.
//
// Sample usage:
//
//  _fetcherService = [[GTMSessionFetcherService alloc] init];
//
//  GTMSessionFetcher *myFetcher = [_fetcherService fetcherWithURLString:myURLString];
//  myFetcher.retryEnabled = YES;
//  myFetcher.comment = @"First profile image";
//
//  // Optionally specify a file URL or NSData for the request body to upload.
//  myFetcher.bodyData = [postString dataUsingEncoding:NSUTF8StringEncoding];
//
//  [myFetcher beginFetchWithCompletionHandler:^(NSData *data, NSError *error) {
//    if (error != nil) {
//      // Server status code or network error.
//      //
//      // If the domain is kGTMSessionFetcherStatusDomain then the error code
//      // is a failure status from the server.
//    } else {
//      // Fetch succeeded.
//    }
//  }];
//
// There is also a beginFetch call that takes a pointer and selector for the completion handler;
// a pointer and selector is a better style when the callback is a substantial, separate method.
//
// NOTE:  Fetches may retrieve data from the server even though the server
//        returned an error, so the criteria for success is a non-nil error.
//        The completion handler is called when the server status is >= 300 with an NSError
//        having domain kGTMSessionFetcherStatusDomain and code set to the server status.
//
//        Status codes are at <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html>
//
//
// Background session support:
//
// Out-of-process uploads and downloads may be created by setting the fetcher's
// useBackgroundSession property. Data to be uploaded should be provided via
// the uploadFileURL property; the download destination should be specified with
// the destinationFileURL.  NOTE: Background upload files should be in a location
// that will be valid even after the device is restarted, so the file should not
// be uploaded from a system temporary or cache directory.
//
// Background session transfers are slower, and should typically be used only
// for very large downloads or uploads (hundreds of megabytes).
//
// When background sessions are used in iOS apps, the application delegate must
// pass through the parameters from UIApplicationDelegate's
// application:handleEventsForBackgroundURLSession:completionHandler: to the
// fetcher class.
//
// When the application has been relaunched, it may also create a new fetcher
// instance to handle completion of the transfers.
//
//  - (void)application:(UIApplication *)application
//      handleEventsForBackgroundURLSession:(NSString *)identifier
//                        completionHandler:(void (^)())completionHandler {
//    // Application was re-launched on completing an out-of-process download.
//
//    // Pass the URLSession info related to this re-launch to the fetcher class.
//    [GTMSessionFetcher application:application
//        handleEventsForBackgroundURLSession:identifier
//                          completionHandler:completionHandler];
//
//    // Get a fetcher related to this re-launch and re-hook up a completionHandler to it.
//    GTMSessionFetcher *fetcher = [GTMSessionFetcher fetcherWithSessionIdentifier:identifier];
//    NSURL *destinationFileURL = fetcher.destinationFileURL;
//    fetcher.completionHandler = ^(NSData *data, NSError *error) {
//      [self downloadCompletedToFile:destinationFileURL error:error];
//    };
//  }
//
//
// Threading and queue support:
//
// Networking always happens on a background thread; there is no advantage to
// changing thread or queue to create or start a fetcher.
//
// Callbacks are run on the main thread; alternatively, the app may set the
// fetcher's callbackQueue to a dispatch queue.
//
// Once the fetcher's beginFetch method has been called, the fetcher's methods and
// properties may be accessed from any thread.
//
// Downloading to disk:
//
// To have downloaded data saved directly to disk, specify a file URL for the
// destinationFileURL property.
//
// HTTP methods and headers:
//
// Alternative HTTP methods, like PUT, and custom headers can be specified by
// creating the fetcher with an appropriate NSMutableURLRequest.
//
// Custom headers can also be provided per-request via an instance of `GTMFetcherDecoratorProtocol`
// passed to `-[GTMSessionFetcherService addDecorator:]`.
//
// Caching:
//
// The fetcher avoids caching. That is best for API requests, but may hurt
// repeat fetches of static data. Apps may enable a persistent disk cache by
// customizing the config:
//
//  fetcher.configurationBlock = ^(GTMSessionFetcher *configFetcher,
//                                 NSURLSessionConfiguration *config) {
//    config.URLCache = [NSURLCache sharedURLCache];
//  };
//
// Or use the standard system config to share cookie storage with web views
// and to enable disk caching:
//
//  fetcher.configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
//
//
// Cookies:
//
// There are three supported mechanisms for remembering cookies between fetches.
//
// By default, a standalone GTMSessionFetcher uses a mutable array held
// statically to track cookies for all instantiated fetchers.  This avoids
// cookies being set by servers for the application from interfering with
// Safari and WebKit cookie settings, and vice versa.
// The fetcher cookies are lost when the application quits.
//
// To rely instead on WebKit's global NSHTTPCookieStorage, set the fetcher's
// cookieStorage property:
//   myFetcher.cookieStorage = [NSHTTPCookieStorage sharedHTTPCookieStorage];
//
// To share cookies with other apps, use the method introduced in iOS 9/OS X 10.11:
//   myFetcher.cookieStorage =
//     [NSHTTPCookieStorage sharedCookieStorageForGroupContainerIdentifier:kMyCompanyContainedID];
//
// To ignore existing cookies and only have cookies related to the single fetch
// be applied, make a temporary cookie storage object:
//   myFetcher.cookieStorage = [[GTMSessionCookieStorage alloc] init];
//
// Note: cookies set while following redirects will be sent to the server, as
// the redirects are followed by the fetcher.
//
// To completely disable cookies, adjust the session configuration appropriately
// in the fetcher or fetcher service:
//  fetcher.configurationBlock = ^(GTMSessionFetcher *configFetcher,
//                                 NSURLSessionConfiguration *config) {
//    config.HTTPCookieAcceptPolicy = NSHTTPCookieAcceptPolicyNever;
//    config.HTTPShouldSetCookies = NO;
//  };
//
// If the fetcher is created from a GTMSessionFetcherService object
// then the cookie storage mechanism is set to use the cookie storage in the
// service object rather than the static storage. Disabling cookies in the
// session configuration set on a service object will disable cookies for all
// fetchers created from that GTMSessionFetcherService object, since the session
// configuration is propagated to the fetcher.
//
//
// Monitoring data transfers.
//
// The fetcher supports a variety of properties for progress monitoring
// progress with callback blocks.
//  GTMSessionFetcherSendProgressBlock sendProgressBlock
//  GTMSessionFetcherReceivedProgressBlock receivedProgressBlock
//  GTMSessionFetcherDownloadProgressBlock downloadProgressBlock
//
// If supplied by the server, the anticipated total download size is available
// as [[myFetcher response] expectedContentLength] (and may be -1 for unknown
// download sizes.)
//
//
// Automatic retrying of fetches
//
// The fetcher can optionally create a timer and reattempt certain kinds of
// fetch failures (status codes 408, request timeout; 502, gateway failure;
// 503, service unavailable; 504, gateway timeout; networking errors
// NSURLErrorTimedOut and NSURLErrorNetworkConnectionLost.)  The user may
// set a retry selector to customize the type of errors which will be retried.
//
// Retries are done in an exponential-backoff fashion (that is, after 1 second,
// 2, 4, 8, and so on.)
//
// Enabling automatic retries looks like this:
//  myFetcher.retryEnabled = YES;
//
// With retries enabled, the completion callbacks are called only
// when no more retries will be attempted. Calling the fetcher's stopFetching
// method will terminate the retry timer, without the finished or failure
// selectors being invoked.
//
// Optionally, the client may set the maximum retry interval:
//  myFetcher.maxRetryInterval = 60.0; // in seconds; default is 60 seconds
//                                     // for downloads, 600 for uploads
//
// Servers should never send a 400 or 500 status for errors that are retryable
// by clients, as those values indicate permanent failures. In nearly all
// cases, the default standard retry behavior is correct for clients, and no
// custom client retry behavior is needed or appropriate. Servers that send
// non-retryable status codes and expect the client to retry the request are
// faulty.
//
// Still, the client may provide a block to determine if a status code or other
// error should be retried. The block returns YES to set the retry timer or NO
// to fail without additional fetch attempts.
//
// The retry method may return the |suggestedWillRetry| argument to get the
// default retry behavior.  Server status codes are present in the
// error argument, and have the domain kGTMSessionFetcherStatusDomain. The
// user's method may look something like this:
//
//  myFetcher.retryBlock = ^(BOOL suggestedWillRetry, NSError *error,
//                           GTMSessionFetcherRetryResponse response) {
//    // Perhaps examine error.domain and error.code, or fetcher.retryCount
//    //
//    // Respond with YES to start the retry timer, NO to proceed to the failure
//    // callback, or suggestedWillRetry to get default behavior for the
//    // current error domain and code values.
//    response(suggestedWillRetry);
//  };

#import <Foundation/Foundation.h>

#if TARGET_OS_IPHONE
#import <UIKit/UIKit.h>
#endif
#if TARGET_OS_WATCH
#import <WatchKit/WatchKit.h>
#endif

// By default it is stripped from non DEBUG builds. Developers can override
// this in their project settings.
#ifndef STRIP_GTM_FETCH_LOGGING
#if !DEBUG
#define STRIP_GTM_FETCH_LOGGING 1
#else
#define STRIP_GTM_FETCH_LOGGING 0
#endif
#endif

// Logs in debug builds.
#ifndef GTMSESSION_LOG_DEBUG
#if DEBUG
#define GTMSESSION_LOG_DEBUG(...) NSLog(__VA_ARGS__)
#else
#define GTMSESSION_LOG_DEBUG(...) \
  do {                            \
  } while (0)
#endif
#endif

// Asserts in debug builds (or logs in debug builds if GTMSESSION_ASSERT_AS_LOG
// or NS_BLOCK_ASSERTIONS are defined.)
#ifndef GTMSESSION_ASSERT_DEBUG
#if DEBUG && !defined(NS_BLOCK_ASSERTIONS) && !GTMSESSION_ASSERT_AS_LOG
#undef GTMSESSION_ASSERT_AS_LOG
#define GTMSESSION_ASSERT_AS_LOG 1
#endif

#if DEBUG && !GTMSESSION_ASSERT_AS_LOG
#define GTMSESSION_ASSERT_DEBUG(...) NSAssert(__VA_ARGS__)
#elif DEBUG
#define GTMSESSION_ASSERT_DEBUG(pred, ...) \
  if (!(pred)) {                           \
    NSLog(__VA_ARGS__);                    \
  }
#else
#define GTMSESSION_ASSERT_DEBUG(pred, ...) \
  do {                                     \
  } while (0)
#endif
#endif

// Asserts in debug builds, logs in release builds (or logs in debug builds if
// GTMSESSION_ASSERT_AS_LOG is defined.)
#ifndef GTMSESSION_ASSERT_DEBUG_OR_LOG
#if DEBUG && !GTMSESSION_ASSERT_AS_LOG
#define GTMSESSION_ASSERT_DEBUG_OR_LOG(...) NSAssert(__VA_ARGS__)
#else
#define GTMSESSION_ASSERT_DEBUG_OR_LOG(pred, ...) \
  if (!(pred)) {                                  \
    NSLog(__VA_ARGS__);                           \
  }
#endif
#endif

// Macro useful for more verbose logging from NSURLSession during debugging.
#if 0
#define GTMSESSION_LOG_DEBUG_VERBOSE(...) GTMSESSION_LOG_DEBUG(__VA_ARGS__)
#else
#define GTMSESSION_LOG_DEBUG_VERBOSE(...)
#endif

// For iOS, the fetcher can declare itself a background task to allow fetches
// to finish when the app leaves the foreground.
//
// (This is unrelated to providing a background configuration, which allows
// out-of-process uploads and downloads.)
//
// To disallow use of background tasks during fetches, the target should define
// GTM_BACKGROUND_TASK_FETCHING to 0, or alternatively may set the
// skipBackgroundTask property to YES.
#if !defined(GTM_BACKGROUND_TASK_FETCHING) && \
    (TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_MACCATALYST)
#define GTM_BACKGROUND_TASK_FETCHING 1
#endif

#ifdef __cplusplus
extern "C" {
#endif

// When creating background sessions to perform out-of-process uploads and
// downloads, on app launch any background sessions must be reconnected in
// order to receive events that occurred while the app was not running.
//
// The fetcher will automatically attempt to recreate the sessions on app
// start, but doing so reads from NSUserDefaults. This may have launch-time
// performance impacts.
//
// To avoid launch performance impacts, on iPhone/iPad with iOS 13+ the
// GTMSessionFetcher class will register for the app launch notification and
// perform the reconnect then.
//
// Apps targeting Mac or older iOS SDKs can opt into the new behavior by defining
// GTMSESSION_RECONNECT_BACKGROUND_SESSIONS_ON_LAUNCH=1.
//
// Apps targeting new SDKs can force the old behavior by defining
// GTMSESSION_RECONNECT_BACKGROUND_SESSIONS_ON_LAUNCH = 0.
#ifndef GTMSESSION_RECONNECT_BACKGROUND_SESSIONS_ON_LAUNCH
// Default to the on-launch behavior for iOS 13+.
#if TARGET_OS_IOS && defined(__IPHONE_13_0) && __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_13_0
#define GTMSESSION_RECONNECT_BACKGROUND_SESSIONS_ON_LAUNCH 1
#else
#define GTMSESSION_RECONNECT_BACKGROUND_SESSIONS_ON_LAUNCH 0
#endif
#endif

NS_ASSUME_NONNULL_BEGIN

// Notifications
//
// Fetch started and stopped, and fetch retry delay started and stopped.
extern NSString *const kGTMSessionFetcherStartedNotification;
extern NSString *const kGTMSessionFetcherStoppedNotification;
extern NSString *const kGTMSessionFetcherRetryDelayStartedNotification;
extern NSString *const kGTMSessionFetcherRetryDelayStoppedNotification;

// Completion handler notification. This is intended for use by code capturing
// and replaying fetch requests and results for testing. For fetches where
// destinationFileURL or accumulateDataBlock is set for the fetcher, the data
// will be nil for successful fetches.
//
// This notification is posted on the main thread.
extern NSString *const kGTMSessionFetcherCompletionInvokedNotification;
extern NSString *const kGTMSessionFetcherCompletionDataKey;
extern NSString *const kGTMSessionFetcherCompletionErrorKey;

// Constants for NSErrors created by the fetcher (excluding server status errors,
// and error objects originating in the OS.)
extern NSString *const kGTMSessionFetcherErrorDomain;

// The fetcher turns server error status values (3XX, 4XX, 5XX) into NSErrors
// with domain kGTMSessionFetcherStatusDomain.
//
// Any server response body data accompanying the status error is added to the
// userInfo dictionary with key kGTMSessionFetcherStatusDataKey.
extern NSString *const kGTMSessionFetcherStatusDomain;
extern NSString *const kGTMSessionFetcherStatusDataKey;
extern NSString *const kGTMSessionFetcherStatusDataContentTypeKey;

// When a fetch fails with an error, these keys are included in the error userInfo
// dictionary if retries were attempted.
extern NSString *const kGTMSessionFetcherNumberOfRetriesDoneKey;
extern NSString *const kGTMSessionFetcherElapsedIntervalWithRetriesKey;

// Background session support requires access to NSUserDefaults.
// If [NSUserDefaults standardUserDefaults] doesn't yield the correct NSUserDefaults for your usage,
// ie for an App Extension, then implement this class/method to return the correct NSUserDefaults.
// https://developer.apple.com/library/ios/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW6
@interface GTMSessionFetcherUserDefaultsFactory : NSObject

+ (NSUserDefaults *)fetcherUserDefaults;

@end

#ifdef __cplusplus
}
#endif

typedef NS_ENUM(NSInteger, GTMSessionFetcherError) {
  GTMSessionFetcherErrorDownloadFailed = -1,
  GTMSessionFetcherErrorUploadChunkUnavailable = -2,
  GTMSessionFetcherErrorBackgroundExpiration = -3,
  GTMSessionFetcherErrorBackgroundFetchFailed = -4,
  GTMSessionFetcherErrorInsecureRequest = -5,
  GTMSessionFetcherErrorTaskCreationFailed = -6,

  // This error is only used if `stopFetchingTriggersCompletionHandler` is
  // enabled and `-stopFetching` is called on that fetcher.
  GTMSessionFetcherErrorUserCancelled = -7,
};

typedef NS_ENUM(NSInteger, GTMSessionFetcherStatus) {
  // Standard http status codes.
  GTMSessionFetcherStatusNotModified = 304,
  GTMSessionFetcherStatusBadRequest = 400,
  GTMSessionFetcherStatusUnauthorized = 401,
  GTMSessionFetcherStatusForbidden = 403,
  GTMSessionFetcherStatusPreconditionFailed = 412
};

#ifdef __cplusplus
extern "C" {
#endif

@class GTMSessionCookieStorage;
@class GTMSessionFetcher;
@class GTMSessionFetcherService;

// The configuration block is for modifying the NSURLSessionConfiguration only.
// DO NOT change any fetcher properties in the configuration block.
typedef void (^GTMSessionFetcherConfigurationBlock)(GTMSessionFetcher *fetcher,
                                                    NSURLSessionConfiguration *configuration);
typedef void (^GTMSessionFetcherSystemCompletionHandler)(void);
typedef void (^GTMSessionFetcherCompletionHandler)(NSData *_Nullable data,
                                                   NSError *_Nullable error);
typedef NSURLSession *_Nullable (^GTMSessionFetcherSessionCreationBlock)(
    id<NSURLSessionDelegate> _Nullable sessionDelegate);
typedef void (^GTMSessionFetcherBodyStreamProviderResponse)(NSInputStream *bodyStream);
typedef void (^GTMSessionFetcherBodyStreamProvider)(
    GTMSessionFetcherBodyStreamProviderResponse response);
typedef void (^GTMSessionFetcherDidReceiveResponseDispositionBlock)(
    NSURLSessionResponseDisposition disposition);
typedef void (^GTMSessionFetcherDidReceiveResponseBlock)(
    NSURLResponse *response, GTMSessionFetcherDidReceiveResponseDispositionBlock dispositionBlock);
typedef void (^GTMSessionFetcherChallengeDispositionBlock)(
    NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *_Nullable credential);
typedef void (^GTMSessionFetcherChallengeBlock)(
    GTMSessionFetcher *fetcher, NSURLAuthenticationChallenge *challenge,
    GTMSessionFetcherChallengeDispositionBlock dispositionBlock);
typedef void (^GTMSessionFetcherWillRedirectResponse)(NSURLRequest *_Nullable redirectedRequest);
typedef void (^GTMSessionFetcherWillRedirectBlock)(NSHTTPURLResponse *redirectResponse,
                                                   NSURLRequest *redirectRequest,
                                                   GTMSessionFetcherWillRedirectResponse response);
typedef void (^GTMSessionFetcherAccumulateDataBlock)(NSData *_Nullable buffer);
typedef void (^GTMSessionFetcherSimulateByteTransferBlock)(NSData *_Nullable buffer,
                                                           int64_t bytesWritten,
                                                           int64_t totalBytesWritten,
                                                           int64_t totalBytesExpectedToWrite);
typedef void (^GTMSessionFetcherReceivedProgressBlock)(int64_t bytesWritten,
                                                       int64_t totalBytesWritten);
typedef void (^GTMSessionFetcherDownloadProgressBlock)(int64_t bytesWritten,
                                                       int64_t totalBytesWritten,
                                                       int64_t totalBytesExpectedToWrite);
typedef void (^GTMSessionFetcherSendProgressBlock)(int64_t bytesSent, int64_t totalBytesSent,
                                                   int64_t totalBytesExpectedToSend);
typedef void (^GTMSessionFetcherWillCacheURLResponseResponse)(
    NSCachedURLResponse *_Nullable cachedResponse);
typedef void (^GTMSessionFetcherWillCacheURLResponseBlock)(
    NSCachedURLResponse *proposedResponse,
    GTMSessionFetcherWillCacheURLResponseResponse responseBlock);
typedef void (^GTMSessionFetcherRetryResponse)(BOOL shouldRetry);
typedef void (^GTMSessionFetcherRetryBlock)(BOOL suggestedWillRetry, NSError *_Nullable error,
                                            GTMSessionFetcherRetryResponse response);

API_AVAILABLE(ios(10.0), macosx(10.12), tvos(10.0), watchos(6.0))
typedef void (^GTMSessionFetcherMetricsCollectionBlock)(NSURLSessionTaskMetrics *metrics);

typedef void (^GTMSessionFetcherTestResponse)(NSHTTPURLResponse *_Nullable response,
                                              NSData *_Nullable data, NSError *_Nullable error);
typedef void (^GTMSessionFetcherTestBlock)(GTMSessionFetcher *fetcherToTest,
                                           GTMSessionFetcherTestResponse testResponse);

// Provides access to a user-agent string calculated on demand.
//
// Methods and properties on this protocol must be thread-safe. In addition,
// |userAgentCache| must not block the calling thread to perform I/O.
@protocol GTMUserAgentProvider <NSObject>

// Non-nil user-agent string if |userAgent| has already been cached and is safe
// to read without blocking the calling thread, |nil| otherwise.
@property(atomic, readonly, nullable, copy) NSString *cachedUserAgent;

// The user-agent string, calculated on demand. This might block the calling thread if
// |userAgentCached| is NO.
@property(atomic, readonly, copy) NSString *userAgent;

@end

/// Provides a User-Agent string that is known at the time the fetcher is created.
__attribute__((objc_subclassing_restricted))
@interface GTMUserAgentStringProvider : NSObject<GTMUserAgentProvider>

+ (instancetype)new NS_UNAVAILABLE;
- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithUserAgentString:(NSString *)userAgentString NS_DESIGNATED_INITIALIZER;

@end

// Calculates the User-Agent string on demand using |GTMFetcherStandardUserAgentString()| given an
// optional bundle.
__attribute__((objc_subclassing_restricted))
@interface GTMStandardUserAgentProvider : NSObject<GTMUserAgentProvider>

+ (instancetype)new NS_UNAVAILABLE;
- (instancetype)init NS_UNAVAILABLE;
- (instancetype)initWithBundle:(nullable NSBundle *)bundle NS_DESIGNATED_INITIALIZER;

@end

void GTMSessionFetcherAssertValidSelector(id _Nullable obj, SEL _Nullable sel, ...);

// Utility functions for applications self-identifying to servers via a
// user-agent header

// The "standard" user agent includes the application identifier, taken from the bundle,
// followed by a space and the system version string. Pass nil to use +mainBundle as the source
// of the bundle identifier.
//
// Applications may use this as a starting point for their own user agent strings, perhaps
// with additional sections appended.  Use GTMFetcherCleanedUserAgentString() below to
// clean up any string being added to the user agent.
NSString *GTMFetcherStandardUserAgentString(NSBundle *_Nullable bundle);

// Make a generic name and version for the current application, like
// com.example.MyApp/1.2.3 relying on the bundle identifier and the
// CFBundleShortVersionString or CFBundleVersion.
//
// The bundle ID may be overridden as the base identifier string by
// adding to the bundle's Info.plist a "GTMUserAgentID" key.
//
// The application version may be overridden by adding to the bundle's
// Info.plist a "GTMUserAgentVersion" key.
//
// If no bundle ID or override is available, the process name preceded
// by "proc_" is used.
NSString *GTMFetcherApplicationIdentifier(NSBundle *_Nullable bundle);

// Make an identifier like "MacOSX/10.7.1" or "iPod_Touch/4.1 hw/iPod1_1"
NSString *GTMFetcherSystemVersionString(void);

// Make a parseable user-agent identifier from the given string, replacing whitespace
// and commas with underscores, and removing other characters that may interfere
// with parsing of the full user-agent string.
//
// For example, @"[My App]" would become @"My_App"
NSString *GTMFetcherCleanedUserAgentString(NSString *str);

// Grab the data from an input stream. Since streams cannot be assumed to be rewindable,
// this may be destructive; the caller can try to rewind the stream (by setting the
// NSStreamFileCurrentOffsetKey property) or can just use the NSData to make a new
// NSInputStream. This function is intended to facilitate testing rather than be used in
// production.
//
// This function operates synchronously on the current thread. Depending on how the
// input stream is implemented, it may be appropriate to dispatch to a different
// queue before calling this function.
//
// Failure is indicated by a returned data value of nil.
NSData *_Nullable GTMDataFromInputStream(NSInputStream *inputStream, NSError **outError);

#ifdef __cplusplus
}  // extern "C"
#endif

// Completion handler passed to -[GTMFetcherDecoratorProtocol fetcherWillStart:completionHandler:].
typedef void (^GTMFetcherDecoratorFetcherWillStartCompletionHandler)(NSURLRequest *_Nullable,
                                                                     NSError *_Nullable);

// Allows intercepting a request and optionally modifying it before the request (or a retry)
// is sent. See `-[GTMSessionFetcherService addDecorator:]` and `-[GTMSessionFetcherService
// removeDecorator:]`.
//
// Decorator methods must be thread-safe, as they might be invoked on any queue.
@protocol GTMFetcherDecoratorProtocol <NSObject>

// Invoked just before a fetcher's request starts.
//
// After the decorator's work is complete, the decorator must invoke `handler(request, error)`
// either synchronously or asynchronously (on any queue).
//
// If no changes are to be made, pass `nil` for both `request` and `error`.
//
// Otherwise, if `error` is non-nil, then the fetcher is stopped with the given error, and any
// further decorators' `-fetcherWillStart:completionHandler:` methods are not invoked.
//
// Otherwise, the decorator may use `[fetcher.request mutableCopy]`, make changes to the mutable
// copy of the request, and pass the result to the handler via the `request` parameter.
//
// To distinguish the initial fetch from retries, the decorator can look at `fetcher.retryCount`.
//
// This method must not block the caller (e.g., performing synchronous I/O). Perform any blocking
// work or I/O on a different queue, then invoke `handler` with the results after the blocking work
// completes.
- (void)fetcherWillStart:(GTMSessionFetcher *)fetcher
       completionHandler:(GTMFetcherDecoratorFetcherWillStartCompletionHandler)handler;

// Invoked just after a fetcher's request finishes (either on success or on failure).
//
// After the decorator's work is complete, the decorator must invoke `handler()` either
// synchronously or asynchronously (on any queue).
//
// To access the result of the fetch, the decorator can look at `fetcher.response`.
//
// This method must not block the caller (e.g., performing synchronous I/O). Perform any blocking
// work or I/O on a different queue, then invoke `handler` with the results after the blocking work
// completes.
- (void)fetcherDidFinish:(GTMSessionFetcher *)fetcher
                withData:(nullable NSData *)data
                   error:(nullable NSError *)error
       completionHandler:(void (^)(void))handler;

@end

// This protocol allows abstract references to the fetcher service.
//
// Apps should not need to use this protocol.
@protocol GTMSessionFetcherServiceProtocol <NSObject>

- (GTMSessionFetcher *)fetcherWithRequest:(NSURLRequest *)request;

@property(atomic, strong, null_resettable, readonly) dispatch_queue_t callbackQueue;

// These properties are being removed from the protocol; clients should not attempt new
// accesses to them.
@property(atomic, assign) BOOL reuseSession;
@property(atomic, readonly, strong, nullable) NSOperationQueue *delegateQueue;

@end  // @protocol GTMSessionFetcherServiceProtocol

__deprecated_msg("implement GTMSessionFetcherAuthorizer instead")
    @protocol GTMFetcherAuthorizationProtocol<NSObject>
@required
// This protocol allows us to call the authorizer without requiring its sources
// in this project. This protocol is deprecated in favor of GTMSessionFetcherAuthorizer,
// and implementations should move to that protocol in anticipation of
// GTMFetcherAuthorizationProtocol being deleted in a future release.

// This method is being phased out. While implementing it is necessary to satisfy
// the protocol's @required restrictions, conforming implementations that implement
// authorizeRequest:completionHandler: will have that called instead.
// be removed in a future version when GTMFetcherAuthorizationProtocol is
// also removed.
- (void)authorizeRequest:(nullable NSMutableURLRequest *)request
                delegate:(id)delegate
       didFinishSelector:(SEL)sel
    __deprecated_msg("implement authorizeRequest:completionHandler: instead");

- (void)stopAuthorization;

- (void)stopAuthorizationForRequest:(NSURLRequest *)request;

- (BOOL)isAuthorizingRequest:(NSURLRequest *)request;

- (BOOL)isAuthorizedRequest:(NSURLRequest *)request;

@property(atomic, strong, readonly, nullable) NSString *userEmail;

@optional

// This method is prefered over authorizeRequest:delegate:didFinishSelector:, and
// becomes a required method in the GTMSessionFetcherAuthorizer protocol.
- (void)authorizeRequest:(nullable NSMutableURLRequest *)request
       completionHandler:(void (^)(NSError *_Nullable error))handler;

// Indicate if authorization may be attempted. Even if this succeeds,
// authorization may fail if the user's permissions have been revoked.
@property(atomic, readonly) BOOL canAuthorize;

// For development only, allow authorization of non-SSL requests, allowing
// transmission of the bearer token unencrypted.
@property(atomic, assign) BOOL shouldAuthorizeAllRequests;

@property(atomic, weak, nullable) id<GTMSessionFetcherServiceProtocol> fetcherService;

- (BOOL)primeForRefresh;

@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated"
// This is the preferred, forward-going protocol for fetcher authorization. it
// currently implements the deprecated GTMFetcherAuthorizationProtocol in order
// to avoid changing the GTMSessionFetcher API surface while implementations
// migrate. In a future release, the non-deprecated method declarations will be
// moved here and the GTMFetcherAuthorizationProtocol and the deprecated methods
// deleted.
@protocol GTMSessionFetcherAuthorizer <GTMFetcherAuthorizationProtocol>
// This protocol allows us to call the authorizer without requiring its sources
// in this project.
#pragma clang diagnostic pop
@required

// Authorizers should implement this method rather than the selector-based
// callback form from the old protocol.
- (void)authorizeRequest:(nullable NSMutableURLRequest *)request
       completionHandler:(void (^)(NSError *_Nullable error))handler;

@optional
// This method is re-declared here as @optional only to quash deprecation warnings
// on the @required declaration from GTMFetcherAuthorizationProtocol, which
// must still be provided by conforming implementations. Once the old protocol has
// been removed, this method will be marked unavailable to trigger implementations
// to stop providing it, and it will eventually be removed.
- (void)authorizeRequest:(nullable NSMutableURLRequest *)request
                delegate:(id)delegate
       didFinishSelector:(SEL)sel;

@end

#if GTM_BACKGROUND_TASK_FETCHING
// A protocol for an alternative target for messages from GTMSessionFetcher to UIApplication.
// Set the target using +[GTMSessionFetcher setSubstituteUIApplication:]
@protocol GTMUIApplicationProtocol <NSObject>
- (UIBackgroundTaskIdentifier)beginBackgroundTaskWithName:(nullable NSString *)taskName
                                        expirationHandler:(void (^__nullable)(void))handler;
- (void)endBackgroundTask:(UIBackgroundTaskIdentifier)identifier;
@end
#endif

#pragma mark -

// GTMSessionFetcher objects are used for async retrieval of an http get or post
//
// See additional comments at the beginning of this file
@interface GTMSessionFetcher : NSObject <NSURLSessionDelegate>

// Create a fetcher
//
// fetcherWithRequest will return an autoreleased fetcher, but if
// the connection is successfully created, the connection should retain the
// fetcher for the life of the connection as well. So the caller doesn't have
// to retain the fetcher explicitly unless they want to be able to cancel it.
+ (instancetype)fetcherWithRequest:(nullable NSURLRequest *)request;

// Convenience methods that make a request, like +fetcherWithRequest
+ (instancetype)fetcherWithURL:(NSURL *)requestURL;
+ (instancetype)fetcherWithURLString:(NSString *)requestURLString;

// Methods for creating fetchers to continue previous fetches.
+ (instancetype)fetcherWithDownloadResumeData:(NSData *)resumeData;
+ (nullable instancetype)fetcherWithSessionIdentifier:(NSString *)sessionIdentifier;

// Returns an array of currently active fetchers for background sessions,
// both restarted and newly created ones.
+ (NSArray<GTMSessionFetcher *> *)fetchersForBackgroundSessions;

// Designated initializer.
//
// Applications should create fetchers with a "fetcherWith..." method on a fetcher
// service or a class method, not with this initializer.
//
// The configuration should typically be nil. Applications needing to customize
// the configuration may do so by setting the configurationBlock property.
- (instancetype)initWithRequest:(nullable NSURLRequest *)request
                  configuration:(nullable NSURLSessionConfiguration *)configuration;

// The fetcher's request.  This may not be set after beginFetch has been invoked. The request
// may change due to redirects.
@property(atomic, strong, nullable) NSURLRequest *request;

// Set a header field value on the request. Header field value changes will not
// affect a fetch after the fetch has begun.
- (void)setRequestValue:(nullable NSString *)value forHTTPHeaderField:(NSString *)field;

// Data used for resuming a download task.
@property(atomic, readonly, nullable) NSData *downloadResumeData;

// The configuration; this must be set before the fetch begins. If no configuration is
// set or inherited from the fetcher service, then the fetcher uses an ephemeral config.
//
// NOTE: This property should typically be nil. Applications needing to customize
// the configuration should do so by setting the configurationBlock property.
// That allows the fetcher to pick an appropriate base configuration, with the
// application setting only the configuration properties it needs to customize.
@property(atomic, strong, nullable) NSURLSessionConfiguration *configuration;

// A block the client may use to customize the configuration used to create the session.
//
// This is called synchronously, either on the thread that begins the fetch or, during a retry,
// on the main thread. The configuration block may be called repeatedly if multiple fetchers are
// created.
//
// The configuration block is for modifying the NSURLSessionConfiguration only.
// DO NOT change any fetcher properties in the configuration block. Fetcher properties
// may be set in the fetcher service prior to fetcher creation, or on the fetcher prior
// to invoking beginFetch.
@property(atomic, copy, nullable) GTMSessionFetcherConfigurationBlock configurationBlock;

// A session is created as needed by the fetcher.  A fetcher service object
// may maintain sessions for multiple fetches to the same host.
@property(atomic, strong, nullable) NSURLSession *session;

// The task in flight.
@property(atomic, readonly, nullable) NSURLSessionTask *sessionTask;

// The background session identifier.
@property(atomic, readonly, nullable) NSString *sessionIdentifier;

// Indicates a fetcher created to finish a background session task.
@property(atomic, readonly) BOOL wasCreatedFromBackgroundSession;

// Indicates the client has committed to reconnecting this background session when
// the app restarts. If this value is YES, the session fetcher will not automatically
// call beginFetchWithCompletionHandler: on the restored fetcher on app start, and
// the session will not handle system events until the client explicitly does.
@property(atomic, assign) BOOL clientWillReconnectBackgroundSession;

// Additional user-supplied data to encode into the session identifier. Since session identifier
// length limits are unspecified, this should be kept small. Key names beginning with an underscore
// are reserved for use by the fetcher.
@property(atomic, strong, nullable) NSDictionary<NSString *, NSString *> *sessionUserInfo;

// The human-readable description to be assigned to the task.
@property(atomic, copy, nullable) NSString *taskDescription;

// The priority assigned to the task, if any.  Use NSURLSessionTaskPriorityLow,
// NSURLSessionTaskPriorityDefault, or NSURLSessionTaskPriorityHigh.
@property(atomic, assign) float taskPriority;

// An optional provider to calculate the User-Agent string on demand. If non-nil and
// an HTTP header field for User-Agent is not set, this is queried before sending out
// the network request for the User-Agent string.
@property(atomic, strong, nullable) id<GTMUserAgentProvider> userAgentProvider;

// The fetcher encodes information used to resume a session in the session identifier.
// This method, intended for internal use returns the encoded information.  The sessionUserInfo
// dictionary is stored as identifier metadata.
- (nullable NSDictionary<NSString *, NSString *> *)sessionIdentifierMetadata;

#if TARGET_OS_IPHONE && !TARGET_OS_WATCH
// The app should pass to this method the completion handler passed in the app delegate method
// application:handleEventsForBackgroundURLSession:completionHandler:
+ (void)application:(UIApplication *)application
    handleEventsForBackgroundURLSession:(NSString *)identifier
                      completionHandler:(GTMSessionFetcherSystemCompletionHandler)completionHandler;
#endif

// Indicate that a newly created session should be a background session.
// A new session identifier will be created by the fetcher.
//
// Warning:  The only thing background sessions are for is rare download
// of huge, batched files of data. And even just for those, there's a lot
// of pain and hackery needed to get transfers to actually happen reliably
// with background sessions.
//
// Don't try to upload or download in many background sessions, since the system
// will impose an exponentially increasing time penalty to prevent the app from
// getting too much background execution time.
//
// References:
//
//   "Moving to Fewer, Larger Transfers"
//   https://forums.developer.apple.com/thread/14853
//
//   "NSURLSession’s Resume Rate Limiter"
//   https://forums.developer.apple.com/thread/14854
//
//   "Background Session Task state persistence"
//   https://forums.developer.apple.com/thread/11554
//
@property(atomic, assign) BOOL useBackgroundSession;

// Indicates if the fetcher was started using a background session.
@property(atomic, readonly, getter=isUsingBackgroundSession) BOOL usingBackgroundSession;

// Indicates if uploads should use an upload task.  This is always set for file or stream-provider
// bodies, but may be set explicitly for NSData bodies.
@property(atomic, assign) BOOL useUploadTask;

// Indicates that the fetcher is using a session that may be shared with other fetchers.
@property(atomic, readonly) BOOL canShareSession;

// By default, the fetcher allows only secure (https) schemes unless this
// property is set, or the GTM_ALLOW_INSECURE_REQUESTS build flag is set.
//
// For example, during debugging when fetching from a development server that lacks SSL support,
// this may be set to @[ @"http" ], or when the fetcher is used to retrieve local files,
// this may be set to @[ @"file" ].
//
// This should be left as nil for release builds to avoid creating the opportunity for
// leaking private user behavior and data.  If a server is providing insecure URLs
// for fetching by the client app, report the problem as server security & privacy bug.
//
// For builds with the iOS 9/OS X 10.11 and later SDKs, this property is required only when
// the app specifies NSAppTransportSecurity/NSAllowsArbitraryLoads in the main bundle's Info.plist.
@property(atomic, copy, nullable) NSArray<NSString *> *allowedInsecureSchemes;

// By default, the fetcher prohibits localhost requests unless this property is set,
// or the GTM_ALLOW_INSECURE_REQUESTS build flag is set.
//
// For localhost requests, the URL scheme is not checked  when this property is set.
//
// For builds with the iOS 9/OS X 10.11 and later SDKs, this property is required only when
// the app specifies NSAppTransportSecurity/NSAllowsArbitraryLoads in the main bundle's Info.plist.
@property(atomic, assign) BOOL allowLocalhostRequest;

// By default, the fetcher requires valid server certs.  This may be bypassed
// temporarily for development against a test server with an invalid cert.
@property(atomic, assign) BOOL allowInvalidServerCertificates;

// Cookie storage object for this fetcher. If nil, the fetcher will use a static cookie
// storage instance shared among fetchers. If this fetcher was created by a fetcher service
// object, it will be set to use the service object's cookie storage. See Cookies section above for
// the full discussion.
//
// Because as of Jan 2014 standalone instances of NSHTTPCookieStorage do not actually
// store any cookies (Radar 15735276) we use our own subclass, GTMSessionCookieStorage,
// to hold cookies in memory.
@property(atomic, strong, nullable) NSHTTPCookieStorage *cookieStorage;

// Setting the credential is optional; it is used if the connection receives
// an authentication challenge.
@property(atomic, strong, nullable) NSURLCredential *credential;

// Setting the proxy credential is optional; it is used if the connection
// receives an authentication challenge from a proxy.
@property(atomic, strong, nullable) NSURLCredential *proxyCredential;

// If body data, body file URL, or body stream provider is not set, then a GET request
// method is assumed.
@property(atomic, strong, nullable) NSData *bodyData;

// File to use as the request body. This forces use of an upload task.
@property(atomic, strong, nullable) NSURL *bodyFileURL;

// Length of body to send, expected or actual.
@property(atomic, readonly) int64_t bodyLength;

// The body stream provider may be called repeatedly to provide a body.
// Setting a body stream provider forces use of an upload task.
@property(atomic, copy, nullable) GTMSessionFetcherBodyStreamProvider bodyStreamProvider;

#pragma clang diagnostic push
// For now retain the existing API surface of accepting a GTMFetcherAuthorizationProtocol
// for the authorizer, but the intent is that this will change to take the new
// GTMSessionFetcherAuthorizer protocol instead in a future major version update.
#pragma clang diagnostic ignored "-Wdeprecated"
// Object to add authorization to the request, if needed.
//
// This may not be changed once beginFetch has been invoked.
@property(atomic, strong, nullable) id<GTMFetcherAuthorizationProtocol> authorizer;
#pragma clang diagnostic pop

// The service object that created and monitors this fetcher, if any.
@property(atomic, strong) GTMSessionFetcherService *service;

// The host, if any, used to classify this fetcher in the fetcher service.
@property(atomic, copy, nullable) NSString *serviceHost;

// The priority, if any, used for starting fetchers in the fetcher service.
//
// Lower values are higher priority; the default is 0, and values may
// be negative or positive. This priority affects only the start order of
// fetchers that are being delayed by a fetcher service when the running fetchers
// exceeds the service's maxRunningFetchersPerHost.  A priority of NSIntegerMin will
// exempt this fetcher from delay.
@property(atomic, assign) NSInteger servicePriority;

// The delegate's optional didReceiveResponse block may be used to inspect or alter
// the session task response.
//
// This is called on the callback queue.
@property(atomic, copy, nullable) GTMSessionFetcherDidReceiveResponseBlock didReceiveResponseBlock;

// The delegate's optional challenge block may be used to inspect or alter
// the session task challenge.
//
// If this block is not set, the fetcher's default behavior for the NSURLSessionTask
// didReceiveChallenge: delegate method is to use the fetcher's respondToChallenge: method
// which relies on the fetcher's credential and proxyCredential properties.
//
// Warning: This may be called repeatedly if the challenge fails. Check
// challenge.previousFailureCount to identify repeated invocations.
//
// This is called on the callback queue.
@property(atomic, copy, nullable) GTMSessionFetcherChallengeBlock challengeBlock;

// The delegate's optional willRedirect block may be used to inspect or alter
// the redirection.
//
// This is called on the callback queue.
@property(atomic, copy, nullable) GTMSessionFetcherWillRedirectBlock willRedirectBlock;

// The optional send progress block reports body bytes uploaded.
//
// This is called on the callback queue.
@property(atomic, copy, nullable) GTMSessionFetcherSendProgressBlock sendProgressBlock;

// The optional accumulate block may be set by clients wishing to accumulate data
// themselves rather than let the fetcher append each buffer to an NSData.
//
// When this is called with nil data (such as on redirect) the client
// should empty its accumulation buffer.
//
// This is called on the callback queue.
@property(atomic, copy, nullable) GTMSessionFetcherAccumulateDataBlock accumulateDataBlock;

// The optional received progress block may be used to monitor data
// received from a data task.
//
// This is called on the callback queue.
@property(atomic, copy, nullable) GTMSessionFetcherReceivedProgressBlock receivedProgressBlock;

// The delegate's optional downloadProgress block may be used to monitor download
// progress in writing to disk.
//
// This is called on the callback queue.
@property(atomic, copy, nullable) GTMSessionFetcherDownloadProgressBlock downloadProgressBlock;

// The delegate's optional willCacheURLResponse block may be used to alter the cached
// NSURLResponse. The user may prevent caching by passing nil to the block's response.
//
// This is called on the callback queue.
@property(atomic, copy, nullable)
    GTMSessionFetcherWillCacheURLResponseBlock willCacheURLResponseBlock;

// Enable retrying; see comments at the top of this file.  Setting
// retryEnabled=YES resets the min and max retry intervals.
@property(atomic, assign, getter=isRetryEnabled) BOOL retryEnabled;

// Retry block is optional for retries.
//
// If present, this block should call the response block with YES to cause a retry or NO to end the
// fetch.
// See comments at the top of this file.
@property(atomic, copy, nullable) GTMSessionFetcherRetryBlock retryBlock;

// The optional block for collecting the metrics of the present session.
//
// This is called on the callback queue.
@property(atomic, copy, nullable)
    GTMSessionFetcherMetricsCollectionBlock metricsCollectionBlock API_AVAILABLE(
        ios(10.0), macosx(10.12), tvos(10.0), watchos(6.0));

// Retry intervals must be strictly less than maxRetryInterval, else
// they will be limited to maxRetryInterval and no further retries will
// be attempted.  Setting maxRetryInterval to 0.0 will reset it to the
// default value, 60 seconds for downloads and 600 seconds for uploads.
@property(atomic, assign) NSTimeInterval maxRetryInterval;

// Starting retry interval.  Setting minRetryInterval to 0.0 will reset it
// to a random value between 1.0 and 2.0 seconds.  Clients should normally not
// set this except for unit testing.
@property(atomic, assign) NSTimeInterval minRetryInterval;

// Multiplier used to increase the interval between retries, typically 2.0.
// Clients should not need to set this.
@property(atomic, assign) double retryFactor;

// Number of retries attempted.
@property(atomic, readonly) NSUInteger retryCount;

// Interval delay to precede next retry.
@property(atomic, readonly) NSTimeInterval nextRetryInterval;

#if GTM_BACKGROUND_TASK_FETCHING
// Skip use of a UIBackgroundTask, thus requiring fetches to complete when the app is in the
// foreground.
//
// Targets should define GTM_BACKGROUND_TASK_FETCHING to 0 to avoid use of a UIBackgroundTask
// on iOS to allow fetches to complete in the background.  This property is available when
// it's not practical to set the preprocessor define.
@property(atomic, assign) BOOL skipBackgroundTask;
#endif  // GTM_BACKGROUND_TASK_FETCHING

// Begin fetching the request
//
// The delegate may optionally implement the callback or pass nil for the selector or handler.
//
// The delegate and all callback blocks are retained between the beginFetch call until after the
// finish callback, or until the fetch is stopped.
//
// An error is passed to the callback for server statuses 300 or
// higher, with the status stored as the error object's code.
//
// finishedSEL has a signature like:
//   - (void)fetcher:(GTMSessionFetcher *)fetcher
//  finishedWithData:(NSData *)data
//             error:(NSError *)error;
//
// If the application has specified a destinationFileURL or an accumulateDataBlock
// for the fetcher, the data parameter passed to the callback will be nil.

- (void)beginFetchWithDelegate:(nullable id)delegate didFinishSelector:(nullable SEL)finishedSEL;

- (void)beginFetchWithCompletionHandler:(nullable GTMSessionFetcherCompletionHandler)handler;

// Returns YES if this fetcher is in the process of fetching a URL.
@property(atomic, readonly, getter=isFetching) BOOL fetching;

// Cancel the fetch of the request that's currently in progress.  The completion handler
// will be called with `GTMSessionFetcherErrorUserCancelled` if the property
// `stopFetchingTriggersCompletionHandler` is `YES`.
- (void)stopFetching;

// Call callbacks with `GTMSessionFetcherErrorUserCancelled` after a `stopFetching`.
// It cannot be changed once the fetcher starts. This should be set to `YES` from
// Swift clients before `beginFetch` with `async/await` since the Swift runtime
// requires the completion handler to be called.
@property(atomic, assign) BOOL stopFetchingTriggersCompletionHandler;

// A block to be called when the fetch completes.
@property(atomic, copy, nullable) GTMSessionFetcherCompletionHandler completionHandler;

// A block to be called if download resume data becomes available.
@property(atomic, strong, nullable) void (^resumeDataBlock)(NSData *);

// Return the status code from the server response.
@property(atomic, readonly) NSInteger statusCode;

// Return the http headers from the response.
@property(atomic, strong, readonly, nullable) NSDictionary<NSString *, NSString *> *responseHeaders;

// The response, once it's been received.
@property(atomic, strong, readonly, nullable) NSURLResponse *response;

// Bytes downloaded so far.
@property(atomic, readonly) int64_t downloadedLength;

// Buffer of currently-downloaded data, if available.
@property(atomic, readonly, strong, nullable) NSData *downloadedData;

// Local path to which the downloaded file will be moved.
//
// If a file already exists at the path, it will be overwritten.
// Will create the enclosing folders if they are not present.
@property(atomic, strong, nullable) NSURL *destinationFileURL;

// The time this fetcher originally began fetching. This is useful as a time
// barrier for ignoring irrelevant fetch notifications or callbacks.
@property(atomic, strong, readonly, nullable) NSDate *initialBeginFetchDate;

// userData is retained solely for the convenience of the client.
@property(atomic, strong, nullable) id userData;

// Stored property values are retained solely for the convenience of the client.
@property(atomic, copy, nullable) NSDictionary<NSString *, id> *properties;

- (void)setProperty:(nullable id)obj
             forKey:(NSString *)key;  // Pass nil for obj to remove the property.
- (nullable id)propertyForKey:(NSString *)key;

- (void)addPropertiesFromDictionary:(NSDictionary<NSString *, id> *)dict;

// Comments are useful for logging, so are strongly recommended for each fetcher.
@property(atomic, copy, nullable) NSString *comment;

- (void)setCommentWithFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1, 2);

// Log of request and response, if logging is enabled
@property(atomic, copy, nullable) NSString *log;

// Callbacks are run on this queue. If none is supplied, the main queue is used.
//
// CAUTION: This block MUST be a serial queue. Setting a concurrent queue can result in callbacks
// being dispatched concurrently, leading events to appear out-of-order.
@property(atomic, strong, null_resettable) dispatch_queue_t callbackQueue;

// The queue used internally by the session to invoke its delegate methods in the fetcher.
//
// Application callbacks are always called by the fetcher on the callbackQueue above,
// not on this queue. Apps should generally not change this queue.
//
// The default delegate queue is the main queue.
//
// This value is ignored after the session has been created, so this
// property should be set in the fetcher service rather in the fetcher as it applies
// to a shared session.
@property(atomic, strong, null_resettable) NSOperationQueue *sessionDelegateQueue;

// DEPRECATED: Callers should use XCTestExpectation instead.
//
// Spin the run loop or sleep the thread, discarding events, until the fetch has completed.
//
// This is only for use in testing or in tools without a user interface.
//
// Note:  Synchronous fetches should never be used by shipping apps; they are
// sufficient reason for rejection from the app store.
//
// Returns NO if timed out.
- (BOOL)waitForCompletionWithTimeout:(NSTimeInterval)timeoutInSeconds
    __deprecated_msg("Use XCTestExpectation instead");

// Test block is optional for testing.
//
// If present, this block will cause the fetcher to skip starting the session, and instead
// use the test block response values when calling the completion handler and delegate code.
//
// Test code can set this on the fetcher or on the fetcher service.  For testing libraries
// that use a fetcher without exposing either the fetcher or the fetcher service, the global
// method setGlobalTestBlock: will set the block for all fetchers that do not have a test
// block set.
//
// The test code can pass nil for all response parameters to indicate that the fetch
// should proceed.
//
// Applications can exclude test block support by setting GTM_DISABLE_FETCHER_TEST_BLOCK.
@property(atomic, copy, nullable) GTMSessionFetcherTestBlock testBlock;

+ (void)setGlobalTestBlock:(nullable GTMSessionFetcherTestBlock)block;

// When using the testBlock, |testBlockAccumulateDataChunkCount| is the desired number of chunks to
// divide the response data into if the client has streaming enabled. The data will be divided up to
// |testBlockAccumulateDataChunkCount| chunks; however, the exact amount may vary depending on the
// size of the response data (e.g. a 1-byte response can only be divided into one chunk).
@property(atomic, readwrite) NSUInteger testBlockAccumulateDataChunkCount;

#if GTM_BACKGROUND_TASK_FETCHING
// For testing or to override UIApplication invocations, apps may specify an alternative
// target for messages to UIApplication.
+ (void)setSubstituteUIApplication:(nullable id<GTMUIApplicationProtocol>)substituteUIApplication;
+ (nullable id<GTMUIApplicationProtocol>)substituteUIApplication;
#endif  // GTM_BACKGROUND_TASK_FETCHING

// Exposed for testing.
+ (GTMSessionCookieStorage *)staticCookieStorage;
+ (BOOL)appAllowsInsecureRequests;

#if STRIP_GTM_FETCH_LOGGING
// If logging is stripped, provide a stub for the main method
// for controlling logging.
+ (void)setLoggingEnabled:(BOOL)flag;
+ (BOOL)isLoggingEnabled;

#else

// These methods let an application log specific body text, such as the text description of a binary
// request or response. The application should set the fetcher to defer response body logging until
// the response has been received and the log response body has been set by the app. For example:
//
//   fetcher.logRequestBody = [binaryObject stringDescription];
//   fetcher.deferResponseBodyLogging = YES;
//   [fetcher beginFetchWithCompletionHandler:^(NSData *data, NSError *error) {
//      if (error == nil) {
//        fetcher.logResponseBody = [[[MyThing alloc] initWithData:data] stringDescription];
//      }
//      fetcher.deferResponseBodyLogging = NO;
//   }];

@property(atomic, copy, nullable) NSString *logRequestBody;
@property(atomic, assign) BOOL deferResponseBodyLogging;
@property(atomic, copy, nullable) NSString *logResponseBody;

// Internal logging support.
@property(atomic, readonly) NSData *loggedStreamData;
@property(atomic, assign) BOOL hasLoggedError;
@property(atomic, strong, nullable) NSURL *redirectedFromURL;
- (void)appendLoggedStreamData:(NSData *)dataToAdd;
- (void)clearLoggedStreamData;

#endif  // STRIP_GTM_FETCH_LOGGING

@end

// Until we can just instantiate NSHTTPCookieStorage for local use, we'll
// implement all the public methods ourselves.  This stores cookies only in
// memory.  Additional methods are provided for testing.
//
// iOS 9/OS X 10.11 added +[NSHTTPCookieStorage sharedCookieStorageForGroupContainerIdentifier:]
// which may also be used to create cookie storage.
@interface GTMSessionCookieStorage : NSHTTPCookieStorage

// Add the array off cookies to the storage, replacing duplicates.
// Also removes expired cookies from the storage.
- (void)setCookies:(nullable NSArray<NSHTTPCookie *> *)cookies;

- (void)removeAllCookies;

@end

// Macros to monitor synchronization blocks in debug builds.
// These report problems using GTMSessionCheckDebug.
//
// GTMSessionMonitorSynchronized           Start monitoring a top-level-only
//                                         @sync scope.
// GTMSessionMonitorRecursiveSynchronized  Start monitoring a top-level or
//                                         recursive @sync scope.
// GTMSessionCheckSynchronized             Verify that the current execution
//                                         is inside a @sync scope.
// GTMSessionCheckNotSynchronized          Verify that the current execution
//                                         is not inside a @sync scope.
//
// Example usage:
//
// - (void)myExternalMethod {
//   @synchronized(self) {
//     GTMSessionMonitorSynchronized(self)
//
// - (void)myInternalMethod {
//   GTMSessionCheckSynchronized(self);
//
// - (void)callMyCallbacks {
//   GTMSessionCheckNotSynchronized(self);
//
// GTMSessionCheckNotSynchronized is available for verifying the code isn't
// in a deadlockable @sync state when posting notifications and invoking
// callbacks. Don't use GTMSessionCheckNotSynchronized immediately before a
// @sync scope; the normal recursiveness check of GTMSessionMonitorSynchronized
// can catch those.

#ifdef __OBJC__
// If asserts are entirely no-ops, the synchronization monitor is just a bunch
// of counting code that doesn't report exceptional circumstances in any way.
// Only build the synchronization monitor code if NS_BLOCK_ASSERTIONS is not
// defined or asserts are being logged instead.
#if DEBUG && (!defined(NS_BLOCK_ASSERTIONS) || GTMSESSION_ASSERT_AS_LOG)
#define __GTMSessionMonitorSynchronizedVariableInner(varname, counter) varname##counter
#define __GTMSessionMonitorSynchronizedVariable(varname, counter) \
  __GTMSessionMonitorSynchronizedVariableInner(varname, counter)

#define GTMSessionMonitorSynchronized(obj)                                                         \
  NS_VALID_UNTIL_END_OF_SCOPE id __GTMSessionMonitorSynchronizedVariable(__monitor, __COUNTER__) = \
      [[GTMSessionSyncMonitorInternal alloc] initWithSynchronizationObject:obj                     \
                                                            allowRecursive:NO                      \
                                                              functionName:__func__]

#define GTMSessionMonitorRecursiveSynchronized(obj)                                                \
  NS_VALID_UNTIL_END_OF_SCOPE id __GTMSessionMonitorSynchronizedVariable(__monitor, __COUNTER__) = \
      [[GTMSessionSyncMonitorInternal alloc] initWithSynchronizationObject:obj                     \
                                                            allowRecursive:YES                     \
                                                              functionName:__func__]

#define GTMSessionCheckSynchronized(obj)                                             \
  {                                                                                  \
    GTMSESSION_ASSERT_DEBUG(                                                         \
        [GTMSessionSyncMonitorInternal functionsHoldingSynchronizationOnObject:obj], \
        @"GTMSessionCheckSynchronized(" #obj ") failed: not sync'd"                  \
        @" on " #obj " in %s. Call stack:\n%@",                                      \
        __func__, [NSThread callStackSymbols]);                                      \
  }

#define GTMSessionCheckNotSynchronized(obj)                                                    \
  {                                                                                            \
    GTMSESSION_ASSERT_DEBUG(                                                                   \
        ![GTMSessionSyncMonitorInternal functionsHoldingSynchronizationOnObject:obj],          \
        @"GTMSessionCheckNotSynchronized(" #obj ") failed: was sync'd"                         \
        @" on " #obj " in %s by %@. Call stack:\n%@",                                          \
        __func__, [GTMSessionSyncMonitorInternal functionsHoldingSynchronizationOnObject:obj], \
        [NSThread callStackSymbols]);                                                          \
  }

// GTMSessionSyncMonitorInternal is a private class that keeps track of the
// beginning and end of synchronized scopes.
//
// This class should not be used directly, but only via the
// GTMSessionMonitorSynchronized macro.
@interface GTMSessionSyncMonitorInternal : NSObject
- (instancetype)initWithSynchronizationObject:(id)object
                               allowRecursive:(BOOL)allowRecursive
                                 functionName:(const char *)functionName;
// Return the names of the functions that hold sync on the object, or nil if none.
+ (nullable NSArray *)functionsHoldingSynchronizationOnObject:(id)object;
@end

#else
#define GTMSessionMonitorSynchronized(obj) \
  do {                                     \
  } while (0)
#define GTMSessionMonitorRecursiveSynchronized(obj) \
  do {                                              \
  } while (0)
#define GTMSessionCheckSynchronized(obj) \
  do {                                   \
  } while (0)
#define GTMSessionCheckNotSynchronized(obj) \
  do {                                      \
  } while (0)
#endif  // !DEBUG
#endif  // __OBJC__

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GTMSessionFetcher/Sources/Core/Public/GTMSessionFetcher/GTMSessionFetcher.h ===

===
Path: iosApp/Pods/GTMSessionFetcher/Sources/Core/Public/GTMSessionFetcher/GTMSessionFetcherLogging.h
===
/* Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "GTMSessionFetcher/GTMSessionFetcher.h"

// GTM HTTP Logging
//
// All traffic using GTMSessionFetcher can be easily logged.  Call
//
//   [GTMSessionFetcher setLoggingEnabled:YES];
//
// to begin generating log files.
//
// Unless explicitly set by the application using +setLoggingDirectory:,
// logs are put into a default directory, located at:
//   * macOS: ~/Desktop/GTMHTTPDebugLogs
//   * iOS simulator: ~/GTMHTTPDebugLogs (in application sandbox)
//   * iOS device: ~/Documents/GTMHTTPDebugLogs (in application sandbox)
//
// Tip: use the Finder's "Sort By Date" to find the most recent logs.
//
// Each run of an application gets a separate set of log files.  An html
// file is generated to simplify browsing the run's http transactions.
// The html file includes javascript links for inline viewing of uploaded
// and downloaded data.
//
// A symlink is created in the logs folder to simplify finding the html file
// for the latest run of the application; the symlink is called
//
//   AppName_http_log_newest.html
//
// Each fetcher may be given a comment to be inserted as a label in the logs,
// such as
//   [fetcher setCommentWithFormat:@"retrieve item %@", itemName];
//
// Projects may define STRIP_GTM_FETCH_LOGGING to remove logging code.

#if !STRIP_GTM_FETCH_LOGGING

@interface GTMSessionFetcher (GTMSessionFetcherLogging)

// Note: on macOS the default logs directory is ~/Desktop/GTMHTTPDebugLogs; on
// iOS simulators it will be the ~/GTMHTTPDebugLogs (in the app sandbox); on
// iOS devices it will be in ~/Documents/GTMHTTPDebugLogs (in the app sandbox).
// These directories will be created as needed, and are excluded from backups
// to iCloud and iTunes.
//
// If a custom directory is set, the directory should already exist. It is
// the application's responsibility to exclude any custom directory from
// backups, if desired.
+ (void)setLoggingDirectory:(NSString *)path;
+ (NSString *)loggingDirectory;

// client apps can turn logging on and off
+ (void)setLoggingEnabled:(BOOL)isLoggingEnabled;
+ (BOOL)isLoggingEnabled;

// client apps can turn off logging to a file if they want to only check
// the fetcher's log property
+ (void)setLoggingToFileEnabled:(BOOL)isLoggingToFileEnabled;
+ (BOOL)isLoggingToFileEnabled;

// client apps can optionally specify process name and date string used in
// log file names
+ (void)setLoggingProcessName:(NSString *)processName;
+ (NSString *)loggingProcessName;

+ (void)setLoggingDateStamp:(NSString *)dateStamp;
+ (NSString *)loggingDateStamp;

// client apps can specify the directory for the log for this specific run:
//
//   [GTMSessionFetcher setLogDirectoryForCurrentRun:logDirectoryPath];
//
// Setting this overrides the logging directory, process name, and date stamp when writing
// the log file.
+ (void)setLogDirectoryForCurrentRun:(NSString *)logDirectoryForCurrentRun;
+ (NSString *)logDirectoryForCurrentRun;

// internal; called by fetcher
- (void)logFetchWithError:(NSError *)error;
- (NSInputStream *)loggedInputStreamForInputStream:(NSInputStream *)inputStream;
- (GTMSessionFetcherBodyStreamProvider)loggedStreamProviderForStreamProvider:
    (GTMSessionFetcherBodyStreamProvider)streamProvider;

// internal; accessors useful for viewing logs
+ (NSString *)processNameLogPrefix;
+ (NSString *)symlinkNameSuffix;
+ (NSString *)htmlFileName;

@end

#endif  // !STRIP_GTM_FETCH_LOGGING

=== end iosApp/Pods/GTMSessionFetcher/Sources/Core/Public/GTMSessionFetcher/GTMSessionFetcherLogging.h ===

===
Path: iosApp/Pods/GTMSessionFetcher/Sources/Core/Public/GTMSessionFetcher/GTMSessionFetcherService.h
===
/* Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// For best performance and convenient usage, fetchers should be generated by a common
// GTMSessionFetcherService instance, like
//
//   _fetcherService = [[GTMSessionFetcherService alloc] init];
//   GTMSessionFetcher* myFirstFetcher = [_fetcherService fetcherWithRequest:request1];
//   GTMSessionFetcher* mySecondFetcher = [_fetcherService fetcherWithRequest:request2];

#import "GTMSessionFetcher/GTMSessionFetcher.h"

NS_ASSUME_NONNULL_BEGIN

// Notifications.

// This notification indicates a reusable session has become invalid. It is intended mainly for the
// service's unit tests.
//
// The notification object is the fetcher service.
// The invalid session is provided via the userInfo kGTMSessionFetcherServiceSessionKey key.
extern NSString *const kGTMSessionFetcherServiceSessionBecameInvalidNotification;
extern NSString *const kGTMSessionFetcherServiceSessionKey;

@interface GTMSessionFetcherService : NSObject <GTMSessionFetcherServiceProtocol>

// Queues of delayed and running fetchers. Each dictionary contains arrays
// of GTMSessionFetcher *fetchers, keyed by NSString *host
@property(atomic, strong, readonly, nullable)
    NSDictionary<NSString *, NSArray *> *delayedFetchersByHost;
@property(atomic, strong, readonly, nullable)
    NSDictionary<NSString *, NSArray *> *runningFetchersByHost;

// A max value of 0 means no fetchers should be delayed.
// The default limit is 10 simultaneous fetchers targeting each host.
// This does not apply to fetchers whose useBackgroundSession property is YES. Since services are
// not resurrected on an app relaunch, delayed fetchers would effectively be abandoned.
@property(atomic, assign) NSUInteger maxRunningFetchersPerHost;

// Properties to be applied to each fetcher; see GTMSessionFetcher.h for descriptions
@property(atomic, strong, nullable) NSURLSessionConfiguration *configuration;
@property(atomic, copy, nullable) GTMSessionFetcherConfigurationBlock configurationBlock;
@property(atomic, strong, nullable) NSHTTPCookieStorage *cookieStorage;
@property(atomic, strong, null_resettable) dispatch_queue_t callbackQueue;
@property(atomic, copy, nullable) GTMSessionFetcherChallengeBlock challengeBlock;
@property(atomic, strong, nullable) NSURLCredential *credential;
@property(atomic, strong) NSURLCredential *proxyCredential;
@property(atomic, copy, nullable) NSArray<NSString *> *allowedInsecureSchemes;
@property(atomic, assign) BOOL allowLocalhostRequest;
@property(atomic, assign) BOOL allowInvalidServerCertificates;
@property(atomic, assign, getter=isRetryEnabled) BOOL retryEnabled;
@property(atomic, copy, nullable) GTMSessionFetcherRetryBlock retryBlock;
@property(atomic, assign) NSTimeInterval maxRetryInterval;
@property(atomic, assign) NSTimeInterval minRetryInterval;
@property(atomic, copy, nullable) NSDictionary<NSString *, id> *properties;
@property(atomic, copy, nullable)
    GTMSessionFetcherMetricsCollectionBlock metricsCollectionBlock API_AVAILABLE(
        ios(10.0), macosx(10.12), tvos(10.0), watchos(6.0));
@property(atomic, assign) BOOL stopFetchingTriggersCompletionHandler;

#if GTM_BACKGROUND_TASK_FETCHING
@property(atomic, assign) BOOL skipBackgroundTask;
#endif

// An optional provider to calculate the User-Agent string on demand. If non-nil and
// an HTTP header field for User-Agent is not set, this is queried before sending out
// the network request for the User-Agent string.
@property(atomic, strong, nullable) id<GTMUserAgentProvider> userAgentProvider;

// A default useragent of GTMFetcherStandardUserAgentString(nil) will be given to each fetcher
// created by this service unless the request already has a user-agent header set.
// This default will be added starting with builds with the SDKs for OS X 10.11 and iOS 9.
//
// To use the configuration's default user agent, set this property to nil.
@property(atomic, copy, nullable) NSString *userAgent;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated"
// The authorizer to attach to the created fetchers. If a specific fetcher should
// not authorize its requests, the fetcher's authorizer property may be set to nil
// before the fetch begins.
@property(atomic, strong, nullable) id<GTMFetcherAuthorizationProtocol> authorizer;
#pragma clang diagnostic pop

@property(atomic, readonly, strong, nullable) NSOperationQueue *delegateQueue;

// Delegate queue used by the session when calling back to the fetcher.  The default
// is the main queue.  Changing this does not affect the queue used to call back to the
// application; that is specified by the callbackQueue property above.
@property(atomic, strong, null_resettable) NSOperationQueue *sessionDelegateQueue;

// When enabled, indicates the same session should be used by subsequent fetchers.
//
// This is enabled by default.
@property(atomic, assign) BOOL reuseSession;

// Sets the delay until an unused session is invalidated.
// The default interval is 60 seconds.
//
// If the interval is set to 0, then any reused session is not invalidated except by
// explicitly invoking -resetSession.  Be aware that setting the interval to 0 thus
// causes the session's delegate to be retained until the session is explicitly reset.
@property(atomic, assign) NSTimeInterval unusedSessionTimeout;

// If shouldReuseSession is enabled, this will force creation of a new session when future
// fetchers begin.
- (void)resetSession;

// Sets the callback queue, specifying that the provided queue is a concurrent queue.
//
// When a concurrent queue is explicitly provided via this setter, then each new fetcher
// instance created by the service will be provided a new serial queue targeting the
// concurrent callback queue; this will ensure callbacks for each instance are executed
// in order, while callbacks from separate fetcher instances are not blocked by each other.
//
// The service behavior when resetting the callback queue after providing a concurrent
// queue is unspecified.
- (void)setConcurrentCallbackQueue:(dispatch_queue_t)queue;

// Create a fetcher
//
// These methods will return a fetcher. If successfully created, the connection
// will hold a strong reference to it for the life of the connection as well.
// So the caller doesn't have to hold onto the fetcher explicitly unless they
// want to be able to monitor or cancel it.
- (GTMSessionFetcher *)fetcherWithRequest:(NSURLRequest *)request;
- (GTMSessionFetcher *)fetcherWithURL:(NSURL *)requestURL;
- (GTMSessionFetcher *)fetcherWithURLString:(NSString *)requestURLString;

// Common method for fetcher creation.
//
// -fetcherWithRequest:fetcherClass: may be overridden to customize creation of
// fetchers.  This is the ONLY method in the GTMSessionFetcher library intended to
// be overridden.
- (id)fetcherWithRequest:(NSURLRequest *)request fetcherClass:(Class)fetcherClass;

- (BOOL)isDelayingFetcher:(GTMSessionFetcher *)fetcher;

- (NSUInteger)numberOfFetchers;  // running + delayed fetchers
- (NSUInteger)numberOfRunningFetchers;
- (NSUInteger)numberOfDelayedFetchers;

// Return a list of all running or delayed fetchers. This includes fetchers created
// by the service which have been started and have not yet stopped.
//
// Returns an array of fetcher objects, or nil if none.
- (nullable NSArray<GTMSessionFetcher *> *)issuedFetchers;

// Search for running or delayed fetchers with the specified URL.
//
// Returns an array of fetcher objects found, or nil if none found.
- (nullable NSArray<GTMSessionFetcher *> *)issuedFetchersWithRequestURL:(NSURL *)requestURL;

- (void)stopAllFetchers;

// All decorators added to the service.
@property(atomic, readonly, strong, nullable) NSArray<id<GTMFetcherDecoratorProtocol>> *decorators;

// Holds a weak reference to `decorator`. When creating a fetcher via
// `-fetcherWithRequest:fetcherClass:`, each registered `decorator` can inspect and potentially
// change the fetcher's request before it starts. Decorators are invoked in the order in which
// they are passed to this method.
- (void)addDecorator:(id<GTMFetcherDecoratorProtocol>)decorator;

// Removes a `decorator` previously passed to `-removeDecorator:`.
- (void)removeDecorator:(id<GTMFetcherDecoratorProtocol>)decorator;

// The testBlock can inspect its fetcher parameter's request property to
// determine which fetcher is being faked.
@property(atomic, copy, nullable) GTMSessionFetcherTestBlock testBlock;

@end

@interface GTMSessionFetcherService (FetcherCallbacks)
// Checks whether the fetcher should delay starting to avoid overloading the host.
- (BOOL)fetcherShouldBeginFetching:(nonnull GTMSessionFetcher *)fetcher;

// Notifies the service that the fetcher did begin fetching.
- (void)fetcherDidBeginFetching:(nonnull GTMSessionFetcher *)fetcher;

// Notifies the service that the fetcher has stopped fetching.
- (void)fetcherDidStop:(nonnull GTMSessionFetcher *)fetcher;
@end

@interface GTMSessionFetcherService (TestingSupport)

// Convenience methods to create a fetcher service for testing.
//
// Fetchers generated by this mock fetcher service will not perform any
// network operation, but will invoke callbacks and provide the supplied data
// or error to the completion handler.
//
// You can make more customized mocks by setting the test block property of the service
// or fetcher; the test block can inspect the fetcher's request or other properties.
//
// See the description of the testBlock property below.
+ (instancetype)mockFetcherServiceWithFakedData:(nullable NSData *)fakedDataOrNil
                                     fakedError:(nullable NSError *)fakedErrorOrNil;
+ (instancetype)mockFetcherServiceWithFakedData:(nullable NSData *)fakedDataOrNil
                                  fakedResponse:(NSHTTPURLResponse *)fakedResponse
                                     fakedError:(nullable NSError *)fakedErrorOrNil;

// DEPRECATED: Callers should use XCTestExpectation instead.
//
// Spin the run loop and discard events (or, if not on the main thread, just sleep the thread)
// until all running and delayed fetchers have completed.
//
// This is only for use in testing or in tools without a user interface.
//
// Synchronous fetches should never be done by shipping apps; they are
// sufficient reason for rejection from the app store.
//
// Returns NO if timed out.
- (BOOL)waitForCompletionOfAllFetchersWithTimeout:(NSTimeInterval)timeoutInSeconds
    __deprecated_msg("Use XCTestExpectation instead");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GTMSessionFetcher/Sources/Core/Public/GTMSessionFetcher/GTMSessionFetcherService.h ===

===
Path: iosApp/Pods/GTMSessionFetcher/Sources/Core/Public/GTMSessionFetcher/GTMSessionUploadFetcher.h
===
/* Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// GTMSessionUploadFetcher implements Google's resumable upload protocol.

//
// This subclass of GTMSessionFetcher simulates the series of fetches
// needed for chunked upload as a single fetch operation.
//
// Protocol document:  TBD
//
// To the client, the only fetcher that exists is this class; the subsidiary
// fetchers needed for uploading chunks are not visible (though the most recent
// chunk fetcher may be accessed via the -activeFetcher or -chunkFetcher methods, and
// -responseHeaders and -statusCode reflect results from the most recent chunk
// fetcher.)
//
// Chunk fetchers are discarded as soon as they have completed.
//
// The protocol also allows for a cancellation notification request to be sent to the
// server to allow discarding of the currently uploaded data and this will be sent
// automatically upon calling stopFetching if the upload has already started.
//
// Note: Unlike the fetcher superclass, the methods of GTMSessionUploadFetcher should
// only be used from the main thread until further work is done to make this subclass
// thread-safe.

#import "GTMSessionFetcher/GTMSessionFetcher.h"
#import "GTMSessionFetcher/GTMSessionFetcherService.h"

NS_ASSUME_NONNULL_BEGIN

// The value to use for file size parameters when the file size is not yet known.
extern int64_t const kGTMSessionUploadFetcherUnknownFileSize;

// Unless an application knows it needs a smaller chunk size, it should use the standard
// chunk size, which sends the entire file as a single chunk to minimize upload overhead.
// Setting an explicit chunk size that comfortably fits in memory is advisable for large
// uploads.
extern int64_t const kGTMSessionUploadFetcherStandardChunkSize;

// When uploading requires data buffer allocations (such as uploading from an NSData or
// an NSFileHandle) this is the maximum buffer size that will be created by the fetcher.
extern int64_t const kGTMSessionUploadFetcherMaximumDemandBufferSize;

// Notification that the upload location URL was provided by the server.
extern NSString *const kGTMSessionFetcherUploadLocationObtainedNotification;
// Notification that the exponential backoff for upload has started.
extern NSString *const kGTMSessionFetcherUploadInitialBackoffStartedNotification;

// Block to provide data during uploads.
//
// Response data may be allocated with dataWithBytesNoCopy:length:freeWhenDone: for efficiency,
// and released after the response block returns.
//
// If the length of the file being uploaded is unknown or already set, send
// kGTMSessionUploadFetcherUnknownFileSize for |fullUploadLength|. Otherwise, set |fullUploadLength|
// to its proper value.
//
// Pass nil as the data (and optionally an NSError) for a failure.
typedef void (^GTMSessionUploadFetcherDataProviderResponse)(NSData *_Nullable data,
                                                            int64_t fullUploadLength,
                                                            NSError *_Nullable error);
// Do not call the response with an NSData object with less data than the requested length unless
// you are passing the fullUploadLength to the fetcher for the first time and it is the last chunk
// of data in the file being uploaded.
typedef void (^GTMSessionUploadFetcherDataProvider)(
    int64_t offset, int64_t length, GTMSessionUploadFetcherDataProviderResponse response);

// Block to be notified about the final status of the cancellation request started in stopFetching.
//
// |fetcher| will be the cancel request that was sent to the server, or nil if stopFetching is not
// going to send a cancel request. If |fetcher| is provided, the other parameters correspond to the
// completion handler of the cancellation request fetcher.
typedef void (^GTMSessionUploadFetcherCancellationHandler)(GTMSessionFetcher *_Nullable fetcher,
                                                           NSData *_Nullable data,
                                                           NSError *_Nullable error);

@interface GTMSessionUploadFetcher : GTMSessionFetcher

// Create an upload fetcher specifying either the request or the resume location URL,
// then set an upload data source using one of these:
//
//   setUploadFileURL:
//   setUploadDataLength:provider:
//   setUploadFileHandle:
//   setUploadData:

+ (instancetype)uploadFetcherWithRequest:(NSURLRequest *)request
                          uploadMIMEType:(NSString *)uploadMIMEType
                               chunkSize:(int64_t)chunkSize
                          fetcherService:(nullable GTMSessionFetcherService *)fetcherServiceOrNil;

// Allows cellular access.
+ (instancetype)uploadFetcherWithLocation:(nullable NSURL *)uploadLocationURL
                           uploadMIMEType:(NSString *)uploadMIMEType
                                chunkSize:(int64_t)chunkSize
                           fetcherService:(nullable GTMSessionFetcherService *)fetcherServiceOrNil;

+ (instancetype)uploadFetcherWithLocation:(nullable NSURL *)uploadLocationURL
                           uploadMIMEType:(NSString *)uploadMIMEType
                                chunkSize:(int64_t)chunkSize
                     allowsCellularAccess:(BOOL)allowsCellularAccess
                           fetcherService:(nullable GTMSessionFetcherService *)fetcherServiceOrNil;

// Allows dataProviders for files of unknown length. Pass kGTMSessionUploadFetcherUnknownFileSize as
// |fullLength| if the length is unknown.
- (void)setUploadDataLength:(int64_t)fullLength
                   provider:(nullable GTMSessionUploadFetcherDataProvider)block;

+ (NSArray *)uploadFetchersForBackgroundSessions;
+ (nullable instancetype)uploadFetcherForSessionIdentifier:(NSString *)sessionIdentifier;

- (void)pauseFetching;
- (void)resumeFetching;
- (BOOL)isPaused;

@property(atomic, strong, nullable) NSURL *uploadLocationURL;
@property(atomic, strong, nullable) NSData *uploadData;
@property(atomic, strong, nullable) NSURL *uploadFileURL;
@property(atomic, strong, nullable) NSFileHandle *uploadFileHandle;
@property(atomic, copy, readonly, nullable) GTMSessionUploadFetcherDataProvider uploadDataProvider;
@property(atomic, copy) NSString *uploadMIMEType;
@property(atomic, readonly, assign) int64_t chunkSize;
@property(atomic, readonly, assign) int64_t currentOffset;
@property(atomic, assign) double uploadRetryFactor;
@property(atomic, assign) NSTimeInterval maxUploadRetryInterval;
@property(atomic, assign) NSTimeInterval minUploadRetryInterval;

// Reflects the original NSURLRequest's @c allowCellularAccess property.
@property(atomic, readonly, assign) BOOL allowsCellularAccess;

// The fetcher for the current data chunk, if any
@property(atomic, strong, nullable) GTMSessionFetcher *chunkFetcher;

// The active fetcher is the current chunk fetcher, or the upload fetcher itself
// if no chunk fetcher has yet been created.
@property(atomic, readonly) GTMSessionFetcher *activeFetcher;

// The last request made by an active fetcher.  Useful for testing.
@property(atomic, readonly, nullable) NSURLRequest *lastChunkRequest;

// The status code from the most recently-completed fetch.
@property(atomic, assign) NSInteger statusCode;

// Invoked as part of the stop fetching process. Invoked immediately if there is no upload in
// progress, otherwise invoked with the results of the attempt to notify the server that the
// upload will not continue.
//
// Unlike other callbacks, since this is related specifically to the stopFetching flow it is not
// cleared by stopFetching. It will instead clear itself after it is invoked or if the completion
// has occured before stopFetching is called.
@property(atomic, copy, nullable) GTMSessionUploadFetcherCancellationHandler cancellationHandler;

// Exposed for testing only.
@property(atomic, readonly, nullable) dispatch_queue_t delegateCallbackQueue;
@property(atomic, readonly, nullable) GTMSessionFetcherCompletionHandler delegateCompletionHandler;

@end

@interface GTMSessionFetcher (GTMSessionUploadFetcherMethods)

@property(readonly, nullable) GTMSessionUploadFetcher *parentUploadFetcher;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GTMSessionFetcher/Sources/Core/Public/GTMSessionFetcher/GTMSessionUploadFetcher.h ===

===
Path: iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64/GoogleMapsBase.framework/Headers/GMSCompatabilityMacros.h
===
//
//  GMSCompatabilityMacros.h
//  Google Maps SDK for iOS
//
//  Copyright 2015 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

/**
 * A Swift 2/3 version conditional variant of NS_SWIFT_NAME. This is used in
 * places where NS_SWIFT_NAME is needed but the Swift-transcribed name of the
 * Objective-C name is conditional on the Swift version being compiled. This
 * macro determines which version of Swift this code is being imported from by
 * looking for the presence of the SWIFT_SDK_OVERLAY_UIKIT_EPOCH macro which is
 * only defined in Swift 3+.
 */
#if defined(SWIFT_SDK_OVERLAY_UIKIT_EPOCH)
#define GMS_SWIFT_NAME_2_0_3_0(name_swift_2, name_swift_3) \
  NS_SWIFT_NAME(name_swift_3)
#else
#define GMS_SWIFT_NAME_2_0_3_0(name_swift_2, name_swift_3) \
  NS_SWIFT_NAME(name_swift_2)
#endif

=== end iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64/GoogleMapsBase.framework/Headers/GMSCompatabilityMacros.h ===

===
Path: iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64/GoogleMapsBase.framework/Headers/GMSCoordinateBounds.h
===
//
//  GMSCoordinateBounds.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSCoordinateBounds represents a rectangular bounding box on the Earth's surface.
 * GMSCoordinateBounds is immutable and can't be modified after construction.
 */
@interface GMSCoordinateBounds : NSObject

/** The North-East corner of these bounds. */
@property(nonatomic, readonly) CLLocationCoordinate2D northEast;

/** The South-West corner of these bounds. */
@property(nonatomic, readonly) CLLocationCoordinate2D southWest;

/**
 * Returns NO if this bounds does not contain any points. For example, [[GMSCoordinateBounds alloc]
 * init].valid == NO.
 *
 * When an invalid bounds is expanded with valid coordinates via includingCoordinate: or
 * includingBounds:, the resulting bounds will be valid but contain only the new coordinates.
 */
@property(nonatomic, readonly, getter=isValid) BOOL valid;

/**
 * Inits the northEast and southWest bounds corresponding to the rectangular region defined by the
 * two corners.
 *
 * It is ambiguous whether the longitude of the box extends from |coord1| to |coord2| or vice-versa;
 * the box is constructed as the smaller of the two variants, eliminating the ambiguity.
 */
- (id)initWithCoordinate:(CLLocationCoordinate2D)coord1 coordinate:(CLLocationCoordinate2D)coord2;

/**
 * Returns a GMSCoordinateBounds representing the current bounds extended to include the passed-in
 * coordinate.
 *
 * If the current bounds is invalid, the result is a valid bounds containing only |coordinate|.
 */
- (GMSCoordinateBounds *)includingCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Returns a GMSCoordinateBounds representing the current bounds extended to include the entire
 * other bounds.
 *
 * If the current bounds is invalid, the result is a valid bounds equal to |other|.
 */
- (GMSCoordinateBounds *)includingBounds:(GMSCoordinateBounds *)other;

/**
 * Returns YES if |coordinate| is contained within this bounds. This includes points that lie
 * exactly on the edge of the bounds.
 */
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Returns YES if |other| overlaps with this bounds. Two bounds are overlapping if there is at least
 * one coordinate point contained by both.
 */
- (BOOL)intersectsBounds:(GMSCoordinateBounds *)other;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64/GoogleMapsBase.framework/Headers/GMSCoordinateBounds.h ===

===
Path: iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64/GoogleMapsBase.framework/Headers/GMSDeprecationMacros.h
===
//
//  GMSDeprecationMacros.h
//  Google Maps SDK for iOS
//
//  Copyright 2015 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#ifndef IPHONE_MAPS_SDK_BASE_API_GMSDEPRECATIONMACROS_H_
#define IPHONE_MAPS_SDK_BASE_API_GMSDEPRECATIONMACROS_H_

/** Inside Google, this is defined in sdk.bzl. */
#ifndef __GMS_AVAILABLE_BUT_DEPRECATED
#define __GMS_AVAILABLE_BUT_DEPRECATED __deprecated
#endif

/** Inside Google, this is defined in sdk.bzl. */
#ifndef __GMS_AVAILABLE_BUT_DEPRECATED_MSG
#define __GMS_AVAILABLE_BUT_DEPRECATED_MSG(msg) __deprecated_msg(msg)
#endif

#endif

=== end iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64/GoogleMapsBase.framework/Headers/GMSDeprecationMacros.h ===

===
Path: iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64/GoogleMapsBase.framework/Headers/GoogleMapsBase.h
===
#import <GoogleMapsBase/GMSCompatabilityMacros.h>
#import <GoogleMapsBase/GMSCoordinateBounds.h>
#import <GoogleMapsBase/GMSDeprecationMacros.h>

=== end iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64/GoogleMapsBase.framework/Headers/GoogleMapsBase.h ===

===
Path: iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64_x86_64-simulator/GoogleMapsBase.framework/Headers/GMSCompatabilityMacros.h
===
//
//  GMSCompatabilityMacros.h
//  Google Maps SDK for iOS
//
//  Copyright 2015 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

/**
 * A Swift 2/3 version conditional variant of NS_SWIFT_NAME. This is used in
 * places where NS_SWIFT_NAME is needed but the Swift-transcribed name of the
 * Objective-C name is conditional on the Swift version being compiled. This
 * macro determines which version of Swift this code is being imported from by
 * looking for the presence of the SWIFT_SDK_OVERLAY_UIKIT_EPOCH macro which is
 * only defined in Swift 3+.
 */
#if defined(SWIFT_SDK_OVERLAY_UIKIT_EPOCH)
#define GMS_SWIFT_NAME_2_0_3_0(name_swift_2, name_swift_3) \
  NS_SWIFT_NAME(name_swift_3)
#else
#define GMS_SWIFT_NAME_2_0_3_0(name_swift_2, name_swift_3) \
  NS_SWIFT_NAME(name_swift_2)
#endif

=== end iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64_x86_64-simulator/GoogleMapsBase.framework/Headers/GMSCompatabilityMacros.h ===

===
Path: iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64_x86_64-simulator/GoogleMapsBase.framework/Headers/GMSCoordinateBounds.h
===
//
//  GMSCoordinateBounds.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSCoordinateBounds represents a rectangular bounding box on the Earth's surface.
 * GMSCoordinateBounds is immutable and can't be modified after construction.
 */
@interface GMSCoordinateBounds : NSObject

/** The North-East corner of these bounds. */
@property(nonatomic, readonly) CLLocationCoordinate2D northEast;

/** The South-West corner of these bounds. */
@property(nonatomic, readonly) CLLocationCoordinate2D southWest;

/**
 * Returns NO if this bounds does not contain any points. For example, [[GMSCoordinateBounds alloc]
 * init].valid == NO.
 *
 * When an invalid bounds is expanded with valid coordinates via includingCoordinate: or
 * includingBounds:, the resulting bounds will be valid but contain only the new coordinates.
 */
@property(nonatomic, readonly, getter=isValid) BOOL valid;

/**
 * Inits the northEast and southWest bounds corresponding to the rectangular region defined by the
 * two corners.
 *
 * It is ambiguous whether the longitude of the box extends from |coord1| to |coord2| or vice-versa;
 * the box is constructed as the smaller of the two variants, eliminating the ambiguity.
 */
- (id)initWithCoordinate:(CLLocationCoordinate2D)coord1 coordinate:(CLLocationCoordinate2D)coord2;

/**
 * Returns a GMSCoordinateBounds representing the current bounds extended to include the passed-in
 * coordinate.
 *
 * If the current bounds is invalid, the result is a valid bounds containing only |coordinate|.
 */
- (GMSCoordinateBounds *)includingCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Returns a GMSCoordinateBounds representing the current bounds extended to include the entire
 * other bounds.
 *
 * If the current bounds is invalid, the result is a valid bounds equal to |other|.
 */
- (GMSCoordinateBounds *)includingBounds:(GMSCoordinateBounds *)other;

/**
 * Returns YES if |coordinate| is contained within this bounds. This includes points that lie
 * exactly on the edge of the bounds.
 */
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Returns YES if |other| overlaps with this bounds. Two bounds are overlapping if there is at least
 * one coordinate point contained by both.
 */
- (BOOL)intersectsBounds:(GMSCoordinateBounds *)other;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64_x86_64-simulator/GoogleMapsBase.framework/Headers/GMSCoordinateBounds.h ===

===
Path: iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64_x86_64-simulator/GoogleMapsBase.framework/Headers/GMSDeprecationMacros.h
===
//
//  GMSDeprecationMacros.h
//  Google Maps SDK for iOS
//
//  Copyright 2015 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#ifndef IPHONE_MAPS_SDK_BASE_API_GMSDEPRECATIONMACROS_H_
#define IPHONE_MAPS_SDK_BASE_API_GMSDEPRECATIONMACROS_H_

/** Inside Google, this is defined in sdk.bzl. */
#ifndef __GMS_AVAILABLE_BUT_DEPRECATED
#define __GMS_AVAILABLE_BUT_DEPRECATED __deprecated
#endif

/** Inside Google, this is defined in sdk.bzl. */
#ifndef __GMS_AVAILABLE_BUT_DEPRECATED_MSG
#define __GMS_AVAILABLE_BUT_DEPRECATED_MSG(msg) __deprecated_msg(msg)
#endif

#endif

=== end iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64_x86_64-simulator/GoogleMapsBase.framework/Headers/GMSDeprecationMacros.h ===

===
Path: iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64_x86_64-simulator/GoogleMapsBase.framework/Headers/GoogleMapsBase.h
===
#import <GoogleMapsBase/GMSCompatabilityMacros.h>
#import <GoogleMapsBase/GMSCoordinateBounds.h>
#import <GoogleMapsBase/GMSDeprecationMacros.h>

=== end iosApp/Pods/GoogleMaps/Base/Frameworks/GoogleMapsBase.xcframework/ios-arm64_x86_64-simulator/GoogleMapsBase.framework/Headers/GoogleMapsBase.h ===

===
Path: iosApp/Pods/GoogleMaps/Base/Sources/GMSEmpty.h
===
//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Swift Package Manager requires that every target has a header file.
@import GoogleMaps;

=== end iosApp/Pods/GoogleMaps/Base/Sources/GMSEmpty.h ===

===
Path: iosApp/Pods/GoogleMaps/CHANGELOG.md
===
Please go to https://developers.google.com/maps/documentation/ios-sdk/releases
to view the Maps iOS release notes.

=== end iosApp/Pods/GoogleMaps/CHANGELOG.md ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Common/GMSNotCapturingTouchesTableView.h
===
/*
 * Copyright 2021 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

/** Table view that does not intercept gestures outside table cells. */
@interface GMSNotCapturingTouchesTableView : UITableView
@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Common/GMSNotCapturingTouchesTableView.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Common/UIViewController+GMSModals.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

@interface UIViewController (GMSModals)

- (void)gms_showToastWithMessage:(NSString *)message;

- (void)gms_promptForMapIDWithDescription:(NSString *)description
                                  handler:(void (^)(NSString *_Nullable mapID))handler;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Common/UIViewController+GMSModals.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/DemoAppDelegate.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface DemoAppDelegate : UIResponder <UIApplicationDelegate>

@property(nonatomic, nullable) id servicesHandle;

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/DemoAppDelegate.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/DemoSceneDelegate.h
===
/*
 * Copyright 2022 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

@interface DemoSceneDelegate : UIResponder <UIWindowSceneDelegate>
@property(nonatomic, nullable) UIWindow *window;
@property(nonatomic, nullable) UISplitViewController *splitViewController;
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/DemoSceneDelegate.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/SDKDemoAPIKey.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <Foundation/Foundation.h>

/**
 * To use GoogleMapsDemos, please register an API Key for your application and set it here. Your
 * API Key should be kept private.
 *
 * See documentation on getting an API Key for your API Project here:
 * https://developers.google.com/maps/documentation/ios/start#get-key
 */

#error Register for API Key and insert here. Then delete this line.
static NSString *const kAPIKey = @"";

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/SDKDemoAPIKey.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/SampleListViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface SampleListViewController
    : UITableViewController <UISplitViewControllerDelegate, UISearchResultsUpdating>

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/SampleListViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/AnimatedCurrentLocationViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>

@interface AnimatedCurrentLocationViewController : UIViewController <CLLocationManagerDelegate>

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/AnimatedCurrentLocationViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/AnimatedUIViewMarkerViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface AnimatedUIViewMarkerViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/AnimatedUIViewMarkerViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/BasicMapViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

#if __has_feature(modules)
@import GoogleMaps;
#else
#import <GoogleMaps/GoogleMaps.h>
#endif

@interface BasicMapViewController : UIViewController <GMSMapViewDelegate>

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/BasicMapViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/CameraViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface CameraViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/CameraViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/CustomIndoorViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface CustomIndoorViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/CustomIndoorViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/CustomMarkersViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface CustomMarkersViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/CustomMarkersViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/DataDrivenStylingBasicViewController.h
===
/*
 * Copyright 2022 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface DataDrivenStylingBasicViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/DataDrivenStylingBasicViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/DataDrivenStylingEventsViewController.h
===
/*
 * Copyright 2022 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

#if __has_feature(modules)
@import GoogleMaps;
#else
#import <GoogleMaps/GoogleMaps.h>
#endif

@interface DataDrivenStylingEventsViewController
    : UIViewController <GMSMapViewDelegate, UITableViewDelegate, UITableViewDataSource>
@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/DataDrivenStylingEventsViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/DataDrivenStylingSearchViewController.h
===
/*
 * Copyright 2023 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

/**
 * ViewController to display multiple data-driven styling layers at the same time and handle events.
 */
@interface DataDrivenStylingSearchViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/DataDrivenStylingSearchViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/DoubleMapViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface DoubleMapViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/DoubleMapViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/FitBoundsViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface FitBoundsViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/FitBoundsViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/FixedPanoramaViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface FixedPanoramaViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/FixedPanoramaViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/FrameRateViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface FrameRateViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/FrameRateViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/GeocoderViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

#if __has_feature(modules)
@import GoogleMaps;
#else
#import <GoogleMaps/GoogleMaps.h>
#endif

@interface GeocoderViewController : UIViewController <GMSMapViewDelegate>

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/GeocoderViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/GestureControlViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface GestureControlViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/GestureControlViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/GradientPolylinesViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface GradientPolylinesViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/GradientPolylinesViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/GroundOverlayViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface GroundOverlayViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/GroundOverlayViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/IndoorMuseumNavigationViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

#if __has_feature(modules)
@import GoogleMaps;
#else
#import <GoogleMaps/GoogleMaps.h>
#endif

@interface IndoorMuseumNavigationViewController
    : UIViewController <GMSMapViewDelegate, GMSIndoorDisplayDelegate>

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/IndoorMuseumNavigationViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/IndoorViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface IndoorViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/IndoorViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MapLayerViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface MapLayerViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MapLayerViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MapTypesViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface MapTypesViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MapTypesViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MapZoomViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface MapZoomViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MapZoomViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MarkerEventsViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

#if __has_feature(modules)
@import GoogleMaps;
#else
#import <GoogleMaps/GoogleMaps.h>
#endif

@interface MarkerEventsViewController : UIViewController <GMSMapViewDelegate>

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MarkerEventsViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MarkerInfoWindowViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface MarkerInfoWindowViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MarkerInfoWindowViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MarkerLayerViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

#if __has_feature(modules)
@import GoogleMaps;
#else
#import <GoogleMaps/GoogleMaps.h>
#endif

@interface MarkerLayerViewController : UIViewController <GMSMapViewDelegate>

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MarkerLayerViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MarkersViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface MarkersViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MarkersViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MyLocationViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

#if __has_feature(modules)
@import GoogleMaps;
#else
#import <GoogleMaps/GoogleMaps.h>
#endif

@interface MyLocationViewController : UIViewController <GMSMapViewDelegate>

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/MyLocationViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/PaddingBehaviorViewController.h
===
/*
 * Copyright 2017 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface PaddingBehaviorViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/PaddingBehaviorViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/PanoramaViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface PanoramaViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/PanoramaViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/PolygonsViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

#if __has_feature(modules)
@import GoogleMaps;
#else
#import <GoogleMaps/GoogleMaps.h>
#endif

@interface PolygonsViewController : UIViewController <GMSMapViewDelegate>

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/PolygonsViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/PolylinesViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface PolylinesViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/PolylinesViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/Samples.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** Type defining the sample definition returned from +newDemo:withTitle:andDescription:. */
typedef NSDictionary<NSString *, id> DemoDefinition;

/** This class defines the list of sample demos included in this app. */
@interface Samples : NSObject

/** Returns a list of section names into which sample demos should be grouped. */
+ (NSArray<NSString *> *)loadSections;

/** Returns one list of sample demos for each section. */
+ (NSArray<NSArray<DemoDefinition *> *> *)loadDemos;

+ (DemoDefinition *)newDemo:(Class)viewControllerClass
                  withTitle:(NSString *)title
             andDescription:(nullable NSString *)description;
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/Samples.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/SnapshotReadyViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface SnapshotReadyViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/SnapshotReadyViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/StampedPolylinesViewController.h
===
/*
 * Copyright 2020 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface StampedPolylinesViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/StampedPolylinesViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/StructuredGeocoderViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface StructuredGeocoderViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/StructuredGeocoderViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/StyledMapViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface StyledMapViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/StyledMapViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/TileLayerViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface TileLayerViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/TileLayerViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/TrafficMapViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface TrafficMapViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/TrafficMapViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/VisibleRegionViewController.h
===
/*
 * Copyright 2016 Google LLC. All rights reserved.
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#import <UIKit/UIKit.h>

@interface VisibleRegionViewController : UIViewController

@end

=== end iosApp/Pods/GoogleMaps/Example/GoogleMapsXCFrameworkDemos/Samples/VisibleRegionViewController.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSAccessibilityLabels.h
===
//
//  GMSAccessibilityLabels.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

/**
 * A previous version of this API contained this misspelling, this preserves compatibility with old
 * versions. Use kGMSAccessibilityOutOfQuota instead.
 */
#define kGMSAccessiblityOutOfQuota kGMSAccessibilityOutOfQuota;

/**
 * Accessibility identifier for the compass button.
 *
 * @related GMSMapView
 */
extern NSString *const kGMSAccessibilityCompass;

/**
 * Accessibility identifier for the "my location" button.
 *
 * @related GMSMapView
 */
extern NSString *const kGMSAccessibilityMyLocation;

/**
 * Accessibility identifier for the "out of quota" error label.
 *
 * @related GMSMapView
 */
extern NSString *const kGMSAccessibilityOutOfQuota;

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSAccessibilityLabels.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSAddress.h
===
//
//  GMSAddress.h
//  Google Maps SDK for iOS
//
//  Copyright 2014 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

#if __has_feature(modules)
@import GoogleMapsBase;
#else
#import <GoogleMapsBase/GoogleMapsBase.h>
#endif

NS_ASSUME_NONNULL_BEGIN

/**
 * A result from a reverse geocode request, containing a human-readable address. This class is
 * immutable and should not be instantiated directly unless under testing circumstances. Obtain an
 * instance via GMSGeocoder.
 *
 * Some of the fields may be nil, indicating they are not present.
 */
@interface GMSAddress : NSObject <NSCopying, NSSecureCoding>

/** Location, or kLocationCoordinate2DInvalid if unknown. */
@property(nonatomic, readonly) CLLocationCoordinate2D coordinate;

/** Street number and name. */
@property(nonatomic, copy, readonly, nullable) NSString *thoroughfare;

/** Locality or city. */
@property(nonatomic, copy, readonly, nullable) NSString *locality;

/** Subdivision of locality, district or park. */
@property(nonatomic, copy, readonly, nullable) NSString *subLocality;

/** Region/State/Administrative area. */
@property(nonatomic, copy, readonly, nullable) NSString *administrativeArea;

/** Postal/Zip code. */
@property(nonatomic, copy, readonly, nullable) NSString *postalCode;

/** The country name. */
@property(nonatomic, copy, readonly, nullable) NSString *country;

/** An array of NSString containing formatted lines of the address. May be nil. */
@property(nonatomic, copy, readonly, nullable) NSArray<NSString *> *lines;

/** Returns the first line of the address. */
- (nullable NSString *)addressLine1 __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
    "This method is obsolete and will be removed in a future release. Use the lines property "
    "instead.");

/** Returns the second line of the address. */
- (nullable NSString *)addressLine2 __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
    "This method is obsolete and will be removed in a future release. Use the lines property "
    "instead.");

@end

/**
 * The former type of geocode results (pre-1.7). This remains here for migration and will be removed
 * in future releases.
 */
@compatibility_alias GMSReverseGeocodeResult GMSAddress;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSAddress.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSAdvancedMarker.h
===
//
//  GMSAdvancedMarker.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import "GMSCollisionBehavior.h"
#import "GMSMarker.h"


NS_ASSUME_NONNULL_BEGIN

/** An advanced marker is an icon placed at a particular point on the map's surface. */
@interface GMSAdvancedMarker : GMSMarker

/**
 * The marker's collision behavior, which determines whether or not the marker's visibility can be
 * affected by other markers or labeled content on the map.
 */
@property(nonatomic) GMSCollisionBehavior collisionBehavior;


@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSAdvancedMarker.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCALayer.h
===
//
//  GMSCALayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <QuartzCore/QuartzCore.h>

/**
 * GMSCALayer is a superclass used by layers in the Google Maps SDK for iOS, such as GMSMapLayer and
 * GMSPanoramaLayer.
 *
 * This is an implementation detail and it should not be instantiated directly.
 */
@interface GMSCALayer : CALayer
@end

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCALayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCameraPosition.h
===
//
//  GMSCameraPosition.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreGraphics/CoreGraphics.h>
#import <CoreLocation/CoreLocation.h>

NS_ASSUME_NONNULL_BEGIN

/** An immutable class that aggregates all camera position parameters. */
@interface GMSCameraPosition : NSObject <NSCopying, NSMutableCopying>

/** Location on the Earth towards which the camera points. */
@property(nonatomic, readonly) CLLocationCoordinate2D target;

/**
 * Zoom level. Zoom uses an exponentional scale, where zoom 0 represents the entire world as a
 * 256 x 256 square. Each successive zoom level increases magnification by a factor of 2. So at
 * zoom level 1, the world is 512x512, and at zoom level 2, the entire world is 1024x1024.
 */
@property(nonatomic, readonly) float zoom;

/** Bearing of the camera, in degrees clockwise from true north. */
@property(nonatomic, readonly) CLLocationDirection bearing;

/**
 * The angle, in degrees, of the camera from the nadir (directly facing the Earth). 0 is
 * straight down, 90 is parallel to the ground. Note that the maximum angle allowed is dependent
 * on the zoom. You can think of it as a series of line segments as a function of zoom, rather
 * than a step function. For zoom 16 and above, the maximum angle is 65 degrees. For zoom 10 and
 * below, the maximum angle is 30 degrees.
 */
@property(nonatomic, readonly) double viewingAngle;

/**
 * Designated initializer. Configures this GMSCameraPosition with all available camera properties.
 * Building a GMSCameraPosition via this initializer (or by the following convenience constructors)
 * will implicitly clamp camera values.
 *
 * @param target Location on the earth towards which the camera points.
 * @param zoom The zoom level near the center of the screen.
 * @param bearing Bearing of the camera in degrees clockwise from true north.
 * @param viewingAngle The angle, in degrees, of the camera angle from the nadir (directly facing
 *                     the Earth)
 */
- (instancetype)initWithTarget:(CLLocationCoordinate2D)target
                          zoom:(float)zoom
                       bearing:(CLLocationDirection)bearing
                  viewingAngle:(double)viewingAngle;

/**
 * Convenience initializer for GMSCameraPosition for a particular target and zoom level. This will
 * set the bearing and viewingAngle properties of this camera to zero defaults (i.e., directly
 * facing the Earth's surface, with the top of the screen pointing north).
 *
 * @param target Location on the earth towards which the camera points.
 * @param zoom The zoom level near the center of the screen.
 */
- (instancetype)initWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;

/**
 * Convenience initializer for GMSCameraPosition for a particular latitidue, longitude and zoom
 * level. This will set the bearing and viewingAngle properties of this camera to zero defaults
 * (i.e., directly facing the Earth's surface, with the top of the screen pointing north).
 *
 * @param latitude The latitude component of the location towards which the camera points.
 * @param longitude The latitude component of the location towards which the camera points.
 * @param zoom The zoom level near the center of the screen.
 */
- (instancetype)initWithLatitude:(CLLocationDegrees)latitude
                       longitude:(CLLocationDegrees)longitude
                            zoom:(float)zoom;

/**
 * Convenience initializer for GMSCameraPosition, with latitude/longitude and all other camera
 * properties as per -initWithTarget:zoom:bearing:viewingAngle:.
 *
 * @param latitude The latitude component of the location towards which the camera points.
 * @param longitude The latitude component of the location towards which the camera points.
 * @param zoom The zoom level near the center of the screen.
 * @param bearing Bearing of the camera in degrees clockwise from true north.
 * @param viewingAngle The angle, in degrees, of the camera angle from the nadir (directly facing
 *                     the Earth)
 */
- (instancetype)initWithLatitude:(CLLocationDegrees)latitude
                       longitude:(CLLocationDegrees)longitude
                            zoom:(float)zoom
                         bearing:(CLLocationDirection)bearing
                    viewingAngle:(double)viewingAngle;

/**
 * Convenience constructor for GMSCameraPosition for a particular target and zoom level. This will
 * set the bearing and viewingAngle properties of this camera to zero defaults (i.e., directly
 * facing the Earth's surface, with the top of the screen pointing north).
 */
+ (instancetype)cameraWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;

/** Convenience constructor for GMSCameraPosition, as per cameraWithTarget:zoom:. */
+ (instancetype)cameraWithLatitude:(CLLocationDegrees)latitude
                         longitude:(CLLocationDegrees)longitude
                              zoom:(float)zoom;

/**
 * Convenience constructor for GMSCameraPosition, with all camera properties as per
 * initWithTarget:zoom:bearing:viewingAngle:.
 */
+ (instancetype)cameraWithTarget:(CLLocationCoordinate2D)target
                            zoom:(float)zoom
                         bearing:(CLLocationDirection)bearing
                    viewingAngle:(double)viewingAngle;

/**
 * Convenience constructor for GMSCameraPosition, with latitude/longitude and all other camera
 * properties as per initWithTarget:zoom:bearing:viewingAngle:.
 */
+ (instancetype)cameraWithLatitude:(CLLocationDegrees)latitude
                         longitude:(CLLocationDegrees)longitude
                              zoom:(float)zoom
                           bearing:(CLLocationDirection)bearing
                      viewingAngle:(double)viewingAngle;

/**
 * Get the zoom level at which |meters| distance, at given |coord| on Earth, correspond to the
 * specified number of screen |points|.
 *
 * For extremely large or small distances the returned zoom level may be smaller or larger than the
 * minimum or maximum zoom level allowed on the camera.
 *
 * This helper method is useful for building camera positions that contain specific physical areas
 * on Earth.
 */
+ (float)zoomAtCoordinate:(CLLocationCoordinate2D)coordinate
                forMeters:(CLLocationDistance)meters
                perPoints:(CGFloat)points;

@end

/** Mutable version of GMSCameraPosition. */
@interface GMSMutableCameraPosition : GMSCameraPosition
@property(nonatomic) CLLocationCoordinate2D target;
@property(nonatomic) float zoom;
@property(nonatomic) CLLocationDirection bearing;
@property(nonatomic) double viewingAngle;
@end

/** The maximum zoom (closest to the Earth's surface) permitted by the map camera. */
FOUNDATION_EXTERN const float kGMSMaxZoomLevel;

/** The minimum zoom (farthest from the Earth's surface) permitted by the map camera. */
FOUNDATION_EXTERN const float kGMSMinZoomLevel;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCameraPosition.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCameraUpdate.h
===
//
//  GMSCameraUpdate.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>

@class GMSCameraPosition;
@class GMSCoordinateBounds;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSCameraUpdate represents an update that may be applied to a GMSMapView.
 *
 * It encapsulates some logic for modifying the current camera.
 *
 * It should only be constructed using the factory helper methods below.
 */
@interface GMSCameraUpdate : NSObject

/**
 * Returns a GMSCameraUpdate that zooms in on the map.
 *
 * The zoom increment is 1.0.
 */
+ (GMSCameraUpdate *)zoomIn;

/**
 * Returns a GMSCameraUpdate that zooms out on the map.
 *
 * The zoom increment is -1.0.
 */
+ (GMSCameraUpdate *)zoomOut;

/** Returns a GMSCameraUpdate that changes the zoom by the specified amount. */
+ (GMSCameraUpdate *)zoomBy:(float)delta;

/** Returns a GMSCameraUpdate that sets the zoom to the specified amount. */
+ (GMSCameraUpdate *)zoomTo:(float)zoom;

/** Returns a GMSCameraUpdate that sets the camera target to the specified coordinate. */
+ (GMSCameraUpdate *)setTarget:(CLLocationCoordinate2D)target;

/** Returns a GMSCameraUpdate that sets the camera target and zoom to the specified values. */
+ (GMSCameraUpdate *)setTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;

/** Returns a GMSCameraUpdate that sets the camera to the specified GMSCameraPosition. */
+ (GMSCameraUpdate *)setCamera:(GMSCameraPosition *)camera;

/**
 * Returns a GMSCameraUpdate that transforms the camera such that the specified bounds are centered
 * on screen at the greatest possible zoom level. The bounds will have a default padding of 64
 * points.
 *
 * The returned camera update will set the camera's bearing and tilt to their default zero values
 * (i.e., facing north and looking directly at the Earth).
 */
+ (GMSCameraUpdate *)fitBounds:(GMSCoordinateBounds *)bounds;

/**
 * This is similar to fitBounds: but allows specifying the padding (in points) in order to inset the
 * bounding box from the view's edges.
 *
 * If the requested |padding| is larger than the view size in either the vertical or horizontal
 * direction the map will be maximally zoomed out.
 */
+ (GMSCameraUpdate *)fitBounds:(GMSCoordinateBounds *)bounds withPadding:(CGFloat)padding;

/**
 * This is similar to fitBounds: but allows specifying edge insets in order to inset the bounding
 * box from the view's edges.
 *
 * If the requested |edgeInsets| are larger than the view size in either the vertical or horizontal
 * direction the map will be maximally zoomed out.
 */
+ (GMSCameraUpdate *)fitBounds:(GMSCoordinateBounds *)bounds
                withEdgeInsets:(UIEdgeInsets)edgeInsets;

/**
 * Returns a GMSCameraUpdate that shifts the center of the view by the specified number of points in
 * the x and y directions. X grows to the right, Y grows down.
 */
+ (GMSCameraUpdate *)scrollByX:(CGFloat)dX Y:(CGFloat)dY;

/**
 * Returns a GMSCameraUpdate that zooms with a focus point; the focus point stays fixed on screen.
 */
+ (GMSCameraUpdate *)zoomBy:(float)zoom atPoint:(CGPoint)point;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCameraUpdate.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCircle.h
===
//
//  GMSCircle.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSOverlay.h"

NS_ASSUME_NONNULL_BEGIN

/** A circle on the Earth's surface (spherical cap). */
@interface GMSCircle : GMSOverlay

/** Position on Earth of circle center. Ignores invalid positions. */
@property(nonatomic) CLLocationCoordinate2D position;

/** Radius of the circle in meters; must be positive. */
@property(nonatomic) CLLocationDistance radius;

/**
 * The width of the circle's outline in screen points. Defaults to 1. As per GMSPolygon, the width
 * does not scale when the map is zoomed.
 *
 * Setting strokeWidth to 0 results in no stroke.
 */
@property(nonatomic) CGFloat strokeWidth;

/** The color of this circle's outline. The default value is black. */
@property(nonatomic, nullable) UIColor *strokeColor;

/**
 * The interior of the circle is painted with fillColor. The default value is nil, resulting in no
 * fill.
 */
@property(nonatomic, nullable) UIColor *fillColor;

/**
 * Convenience constructor for GMSCircle for a particular position and radius. Other properties will
 * have default values. An invalid position will result in an overlay object that cannot be drawn on
 * the map.
 */
+ (instancetype)circleWithPosition:(CLLocationCoordinate2D)position
                            radius:(CLLocationDistance)radius;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCircle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCollisionBehavior.h
===
//
//  GMSCollisionBehavior.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * \defgroup CollisionBehavior GMSCollisionBehavior
 * @{
 */

/**
 * How markers interact with other markers and regular labels. Defaults to
 * @c GMSCollisionBehaviorRequired.
 *
 * Marker collisions occur when coordinates intersect.
 *
 * Priority is defined as:
 * 1) Required > Optional
 * 2) zIndex: higher zIndex > lower zIndex
 *
 * Beyond this, it is undefined which marker will show if both are optional and have the same
 * zIndex.
 * Regular map labels are the lowest priority.
 */
typedef NS_ENUM(NSInteger, GMSCollisionBehavior) {
  /**
   * Always display the marker regardless of collision. This is the default behavior.
   * Has no impact on whether any other markers or basemap labels show.
   */
  GMSCollisionBehaviorRequired,

  /**
   * Always display the marker regardless of collision, and hide any
   * CollisionBehaviorOptionalAndHidesLowerPriority markers or labels that would overlap with the
   * marker.
   */
  GMSCollisionBehaviorRequiredAndHidesOptional,

  /**
   * Display the marker only if it does not overlap with other markers. Does not include
   * GMSCollisionBehaviorRequired. If two markers of this type would overlap, the one with the
   * higher zIndex is shown. Collision rules for markers with the same zIndex is undefined.
   */
  GMSCollisionBehaviorOptionalAndHidesLowerPriority,
};

/**@}*/

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCollisionBehavior.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCoordinateBounds+GoogleMaps.h
===
//
//  GMSCoordinateBounds+GoogleMaps.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//


#if __has_feature(modules)
@import GoogleMapsBase;
#else
#import <GoogleMapsBase/GoogleMapsBase.h>
#endif
#import "GMSProjection.h"

@class GMSPath;

NS_ASSUME_NONNULL_BEGIN

@interface GMSCoordinateBounds (GoogleMaps)

/** Inits with bounds that encompass |region|. */
- (id)initWithRegion:(GMSVisibleRegion)region;

/** Inits with bounds that encompass |path|. */
- (id)initWithPath:(GMSPath *)path;

/** Returns a GMSCoordinateBounds representing the current bounds extended to include |path|. */
- (GMSCoordinateBounds *)includingPath:(GMSPath *)path;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSCoordinateBounds+GoogleMaps.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSFeature.h
===
//
//  GMSFeature.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** Identifiers for feature types of data-driven styling features. */
NS_SWIFT_NAME(FeatureType) typedef NSString *GMSFeatureType NS_TYPED_EXTENSIBLE_ENUM;

FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeAdministrativeAreaLevel1;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeAdministrativeAreaLevel2;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeCountry;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeLocality;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypePostalCode;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeSchoolDistrict;

/**
 * An interface representing a feature's metadata.
 *
 * Do not save a reference to a particular feature object because the reference will not be stable.
 */
NS_SWIFT_NAME(Feature)
@protocol GMSFeature <NSObject>

/** Type of this feature. */
- (GMSFeatureType)featureType;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSFeature.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSFeatureLayer.h
===
//
//  GMSFeatureLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import "GMSFeature.h"

@class GMSFeatureStyle;

NS_ASSUME_NONNULL_BEGIN

/**
 * A class representing a collection of all features of the same @c GMSFeatureType, whose style can
 * be overridden on the client. Each @c GMSFeatureType will have one corresponding @c
 * GMSFeatureLayer.
 */
NS_SWIFT_NAME(FeatureLayer)
@interface GMSFeatureLayer<__covariant T : id <GMSFeature>> : NSObject

/**
 * The feature type associated with this layer. All features associated with the layer will be of
 * this type.
 */
@property(nonatomic, readonly) GMSFeatureType featureType;

/**
 * Determines if the data-driven @c GMSFeatureLayer is available. Data-driven styling requires
 * the Metal Framework, a valid map ID and that the feature type be applied.
 * If @c NO, styling for the @c GMSFeatureLayer returns to the default and events are not triggered.
 */
@property(nonatomic, readonly, getter=isAvailable) BOOL available;

/**
 * Styling block to be applied to all features in this layer.
 *
 * The style block is applied to all visible features in the viewport when the setter is called, and
 * is run multiple times for the subsequent features entering the viewport.
 *
 * The function is required to be deterministic and return consistent results when it is applied
 * over the map tiles. If any styling specs of any feature would be changed, @c style must be set
 * again. Changing behavior of the style block without calling the @c style setter will result in
 * undefined behavior, including stale and/or shattered map renderings. See the example below:
 * @code{.swift}
 * var selectedPlaceIDs = Set<String>()
 * var style = FeatureStyle(fill: .red, stroke: .clear, strokeWidth: 0)
 * layer.style = { feature in
 *   selectedPlaceIDs.contains(feature.placeID) ? style : nil
 * }
 *
 *
 * selectedPlaceIDs.insert("foo")
 *
 * style = FeatureStyle(fill: .clear, stroke: .blue, strokeWidth: 1.5)
 *
 *
 * layer.style = { feature in
 *   selectedPlaceIDs.contains(feature.placeID) ? style : nil
 * }
 * @endcode
 */
@property(nonatomic, nullable) GMSFeatureStyle *_Nullable (^style)(T);

/**
 * Create a feature layer instance for testing.
 *
 * This method should be used for your unit tests only. In production, @c GMSFeatureLayer instances
 * should only be created by the SDK.
 */
- (instancetype)initWithFeatureType:(GMSFeatureType)featureType;

- (instancetype)init NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSFeatureLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSFeatureStyle.h
===
//
//  GMSFeatureStyle.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//


#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

@class GMSMutableFeatureStyle;

/** Specifies how a map feature should appear when displayed on a map. */
NS_SWIFT_NAME(FeatureStyle)
@interface GMSFeatureStyle :
    NSObject

/** Creates a new style. */
+ (instancetype)styleWithFillColor:(nullable UIColor *)fillColor
                       strokeColor:(nullable UIColor *)strokeColor
                       strokeWidth:(CGFloat)strokeWidth
    NS_SWIFT_UNAVAILABLE("Use initializer instead");

/** Initializes a new style. */
- (instancetype)initWithFillColor:(nullable UIColor *)fillColor
                      strokeColor:(nullable UIColor *)strokeColor
                      strokeWidth:(CGFloat)strokeWidth NS_DESIGNATED_INITIALIZER;

- (instancetype)init NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE;

/** Specifies the fill color, including the alpha channel. */
@property(nonatomic, readonly, copy, nullable) UIColor *fillColor;

/** Specifies the border color, including the alpha channel. */
@property(nonatomic, readonly, copy, nullable) UIColor *strokeColor;

/** Specifies the border width, in screen points. */
@property(nonatomic, readonly) CGFloat strokeWidth;



@end


/** Value to use for @c strokeWidth parameter when the stroke width should be unchanged. */
FOUNDATION_EXTERN const CGFloat
    GMSFeatureStyleStrokeWidthUnspecified NS_SWIFT_NAME(FeatureStyle.strokeWidthUnspecified);


NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSFeatureStyle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSGeocoder.h
===
//
//  GMSGeocoder.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

#import "GMSAddress.h"

@class GMSReverseGeocodeResponse;

NS_ASSUME_NONNULL_BEGIN

/**
 * \defgroup GeocoderErrorCode GMSGeocoderErrorCode
 * @{
 */

/** GMSGeocoder error codes, embedded in NSError. */
typedef NS_ENUM(NSInteger, GMSGeocoderErrorCode) {
  kGMSGeocoderErrorInvalidCoordinate = 1,
  kGMSGeocoderErrorInternal,
};

/**@}*/

/**
 * Handler that reports a reverse geocoding response, or error.
 *
 * @related GMSGeocoder
 */
typedef void (^GMSReverseGeocodeCallback)(GMSReverseGeocodeResponse *_Nullable, NSError *_Nullable);

/**
 * Exposes a service for reverse geocoding. This maps Earth coordinates (latitude and longitude) to
 * a collection of addresses near that coordinate.
 */
@interface GMSGeocoder : NSObject

/* Convenience constructor for GMSGeocoder. */
+ (GMSGeocoder *)geocoder;

/**
 * Reverse geocodes a coordinate on the Earth's surface.
 *
 * @param coordinate The coordinate to reverse geocode.
 * @param handler The callback to invoke with the reverse geocode results.
 *        The callback will be invoked asynchronously from the main thread.
 */
- (void)reverseGeocodeCoordinate:(CLLocationCoordinate2D)coordinate
               completionHandler:(GMSReverseGeocodeCallback)handler;

@end

/** A collection of results from a reverse geocode request. */
@interface GMSReverseGeocodeResponse : NSObject <NSCopying>

/** Returns the first result, or nil if no results were available. */
- (nullable GMSAddress *)firstResult;

/** Returns an array of all the results (contains GMSAddress), including the first result. */
- (nullable NSArray<GMSAddress *> *)results;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSGeocoder.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSGeometryUtils.h
===
//
//  GMSGeometryUtils.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

/**
 * \defgroup GeometryUtils GMSGeometryUtils
 * @{
 */

#import <CoreLocation/CoreLocation.h>

#import "GMSPath.h"

@class GMSPath;
@class GMSStrokeStyle;
@class GMSStyleSpan;

NS_ASSUME_NONNULL_BEGIN

/** Average Earth radius in meters. */
static const CLLocationDistance kGMSEarthRadius = 6371009.0;

/**
 * A point on the map. May represent a projected coordinate.
 *
 * x is in [-1, 1]. The axis direction is normal: y grows towards North, x grows towards East. (0,
 * 0) is the center of the map.
 *
 * See GMSProject() and GMSUnproject().
 */
typedef struct GMSMapPoint {
  double x;
  double y;
} GMSMapPoint;

/** Projects |coordinate| to the map. |coordinate| must be valid. */
FOUNDATION_EXPORT
GMSMapPoint GMSProject(CLLocationCoordinate2D coordinate);

/** Unprojects |point| from the map. point.x must be in [-1, 1]. */
FOUNDATION_EXPORT
CLLocationCoordinate2D GMSUnproject(GMSMapPoint point);

/**
 * Returns a linearly interpolated point on the segment [a, b], at the fraction |t| from |a|. |t|==0
 * corresponds to |a|, |t|==1 corresponds to |b|.
 *
 * The interpolation takes place along the short path between the points potentially crossing the
 * date line. E.g. interpolating from San Francisco to Tokyo will pass north of Hawaii and cross the
 * date line.
 */
FOUNDATION_EXPORT
GMSMapPoint GMSMapPointInterpolate(GMSMapPoint a, GMSMapPoint b, double t);

/**
 * Returns the length of the segment [a, b] in projected space.
 *
 * The length is computed along the short path between the points potentially crossing the date
 * line. E.g. the distance between the points corresponding to San Francisco and Tokyo measures the
 * segment that passes north of Hawaii crossing the date line.
 */
FOUNDATION_EXPORT
double GMSMapPointDistance(GMSMapPoint a, GMSMapPoint b);

/**
 * Returns whether |point| lies inside of path. The path is always considered closed, regardless of
 * whether the last point equals the first or not.
 *
 * Inside is defined as not containing the South Pole -- the South Pole is always outside.
 *
 * |path| describes great circle segments if |geodesic| is YES, and rhumb (loxodromic) segments
 * otherwise.
 *
 * If |point| is exactly equal to one of the vertices, the result is YES. A point that is not equal
 * to a vertex is on one side or the other of any path segment -- it can never be "exactly on the
 * border".
 *
 * See GMSGeometryIsLocationOnPath() for a border test with tolerance.
 */
FOUNDATION_EXPORT
BOOL GMSGeometryContainsLocation(CLLocationCoordinate2D point, GMSPath *path, BOOL geodesic);

/**
 * Returns whether |point| lies on or near |path|, within the specified |tolerance| in meters.
 * |path| is composed of great circle segments if |geodesic| is YES, and of rhumb (loxodromic)
 * segments if |geodesic| is NO.
 *
 * See also GMSGeometryIsLocationOnPath(point, path, geodesic).
 *
 * The tolerance, in meters, is relative to the spherical radius of the Earth. If you need to work
 * on a sphere of different radius, you may compute the equivalent tolerance from the desired
 * tolerance on the sphere of radius R: tolerance = toleranceR * (RadiusEarth / R), with
 * RadiusEarth==6371009.
 */
FOUNDATION_EXPORT
BOOL GMSGeometryIsLocationOnPathTolerance(CLLocationCoordinate2D point, GMSPath *path,
                                          BOOL geodesic, CLLocationDistance tolerance);

/**
 * Same as GMSGeometryIsLocationOnPath(point, path, geodesic, tolerance), with a default tolerance
 * of 0.1 meters.
 */
FOUNDATION_EXPORT
BOOL GMSGeometryIsLocationOnPath(CLLocationCoordinate2D point, GMSPath *path, BOOL geodesic);

/**
 * Returns the great circle distance between two coordinates, in meters, on Earth.
 *
 * This is the shortest distance between the two coordinates on the sphere.
 *
 * Both coordinates must be valid.
 */
FOUNDATION_EXPORT
CLLocationDistance GMSGeometryDistance(CLLocationCoordinate2D from, CLLocationCoordinate2D to);

/**
 * Returns the great circle length of |path|, in meters, on Earth.
 *
 * This is the sum of GMSGeometryDistance() over the path segments.
 *
 * All the coordinates of the path must be valid.
 */
FOUNDATION_EXPORT
CLLocationDistance GMSGeometryLength(GMSPath *path);

/**
 * Returns the area of a geodesic polygon defined by |path| on Earth.
 *
 * The "inside" of the polygon is defined as not containing the South pole.
 *
 * If |path| is not closed, it is implicitly treated as a closed path nevertheless and the result is
 * the same.
 *
 * All coordinates of the path must be valid.
 *
 * The polygon must be simple (not self-overlapping) and may be concave.
 *
 * If any segment of the path is a pair of antipodal points, the result is undefined -- because two
 * antipodal points do not form a unique great circle segment on the sphere.
 */
FOUNDATION_EXPORT
double GMSGeometryArea(GMSPath *path);

/**
 * Returns the signed area of a geodesic polygon defined by |path| on Earth.
 *
 * The result has the same absolute value as GMSGeometryArea(); it is positive if the points of path
 * are in counter-clockwise order, and negative otherwise.
 *
 * The same restrictions as on GMSGeometryArea() apply.
 */
FOUNDATION_EXPORT
double GMSGeometrySignedArea(GMSPath *path);

/**
 * Returns the initial heading (degrees clockwise of North) at |from| of the shortest path to |to|.
 *
 * The returned value is in the range [0, 360).
 *
 * Returns 0 if the two coordinates are the same.
 *
 * Both coordinates must be valid.
 *
 * To get the final heading at |to| one may use (GMSGeometryHeading(|to|, |from|) + 180) modulo 360.
 */
FOUNDATION_EXPORT
CLLocationDirection GMSGeometryHeading(CLLocationCoordinate2D from, CLLocationCoordinate2D to);

/**
 * Returns the destination coordinate, when starting at |from| with initial |heading|, travelling
 * |distance| meters along a great circle arc, on Earth.
 *
 * The resulting longitude is in the range [-180, 180).
 *
 * Both coordinates must be valid.
 */
FOUNDATION_EXPORT
CLLocationCoordinate2D GMSGeometryOffset(CLLocationCoordinate2D from, CLLocationDistance distance,
                                         CLLocationDirection heading);

/**
 * Returns the coordinate that lies the given |fraction| of the way between the |from| and |to|
 * coordinates on the shortest path between the two.
 *
 * The resulting longitude is in the range [-180, 180).
 */
FOUNDATION_EXPORT
CLLocationCoordinate2D GMSGeometryInterpolate(CLLocationCoordinate2D from,
                                              CLLocationCoordinate2D to, double fraction);

/**
 * Returns an NSArray of GMSStyleSpan constructed by repeated application of style and length
 * information from |styles| and |lengths| along |path|.
 *
 * |path| the path along which the output spans are computed.
 * |styles| an NSArray of GMSStrokeStyle. Wraps if consumed. Can't be empty.
 * |lengths| an NSArray of NSNumber; each entry gives the length of the corresponding
 *           style from |styles|. Wraps if consumed. Can't be empty.
 * |lengthKind| the interpretation of values from |lengths| (geodesic, rhumb or projected).
 *
 * Example: a polyline with alternating black and white spans:
 *
 * <pre>
 * GMSMutablePath *path;
 * NSArray *styles = @[[GMSStrokeStyle solidColor:[UIColor whiteColor]],
 *                     [GMSStrokeStyle solidColor:[UIColor blackColor]]];
 * NSArray *lengths = @[@100000, @50000];
 * polyline.path = path;
 * polyline.spans = GMSStyleSpans(path, styles, lengths, kGMSLengthRhumb);
 * </pre>
 */
FOUNDATION_EXPORT
NSArray<GMSStyleSpan *> *GMSStyleSpans(GMSPath *path, NSArray<GMSStrokeStyle *> *styles,
                                       NSArray<NSNumber *> *lengths, GMSLengthKind lengthKind);

/**
 * Similar to GMSStyleSpans(path, styles, lengths, lengthKind) but additionally takes an initial
 * length offset that will be skipped over relative to the |lengths| array.
 *
 * |lengthOffset| the length (e.g. in meters) that should be skipped initially from |lengths|.
 */
FOUNDATION_EXPORT
NSArray<GMSStyleSpan *> *GMSStyleSpansOffset(GMSPath *path, NSArray<GMSStrokeStyle *> *styles,
                                             NSArray<NSNumber *> *lengths, GMSLengthKind lengthKind,
                                             double lengthOffset);

/**@}*/

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSGeometryUtils.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSGroundOverlay.h
===
//
//  GMSGroundOverlay.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSOverlay.h"

@class GMSCoordinateBounds;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSGroundOverlay specifies the available options for a ground overlay that exists on the Earth's
 * surface. Unlike a marker, the position of a ground overlay is specified explicitly and it does
 * not face the camera.
 */
@interface GMSGroundOverlay : GMSOverlay

/**
 * The position of this GMSGroundOverlay, or more specifically, the physical position of its anchor.
 * If this is changed, |bounds| will be moved around the new position.
 */
@property(nonatomic) CLLocationCoordinate2D position;

/**
 * The anchor specifies where this GMSGroundOverlay is anchored to the Earth in relation to
 * |bounds|. If this is modified, |position| will be set to the corresponding new position within
 * |bounds|.
 */
@property(nonatomic) CGPoint anchor;

/**
 * Icon to render within |bounds| on the Earth. If this is nil, the overlay will not be visible
 * (unlike GMSMarker which has a default image).
 */
@property(nonatomic, nullable) UIImage *icon;

/**
 * Sets the opacity of the ground overlay, between 0 (completely transparent) and 1 (default)
 * inclusive.
 */
@property(nonatomic) float opacity;

/**
 * Bearing of this ground overlay, in degrees. The default value, zero, points this ground overlay
 * up/down along the normal Y axis of the earth.
 */
@property(nonatomic) CLLocationDirection bearing;

/**
 * The 2D bounds on the Earth in which |icon| is drawn. Changing this value will adjust |position|
 * accordingly.
 */
@property(nonatomic, nullable) GMSCoordinateBounds *bounds;

/**
 * Convenience constructor for GMSGroundOverlay for a particular |bounds| and |icon|. Will set
 * |position| accordingly.
 */
+ (instancetype)groundOverlayWithBounds:(nullable GMSCoordinateBounds *)bounds
                                   icon:(nullable UIImage *)icon;

/**
 * Constructs a GMSGroundOverlay that renders the given |icon| at |position|, as if the image's
 * actual size matches camera pixels at |zoomLevel|.
 */
+ (instancetype)groundOverlayWithPosition:(CLLocationCoordinate2D)position
                                     icon:(nullable UIImage *)icon
                                zoomLevel:(CGFloat)zoomLevel;

@end

/**
 * The default position of the ground anchor of a GMSGroundOverlay: the center point of the icon.
 */
FOUNDATION_EXTERN const CGPoint kGMSGroundOverlayDefaultAnchor;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSGroundOverlay.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSIndoorBuilding.h
===
//
//  GMSIndoorBuilding.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

@class GMSIndoorLevel;

NS_ASSUME_NONNULL_BEGIN

/**
 * Describes a building which contains levels.
 */
@interface GMSIndoorBuilding : NSObject

/**
 * Array of GMSIndoorLevel describing the levels which make up the building.
 * The levels are in 'display order' from top to bottom.
 */
@property(nonatomic, strong, readonly) NSArray<GMSIndoorLevel *> *levels;

/**
 * Index in the levels array of the default level.
 */
@property(nonatomic, assign, readonly) NSUInteger defaultLevelIndex;

/**
 * If YES, the building is entirely underground and supports being hidden.
 */
@property(nonatomic, assign, readonly, getter=isUnderground) BOOL underground;

- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSIndoorBuilding.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSIndoorDisplay.h
===
//
//  GMSIndoorDisplay.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

@class GMSIndoorBuilding;
@class GMSIndoorLevel;

NS_ASSUME_NONNULL_BEGIN

/** Delegate for events on GMSIndoorDisplay. */
@protocol GMSIndoorDisplayDelegate <NSObject>
@optional

/**
 * Raised when the activeBuilding has changed.  The activeLevel will also have already been updated
 * for the new building, but didChangeActiveLevel: will be raised after this method.
 */
- (void)didChangeActiveBuilding:(nullable GMSIndoorBuilding *)building;

/**
 * Raised when the activeLevel has changed.  This event is raised for all changes, including
 * explicit setting of the property.
 */
- (void)didChangeActiveLevel:(nullable GMSIndoorLevel *)level;

@end

/**
 * Provides ability to observe or control the display of indoor level data.
 *
 * Like GMSMapView, GMSIndoorDisplay may only be used from the main thread.
 */
@interface GMSIndoorDisplay : NSObject

/** GMSIndoorDisplay delegate */
@property(nonatomic, weak, nullable) id<GMSIndoorDisplayDelegate> delegate;

/**
 * Provides the currently focused building, will be nil if there is no building with indoor data
 * currently under focus.
 */
@property(nonatomic, readonly, nullable) GMSIndoorBuilding *activeBuilding;

/**
 * Provides and controls the active level for activeBuilding.  Will be updated whenever
 * activeBuilding changes, and may be set to any member of activeBuilding's levels property.  May
 * also be set to nil if the building is underground, to stop showing the building (the building
 * will remain active).
 *
 * Will always be nil if activeBuilding is nil.
 *
 * Any attempt to set it to an invalid value will be ignored.
 */
@property(nonatomic, nullable) GMSIndoorLevel *activeLevel;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSIndoorDisplay.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSIndoorLevel.h
===
//
//  GMSIndoorLevel.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * Describes a single level in a building.
 *
 * Multiple buildings can share a level - in this case the level instances will compare as equal,
 * even though the level numbers/names may be different.
 */
@interface GMSIndoorLevel : NSObject

- (instancetype)init NS_UNAVAILABLE;

/** Localized display name for the level, e.g. "Ground floor". */
@property(nonatomic, copy, readonly, nullable) NSString *name;

/** Localized short display name for the level, e.g. "1". */
@property(nonatomic, copy, readonly, nullable) NSString *shortName;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSIndoorLevel.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapID.h
===
//
//  GMSMapID.h
//  Google Maps SDK for iOS
//
//  Copyright 2019 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>
NS_ASSUME_NONNULL_BEGIN

/** An opaque identifier for a custom map configuration. */
@interface GMSMapID : NSObject <NSCopying>

- (instancetype)init NS_UNAVAILABLE;

/** Creates a new mapID with the given string value. */
- (instancetype)initWithIdentifier:(NSString *)identifier NS_DESIGNATED_INITIALIZER;

/** Creates a new mapID with the given string value. */
+ (instancetype)mapIDWithIdentifier:(NSString *)identifier
    NS_SWIFT_UNAVAILABLE("Use initializer instead");

/**
 * Returns the DEMO_MAP_ID, which can be used for code samples which require a map ID. This map ID
 * is not intended for use in production applications and cannot be used for features which require
 * cloud configuration (such as Cloud Styling).
 *
 * @note Usage of DEMO_MAP_ID triggers a map load charge against the Dynamic Maps SKU for Android
 * and iOS. For more Information see Google Maps Billing:
 * https://developers.google.com/maps/billing-and-pricing/pricing#dynamic-maps
 */
@property(nonatomic, class, readonly) GMSMapID *demoMapID NS_SWIFT_NAME(demoMapID);

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapID.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapLayer.h
===
//
//  GMSMapLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <QuartzCore/QuartzCore.h>

#import "GMSCALayer.h"

NS_ASSUME_NONNULL_BEGIN

/*
 * The following layer properties and constants describe the camera properties that may be animated
 * on the custom model layer of a GMSMapView with Core Animation. For simple camera control and
 * animation, please see the helper methods in GMSMapView+Animation.h, and the camera object
 * definition within GMSCameraPosition.h.
 *
 * Changing layer properties triggers an implicit animation, e.g.:-
 *   mapView_.layer.cameraBearing = 20;
 *
 * An explicit animation, replacing the implicit animation, may be added after changing the
 * property, for example:
 * <pre>
 *   CAMediaTimingFunction *curve = [CAMediaTimingFunction functionWithName:
 *                                   kCAMediaTimingFunctionEaseInEaseOut];
 *   CABasicAnimation *animation =
 *       [CABasicAnimation animationWithKeyPath:kGMSLayerCameraBearingKey];
 *   animation.duration = 2.0f;
 *   animation.timingFunction = curve;
 *   animation.toValue = @20;
 *   [mapView_.layer addAnimation:animation forKey:kGMSLayerCameraBearingKey];
 * </pre>
 *
 * To control several implicit animations, Core Animation's transaction support may be used, for
 * example:
 * <pre>
 *   [CATransaction begin];
 *   [CATransaction setAnimationDuration:2.0f];
 *   mapView_.layer.cameraBearing = 20;
 *   mapView_.layer.cameraViewingAngle = 30;
 *   [CATransaction commit];
 * </pre>
 *
 * Note that these properties are not view-based. Please see "Animating View and Layer Changes
 * Together" in the <a
 * href="http://developer.apple.com/library/ios/#documentation/windowsviews/conceptual/viewpg_iphoneos/AnimatingViews/AnimatingViews.html">
 * View Programming Guide for iOS</a>.
 */

/**
 * kGMSLayerCameraLatitudeKey ranges from [-85, 85], and values outside this range will be clamped.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraLatitudeKey;

/**
 * kGMSLayerCameraLongitudeKey ranges from [-180, 180), and values outside this range will be
 * wrapped to within this range.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraLongitudeKey;

/**
 * kGMSLayerCameraBearingKey ranges from [0, 360), and values are wrapped.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraBearingKey;

/**
 * kGMSLayerCameraZoomLevelKey ranges from [kGMSMinZoomLevel, kGMSMaxZoomLevel], and values are
 * clamped.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraZoomLevelKey;

/**
 * kGMSLayerCameraViewingAngleKey ranges from zero (i.e., facing straight down) and to between 30
 * and 45 degrees towards the horizon, depending on the model zoom level.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraViewingAngleKey;

/**
 * GMSMapLayer is a custom subclass of CALayer, provided as the layer class on GMSMapView. This
 * layer should not be instantiated directly. It provides model access to the camera normally
 * defined on GMSMapView.
 *
 * Modifying or animating these properties will typically interrupt any current gesture on
 * GMSMapView, e.g., a user's pan or rotation. Similarly, if a user performs an enabled gesture
 * during an animation, the animation will stop 'in-place' (at the current presentation value).
 */
@interface GMSMapLayer : GMSCALayer
@property(nonatomic) CLLocationDegrees cameraLatitude;
@property(nonatomic) CLLocationDegrees cameraLongitude;
@property(nonatomic) CLLocationDirection cameraBearing;
@property(nonatomic) float cameraZoomLevel;
@property(nonatomic) double cameraViewingAngle;
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapStyle.h
===
//
//  GMSMapStyle.h
//  Google Maps SDK for iOS
//
//  Copyright 2016 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSMapStyle holds details about a style which can be applied to a map.
 *
 * With style options you can customize the presentation of the standard Google map styles, changing
 * the visual display of features like roads, parks, and other points of interest. As well as
 * changing the style of these features, you can also hide features entirely. This means that you
 * can emphasize particular components of the map or make the map complement the content of your
 * app.
 *
 * For more information see: https://developers.google.com/maps/documentation/ios-sdk/styling
 */
@interface GMSMapStyle : NSObject

/**
 * Creates a style using a string containing JSON.
 *
 * Returns nil and populates |error| (if provided) if |style| is invalid.
 */
+ (nullable instancetype)styleWithJSONString:(NSString *)style
                                       error:(NSError *__autoreleasing _Nullable *)error;

/**
 * Creates a style using a file containing JSON.
 *
 * Returns nil and populates |error| (if provided) if |style| is invalid, the file cannot be read,
 * or the URL is not a file URL.
 */
+ (nullable instancetype)styleWithContentsOfFileURL:(NSURL *)fileURL
                                              error:(NSError *__autoreleasing _Nullable *)error;

@end

/**
 * Calculates a hash value for the given string.
 * @param string The string to use to calculate the hash value.
 * @return The hash value.
 * @note The current implementation uses an MD5 hash, which is sufficient for uniquifying styles.
 */
NSUInteger GMSStyleHashForString(NSString *string);

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapStyle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapView+Animation.h
===
//
//  GMSMapView+Animation.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import "GMSMapView.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSMapView (Animation) offers several animation helper methods.
 *
 * During any animation, retrieving the camera position through the camera property on GMSMapView
 * returns an intermediate immutable GMSCameraPosition. This camera position will typically
 * represent the most recently drawn frame.
 */
@interface GMSMapView (Animation)

/** Animates the camera of this map to |cameraPosition|. */
- (void)animateToCameraPosition:(GMSCameraPosition *)cameraPosition;

/**
 * As animateToCameraPosition:, but changes only the location of the camera (i.e., from the current
 * location to |location|).
 */
- (void)animateToLocation:(CLLocationCoordinate2D)location;

/**
 * As animateToCameraPosition:, but changes only the zoom level of the camera.
 *
 * This value is clamped by [kGMSMinZoomLevel, kGMSMaxZoomLevel].
 */
- (void)animateToZoom:(float)zoom;

/**
 * As animateToCameraPosition:, but changes only the bearing of the camera (in degrees). Zero
 * indicates true north.
 */
- (void)animateToBearing:(CLLocationDirection)bearing;

/**
 * As animateToCameraPosition:, but changes only the viewing angle of the camera (in degrees). This
 * value will be clamped to a minimum of zero (i.e., facing straight down) and between 30 and 45
 * degrees towards the horizon, depending on the relative closeness to the earth.
 */
- (void)animateToViewingAngle:(double)viewingAngle;

/**
 * Applies |cameraUpdate| to the current camera, and then uses the result as per
 * animateToCameraPosition:.
 */
- (void)animateWithCameraUpdate:(GMSCameraUpdate *)cameraUpdate;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapView+Animation.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapView.h
===
//
//  GMSMapView.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>


#if __has_feature(modules)
@import GoogleMapsBase;
#else
#import <GoogleMapsBase/GoogleMapsBase.h>
#endif
#import "GMSFeature.h"
#import "GMSFeatureLayer.h"
#import "GMSPlaceFeature.h"
#import "GMSMapLayer.h"

@class GMSCameraPosition;
@class GMSCameraUpdate;
@class GMSCoordinateBounds;
@class GMSIndoorDisplay;
@class GMSMapID;
@class GMSMapStyle;
@class GMSMapView;
@class GMSMarker;
@class GMSOverlay;
@class GMSProjection;
@class GMSUISettings;

NS_ASSUME_NONNULL_BEGIN

/**
 * \defgroup MapCapabilityFlags GMSMapCapabilityFlags
 * @{
 */

/**
 * Flags that represent conditionally-available map capabilities (ones that require a mapID or some
 * other map setting) that can be used to indicate availability.
 */
typedef NS_OPTIONS(NSUInteger, GMSMapCapabilityFlags) {
  /** No conditional capabilities are enabled on the GMSMapView. */
  GMSMapCapabilityFlagsNone = 0,
  /** Advanced markers are enabled on the GMSMapView. */
  GMSMapCapabilityFlagsAdvancedMarkers = 1 << 0,
  /** Data driven styling is enabled on the GMSMapView. */
  GMSMapCapabilityFlagsDataDrivenStyling = 1 << 1,
  /** GMSPolyline with a stampStyle of GMSSpriteStyle is enabled on the GMSMapView. */
  GMSMapCapabilityFlagsSpritePolylines = 1 << 2,
};

/**@}*/

/** Delegate for events on GMSMapView. */
@protocol GMSMapViewDelegate <NSObject>

@optional

/**
 * Called before the camera on the map changes, either due to a gesture, animation (e.g., by a user
 * tapping on the "My Location" button) or by being updated explicitly via the camera or a
 * zero-length animation on layer.
 *
 * @param mapView The map view that was tapped.
 * @param gesture If YES, this is occurring due to a user gesture.
 */
- (void)mapView:(GMSMapView *)mapView willMove:(BOOL)gesture;

/**
 * Called repeatedly during any animations or gestures on the map (or once, if the camera is
 * explicitly set). This may not be called for all intermediate camera positions. It is always
 * called for the final position of an animation or gesture.
 */
- (void)mapView:(GMSMapView *)mapView didChangeCameraPosition:(GMSCameraPosition *)position;

/**
 * Called when the map becomes idle, after any outstanding gestures or animations have completed (or
 * after the camera has been explicitly set).
 */
- (void)mapView:(GMSMapView *)mapView idleAtCameraPosition:(GMSCameraPosition *)position;

/**
 * Called after a tap gesture at a particular coordinate, but only if a marker was not tapped.  This
 * is called before deselecting any currently selected marker (the implicit action for tapping on
 * the map).
 */
- (void)mapView:(GMSMapView *)mapView didTapAtCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Called after a long-press gesture at a particular coordinate.
 *
 * @param mapView The map view that was tapped.
 * @param coordinate The location that was tapped.
 */
- (void)mapView:(GMSMapView *)mapView didLongPressAtCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Called after a marker has been tapped.
 *
 * @param mapView The map view that was tapped.
 * @param marker The marker that was tapped.
 * @return YES if this delegate handled the tap event, which prevents the map from performing its
 * default selection behavior, and NO if the map should continue with its default selection
 * behavior.
 */
- (BOOL)mapView:(GMSMapView *)mapView didTapMarker:(GMSMarker *)marker;

/**
 * Called after a marker's info window has been tapped.
 */
- (void)mapView:(GMSMapView *)mapView didTapInfoWindowOfMarker:(GMSMarker *)marker;

/** Called after a marker's info window has been long pressed. */
- (void)mapView:(GMSMapView *)mapView didLongPressInfoWindowOfMarker:(GMSMarker *)marker;

/**
 * Called after an overlay has been tapped.
 *
 * This method is not called for taps on markers.
 *
 * @param mapView The map view that was tapped.
 * @param overlay The overlay that was tapped.
 */
- (void)mapView:(GMSMapView *)mapView didTapOverlay:(GMSOverlay *)overlay;

/**
 * Called after a POI has been tapped.
 *
 * @param mapView The map view that was tapped.
 * @param placeID The placeID of the POI that was tapped.
 * @param name The name of the POI that was tapped.
 * @param location The location of the POI that was tapped.
 */
- (void)mapView:(GMSMapView *)mapView
    didTapPOIWithPlaceID:(NSString *)placeID
                    name:(NSString *)name
                location:(CLLocationCoordinate2D)location;

/**
 * Called when a marker is about to become selected, and provides an optional custom info window to
 * use for that marker if this method returns a UIView.
 *
 * If you change this view after this method is called, those changes will not necessarily be
 * reflected in the rendered version.
 *
 * The returned UIView must not have bounds greater than 500 points on either dimension.  As there
 * is only one info window shown at any time, the returned view may be reused between other info
 * windows.
 *
 * Removing the marker from the map or changing the map's selected marker during this call results
 * in undefined behavior.
 *
 * @return The custom info window for the specified marker, or nil for default
 */
- (nullable UIView *)mapView:(GMSMapView *)mapView markerInfoWindow:(GMSMarker *)marker;

/**
 * Called when mapView:markerInfoWindow: returns nil. If this method returns a view, it will be
 * placed within the default info window frame. If this method returns nil, then the default
 * rendering will be used instead.
 *
 * @param mapView The map view that was pressed.
 * @param marker The marker that was pressed.
 * @return The custom view to display as contents in the info window, or nil to use the default
 * content rendering instead
 */

- (nullable UIView *)mapView:(GMSMapView *)mapView markerInfoContents:(GMSMarker *)marker;

/** Called when the marker's info window is closed. */
- (void)mapView:(GMSMapView *)mapView didCloseInfoWindowOfMarker:(GMSMarker *)marker;

/** Called when dragging has been initiated on a marker. */
- (void)mapView:(GMSMapView *)mapView didBeginDraggingMarker:(GMSMarker *)marker;

/** Called after dragging of a marker ended. */
- (void)mapView:(GMSMapView *)mapView didEndDraggingMarker:(GMSMarker *)marker;

/** Called while a marker is dragged. */
- (void)mapView:(GMSMapView *)mapView didDragMarker:(GMSMarker *)marker;

/**
 * Called when the My Location button is tapped.
 *
 * @return YES if the listener has consumed the event (i.e., the default behavior should not occur),
 *         NO otherwise (i.e., the default behavior should occur). The default behavior is for the
 *         camera to move such that it is centered on the device location.
 */
- (BOOL)didTapMyLocationButtonForMapView:(GMSMapView *)mapView;

/**
 * Called when the My Location Dot is tapped.
 *
 * @param mapView The map view that was tapped.
 * @param location The location of the device when the location dot was tapped.
 */
- (void)mapView:(GMSMapView *)mapView didTapMyLocation:(CLLocationCoordinate2D)location;

/** Called when tiles have just been requested or labels have just started rendering. */
- (void)mapViewDidStartTileRendering:(GMSMapView *)mapView;

/** Called when all tiles have been loaded (or failed permanently) and labels have been rendered. */
- (void)mapViewDidFinishTileRendering:(GMSMapView *)mapView;

/**
 * Called when map is stable (tiles loaded, labels rendered, camera idle) and overlay objects have
 * been rendered.
 */
- (void)mapViewSnapshotReady:(GMSMapView *)mapView;

/**
 * Called every time map capabilities are changed.
 *
 * @param mapView The map view where mapCapabilities was changed.
 * @param mapCapabilities Flags representing the capabilities on the map currently.
 */
- (void)mapView:(GMSMapView *)mapView
    didChangeMapCapabilities:(GMSMapCapabilityFlags)mapCapabilities;

/**
 * Called after features in a data-driven styling feature layer have been tapped.
 *
 * All features overlapping with the point being tapped will be included. If the features belong to
 * different feature layers, this method will be called multiple times (once for each individual
 * feature layer).
 *
 * There is no guaranteed order between events on different feature layers, or between events on
 * feature layers and other entities on the base map.
 *
 * @param mapView The map view that was tapped.
 * @param features Array of all features being clicked in the layer.
 * @param featureLayer The feature layer containing the feautre.
 * @param location The location of the actual tapping point.
 */
- (void)mapView:(GMSMapView *)mapView
    didTapFeatures:(NSArray<id<GMSFeature>> *)features
    inFeatureLayer:(GMSFeatureLayer *)featureLayer
        atLocation:(CLLocationCoordinate2D)location;

@end

/**
 * \defgroup MapViewType GMSMapViewType
 * @{
 */

/**
 * Display types for GMSMapView.
 */
typedef NS_ENUM(NSUInteger, GMSMapViewType) {
  /** Basic maps.  The default. */
  kGMSTypeNormal GMS_SWIFT_NAME_2_0_3_0(Normal, normal) = 1,

  /** Satellite maps with no labels. */
  kGMSTypeSatellite GMS_SWIFT_NAME_2_0_3_0(Satellite, satellite),

  /** Terrain maps. */
  kGMSTypeTerrain GMS_SWIFT_NAME_2_0_3_0(Terrain, terrain),

  /** Satellite maps with a transparent label overview. */
  kGMSTypeHybrid GMS_SWIFT_NAME_2_0_3_0(Hybrid, hybrid),

  /** No maps, no labels.  Display of traffic data is not supported. */
  kGMSTypeNone GMS_SWIFT_NAME_2_0_3_0(None, none),

};

/**@}*/

/**
 * \defgroup FrameRate GMSFrameRate
 * @{
 */

/** Rendering frame rates for GMSMapView. */
typedef NS_ENUM(NSUInteger, GMSFrameRate) {
  /** Use the minimum frame rate to conserve battery usage. */
  kGMSFrameRatePowerSave,

  /** Use a median frame rate to provide smoother rendering and conserve processing cycles. */
  kGMSFrameRateConservative,

  /**
   * Use the maximum frame rate for a device. For low end devices this will be 30 FPS,
   * for high end devices 60 FPS.
   */
  kGMSFrameRateMaximum,
};

/**@}*/

/**
 * \defgroup MapViewPaddingAdjustmentBehavior GMSMapViewPaddingAdjustmentBehavior
 * @{
 */

/** Constants indicating how safe area insets are added to padding. */
typedef NS_ENUM(NSUInteger, GMSMapViewPaddingAdjustmentBehavior) {
  /** Always include the safe area insets in the padding. */
  kGMSMapViewPaddingAdjustmentBehaviorAlways,

  /**
   * When the padding value is smaller than the safe area inset for a particular edge, use the safe
   * area value for layout, else use padding.
   */
  kGMSMapViewPaddingAdjustmentBehaviorAutomatic,

  /**
   * Never include the safe area insets in the padding. This was the behavior prior to version 2.5.
   */
  kGMSMapViewPaddingAdjustmentBehaviorNever,
};

/**@}*/

/** This class defines initialization-time options for GMSMapView. */
@interface GMSMapViewOptions : NSObject

/** Initial frame for the view. Defaults to CGRectZero. */
@property(nonatomic) CGRect frame;

/** Initial camera position. Defaults to nil. */
@property(nonatomic, nullable) GMSCameraPosition *camera;

/** The mapID for advanced map usage. Defaults to nil. */
@property(nonatomic, nullable) GMSMapID *mapID;

/**
 * Specifies the background color of the map view, which displays whenever the map tiles are not
 * fully loaded. This is required because GMSMapView ignores the inherited mutable backgroundColor.
 * The color is displayed on the background of the map. Defaults to a light grey color.
 */
@property(nonatomic, nullable) UIColor *backgroundColor;

@end

/**
 * This is the main class of the Google Maps SDK for iOS and is the entry point for all methods
 * related to the map.
 *
 * The map should be instantiated via one of the constructors -init or -initWithOptions:.
 *
 * GMSMapView can only be read and modified from the main thread, similar to all UIKit objects.
 * Calling these methods from another thread will result in an exception or undefined behavior.
 */
@interface GMSMapView : UIView

/** GMSMapView delegate. */
@property(nonatomic, weak, nullable) IBOutlet id<GMSMapViewDelegate> delegate;

/**
 * Controls the camera, which defines how the map is oriented. Modification of this property is
 * instantaneous.
 */
@property(nonatomic, copy) GMSCameraPosition *camera;

/**
 * Returns a GMSProjection object that you can use to convert between screen coordinates and
 * latitude/longitude coordinates.
 *
 * This is a snapshot of the current projection, and will not automatically update when the camera
 * moves. It represents either the projection of the last drawn GMSMapView frame, or; where the
 * camera has been explicitly set or the map just created, the upcoming frame. It will never be nil.
 */
@property(nonatomic, readonly) GMSProjection *projection;

/** Controls whether the My Location dot and accuracy circle is enabled. Defaults to NO. */
@property(nonatomic, getter=isMyLocationEnabled) BOOL myLocationEnabled;

/**
 * If My Location is enabled, reveals where the device location dot is being drawn. If it is
 * disabled, or it is enabled but no location data is available, this will be nil.  This property is
 * observable using KVO.
 */
@property(nonatomic, readonly, nullable) CLLocation *myLocation;

/**
 * The marker that is selected.  Setting this property selects a particular marker, showing an info
 * window on it.  If this property is non-nil, setting it to nil deselects the marker, hiding the
 * info window.  This property is observable using KVO.
 */
@property(nonatomic, nullable) GMSMarker *selectedMarker;

/**
 * Controls whether the map is drawing traffic data, if available.  This is subject to the
 * availability of traffic data.  Defaults to NO.
 */
@property(nonatomic, getter=isTrafficEnabled) BOOL trafficEnabled;

/** Controls the type of map tiles that should be displayed.  Defaults to kGMSTypeNormal. */
@property(nonatomic) GMSMapViewType mapType;

/**
 * Controls the style of the map.
 *
 * A non-nil mapStyle will only apply if mapType is Normal.
 */
@property(nonatomic, nullable) GMSMapStyle *mapStyle;

/**
 * Minimum zoom (the farthest the camera may be zoomed out). Defaults to kGMSMinZoomLevel. Modified
 * with -setMinZoom:maxZoom:.
 */
@property(nonatomic, readonly) float minZoom;

/**
 * Maximum zoom (the closest the camera may be to the Earth). Defaults to kGMSMaxZoomLevel. Modified
 * with -setMinZoom:maxZoom:.
 */
@property(nonatomic, readonly) float maxZoom;

/**
 * If set, 3D buildings will be shown where available.  Defaults to YES.
 *
 * This may be useful when adding a custom tile layer to the map, in order to make it clearer at
 * high zoom levels.  Changing this value will cause all tiles to be briefly invalidated.
 */
@property(nonatomic, getter=isBuildingsEnabled) BOOL buildingsEnabled;

/**
 * Sets whether indoor maps are shown, where available. Defaults to YES.
 *
 * If this is set to NO, caches for indoor data may be purged and any floor currently selected by
 * the end-user may be reset.
 */
@property(nonatomic, getter=isIndoorEnabled) BOOL indoorEnabled;

/**
 * Gets the GMSIndoorDisplay instance which allows to observe or control aspects of indoor data
 * display.
 */
@property(nonatomic, readonly) GMSIndoorDisplay *indoorDisplay;

/** Gets the GMSUISettings object, which controls user interface settings for the map. */
@property(nonatomic, readonly) GMSUISettings *settings;

/**
 * Controls the 'visible' region of the view.  By applying padding an area around the edge of the
 * view can be created which will contain map data but will not contain UI controls.
 *
 * If the padding is not balanced, the visual center of the view will move as appropriate.  Padding
 * will also affect the |projection| property so the visible region will not include the padding
 * area.  GMSCameraUpdate fitToBounds will ensure that both this padding and any padding requested
 * will be taken into account.
 *
 * This property may be animated within a UIView-based animation block.
 */
@property(nonatomic) UIEdgeInsets padding;

/**
 * Controls how safe area insets are added to the padding values. Like padding, safe area insets
 * position map controls such as the compass, my location button and floor picker within the device
 * safe area.
 *
 * Defaults to kGMSMapViewPaddingAdjustmentBehaviorAlways.
 */
@property(nonatomic) GMSMapViewPaddingAdjustmentBehavior paddingAdjustmentBehavior;

/**
 * Defaults to YES. If set to NO, GMSMapView will generate accessibility elements for overlay
 * objects, such as GMSMarker and GMSPolyline.
 *
 * This property follows the informal UIAccessibility protocol, except for the default value of
 * YES.
 */
@property(nonatomic) BOOL accessibilityElementsHidden;

/** Accessor for the custom CALayer type used for the layer. */
@property(nonatomic, readonly, retain) GMSMapLayer *layer;

/** Controls the rendering frame rate. Default value is kGMSFrameRateMaximum. */
@property(nonatomic) GMSFrameRate preferredFrameRate;

/**
 * If not nil, constrains the camera target so that gestures cannot cause it to leave the specified
 * bounds.
 */
@property(nonatomic, nullable) GMSCoordinateBounds *cameraTargetBounds;

/**
 * All conditionally-available (dependent on mapID or other map settings) capabilities that are
 * available at the current moment in time. Does not include always-available capabilities.
 */
@property(nonatomic, readonly) GMSMapCapabilityFlags mapCapabilities;

/** Initializes with CGRectZero and default options. */
- (instancetype)init;

/**
 * Creates a new map view with the given options. The value of the options object is copied by this
 * method.
 */
- (instancetype)initWithOptions:(nonnull GMSMapViewOptions *)options NS_DESIGNATED_INITIALIZER;

- (instancetype)initWithFrame:(CGRect)frame
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.");

- (nullable instancetype)initWithCoder:(NSCoder *)coder
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.");

/** Builds and returns a map view with a frame and camera target. */
+ (instancetype)mapWithFrame:(CGRect)frame
                      camera:(GMSCameraPosition *)camera
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.")
        ;

/** Convenience initializer to build and return a map view with a frame, map ID, and camera target.
 */
+ (instancetype)mapWithFrame:(CGRect)frame
                       mapID:(GMSMapID *)mapID
                      camera:(GMSCameraPosition *)camera
    NS_SWIFT_UNAVAILABLE("Use initializer instead")
        __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.")
            ;

/** Builds and returns a map view, with a frame and camera target. */
- (instancetype)initWithFrame:(CGRect)frame
                       camera:(GMSCameraPosition *)camera
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.")
        ;

/** Builds and returns a map view with a frame, map ID, and camera target. */
- (instancetype)initWithFrame:(CGRect)frame
                        mapID:(GMSMapID *)mapID
                       camera:(GMSCameraPosition *)camera
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.")
        ;

/** Tells this map to power up its renderer. This is optional and idempotent. */
- (void)startRendering __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
    "This method is obsolete and will be removed in a future release.");

/** Tells this map to power down its renderer. This is optional and idempotent. */
- (void)stopRendering __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
    "This method is obsolete and will be removed in a future release.");

/**
 * Clears all markup that has been added to the map, including markers, polylines and ground
 * overlays.  This will not clear the visible location dot or reset the current mapType.
 */
- (void)clear;

/**
 * Sets |minZoom| and |maxZoom|. This method expects the minimum to be less than or equal to the
 * maximum, and will throw an exception with name NSRangeException otherwise.
 */
- (void)setMinZoom:(float)minZoom maxZoom:(float)maxZoom;

/**
 * Build a GMSCameraPosition that presents |bounds| with |padding|. The camera will have a zero
 * bearing and tilt (i.e., facing north and looking directly at the Earth). This takes the frame and
 * padding of this GMSMapView into account.
 *
 * If the bounds is invalid this method will return a nil camera.
 */
- (nullable GMSCameraPosition *)cameraForBounds:(GMSCoordinateBounds *)bounds
                                         insets:(UIEdgeInsets)insets;

/**
 * Changes the camera according to |update|. The camera change is instantaneous (with no
 * animation).
 */
- (void)moveCamera:(GMSCameraUpdate *)update;

/**
 * Check whether the given camera positions would practically cause the camera to be rendered the
 * same, taking into account the level of precision and transformations used internally.
 */
- (BOOL)areEqualForRenderingPosition:(GMSCameraPosition *)position
                            position:(GMSCameraPosition *)otherPosition;

/**
 * Returns a feature layer of the specified type. Feature layers must be configured in the Cloud
 * Console.
 *
 * If a layer of the specified type does not exist on this map, or if data-driven styling is not
 * enabled, or if the Metal rendering framework is not used, the resulting layer's isAvailable will
 * be @c NO, and will not respond to any calls.
 *
 * Requires the Metal renderer. Learn how to enable Metal at
 * https://developers.google.com/maps/documentation/ios-sdk/config#use-metal
 */
- (GMSFeatureLayer<GMSPlaceFeature *> *)featureLayerOfFeatureType:(GMSFeatureType)featureType
    NS_SWIFT_NAME(featureLayer(of:));
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMapView.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMarker.h
===
//
//  GMSMarker.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSMarkerAnimation.h"
#import "GMSOverlay.h"

@class GMSMarkerLayer;
@class GMSPanoramaView;

NS_ASSUME_NONNULL_BEGIN

/**
 * A marker is an icon placed at a particular point on the map's surface. A marker's icon is drawn
 * oriented against the device's screen rather than the map's surface; i.e., it will not necessarily
 * change orientation due to map rotations, tilting, or zooming.
 */
@interface GMSMarker : GMSOverlay

/** Marker position. Animated. */
@property(nonatomic) CLLocationCoordinate2D position;

/** Snippet text, shown beneath the title in the info window when selected. */
@property(nonatomic, copy, nullable) NSString *snippet;

/**
 * Marker icon to render. If left nil, uses a default SDK place marker.
 *
 * Supports animated images, but each frame must be the same size or the behavior is undefined.
 *
 * Supports the use of alignmentRectInsets to specify a reduced tap area.  This also redefines how
 * anchors are specified.  For an animated image the value for the animation is used, not the
 * individual frames.
 */
@property(nonatomic, nullable) UIImage *icon;

/**
 * Marker view to render. If left nil, falls back to the |icon| property instead.
 *
 * Supports animation of all animatable properties of UIView, except |frame| and |center|. Changing
 * these properties or their corresponding CALayer version, including |position|, is not supported.
 *
 * Note that the view behaves as if |clipsToBounds| is set to YES, regardless of its actual value.
 */
@property(nonatomic, nullable) UIView *iconView;

/**
 * Controls whether the icon for this marker should be redrawn every frame.
 *
 * Note that when this changes from NO to YES, the icon is guaranteed to be redrawn next frame.
 *
 * Defaults to YES.
 * Has no effect if |iconView| is nil.
 */
@property(nonatomic) BOOL tracksViewChanges;

/**
 * Controls whether the info window for this marker should be redrawn every frame.
 *
 * Note that when this changes from NO to YES, the info window is guaranteed to be redrawn next
 * frame.
 *
 * Defaults to NO.
 */
@property(nonatomic) BOOL tracksInfoWindowChanges;

/**
 * The ground anchor specifies the point in the icon image that is anchored to the marker's position
 * on the Earth's surface. This point is specified within the continuous space [0.0, 1.0] x [0.0,
 * 1.0], where (0,0) is the top-left corner of the image, and (1,1) is the bottom-right corner.
 *
 * If the image has non-zero alignmentRectInsets, the top-left and bottom-right mentioned above
 * refer to the inset section of the image.
 */
@property(nonatomic) CGPoint groundAnchor;

/**
 * The info window anchor specifies the point in the icon image at which to anchor the info window,
 * which will be displayed directly above this point. This point is specified within the same space
 * as groundAnchor.
 */
@property(nonatomic) CGPoint infoWindowAnchor;

/**
 * Controls the animation used when this marker is placed on a GMSMapView (default
 * kGMSMarkerAnimationNone, no animation).
 */
@property(nonatomic) GMSMarkerAnimation appearAnimation;

/** Controls whether this marker can be dragged interactively (default NO). */
@property(nonatomic, getter=isDraggable) BOOL draggable;

/**
 * Controls whether this marker should be flat against the Earth's surface (YES) or a billboard
 * facing the camera (NO, default).
 */
@property(nonatomic, getter=isFlat) BOOL flat;

/**
 * Sets the rotation of the marker in degrees clockwise about the marker's anchor point. The axis of
 * rotation is perpendicular to the marker. A rotation of 0 corresponds to the default position of
 * the marker. Animated.
 *
 * When the marker is flat on the map, the default position is north aligned and the rotation is
 * such that the marker always remains flat on the map. When the marker is a billboard, the default
 * position is pointing up and the rotation is such that the marker is always facing the camera.
 */
@property(nonatomic) CLLocationDegrees rotation;

/** Sets the opacity of the marker, between 0 (completely transparent) and 1 (default) inclusive. */
@property(nonatomic) float opacity;

/** Provides the Core Animation layer for this GMSMarker. */
@property(nonatomic, readonly) GMSMarkerLayer *layer;

/**
 * The |panoramaView| specifies which panorama view will attempt to show this marker.  Note that if
 * the marker's |position| is too far away from the |panoramaView|'s current panorama location, it
 * will not be displayed as it will be too small.
 *
 * Can be set to nil to remove the marker from any current panorama view it is attached to.
 *
 * A marker can be shown on both a panorama and a map at the same time.
 */
@property(nonatomic, weak, nullable) GMSPanoramaView *panoramaView;

/** Convenience constructor for a default marker. */
+ (instancetype)markerWithPosition:(CLLocationCoordinate2D)position;

/** Creates a tinted version of the default marker image for use as an icon. */
+ (UIImage *)markerImageWithColor:(nullable UIColor *)color;

@end

/**
 * The default position of the ground anchor of a GMSMarker: the center bottom point of the marker
 * icon.
 */
FOUNDATION_EXTERN const CGPoint kGMSMarkerDefaultGroundAnchor;

/**
 * The default position of the info window anchor of a GMSMarker: the center top point of the marker
 * icon.
 */
FOUNDATION_EXTERN const CGPoint kGMSMarkerDefaultInfoWindowAnchor;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMarker.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMarkerAnimation.h
===
//
//  GMSMarkerAnimation.h
//  Google Maps SDK for iOS
//
//  Copyright 2021 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * \defgroup MarkerAnimation GMSMarkerAnimation
 * @{
 */

/** Animation types for GMSMarker. */
typedef NS_ENUM(NSUInteger, GMSMarkerAnimation) {
  /** No animation (default). */
  kGMSMarkerAnimationNone = 0,

  /** The marker will pop from its groundAnchor when added. */
  kGMSMarkerAnimationPop,

  /** The marker will fade in when added. */
  kGMSMarkerAnimationFadeIn,
};

/**@}*/

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMarkerAnimation.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMarkerLayer.h
===
//
//  GMSMarkerLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <QuartzCore/QuartzCore.h>

#import "GMSOverlayLayer.h"


NS_ASSUME_NONNULL_BEGIN

/**
 * GMSMarkerLayer is a subclass of GMSOverlayLayer, available on a per-marker basis, that allows
 * animation of several properties of its associated GMSMarker.
 *
 * Note that this CALayer is never actually rendered directly, as GMSMapView is provided entirely
 * via an OpenGL layer. As such, adjustments or animations to 'default' properties of CALayer will
 * not have any effect.
 */
@interface GMSMarkerLayer : GMSOverlayLayer

/** Latitude, part of |position| on GMSMarker. */
@property(nonatomic) CLLocationDegrees latitude;

/** Longitude, part of |position| on GMSMarker. */
@property(nonatomic) CLLocationDegrees longitude;

/** Rotation, as per GMSMarker. */
@property(nonatomic) CLLocationDegrees rotation;

/** Opacity, as per GMSMarker. */
@property(atomic) float opacity;


@end

extern NSString *const kGMSMarkerLayerLatitude;
extern NSString *const kGMSMarkerLayerLongitude;
extern NSString *const kGMSMarkerLayerRotation;
extern NSString *const kGMSMarkerLayerOpacity;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMarkerLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMutablePath.h
===
//
//  GMSMutablePath.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <Foundation/Foundation.h>

#import "GMSPath.h"

/**
 * GMSMutablePath is a dynamic (resizable) array of CLLocationCoordinate2D. All coordinates must be
 * valid. GMSMutablePath is the mutable counterpart to the immutable GMSPath.
 */
@interface GMSMutablePath : GMSPath

/** Adds |coord| at the end of the path. */
- (void)addCoordinate:(CLLocationCoordinate2D)coord;

/** Adds a new CLLocationCoordinate2D instance with the given lat/lng. */
- (void)addLatitude:(CLLocationDegrees)latitude longitude:(CLLocationDegrees)longitude;

/**
 * Inserts |coord| at |index|.
 *
 * If this is smaller than the size of the path, shifts all coordinates forward by one. Otherwise,
 * behaves as replaceCoordinateAtIndex:withCoordinate:.
 */
- (void)insertCoordinate:(CLLocationCoordinate2D)coord atIndex:(NSUInteger)index;

/**
 * Replace the coordinate at |index| with |coord|. If |index| is after the end, grows the array with
 * an undefined coordinate.
 */
- (void)replaceCoordinateAtIndex:(NSUInteger)index withCoordinate:(CLLocationCoordinate2D)coord;

/**
 * Remove entry at |index|.
 *
 * If |index| < count decrements size. If |index| >= count this is a silent no-op.
 */
- (void)removeCoordinateAtIndex:(NSUInteger)index;

/**
 * Removes the last coordinate of the path.
 *
 * If the array is non-empty decrements size. If the array is empty, this is a silent no-op.
 */
- (void)removeLastCoordinate;

/** Removes all coordinates in this path. */
- (void)removeAllCoordinates;

@end

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSMutablePath.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSOrientation.h
===
//
//  GMSOrientation.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

/**
 * GMSOrientation is a tuple of heading and pitch used to control the viewing
 * direction of a GMSPanoramaCamera.
 */
typedef struct {
  /**
   * The camera heading (horizontal angle) in degrees. Type used to represent
   * the direction in degrees from 0 to 359.9. True north is 0, east is 90,
   * south is 180, and west is 270.
   */
  const CLLocationDirection heading;

  /**
   * The camera pitch (vertical angle), in degrees from the horizon. The |pitch|
   * range is [-90,90], although it is possible that not the full range is
   * supported. A positive value looks up and a negative value looks down.
   */
  const double pitch;
} GMSOrientation;

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Returns a GMSOrientation with the given |heading| and |pitch|.
 *
 * @related GMSOrientation
 */
inline static GMSOrientation GMSOrientationMake(CLLocationDirection heading,
                                                double pitch) {
  GMSOrientation orientation = {heading, pitch};
  return orientation;
}

#ifdef __cplusplus
}
#endif

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSOrientation.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSOverlay.h
===
//
//  GMSOverlay.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

@class GMSMapView;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSOverlay is an abstract class that represents some overlay that may be attached to a specific
 * GMSMapView. It may not be instantiated directly; instead, instances of concrete overlay types
 * should be created directly (such as GMSMarker, GMSPolyline, and GMSPolygon).
 *
 * This supports the NSCopying protocol; [overlay_ copy] will return a copy of the overlay type, but
 * with |map| set to nil.
 */
@interface GMSOverlay : NSObject <NSCopying>

/**
 * Title, a short description of the overlay. Some overlays, such as markers, will display the title
 * on the map. The title is also the default accessibility text.
 */
@property(nonatomic, copy, nullable) NSString *title;

/**
 * The map this overlay is on. Setting this property will add the overlay to the map. Setting it to
 * nil removes this overlay from the map. An overlay may be active on at most one map at any given
 * time.
 */
@property(nonatomic, weak, nullable) GMSMapView *map;

/**
 * If this overlay should cause tap notifications. Some overlays, such as markers, will default to
 * being tappable.
 */
@property(nonatomic, getter=isTappable) BOOL tappable;

/**
 * Higher |zIndex| value overlays will be drawn on top of lower |zIndex| value tile layers and
 * overlays.  Equal values result in undefined draw ordering.  Markers are an exception that
 * regardless of |zIndex|, they will always be drawn above tile layers and other non-marker
 * overlays; they are effectively considered to be in a separate z-index group compared to other
 * overlays.
 */
@property(nonatomic) int zIndex;

/**
 * Overlay data. You can use this property to associate an arbitrary object with this overlay.
 * Google Maps SDK for iOS neither reads nor writes this property.
 *
 * Note that userData should not hold any strong references to any Maps objects, otherwise a retain
 * cycle may be created (preventing objects from being released).
 */
@property(nonatomic, nullable) id userData;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSOverlay.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSOverlayLayer.h
===
//
//  GMSOverlayLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2018 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <QuartzCore/QuartzCore.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSOverlayLayer is a custom subclass of CALayer, and an abstract baseclass for GMSOverlay layers
 * that allow custom animations.
 *
 * Note that this CALayer or any subclass are never actually rendered directly, as GMSMapView is
 * provided entirely via an OpenGL layer. As such, adjustments or animations to 'default' properties
 * of CALayer will not have any effect.
 *
 * This is an implementation detail and it should not be instantiated directly.
 */
@interface GMSOverlayLayer : CALayer

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSOverlayLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanorama.h
===
//
//  GMSPanorama.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

@class GMSPanoramaLink;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPanorama represents metadata for a specific panorama on the Earth. This class is not
 * instantiable directly and is obtained via GMSPanoramaService or GMSPanoramaView.
 */
@interface GMSPanorama : NSObject

/** The precise location of this panorama. */
@property(nonatomic, readonly) CLLocationCoordinate2D coordinate;

/** The ID of this panorama. Panoramas may change ID over time, so this should not be persisted */
@property(nonatomic, copy, readonly) NSString *panoramaID;

/** An array of GMSPanoramaLink describing the neighboring panoramas. */
@property(nonatomic, copy, readonly) NSArray<GMSPanoramaLink *> *links;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanorama.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaCamera.h
===
//
//  GMSPanoramaCamera.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

#import "GMSOrientation.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPanoramaCamera is used to control the viewing direction of a GMSPanoramaView. It does not
 * contain information about which particular panorama should be displayed.
 */
@interface GMSPanoramaCamera : NSObject

/**
 * Designated initializer. Configures this GMSPanoramaCamera with |orientation|, |zoom| and |FOV|.
 * These values will be clamped to acceptable ranges.
 */
- (id)initWithOrientation:(GMSOrientation)orientation zoom:(float)zoom FOV:(double)FOV;

/**
 * Convenience constructor specifying heading and pitch as part of |orientation|, plus |zoom| and
 * default field of view (90 degrees).
 */
+ (instancetype)cameraWithOrientation:(GMSOrientation)orientation zoom:(float)zoom;

/**
 * Convenience constructor specifying |heading|, |pitch|, |zoom| with default field of view (90
 * degrees).
 */
+ (instancetype)cameraWithHeading:(CLLocationDirection)heading pitch:(double)pitch zoom:(float)zoom;

/**
 * Convenience constructor for GMSPanoramaCamera, specifying all camera properties with heading and
 * pitch as part of |orientation|.
 */
+ (instancetype)cameraWithOrientation:(GMSOrientation)orientation zoom:(float)zoom FOV:(double)FOV;

/** Convenience constructor for GMSPanoramaCamera, specifying all camera properties. */
+ (instancetype)cameraWithHeading:(CLLocationDirection)heading
                            pitch:(double)pitch
                             zoom:(float)zoom
                              FOV:(double)FOV;

/**
 * The field of view (FOV) encompassed by the larger dimension (width or height) of the view in
 * degrees at zoom 1. This is clamped to the range [1, 160] degrees, and has a default value of 90.
 *
 * Lower FOV values produce a zooming in effect; larger FOV values produce an fisheye effect.
 *
 * Note: This is not the displayed FOV if zoom is anything other than 1.  User zoom gestures
 * control the zoom property, not this property.
 */
@property(nonatomic, readonly) double FOV;

/**
 * Adjusts the visible region of the screen.  A zoom of N will show the same area as the central
 * width/N height/N area of what is shown at zoom 1.
 *
 * Zoom is clamped to the implementation defined range [1, 5].
 */
@property(nonatomic, readonly) float zoom;

/** The camera orientation, which groups together heading and pitch. */
@property(nonatomic, readonly) GMSOrientation orientation;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaCamera.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaCameraUpdate.h
===
//
//  GMSPanoramaCameraUpdate.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreGraphics/CoreGraphics.h>
#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPanoramaCameraUpdate represents an update that may be applied to a GMSPanoramaView.
 * It encapsulates some logic for modifying the current camera.
 * It should only be constructed using the factory helper methods below.
 */
@interface GMSPanoramaCameraUpdate : NSObject

/** Returns an update that increments the camera heading with |deltaHeading|. */
+ (GMSPanoramaCameraUpdate *)rotateBy:(CGFloat)deltaHeading;

/** Returns an update that sets the camera heading to the given value. */
+ (GMSPanoramaCameraUpdate *)setHeading:(CGFloat)heading;

/** Returns an update that sets the camera pitch to the given value. */
+ (GMSPanoramaCameraUpdate *)setPitch:(CGFloat)pitch;

/** Returns an update that sets the camera zoom to the given value. */
+ (GMSPanoramaCameraUpdate *)setZoom:(CGFloat)zoom;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaCameraUpdate.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaLayer.h
===
//
//  GMSPanoramaLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <QuartzCore/QuartzCore.h>

#import "GMSCALayer.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * kGMSLayerPanoramaHeadingKey ranges from [0, 360).
 *
 * @related GMSPanoramaLayer
 */
extern NSString *const kGMSLayerPanoramaHeadingKey;

/**
 * kGMSLayerPanoramaPitchKey ranges from [-90, 90].
 *
 * @related GMSPanoramaLayer
 */
extern NSString *const kGMSLayerPanoramaPitchKey;

/**
 * kGMSLayerCameraZoomLevelKey ranges from [1, 5], default 1.
 *
 * @related GMSPanoramaLayer
 */
extern NSString *const kGMSLayerPanoramaZoomKey;

/**
 * kGMSLayerPanoramaFOVKey ranges from [1, 160] (in degrees), default 90.
 *
 * @related GMSPanoramaLayer
 */
extern NSString *const kGMSLayerPanoramaFOVKey;

/**
 * GMSPanoramaLayer is a custom subclass of CALayer, provided as the layer class on GMSPanoramaView.
 * This layer should not be instantiated directly.
 */
@interface GMSPanoramaLayer : GMSCALayer
@property(nonatomic) CLLocationDirection cameraHeading;
@property(nonatomic) double cameraPitch;
@property(nonatomic) float cameraZoom;
@property(nonatomic) double cameraFOV;
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaLink.h
===
//
//  GMSPanoramaLink.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreGraphics/CoreGraphics.h>
#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** Links from a GMSPanorama to neighboring panoramas. */
@interface GMSPanoramaLink : NSObject

/** Angle of the neighboring panorama, clockwise from north in degrees. */
@property(nonatomic) CGFloat heading;

/** Panorama ID for the neighboring panorama. Do not store this persistenly, it changes in time. */
@property(nonatomic, copy) NSString *panoramaID;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaLink.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaService.h
===
//
//  GMSPanoramaService.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

#import "GMSPanoramaSource.h"

@class GMSPanorama;

NS_ASSUME_NONNULL_BEGIN

/**
 * Callback for when a panorama metadata becomes available.
 * If an error occurred, |panorama| is nil and |error| is not nil.
 * Otherwise, |panorama| is not nil and |error| is nil.
 *
 * @related GMSPanoramaService
 */
typedef void (^GMSPanoramaCallback)(GMSPanorama *_Nullable panorama, NSError *_Nullable error);

/**
 * GMSPanoramaService can be used to request panorama metadata even when a GMSPanoramaView is not
 * active.
 *
 * Get an instance like this: [[GMSPanoramaService alloc] init].
 */
@interface GMSPanoramaService : NSObject

/**
 * Retrieves information about a panorama near the given |coordinate|.
 *
 * This is an asynchronous request, |callback| will be called with the result.
 */
- (void)requestPanoramaNearCoordinate:(CLLocationCoordinate2D)coordinate
                             callback:(GMSPanoramaCallback)callback;

/**
 * Similar to requestPanoramaNearCoordinate:callback: but allows specifying a search radius (meters)
 * around |coordinate|.
 */
- (void)requestPanoramaNearCoordinate:(CLLocationCoordinate2D)coordinate
                               radius:(NSUInteger)radius
                             callback:(GMSPanoramaCallback)callback;

/**
 * Similar to requestPanoramaNearCoordinate:callback: but allows specifying the panorama source type
 * near the given |coordinate|.
 *
 * This API is experimental and may not always filter by source.
 */
- (void)requestPanoramaNearCoordinate:(CLLocationCoordinate2D)coordinate
                               source:(GMSPanoramaSource)source
                             callback:(GMSPanoramaCallback)callback;

/**
 * Similar to requestPanoramaNearCoordinate:callback: but allows specifying a search radius (meters)
 * and the panorama source type near the given |coordinate|.
 *
 * This API is experimental and may not always filter by source.
 */
- (void)requestPanoramaNearCoordinate:(CLLocationCoordinate2D)coordinate
                               radius:(NSUInteger)radius
                               source:(GMSPanoramaSource)source
                             callback:(GMSPanoramaCallback)callback;

/**
 * Retrieves information about a panorama with the given |panoramaID|.
 *
 * |callback| will be called with the result. Only panoramaIDs obtained from the Google Maps SDK for
 * iOS are supported.
 */
- (void)requestPanoramaWithID:(NSString *)panoramaID callback:(GMSPanoramaCallback)callback;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaService.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaSource.h
===
//
//  GMSPanoramaSource.h
//  Google Maps SDK for iOS
//
//  Copyright 2017 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

/**
 * \defgroup PanoramaSource GMSPanoramaSource
 * @{
 */

/**
 * Source types for Panoramas. Used to specify the source of a StreetView Panorama.
 *
 * This API is experimental. Results may not always match expectations.
 */
typedef NS_ENUM(NSUInteger, GMSPanoramaSource) {
  /** Panoramas of locations either inside or outside. */
  kGMSPanoramaSourceDefault = 0,

  /** Panoramas of locations outside. */
  kGMSPanoramaSourceOutside,
};

/**@}*/

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaSource.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaView.h
===
//
//  GMSPanoramaView.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>

#import "GMSOrientation.h"
#import "GMSPanoramaLayer.h"
#import "GMSPanoramaSource.h"

@class GMSMarker;
@class GMSPanorama;
@class GMSPanoramaCamera;
@class GMSPanoramaCameraUpdate;
@class GMSPanoramaView;

NS_ASSUME_NONNULL_BEGIN

/** Delegate for events on GMSPanoramaView. */
@protocol GMSPanoramaViewDelegate <NSObject>
@optional

/**
 * Called when starting a move to another panorama.
 *
 * This can be the result of interactive navigation to a neighbouring panorama.
 *
 * At the moment this method is called, the |view|.panorama is still pointing to the old panorama,
 * as the new panorama identified by |panoID| is not yet resolved. panoramaView:didMoveToPanorama:
 * will be called when the new panorama is ready.
 */
- (void)panoramaView:(GMSPanoramaView *)view willMoveToPanoramaID:(NSString *)panoramaID;

/** This is invoked every time the |view|.panorama property changes. */
- (void)panoramaView:(GMSPanoramaView *)view didMoveToPanorama:(nullable GMSPanorama *)panorama;

/**
 * Called when the panorama change was caused by invoking moveToPanoramaNearCoordinate:. The
 * coordinate passed to that method will also be passed here.
 */
- (void)panoramaView:(GMSPanoramaView *)view
    didMoveToPanorama:(GMSPanorama *)panorama
       nearCoordinate:(CLLocationCoordinate2D)coordinate;

/** Called when moveNearCoordinate: produces an error. */
- (void)panoramaView:(GMSPanoramaView *)view
                   error:(NSError *)error
    onMoveNearCoordinate:(CLLocationCoordinate2D)coordinate;

/** Called when moveToPanoramaID: produces an error. */
- (void)panoramaView:(GMSPanoramaView *)view
                 error:(NSError *)error
    onMoveToPanoramaID:(NSString *)panoramaID;

/**
 * Called repeatedly during changes to the camera on GMSPanoramaView. This may not be called for all
 * intermediate camera values, but is always called for the final position of the camera after an
 * animation or gesture.
 */
- (void)panoramaView:(GMSPanoramaView *)panoramaView didMoveCamera:(GMSPanoramaCamera *)camera;

/**
 * Called when a user has tapped on the GMSPanoramaView, but this tap was not consumed (taps may be
 * consumed by e.g., tapping on a navigation arrow).
 */
- (void)panoramaView:(GMSPanoramaView *)panoramaView didTap:(CGPoint)point;

/**
 * Called after a marker has been tapped.  May return YES to indicate the event has been fully
 * handled and suppress any default behavior.
 */
- (BOOL)panoramaView:(GMSPanoramaView *)panoramaView didTapMarker:(GMSMarker *)marker;

/**
 * Called when the panorama tiles for the current view have just been requested and are beginning to
 * load.
 */
- (void)panoramaViewDidStartRendering:(GMSPanoramaView *)panoramaView;

/**
 * Called when the panorama tiles have been loaded (or permanently failed to load) and rendered on
 * screen.
 */
- (void)panoramaViewDidFinishRendering:(GMSPanoramaView *)panoramaView;

@end

/**
 * A panorama is used to display Street View imagery. It should be constructed via [[GMSPanoramaView
 * alloc] initWithFrame:], and configured post-initialization.
 *
 * All properties and methods should be accessed on the main thread, similar to all UIKit objects.
 * The GMSPanoramaViewDelegate methods will also be called back only on the main thread.
 *
 * The backgroundColor of this view is shown while no panorama is visible, such as while it is
 * loading or if the panorama is later set to nil. The alpha color of backgroundColor is not
 * supported.
 */
@interface GMSPanoramaView : UIView

/**
 * The panorama to display; setting it will transition to a new panorama. This is animated, except
 * for the initial panorama.
 *
 * Can be set to nil to clear the view.
 */
@property(nonatomic, nullable) GMSPanorama *panorama;

/** GMSPanoramaView delegate. */
@property(nonatomic, weak, nullable) IBOutlet id<GMSPanoramaViewDelegate> delegate;

/**
 * Sets the preference for whether all gestures should be enabled (default) or disabled.
 *
 * This does not limit programmatic movement of the camera or control of the panorama.
 */
- (void)setAllGesturesEnabled:(BOOL)enabled;

/**
 * Controls whether orientation gestures are enabled (default) or disabled. If enabled, users may
 * use gestures to change the orientation of the camera.
 *
 * This does not limit programmatic movement of the camera.
 */
@property(nonatomic) BOOL orientationGestures;

/**
 * Controls whether zoom gestures are enabled (default) or disabled. If enabled, users may pinch to
 * zoom the camera.
 *
 * This does not limit programmatic movement of the camera.
 */
@property(nonatomic) BOOL zoomGestures;

/**
 * Controls whether navigation gestures are enabled (default) or disabled. If enabled, users may use
 * a single tap on navigation links or double tap the view to change panoramas.
 *
 * This does not limit programmatic control of the panorama.
 */
@property(nonatomic) BOOL navigationGestures;

/**
 * Controls whether the tappable navigation links are hidden or visible (default). Hidden navigation
 * links cannot be tapped.
 */
@property(nonatomic) BOOL navigationLinksHidden;

/** Controls whether the street name overlays are hidden or visible (default). */
@property(nonatomic) BOOL streetNamesHidden;

/**
 * Controls the panorama's camera. Setting a new camera here jumps to the new camera value, with no
 * animation.
 */
@property(nonatomic) GMSPanoramaCamera *camera;

/** Accessor for the custom CALayer type used for the layer. */
@property(nonatomic, readonly, retain) GMSPanoramaLayer *layer;

/** Animates the camera of this GMSPanoramaView to |camera|, over |duration| (specified in seconds).
 */
- (void)animateToCamera:(GMSPanoramaCamera *)camera animationDuration:(NSTimeInterval)duration;

/** Modifies the camera according to |cameraUpdate|, over |duration| (specified in seconds). */
- (void)updateCamera:(GMSPanoramaCameraUpdate *)cameraUpdate
    animationDuration:(NSTimeInterval)duration;

/**
 * Requests a panorama near |coordinate|.
 *
 * Upon successful completion panoramaView:didMoveToPanorama: and
 * panoramaView:didMoveToPanorama:nearCoordinate: will be sent to GMSPanoramaViewDelegate.
 *
 * On error panoramaView:error:onMoveNearCoordinate: will be sent.
 *
 * Repeated calls to moveNearCoordinate: result in the previous pending (incomplete) transitions
 * being cancelled -- only the most recent of moveNearCoordinate: and moveToPanoramaId: will proceed
 * and generate events.
 */
- (void)moveNearCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Similar to moveNearCoordinate: but allows specifying a search radius (meters) around
 * |coordinate|.
 */
- (void)moveNearCoordinate:(CLLocationCoordinate2D)coordinate radius:(NSUInteger)radius;

/**
 * Similar to moveNearCoordinate: but allows specifying a source near |coordinate|.
 *
 * This API is experimental and may not always filter by source.
 */
- (void)moveNearCoordinate:(CLLocationCoordinate2D)coordinate source:(GMSPanoramaSource)source;

/**
 * Similar to moveNearCoordinate: but allows specifying a search radius (meters) around
 * |coordinate| and a source.
 *
 * This API is experimental and may not always filter by source.
 */
- (void)moveNearCoordinate:(CLLocationCoordinate2D)coordinate
                    radius:(NSUInteger)radius
                    source:(GMSPanoramaSource)source;

/**
 * Requests a panorama with |panoramaID|.
 *
 * Upon successful completion panoramaView:didMoveToPanorama: will be sent to
 * GMSPanoramaViewDelegate.
 *
 * On error panoramaView:error:onMoveToPanoramaID: will be sent.
 *
 * Repeated calls to moveToPanoramaID: result in the previous pending (incomplete) transitions being
 * cancelled -- only the most recent of moveNearCoordinate: and moveToPanoramaId: will proceed and
 * generate events.
 *
 * Only panoramaIDs obtained from the Google Maps SDK for iOS are supported.
 */
- (void)moveToPanoramaID:(NSString *)panoramaID;

/**
 * For the current view, returns the screen point the |orientation| points through.  This value may
 * be outside the view for forward facing orientations which are far enough away from straight
 * ahead.
 *
 * The result will contain NaNs for camera orientations which point away from the view, where the
 * implied screen point would have had a negative distance from the camera in the direction of
 * orientation.
 */
- (CGPoint)pointForOrientation:(GMSOrientation)orientation;

/**
 * Given a point for this view, returns the current camera orientation pointing through that screen
 * location.  At the center of this view, the returned GMSOrientation will be approximately equal to
 * that of the current GMSPanoramaCamera.
 */
- (GMSOrientation)orientationForPoint:(CGPoint)point;

/**
 * Convenience constructor for GMSPanoramaView, which searches for and displays a GMSPanorama near
 * |coordinate|. This performs a similar action to that of moveNearCoordinate:, and will call the
 * same delegate methods.
 */
+ (instancetype)panoramaWithFrame:(CGRect)frame nearCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Similar to panoramaWithFrame:nearCoordinate: but allows specifying a search radius (meters)
 * around |coordinate|.
 */
+ (instancetype)panoramaWithFrame:(CGRect)frame
                   nearCoordinate:(CLLocationCoordinate2D)coordinate
                           radius:(NSUInteger)radius;

/**
 * Convenience constructor for GMSPanoramaView, which searches for and displays a GMSPanorama near
 * |coordinate|. This performs a similar action to that of moveNearCoordinate:source, and will call
 * the same delegate methods.
 *
 * This API is experimental and may not always filter by source.
 */
+ (instancetype)panoramaWithFrame:(CGRect)frame
                   nearCoordinate:(CLLocationCoordinate2D)coordinate
                           source:(GMSPanoramaSource)source;
/**
 * Convenience constructor for GMSPanoramaView, which searches for and displays a GMSPanorama near
 * |coordinate|. This performs a similar action to that of moveNearCoordinate:radius:source, and
 * will call the same delegate methods.
 *
 * This API is experimental and may not always filter by source.
 */
+ (instancetype)panoramaWithFrame:(CGRect)frame
                   nearCoordinate:(CLLocationCoordinate2D)coordinate
                           radius:(NSUInteger)radius
                           source:(GMSPanoramaSource)source;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPanoramaView.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPath.h
===
//
//  GMSPath.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPath encapsulates an immutable array of CLLocationCooordinate2D. All the coordinates of a
 * GMSPath must be valid. The mutable counterpart is GMSMutablePath.
 */
@interface GMSPath : NSObject <NSCopying, NSMutableCopying>

/** Convenience constructor for an empty path. */
+ (instancetype)path;

/** Initializes a newly allocated path with the contents of another GMSPath. */
- (id)initWithPath:(GMSPath *)path;

/** Get size of path. */
- (NSUInteger)count;

/** Returns kCLLocationCoordinate2DInvalid if |index| >= count. */
- (CLLocationCoordinate2D)coordinateAtIndex:(NSUInteger)index;

/**
 * Initializes a newly allocated path from |encodedPath|. This format is described at:
 * https://developers.google.com/maps/documentation/utilities/polylinealgorithm
 */
+ (nullable instancetype)pathFromEncodedPath:(NSString *)encodedPath;

/** Returns an encoded string of the path in the format described above. */
- (NSString *)encodedPath;

/**
 * Returns a new path obtained by adding |deltaLatitude| and |deltaLongitude| to each coordinate
 * of the current path. Does not modify the current path.
 */
- (instancetype)pathOffsetByLatitude:(CLLocationDegrees)deltaLatitude
                           longitude:(CLLocationDegrees)deltaLongitude;

@end

/**
 * kGMSEquatorProjectedMeter may be useful when specifying lengths for segment in "projected" units.
 * The value of kGMSEquatorProjectedMeter, 1/(pi * EarthRadius), represents the length of one meter
 * at the equator in projected units. For example to specify a projected length that corresponds
 * to 100km at the equator use 100000 * kGMSEquatorProjectedMeter.
 * See [GMSPath segmentsForLength:kind:], [GMSPath lengthOfKind:] and kGMSLengthProjected.
 */
extern const double kGMSEquatorProjectedMeter;

/**
 * \defgroup LengthKind GMSLengthKind
 * @{
 */

/**
 * GMSLengthKind indicates the type of a length value, which can be geodesic (in meters), rhumb
 * length (in meters) and projected length (in GMSMapPoint units).
 */
typedef NS_ENUM(NSUInteger, GMSLengthKind) {
  /*
   * Geodesic length, in meters, along geodesic segments. May be useful, for example, to specify
   * lengths along the the trajectory of airplanes or ships.
   */
  kGMSLengthGeodesic,

  /*
   * Rhumb length, in meters, along rhumb (straight line) segments. May be useful, for example, to
   * draw a scale bar on a map. The visual size of a segment of a given length depens on the
   * latitude.
   */
  kGMSLengthRhumb,

  /*
   * Length in projected space, along rhumb segments. Projected length uses the same units as
   * GMSMapPoint - the Earth equator circumference has length 2. It is possible to specify projected
   * length in units corresponding to 1 meter at the equator by multiplying with
   * kGMSEquatorProjectedMeter, equal to 1/(pi * EarthRadius).
   *
   * Projected length may be useful, for example, to specify segments with the same visual length
   * regardless of latitude.
   */
  kGMSLengthProjected
};

/**@}*/

/** This category is needed in order to have the declaration of GMSLengthKind after GMSPath. */
@interface GMSPath (GMSPathLength)

/**
 * Returns the fractional number of segments along the path that correspond to |length|,
 * interpreted according to |kind|. See GMSLengthKind.
 */
- (double)segmentsForLength:(CLLocationDistance)length kind:(GMSLengthKind)kind;

/** Returns the length of the path, according to |kind|. See GMSLengthKind. */
- (CLLocationDistance)lengthOfKind:(GMSLengthKind)kind;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPath.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPinImage.h
===
//
//  GMSPinImage.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
@class GMSPinImageOptions;
NS_ASSUME_NONNULL_BEGIN

/** Provides a custom pin image for an advanced marker. */
@interface GMSPinImage : UIImage

- (instancetype)init NS_UNAVAILABLE;

/**
 * Returns an image style with the given pin image options that can be used as a standalone UIImage,
 * or as the icon of an Advanced Marker only.
 *
 * @param options A @c GMSPinImageOptions object to use to customize the marker image.
 * @return An image configured with the provided options.
 */
+ (GMSPinImage *)pinImageWithOptions:(GMSPinImageOptions *)options;

@end
NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPinImage.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPinImageGlyph.h
===
//
//  GMSPinImageGlyph.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
NS_ASSUME_NONNULL_BEGIN

/** Provides a custom pin image glyph for an advanced marker. */
@interface GMSPinImageGlyph : NSObject

- (instancetype)init NS_UNAVAILABLE;

@property(nonatomic, nullable, readonly) NSString *text;
@property(nonatomic, nullable, readonly) UIColor *textColor;
@property(nonatomic, nullable, readonly) UIImage *image;
@property(nonatomic, nullable, readonly) UIColor *glyphColor;

/**
 * Returns a glyph model with the given text.
 *
 * @param text A @c NSString object to use as the glyph.
 * @param textColor A @c UIColor object to use to render the text.
 * @return An initialized glyph model.
 */
- (GMSPinImageGlyph *)initWithText:(NSString *)text textColor:(UIColor *)textColor;

/**
 * Returns a glyph model with the given text.
 *
 * @param image A @c UIImage object to use as the glyph.
 * @return An initialized glyph model.
 */
- (GMSPinImageGlyph *)initWithImage:(UIImage *)image;

/**
 * Returns a glyph model with the given glyph color.
 *
 * @param glyphColor A @c UIColor object to use to render the glyph.
 * @return An initialized glyph model.
 */
- (GMSPinImageGlyph *)initWithGlyphColor:(UIColor *)glyphColor;

@end
NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPinImageGlyph.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPinImageOptions.h
===
//
//  GMSPinImageOptions.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>

@class GMSPinImageGlyph;
NS_ASSUME_NONNULL_BEGIN

/** Provides pin image customization for an advanced marker. */
@interface GMSPinImageOptions : NSObject

/** An object representing a String or Image to replace the glyph on the marker */
@property(nonatomic, nullable) GMSPinImageGlyph *glyph;

/** The color used to fill the marker shape with. */
@property(nonatomic, nullable) UIColor *backgroundColor;

/** The color used for the border of the marker shape. */
@property(nonatomic, nullable) UIColor *borderColor;

@end
NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPinImageOptions.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPlaceFeature.h
===
//
//  GMSPlaceFeature.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>


#import "GMSFeature.h"

NS_ASSUME_NONNULL_BEGIN

/** An interface representing a place feature (a feature with a Place ID). */
NS_SWIFT_NAME(PlaceFeature)
@interface GMSPlaceFeature : NSObject <GMSFeature>

@property(nonatomic, readonly) GMSFeatureType featureType;

@property(nonatomic, readonly) NSString *placeID;

/**
 * Create a feature layer instance for testing.
 *
 * This method should be used for your unit tests only. In production, @c GMSPlaceFeature instances
 * should only be created by the SDK.
 */
- (instancetype)initWithFeatureType:(GMSFeatureType)featureType placeID:(NSString *)placeID;

- (instancetype)init NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPlaceFeature.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPolygon.h
===
//
//  GMSPolygon.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSOverlay.h"

@class GMSPath;
@class GMSPolygonLayer;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPolygon defines a polygon that appears on the map. A polygon (like a polyline) defines a
 * series of connected coordinates in an ordered sequence; additionally, polygons form a closed loop
 * and define a filled region.
 */
@interface GMSPolygon : GMSOverlay

/** The path that describes this polygon. The coordinates composing the path must be valid. */
@property(nonatomic, copy, nullable) GMSPath *path;

/**
 * The array of GMSPath instances that describes any holes in this polygon. The coordinates
 * composing each path must be valid.
 */
@property(nonatomic, copy, nullable) NSArray<GMSPath *> *holes;

/** The width of the polygon outline in screen points. Defaults to 1. */
@property(nonatomic) CGFloat strokeWidth;

/** The color of the polygon outline. Defaults to nil. */
@property(nonatomic, nullable) UIColor *strokeColor;

/** The fill color. Defaults to blueColor. */
@property(nonatomic, nullable) UIColor *fillColor;

/** Whether this polygon should be rendered with geodesic correction. */
@property(nonatomic) BOOL geodesic;

/** Provides the Core Animation layer for this GMSPolygon. */
@property(nonatomic, readonly) GMSPolygonLayer *layer;

/**
 * Convenience constructor for GMSPolygon for a particular path. Other properties will have default
 * values.
 */
+ (instancetype)polygonWithPath:(nullable GMSPath *)path;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPolygon.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPolygonLayer.h
===
//
//  GMSPolygonLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2018 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>

#import "GMSOverlayLayer.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPolygonLayer is a subclass of GMSOverlayLayer, available on a per-polygon basis, that allows
 * animation of several properties of its associated GMSPolygon.
 *
 * Note that this CALayer is never actually rendered directly, as GMSMapView is provided entirely
 * via an OpenGL layer. As such, adjustments or animations to 'default' properties of CALayer will
 * not have any effect.
 */
@interface GMSPolygonLayer : GMSOverlayLayer

/** The width of the polygon outline in screen points. */
@property(nonatomic) CGFloat strokeWidth;

/**
 * The color of the polygon outline. This is an assign property, there is an expectation for the
 * GMSPolygon to own the reference if necessary.
 */
@property(nonatomic, assign, nullable) CGColorRef strokeColor;

/**
 * The fill color. This is an assign property, there is an expectation for the GMSPolygon to own the
 * reference if necessary.
 */
@property(nonatomic, assign, nullable) CGColorRef fillColor;

@end

extern NSString *const kGMSPolygonLayerStrokeWidth;
extern NSString *const kGMSPolygonLayerStrokeColor;
extern NSString *const kGMSPolygonLayerFillColor;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPolygonLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPolyline.h
===
//
//  GMSPolyline.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSOverlay.h"
#import "GMSStyleSpan.h"

@class GMSPath;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPolyline specifies the available options for a polyline that exists on the Earth's surface.
 * It is drawn as a physical line between the points specified in |path|.
 */
@interface GMSPolyline : GMSOverlay

/** The path that describes this polyline. */
@property(nonatomic, copy, nullable) GMSPath *path;

/** The width of the line in screen points. Defaults to 1. */
@property(nonatomic) CGFloat strokeWidth;

/** The UIColor used to render the polyline. Defaults to [UIColor blueColor]. */
@property(nonatomic) UIColor *strokeColor;

/** Whether this line should be rendered with geodesic correction. */
@property(nonatomic) BOOL geodesic;

/**
 * Convenience constructor for GMSPolyline for a particular path. Other properties will have
 * default values.
 */
+ (instancetype)polylineWithPath:(nullable GMSPath *)path;

/**
 * An array containing GMSStyleSpan, the spans used to render this polyline.
 *
 * If this array contains fewer segments than the polyline itself, the final segment will be applied
 * over the remaining length. If this array is unset or empty, then |strokeColor| is used for the
 * entire line instead.
 */
@property(nonatomic, copy, nullable) NSArray<GMSStyleSpan *> *spans;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSPolyline.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSProjection.h
===
//
//  GMSProjection.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreGraphics/CoreGraphics.h>
#import <CoreLocation/CoreLocation.h>


/**
 * GMSVisibleRegion contains the four points defining the polygon that is visible in a map's camera.
 *
 * This polygon can be a trapezoid instead of a rectangle, because a camera can have tilt. If the
 * camera is directly over the center of the camera, the shape is rectangular, but if the camera is
 * tilted, the shape will appear to be a trapezoid whose smallest side is closest to the point of
 * view.
 */
typedef struct {
  /** Bottom left corner of the camera. */
  CLLocationCoordinate2D nearLeft;

  /** Bottom right corner of the camera. */
  CLLocationCoordinate2D nearRight;

  /** Far left corner of the camera. */
  CLLocationCoordinate2D farLeft;

  /** Far right corner of the camera. */
  CLLocationCoordinate2D farRight;
} GMSVisibleRegion;

/**
 * Defines a mapping between Earth coordinates (CLLocationCoordinate2D) and coordinates in the map's
 * view (CGPoint). A projection is constant and immutable, in that the mapping it embodies never
 * changes. The mapping is not necessarily linear.
 *
 * Passing invalid Earth coordinates (i.e., per CLLocationCoordinate2DIsValid) to this object may
 * result in undefined behavior.
 *
 * This class should not be instantiated directly unless under testing conditions. Instead, obtain
 * it via projection on GMSMapView.
 */
@interface GMSProjection : NSObject

/** Maps an Earth coordinate to a point coordinate in the map's view. */
- (CGPoint)pointForCoordinate:(CLLocationCoordinate2D)coordinate;


/** Maps a point coordinate in the map's view to an Earth coordinate. */
- (CLLocationCoordinate2D)coordinateForPoint:(CGPoint)point;

/**
 * Converts a distance in meters to content size.  This is only accurate for small Earth distances,
 * as it uses CGFloat for screen distances.
 */
- (CGFloat)pointsForMeters:(CLLocationDistance)meters
              atCoordinate:(CLLocationCoordinate2D)coordinate;

/** Returns whether a given coordinate (lat/lng) is contained within the projection. */
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Returns the region (four location coordinates) that is visible according to the projection. If
 * padding was set on GMSMapView, this region takes the padding into account.
 *
 * The visible region can be non-rectangular. The result is undefined if the projection includes
 * points that do not map to anywhere on the map (e.g., camera sees outer space).
 */
- (GMSVisibleRegion)visibleRegion;

@end

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSProjection.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSServices.h
===
//
//  GMSServices.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

#if __has_feature(modules)
@import GoogleMapsBase;
#else
#import <GoogleMapsBase/GoogleMapsBase.h>
#endif

NS_ASSUME_NONNULL_BEGIN

/**
 * Service class for the Google Maps SDK for iOS.
 *
 * This class is not thread safe. All methods should only be invoked on the main thread.
 */
@interface GMSServices : NSObject

/**
 * Provides the shared instance of GMSServices for the Google Maps SDK for iOS, creating it if
 * necessary. Classes such as GMSMapView and GMSPanoramaView will hold this instance to provide
 * their connection to Google.
 *
 * This is an opaque object. If your application often creates and destroys view or service classes
 * provided by the Google Maps SDK for iOS, it may be useful to hold onto this object directly, as
 * otherwise your connection to Google may be restarted on a regular basis. It also may be useful to
 * take this object in advance of the first map creation, to reduce initial map creation performance
 * cost.
 *
 * This method will throw an exception if provideAPIKey: has not been called.
 */
+ (id<NSObject>)sharedServices;

/**
 * Provides your API key to the Google Maps SDK for iOS.  This key is generated for your application
 * via the Google Cloud Platform Console, and is paired with your application's bundle ID to
 * identify it. This must be called exactly once by your application before any iOS Maps SDK
 * object is initialized.
 *
 * @return YES if the APIKey was successfully provided.
 */
+ (BOOL)provideAPIKey:(NSString *)APIKey;

/**
 * Provides your API options to the Google Maps SDK for iOS. Pass an array containing an NSString
 * for each option. These options apply to all maps.
 *
 * This may be called exactly once by your application and must be called before any iOS Maps SDK
 * object is initialized.
 *
 * @return YES if all the APIOptions were successfully provided.
 */
+ (BOOL)provideAPIOptions:(NSArray<NSString *> *)APIOptions;

/**
 * Enables the map to render using Metal instead of OpenGL.
 *
 * The rendering might look very slightly different between renderers. The default is @c YES and
 * value must be updated before the services instance is initialized.
 *
 * This property must be set from the main thread.
 */
+ (void)setMetalRendererEnabled:(BOOL)enabled
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
        "Metal is now the default renderer if this API is not invoked. In the future, "
        "Metal rendering will be the only available implementation and this API will be a no-op. "
        "We encourage customers to remove calls to this method from their code.");

/**
 * Enables reporting of abnormal SDK terminations such as the app crashes while the SDK is still
 * running. This allows Google to improve SDK stability when applicable. The default is @c YES and
 * value must be updated before the services instance is initialized.
 *
 * This property must be set from the main thread.
 */
+ (void)setAbnormalTerminationReportingEnabled:(BOOL)enabled;

/**
 * Returns the open source software license information for Google Maps SDK for iOS. This
 * information must be made available within your application.
 */
+ (NSString *)openSourceLicenseInfo;

/** Returns the version for this release of the Google Maps SDK for iOS. For example, "1.0.0". */
+ (NSString *)SDKVersion;

/**
 * Returns the long version for this release of the Google Maps SDK for iOS. For example, "1.0.0
 * (102.1)".
 */
+ (NSString *)SDKLongVersion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSServices.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSStampStyle.h
===
//
//  GMSStampStyle.h
//  Google Maps SDK for iOS
//
//  Copyright 2020 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * The abstract base class for polyline styles that draw a repeating image over a @c GMSStyleSpan.
 */
@interface GMSStampStyle : NSObject

/**
 * The image or texture that will repeated over a stroke.
 * Note that this image will be compressed into a square - so for best results have a square image.
 * The rendered stamps will be the width of the line that the GMSStrokeStyle is set on. The image
 * will be oriented with the top of the image towards the start point, and the bottom of the image
 * towards the end point. For example, if the underlying line has two points and the start point is
 * directly above the endpoint, the stamp will appear in an upright orientation.
 */
@property(nonatomic, readonly) UIImage *stampImage;

- (instancetype)init NS_UNAVAILABLE;

@end

/** A polyline style that draws a repeating image over a @c GMSStyleSpan. */
@interface GMSTextureStyle : GMSStampStyle

/**
 * Returns a texture stamp style with the given image.
 *
 * @param image A @c UIImage object to use as the stamp image.
 * @return An initialized texture stamp style.
 */
+ (instancetype)textureStyleWithImage:(UIImage *)image
    NS_SWIFT_UNAVAILABLE("Use initializer instead");

/**
 * Returns an initialized texture stamp style with the given image.
 *
 * @param image A @c UIImage object to use as the stamp image.
 * @return An initialized texture stamp style.
 */
- (instancetype)initWithImage:(UIImage *)image NS_DESIGNATED_INITIALIZER;

@end

/**
 * Describes the drawing style for a stamp image over a @c GMSStyleSpan.
 *
 * @note Only supports transparent background. If any color is set to the @c GMSStyleSpan it will
 * only be treated as a fallback.
 *
 * @note Use of @c GMSSpriteStyle requires Metal rendering framework. See
 * GMSServices::setMetalRendererEnabled:(BOOL) to learn how to enable Metal. If @c GMSStyleSpan is
 * added to a map without Metal being enabled, the stamp will not render and instead the polyline
 * span will attempt to fallback to any set color. If no color is set, it will fallback to the
 * default polyline color, [UIColor blueColor].
 *
 * @note Use GMSMapView::mapCapabilities property to query if a @c GMSMapView supports @c
 * GMSSpriteStyle.
 */
@interface GMSSpriteStyle : GMSStampStyle

/**
 * Returns a sprite stamp style with the given image.
 *
 * @param image A @c UIImage object to use as the stamp image.
 * @return An initialized sprite stamp style.
 */
+ (instancetype)spriteStyleWithImage:(UIImage *)image
    NS_SWIFT_UNAVAILABLE("Use initializer instead");

/**
 * Returns an initialized sprite stamp style with the given image.
 *
 * @param image A @c UIImage object to use as the stamp image.
 * @return An initialized sprite stamp style.
 */
- (instancetype)initWithImage:(UIImage *)image NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSStampStyle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSStrokeStyle.h
===
//
//  GMSStrokeStyle.h
//  Google Maps SDK for iOS
//
//  Copyright 2019 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

@class GMSStampStyle;

NS_ASSUME_NONNULL_BEGIN

/** Describes the drawing style for one-dimensional entities such as polylines. */
@interface GMSStrokeStyle : NSObject

/**
 * A repeated image over the stroke to allow a user to set a 2D texture on top of a stroke.
 * If the image has transparent or semi-transparent portions, the underlying stroke color will show
 * through in those places. Solid portions of the stamp will completely cover the base stroke.
 */
@property(nonatomic, strong, nullable) GMSStampStyle *stampStyle;

/** Creates a solid color stroke style. */
+ (instancetype)solidColor:(UIColor *)color;

/** Creates a gradient stroke style interpolating from |fromColor| to |toColor|. */
+ (instancetype)gradientFromColor:(UIColor *)fromColor toColor:(UIColor *)toColor;

/** Creates a transparent stroke style and sets the stampStyle. */
+ (instancetype)transparentStrokeWithStampStyle:(GMSStampStyle *)stampStyle;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSStrokeStyle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSStyleSpan.h
===
//
//  GMSStyleSpan.h
//  Google Maps SDK for iOS
//
//  Copyright 2019 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSStrokeStyle.h"

NS_ASSUME_NONNULL_BEGIN

/** Describes the style for some region of a polyline. */
@interface GMSStyleSpan : NSObject

/**
 * Factory returning a solid color span of length one segment. Equivalent to [GMSStyleSpan
 * spanWithStyle:[GMSStrokeStyle solidColor:|color|] segments:1].
 */
+ (instancetype)spanWithColor:(UIColor *)color;

/**
 * Factory returning a solid color span with a given number of segments. Equivalent to [GMSStyleSpan
 * spanWithStyle:[GMSStrokeStyle solidColor:|color|] segments:|segments|].
 */
+ (instancetype)spanWithColor:(UIColor *)color segments:(double)segments;

/**
 * Factory returning a span with the given |style| of length one segment. Equivalent to
 * [GMSStyleSpan spanWithStyle:|style| segments:1].
 */
+ (instancetype)spanWithStyle:(GMSStrokeStyle *)style;

/**
 * Factory returning a span with the given |style| and length in number of segments. |segments| must
 * be greater than 0 (i.e. can't be 0).
 */
+ (instancetype)spanWithStyle:(GMSStrokeStyle *)style segments:(double)segments;

/** The style of this span. */
@property(nonatomic, readonly) GMSStrokeStyle *style;

/** The length of this span in number of segments. */
@property(nonatomic, readonly) double segments;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSStyleSpan.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSSyncTileLayer.h
===
//
//  GMSSyncTileLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

#import "GMSTileLayer.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSSyncTileLayer is an abstract subclass of GMSTileLayer that provides a sync interface to
 * generate image tile data.
 */
@interface GMSSyncTileLayer : GMSTileLayer

/**
 * As per requestTileForX:y:zoom:receiver: on GMSTileLayer, but provides a synchronous interface to
 * return tiles. This method may block or otherwise perform work, and is not called on the main
 * thread.
 *
 * Calls to this method may also be made from multiple threads so implementations must be
 * threadsafe.
 */
- (nullable UIImage *)tileForX:(NSUInteger)x y:(NSUInteger)y zoom:(NSUInteger)zoom;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSSyncTileLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSTileLayer.h
===
//
//  GMSTileLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

@class GMSMapView;

NS_ASSUME_NONNULL_BEGIN

/**
 * Stub tile that is used to indicate that no tile exists for a specific tile coordinate. May be
 * returned by tileForX:y:zoom: on GMSTileOverlay.
 */
FOUNDATION_EXTERN UIImage *const kGMSTileLayerNoTile;

/**
 * GMSTileReceiver is provided to GMSTileLayer when a tile request is made, allowing the callback to
 * be later (or immediately) invoked.
 */
@protocol GMSTileReceiver <NSObject>
- (void)receiveTileWithX:(NSUInteger)x
                       y:(NSUInteger)y
                    zoom:(NSUInteger)zoom
                   image:(nullable UIImage *)image;
@end

/**
 * GMSTileLayer is an abstract class that allows overlaying of custom image tiles on a specified
 * GMSMapView. It may not be initialized directly, and subclasses must implement the
 * tileForX:y:zoom: method to return tiles.
 *
 * At zoom level 0 the whole world is a square covered by a single tile, and the coordinates |x| and
 * |y| are both 0 for that tile. At zoom level 1, the world is covered by 4 tiles with |x| and |y|
 * being 0 or 1, and so on.
 */
@interface GMSTileLayer : NSObject

/**
 * requestTileForX:y:zoom:receiver: generates image tiles for GMSTileOverlay. It must be overridden
 * by subclasses. The tile for the given |x|, |y| and |zoom| _must_ be later passed to |receiver|.
 *
 * Specify kGMSTileLayerNoTile if no tile is available for this location; or nil if a transient
 * error occured and a tile may be available later.
 *
 * Calls to this method will be made on the main thread. See GMSSyncTileLayer for a base class that
 * implements a blocking tile layer that does not run on your application's main thread.
 */
- (void)requestTileForX:(NSUInteger)x
                      y:(NSUInteger)y
                   zoom:(NSUInteger)zoom
               receiver:(id<GMSTileReceiver>)receiver;

/** Clears the cache so that all tiles will be requested again. */
- (void)clearTileCache;

/**
 * The map this GMSTileOverlay is displayed on. Setting this property will add the layer to the map.
 * Setting it to nil removes this layer from the map. A layer may be active on at most one map at
 * any given time.
 */
@property(nonatomic, weak, nullable) GMSMapView *map;

/**
 * Higher |zIndex| value tile layers will be drawn on top of lower |zIndex| value tile layers and
 * overlays. Equal values result in undefined draw ordering.
 */
@property(nonatomic) int zIndex;

/**
 * Specifies the number of pixels (not points) that the returned tile images will prefer to display
 * as. For best results, this should be the edge length of your custom tiles. Defaults to 256, which
 * is the traditional size of Google Maps tiles.
 *
 * Values less than the equivalent of 128 points (e.g. 256 pixels on retina devices) may not perform
 * well and are not recommended.
 *
 * As an example, an application developer may wish to provide retina tiles (512 pixel edge length)
 * on retina devices, to keep the same number of tiles
 * per view as the default value of 256 would give on a non-retina device.
 */
@property(nonatomic) NSInteger tileSize;

/**
 * Specifies the opacity of the tile layer. This provides a multiplier for the alpha channel of tile
 * images.
 */
@property(nonatomic) float opacity;

/** Specifies whether the tiles should fade in. Default YES. */
@property(nonatomic) BOOL fadeIn;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSTileLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSUISettings.h
===
//
//  GMSUISettings.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

/** Settings for the user interface of a GMSMapView. */
@interface GMSUISettings : NSObject

/**
 * Sets the preference for whether all gestures should be enabled (default) or disabled. This
 * doesn't restrict users from tapping any on screen buttons to move the camera (e.g., compass or
 * zoom controls), nor does it restrict programmatic movements and animation.
 */
- (void)setAllGesturesEnabled:(BOOL)enabled;

/**
 * Controls whether scroll gestures are enabled (default) or disabled. If enabled, users may drag to
 * pan the camera. This does not limit programmatic movement of the camera.
 */
@property(nonatomic) BOOL scrollGestures;

/**
 * Controls whether zoom gestures are enabled (default) or disabled. If enabled, users may double
 * tap/two-finger tap or pinch to zoom the camera. This does not limit programmatic movement of the
 * camera.
 */
@property(nonatomic) BOOL zoomGestures;

/**
 * Controls whether tilt gestures are enabled (default) or disabled. If enabled, users may use a
 * two-finger vertical down or up swipe to tilt the camera. This does not limit programmatic control
 * of the camera's viewingAngle.
 */
@property(nonatomic) BOOL tiltGestures;

/**
 * Controls whether rotate gestures are enabled (default) or disabled. If enabled, users may use a
 * two-finger rotate gesture to rotate the camera. This does not limit programmatic control of the
 * camera's bearing.
 */
@property(nonatomic) BOOL rotateGestures;

/**
 * Controls whether gestures by users are completely consumed by the GMSMapView when gestures are
 * enabled (default YES).  This prevents these gestures from being received by parent views.
 *
 * When the GMSMapView is contained by a UIScrollView (or other scrollable area), this means that
 * gestures on the map will not be additional consumed as scroll gestures.  However, disabling this
 * (set to NO) may be useful to support complex view hierarchies or requirements.
 */
@property(nonatomic) BOOL consumesGesturesInView;

/**
 * Enables or disables the compass. The compass is an icon on the map that indicates the direction
 * of north on the map.
 *
 * If enabled, it is only shown when the camera is rotated away from its default orientation
 * (bearing of 0). When a user taps the compass, the camera orients itself to its default
 * orientation and fades away shortly after. If disabled, the compass will never be displayed.
 */
@property(nonatomic) BOOL compassButton;

/**
 * Enables or disables the My Location button. This is a button visible on the map that, when tapped
 * by users, will center the map on the current user location.
 */
@property(nonatomic) BOOL myLocationButton;

/**
 * Enables (default) or disables the indoor floor picker.
 *
 * If enabled, it is only visible when the view is focused on a building with indoor floor data. If
 * disabled, the selected floor can still be controlled programmatically via the indoorDisplay
 * mapView property.
 */
@property(nonatomic) BOOL indoorPicker;

/**
 * Controls whether rotate and zoom gestures can be performed off-center and scrolled around
 * (default YES).
 */
@property(nonatomic) BOOL allowScrollGesturesDuringRotateOrZoom;

@end

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSUISettings.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSURLTileLayer.h
===
//
//  GMSURLTileLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import "GMSTileLayer.h"

@class NSURL;

NS_ASSUME_NONNULL_BEGIN

/**
 * |GMSTileURLConstructor| is a block taking |x|, |y| and |zoom| and returning an NSURL, or nil to
 * indicate no tile for that location.
 *
 * @related GMSURLTileLayer
 */
typedef NSURL *_Nullable (^GMSTileURLConstructor)(NSUInteger x, NSUInteger y, NSUInteger zoom);

/**
 * GMSURLTileProvider fetches tiles based on the URLs returned from a GMSTileURLConstructor. For
 * example:
 * <pre>
 *   GMSTileURLConstructor constructor = ^(NSUInteger x, NSUInteger y, NSUInteger zoom) {
 *     NSString *URLStr =
 *         [NSString stringWithFormat:@"https://example.com/%d/%d/%d.png", x, y, zoom];
 *     return [NSURL URLWithString:URLStr];
 *   };
 *   GMSTileLayer *layer =
 *       [GMSURLTileLayer tileLayerWithURLConstructor:constructor];
 *   layer.userAgent = @"SDK user agent";
 *   layer.map = map;
 * </pre>
 *
 * GMSURLTileProvider may not be subclassed and should only be created via its convenience
 * constructor.
 */
@interface GMSURLTileLayer : GMSTileLayer

/** Convenience constructor. |constructor| must be non-nil. */
+ (instancetype)tileLayerWithURLConstructor:(GMSTileURLConstructor)constructor;

/**
 * Specify the user agent to describe your application. If this is nil (the default), the default
 * iOS user agent is used for HTTP requests.
 */
@property(nonatomic, copy, nullable) NSString *userAgent;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GMSURLTileLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GoogleMaps.h
===
#import <GoogleMaps/GMSIndoorBuilding.h>
#import <GoogleMaps/GMSIndoorLevel.h>
#import <GoogleMaps/GMSAccessibilityLabels.h>
#import <GoogleMaps/GMSAddress.h>
#import <GoogleMaps/GMSAdvancedMarker.h>
#import <GoogleMaps/GMSCALayer.h>
#import <GoogleMaps/GMSCameraPosition.h>
#import <GoogleMaps/GMSCameraUpdate.h>
#import <GoogleMaps/GMSCircle.h>
#import <GoogleMaps/GMSCollisionBehavior.h>
#import <GoogleMaps/GMSCoordinateBounds+GoogleMaps.h>
#import <GoogleMaps/GMSFeature.h>
#import <GoogleMaps/GMSFeatureLayer.h>
#import <GoogleMaps/GMSFeatureStyle.h>
#import <GoogleMaps/GMSGeocoder.h>
#import <GoogleMaps/GMSGeometryUtils.h>
#import <GoogleMaps/GMSGroundOverlay.h>
#import <GoogleMaps/GMSIndoorDisplay.h>
#import <GoogleMaps/GMSMapID.h>
#import <GoogleMaps/GMSMapLayer.h>
#import <GoogleMaps/GMSMapStyle.h>
#import <GoogleMaps/GMSMapView+Animation.h>
#import <GoogleMaps/GMSMapView.h>
#import <GoogleMaps/GMSMarker.h>
#import <GoogleMaps/GMSMarkerAnimation.h>
#import <GoogleMaps/GMSMarkerLayer.h>
#import <GoogleMaps/GMSMutablePath.h>
#import <GoogleMaps/GMSOrientation.h>
#import <GoogleMaps/GMSOverlay.h>
#import <GoogleMaps/GMSOverlayLayer.h>
#import <GoogleMaps/GMSPanorama.h>
#import <GoogleMaps/GMSPanoramaCamera.h>
#import <GoogleMaps/GMSPanoramaCameraUpdate.h>
#import <GoogleMaps/GMSPanoramaLayer.h>
#import <GoogleMaps/GMSPanoramaLink.h>
#import <GoogleMaps/GMSPanoramaService.h>
#import <GoogleMaps/GMSPanoramaSource.h>
#import <GoogleMaps/GMSPanoramaView.h>
#import <GoogleMaps/GMSPath.h>
#import <GoogleMaps/GMSPinImage.h>
#import <GoogleMaps/GMSPinImageGlyph.h>
#import <GoogleMaps/GMSPinImageOptions.h>
#import <GoogleMaps/GMSPlaceFeature.h>
#import <GoogleMaps/GMSPolygon.h>
#import <GoogleMaps/GMSPolygonLayer.h>
#import <GoogleMaps/GMSPolyline.h>
#import <GoogleMaps/GMSProjection.h>
#import <GoogleMaps/GMSServices.h>
#import <GoogleMaps/GMSStampStyle.h>
#import <GoogleMaps/GMSStrokeStyle.h>
#import <GoogleMaps/GMSStyleSpan.h>
#import <GoogleMaps/GMSSyncTileLayer.h>
#import <GoogleMaps/GMSTileLayer.h>
#import <GoogleMaps/GMSUISettings.h>
#import <GoogleMaps/GMSURLTileLayer.h>

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64/GoogleMaps.framework/Headers/GoogleMaps.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSAccessibilityLabels.h
===
//
//  GMSAccessibilityLabels.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

/**
 * A previous version of this API contained this misspelling, this preserves compatibility with old
 * versions. Use kGMSAccessibilityOutOfQuota instead.
 */
#define kGMSAccessiblityOutOfQuota kGMSAccessibilityOutOfQuota;

/**
 * Accessibility identifier for the compass button.
 *
 * @related GMSMapView
 */
extern NSString *const kGMSAccessibilityCompass;

/**
 * Accessibility identifier for the "my location" button.
 *
 * @related GMSMapView
 */
extern NSString *const kGMSAccessibilityMyLocation;

/**
 * Accessibility identifier for the "out of quota" error label.
 *
 * @related GMSMapView
 */
extern NSString *const kGMSAccessibilityOutOfQuota;

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSAccessibilityLabels.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSAddress.h
===
//
//  GMSAddress.h
//  Google Maps SDK for iOS
//
//  Copyright 2014 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

#if __has_feature(modules)
@import GoogleMapsBase;
#else
#import <GoogleMapsBase/GoogleMapsBase.h>
#endif

NS_ASSUME_NONNULL_BEGIN

/**
 * A result from a reverse geocode request, containing a human-readable address. This class is
 * immutable and should not be instantiated directly unless under testing circumstances. Obtain an
 * instance via GMSGeocoder.
 *
 * Some of the fields may be nil, indicating they are not present.
 */
@interface GMSAddress : NSObject <NSCopying, NSSecureCoding>

/** Location, or kLocationCoordinate2DInvalid if unknown. */
@property(nonatomic, readonly) CLLocationCoordinate2D coordinate;

/** Street number and name. */
@property(nonatomic, copy, readonly, nullable) NSString *thoroughfare;

/** Locality or city. */
@property(nonatomic, copy, readonly, nullable) NSString *locality;

/** Subdivision of locality, district or park. */
@property(nonatomic, copy, readonly, nullable) NSString *subLocality;

/** Region/State/Administrative area. */
@property(nonatomic, copy, readonly, nullable) NSString *administrativeArea;

/** Postal/Zip code. */
@property(nonatomic, copy, readonly, nullable) NSString *postalCode;

/** The country name. */
@property(nonatomic, copy, readonly, nullable) NSString *country;

/** An array of NSString containing formatted lines of the address. May be nil. */
@property(nonatomic, copy, readonly, nullable) NSArray<NSString *> *lines;

/** Returns the first line of the address. */
- (nullable NSString *)addressLine1 __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
    "This method is obsolete and will be removed in a future release. Use the lines property "
    "instead.");

/** Returns the second line of the address. */
- (nullable NSString *)addressLine2 __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
    "This method is obsolete and will be removed in a future release. Use the lines property "
    "instead.");

@end

/**
 * The former type of geocode results (pre-1.7). This remains here for migration and will be removed
 * in future releases.
 */
@compatibility_alias GMSReverseGeocodeResult GMSAddress;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSAddress.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSAdvancedMarker.h
===
//
//  GMSAdvancedMarker.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import "GMSCollisionBehavior.h"
#import "GMSMarker.h"


NS_ASSUME_NONNULL_BEGIN

/** An advanced marker is an icon placed at a particular point on the map's surface. */
@interface GMSAdvancedMarker : GMSMarker

/**
 * The marker's collision behavior, which determines whether or not the marker's visibility can be
 * affected by other markers or labeled content on the map.
 */
@property(nonatomic) GMSCollisionBehavior collisionBehavior;


@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSAdvancedMarker.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCALayer.h
===
//
//  GMSCALayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <QuartzCore/QuartzCore.h>

/**
 * GMSCALayer is a superclass used by layers in the Google Maps SDK for iOS, such as GMSMapLayer and
 * GMSPanoramaLayer.
 *
 * This is an implementation detail and it should not be instantiated directly.
 */
@interface GMSCALayer : CALayer
@end

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCALayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCameraPosition.h
===
//
//  GMSCameraPosition.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreGraphics/CoreGraphics.h>
#import <CoreLocation/CoreLocation.h>

NS_ASSUME_NONNULL_BEGIN

/** An immutable class that aggregates all camera position parameters. */
@interface GMSCameraPosition : NSObject <NSCopying, NSMutableCopying>

/** Location on the Earth towards which the camera points. */
@property(nonatomic, readonly) CLLocationCoordinate2D target;

/**
 * Zoom level. Zoom uses an exponentional scale, where zoom 0 represents the entire world as a
 * 256 x 256 square. Each successive zoom level increases magnification by a factor of 2. So at
 * zoom level 1, the world is 512x512, and at zoom level 2, the entire world is 1024x1024.
 */
@property(nonatomic, readonly) float zoom;

/** Bearing of the camera, in degrees clockwise from true north. */
@property(nonatomic, readonly) CLLocationDirection bearing;

/**
 * The angle, in degrees, of the camera from the nadir (directly facing the Earth). 0 is
 * straight down, 90 is parallel to the ground. Note that the maximum angle allowed is dependent
 * on the zoom. You can think of it as a series of line segments as a function of zoom, rather
 * than a step function. For zoom 16 and above, the maximum angle is 65 degrees. For zoom 10 and
 * below, the maximum angle is 30 degrees.
 */
@property(nonatomic, readonly) double viewingAngle;

/**
 * Designated initializer. Configures this GMSCameraPosition with all available camera properties.
 * Building a GMSCameraPosition via this initializer (or by the following convenience constructors)
 * will implicitly clamp camera values.
 *
 * @param target Location on the earth towards which the camera points.
 * @param zoom The zoom level near the center of the screen.
 * @param bearing Bearing of the camera in degrees clockwise from true north.
 * @param viewingAngle The angle, in degrees, of the camera angle from the nadir (directly facing
 *                     the Earth)
 */
- (instancetype)initWithTarget:(CLLocationCoordinate2D)target
                          zoom:(float)zoom
                       bearing:(CLLocationDirection)bearing
                  viewingAngle:(double)viewingAngle;

/**
 * Convenience initializer for GMSCameraPosition for a particular target and zoom level. This will
 * set the bearing and viewingAngle properties of this camera to zero defaults (i.e., directly
 * facing the Earth's surface, with the top of the screen pointing north).
 *
 * @param target Location on the earth towards which the camera points.
 * @param zoom The zoom level near the center of the screen.
 */
- (instancetype)initWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;

/**
 * Convenience initializer for GMSCameraPosition for a particular latitidue, longitude and zoom
 * level. This will set the bearing and viewingAngle properties of this camera to zero defaults
 * (i.e., directly facing the Earth's surface, with the top of the screen pointing north).
 *
 * @param latitude The latitude component of the location towards which the camera points.
 * @param longitude The latitude component of the location towards which the camera points.
 * @param zoom The zoom level near the center of the screen.
 */
- (instancetype)initWithLatitude:(CLLocationDegrees)latitude
                       longitude:(CLLocationDegrees)longitude
                            zoom:(float)zoom;

/**
 * Convenience initializer for GMSCameraPosition, with latitude/longitude and all other camera
 * properties as per -initWithTarget:zoom:bearing:viewingAngle:.
 *
 * @param latitude The latitude component of the location towards which the camera points.
 * @param longitude The latitude component of the location towards which the camera points.
 * @param zoom The zoom level near the center of the screen.
 * @param bearing Bearing of the camera in degrees clockwise from true north.
 * @param viewingAngle The angle, in degrees, of the camera angle from the nadir (directly facing
 *                     the Earth)
 */
- (instancetype)initWithLatitude:(CLLocationDegrees)latitude
                       longitude:(CLLocationDegrees)longitude
                            zoom:(float)zoom
                         bearing:(CLLocationDirection)bearing
                    viewingAngle:(double)viewingAngle;

/**
 * Convenience constructor for GMSCameraPosition for a particular target and zoom level. This will
 * set the bearing and viewingAngle properties of this camera to zero defaults (i.e., directly
 * facing the Earth's surface, with the top of the screen pointing north).
 */
+ (instancetype)cameraWithTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;

/** Convenience constructor for GMSCameraPosition, as per cameraWithTarget:zoom:. */
+ (instancetype)cameraWithLatitude:(CLLocationDegrees)latitude
                         longitude:(CLLocationDegrees)longitude
                              zoom:(float)zoom;

/**
 * Convenience constructor for GMSCameraPosition, with all camera properties as per
 * initWithTarget:zoom:bearing:viewingAngle:.
 */
+ (instancetype)cameraWithTarget:(CLLocationCoordinate2D)target
                            zoom:(float)zoom
                         bearing:(CLLocationDirection)bearing
                    viewingAngle:(double)viewingAngle;

/**
 * Convenience constructor for GMSCameraPosition, with latitude/longitude and all other camera
 * properties as per initWithTarget:zoom:bearing:viewingAngle:.
 */
+ (instancetype)cameraWithLatitude:(CLLocationDegrees)latitude
                         longitude:(CLLocationDegrees)longitude
                              zoom:(float)zoom
                           bearing:(CLLocationDirection)bearing
                      viewingAngle:(double)viewingAngle;

/**
 * Get the zoom level at which |meters| distance, at given |coord| on Earth, correspond to the
 * specified number of screen |points|.
 *
 * For extremely large or small distances the returned zoom level may be smaller or larger than the
 * minimum or maximum zoom level allowed on the camera.
 *
 * This helper method is useful for building camera positions that contain specific physical areas
 * on Earth.
 */
+ (float)zoomAtCoordinate:(CLLocationCoordinate2D)coordinate
                forMeters:(CLLocationDistance)meters
                perPoints:(CGFloat)points;

@end

/** Mutable version of GMSCameraPosition. */
@interface GMSMutableCameraPosition : GMSCameraPosition
@property(nonatomic) CLLocationCoordinate2D target;
@property(nonatomic) float zoom;
@property(nonatomic) CLLocationDirection bearing;
@property(nonatomic) double viewingAngle;
@end

/** The maximum zoom (closest to the Earth's surface) permitted by the map camera. */
FOUNDATION_EXTERN const float kGMSMaxZoomLevel;

/** The minimum zoom (farthest from the Earth's surface) permitted by the map camera. */
FOUNDATION_EXTERN const float kGMSMinZoomLevel;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCameraPosition.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCameraUpdate.h
===
//
//  GMSCameraUpdate.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>

@class GMSCameraPosition;
@class GMSCoordinateBounds;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSCameraUpdate represents an update that may be applied to a GMSMapView.
 *
 * It encapsulates some logic for modifying the current camera.
 *
 * It should only be constructed using the factory helper methods below.
 */
@interface GMSCameraUpdate : NSObject

/**
 * Returns a GMSCameraUpdate that zooms in on the map.
 *
 * The zoom increment is 1.0.
 */
+ (GMSCameraUpdate *)zoomIn;

/**
 * Returns a GMSCameraUpdate that zooms out on the map.
 *
 * The zoom increment is -1.0.
 */
+ (GMSCameraUpdate *)zoomOut;

/** Returns a GMSCameraUpdate that changes the zoom by the specified amount. */
+ (GMSCameraUpdate *)zoomBy:(float)delta;

/** Returns a GMSCameraUpdate that sets the zoom to the specified amount. */
+ (GMSCameraUpdate *)zoomTo:(float)zoom;

/** Returns a GMSCameraUpdate that sets the camera target to the specified coordinate. */
+ (GMSCameraUpdate *)setTarget:(CLLocationCoordinate2D)target;

/** Returns a GMSCameraUpdate that sets the camera target and zoom to the specified values. */
+ (GMSCameraUpdate *)setTarget:(CLLocationCoordinate2D)target zoom:(float)zoom;

/** Returns a GMSCameraUpdate that sets the camera to the specified GMSCameraPosition. */
+ (GMSCameraUpdate *)setCamera:(GMSCameraPosition *)camera;

/**
 * Returns a GMSCameraUpdate that transforms the camera such that the specified bounds are centered
 * on screen at the greatest possible zoom level. The bounds will have a default padding of 64
 * points.
 *
 * The returned camera update will set the camera's bearing and tilt to their default zero values
 * (i.e., facing north and looking directly at the Earth).
 */
+ (GMSCameraUpdate *)fitBounds:(GMSCoordinateBounds *)bounds;

/**
 * This is similar to fitBounds: but allows specifying the padding (in points) in order to inset the
 * bounding box from the view's edges.
 *
 * If the requested |padding| is larger than the view size in either the vertical or horizontal
 * direction the map will be maximally zoomed out.
 */
+ (GMSCameraUpdate *)fitBounds:(GMSCoordinateBounds *)bounds withPadding:(CGFloat)padding;

/**
 * This is similar to fitBounds: but allows specifying edge insets in order to inset the bounding
 * box from the view's edges.
 *
 * If the requested |edgeInsets| are larger than the view size in either the vertical or horizontal
 * direction the map will be maximally zoomed out.
 */
+ (GMSCameraUpdate *)fitBounds:(GMSCoordinateBounds *)bounds
                withEdgeInsets:(UIEdgeInsets)edgeInsets;

/**
 * Returns a GMSCameraUpdate that shifts the center of the view by the specified number of points in
 * the x and y directions. X grows to the right, Y grows down.
 */
+ (GMSCameraUpdate *)scrollByX:(CGFloat)dX Y:(CGFloat)dY;

/**
 * Returns a GMSCameraUpdate that zooms with a focus point; the focus point stays fixed on screen.
 */
+ (GMSCameraUpdate *)zoomBy:(float)zoom atPoint:(CGPoint)point;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCameraUpdate.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCircle.h
===
//
//  GMSCircle.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSOverlay.h"

NS_ASSUME_NONNULL_BEGIN

/** A circle on the Earth's surface (spherical cap). */
@interface GMSCircle : GMSOverlay

/** Position on Earth of circle center. Ignores invalid positions. */
@property(nonatomic) CLLocationCoordinate2D position;

/** Radius of the circle in meters; must be positive. */
@property(nonatomic) CLLocationDistance radius;

/**
 * The width of the circle's outline in screen points. Defaults to 1. As per GMSPolygon, the width
 * does not scale when the map is zoomed.
 *
 * Setting strokeWidth to 0 results in no stroke.
 */
@property(nonatomic) CGFloat strokeWidth;

/** The color of this circle's outline. The default value is black. */
@property(nonatomic, nullable) UIColor *strokeColor;

/**
 * The interior of the circle is painted with fillColor. The default value is nil, resulting in no
 * fill.
 */
@property(nonatomic, nullable) UIColor *fillColor;

/**
 * Convenience constructor for GMSCircle for a particular position and radius. Other properties will
 * have default values. An invalid position will result in an overlay object that cannot be drawn on
 * the map.
 */
+ (instancetype)circleWithPosition:(CLLocationCoordinate2D)position
                            radius:(CLLocationDistance)radius;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCircle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCollisionBehavior.h
===
//
//  GMSCollisionBehavior.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * \defgroup CollisionBehavior GMSCollisionBehavior
 * @{
 */

/**
 * How markers interact with other markers and regular labels. Defaults to
 * @c GMSCollisionBehaviorRequired.
 *
 * Marker collisions occur when coordinates intersect.
 *
 * Priority is defined as:
 * 1) Required > Optional
 * 2) zIndex: higher zIndex > lower zIndex
 *
 * Beyond this, it is undefined which marker will show if both are optional and have the same
 * zIndex.
 * Regular map labels are the lowest priority.
 */
typedef NS_ENUM(NSInteger, GMSCollisionBehavior) {
  /**
   * Always display the marker regardless of collision. This is the default behavior.
   * Has no impact on whether any other markers or basemap labels show.
   */
  GMSCollisionBehaviorRequired,

  /**
   * Always display the marker regardless of collision, and hide any
   * CollisionBehaviorOptionalAndHidesLowerPriority markers or labels that would overlap with the
   * marker.
   */
  GMSCollisionBehaviorRequiredAndHidesOptional,

  /**
   * Display the marker only if it does not overlap with other markers. Does not include
   * GMSCollisionBehaviorRequired. If two markers of this type would overlap, the one with the
   * higher zIndex is shown. Collision rules for markers with the same zIndex is undefined.
   */
  GMSCollisionBehaviorOptionalAndHidesLowerPriority,
};

/**@}*/

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCollisionBehavior.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCoordinateBounds+GoogleMaps.h
===
//
//  GMSCoordinateBounds+GoogleMaps.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//


#if __has_feature(modules)
@import GoogleMapsBase;
#else
#import <GoogleMapsBase/GoogleMapsBase.h>
#endif
#import "GMSProjection.h"

@class GMSPath;

NS_ASSUME_NONNULL_BEGIN

@interface GMSCoordinateBounds (GoogleMaps)

/** Inits with bounds that encompass |region|. */
- (id)initWithRegion:(GMSVisibleRegion)region;

/** Inits with bounds that encompass |path|. */
- (id)initWithPath:(GMSPath *)path;

/** Returns a GMSCoordinateBounds representing the current bounds extended to include |path|. */
- (GMSCoordinateBounds *)includingPath:(GMSPath *)path;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSCoordinateBounds+GoogleMaps.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSFeature.h
===
//
//  GMSFeature.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** Identifiers for feature types of data-driven styling features. */
NS_SWIFT_NAME(FeatureType) typedef NSString *GMSFeatureType NS_TYPED_EXTENSIBLE_ENUM;

FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeAdministrativeAreaLevel1;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeAdministrativeAreaLevel2;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeCountry;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeLocality;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypePostalCode;
FOUNDATION_EXPORT GMSFeatureType const GMSFeatureTypeSchoolDistrict;

/**
 * An interface representing a feature's metadata.
 *
 * Do not save a reference to a particular feature object because the reference will not be stable.
 */
NS_SWIFT_NAME(Feature)
@protocol GMSFeature <NSObject>

/** Type of this feature. */
- (GMSFeatureType)featureType;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSFeature.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSFeatureLayer.h
===
//
//  GMSFeatureLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import "GMSFeature.h"

@class GMSFeatureStyle;

NS_ASSUME_NONNULL_BEGIN

/**
 * A class representing a collection of all features of the same @c GMSFeatureType, whose style can
 * be overridden on the client. Each @c GMSFeatureType will have one corresponding @c
 * GMSFeatureLayer.
 */
NS_SWIFT_NAME(FeatureLayer)
@interface GMSFeatureLayer<__covariant T : id <GMSFeature>> : NSObject

/**
 * The feature type associated with this layer. All features associated with the layer will be of
 * this type.
 */
@property(nonatomic, readonly) GMSFeatureType featureType;

/**
 * Determines if the data-driven @c GMSFeatureLayer is available. Data-driven styling requires
 * the Metal Framework, a valid map ID and that the feature type be applied.
 * If @c NO, styling for the @c GMSFeatureLayer returns to the default and events are not triggered.
 */
@property(nonatomic, readonly, getter=isAvailable) BOOL available;

/**
 * Styling block to be applied to all features in this layer.
 *
 * The style block is applied to all visible features in the viewport when the setter is called, and
 * is run multiple times for the subsequent features entering the viewport.
 *
 * The function is required to be deterministic and return consistent results when it is applied
 * over the map tiles. If any styling specs of any feature would be changed, @c style must be set
 * again. Changing behavior of the style block without calling the @c style setter will result in
 * undefined behavior, including stale and/or shattered map renderings. See the example below:
 * @code{.swift}
 * var selectedPlaceIDs = Set<String>()
 * var style = FeatureStyle(fill: .red, stroke: .clear, strokeWidth: 0)
 * layer.style = { feature in
 *   selectedPlaceIDs.contains(feature.placeID) ? style : nil
 * }
 *
 *
 * selectedPlaceIDs.insert("foo")
 *
 * style = FeatureStyle(fill: .clear, stroke: .blue, strokeWidth: 1.5)
 *
 *
 * layer.style = { feature in
 *   selectedPlaceIDs.contains(feature.placeID) ? style : nil
 * }
 * @endcode
 */
@property(nonatomic, nullable) GMSFeatureStyle *_Nullable (^style)(T);

/**
 * Create a feature layer instance for testing.
 *
 * This method should be used for your unit tests only. In production, @c GMSFeatureLayer instances
 * should only be created by the SDK.
 */
- (instancetype)initWithFeatureType:(GMSFeatureType)featureType;

- (instancetype)init NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSFeatureLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSFeatureStyle.h
===
//
//  GMSFeatureStyle.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//


#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

@class GMSMutableFeatureStyle;

/** Specifies how a map feature should appear when displayed on a map. */
NS_SWIFT_NAME(FeatureStyle)
@interface GMSFeatureStyle :
    NSObject

/** Creates a new style. */
+ (instancetype)styleWithFillColor:(nullable UIColor *)fillColor
                       strokeColor:(nullable UIColor *)strokeColor
                       strokeWidth:(CGFloat)strokeWidth
    NS_SWIFT_UNAVAILABLE("Use initializer instead");

/** Initializes a new style. */
- (instancetype)initWithFillColor:(nullable UIColor *)fillColor
                      strokeColor:(nullable UIColor *)strokeColor
                      strokeWidth:(CGFloat)strokeWidth NS_DESIGNATED_INITIALIZER;

- (instancetype)init NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE;

/** Specifies the fill color, including the alpha channel. */
@property(nonatomic, readonly, copy, nullable) UIColor *fillColor;

/** Specifies the border color, including the alpha channel. */
@property(nonatomic, readonly, copy, nullable) UIColor *strokeColor;

/** Specifies the border width, in screen points. */
@property(nonatomic, readonly) CGFloat strokeWidth;



@end


/** Value to use for @c strokeWidth parameter when the stroke width should be unchanged. */
FOUNDATION_EXTERN const CGFloat
    GMSFeatureStyleStrokeWidthUnspecified NS_SWIFT_NAME(FeatureStyle.strokeWidthUnspecified);


NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSFeatureStyle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSGeocoder.h
===
//
//  GMSGeocoder.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

#import "GMSAddress.h"

@class GMSReverseGeocodeResponse;

NS_ASSUME_NONNULL_BEGIN

/**
 * \defgroup GeocoderErrorCode GMSGeocoderErrorCode
 * @{
 */

/** GMSGeocoder error codes, embedded in NSError. */
typedef NS_ENUM(NSInteger, GMSGeocoderErrorCode) {
  kGMSGeocoderErrorInvalidCoordinate = 1,
  kGMSGeocoderErrorInternal,
};

/**@}*/

/**
 * Handler that reports a reverse geocoding response, or error.
 *
 * @related GMSGeocoder
 */
typedef void (^GMSReverseGeocodeCallback)(GMSReverseGeocodeResponse *_Nullable, NSError *_Nullable);

/**
 * Exposes a service for reverse geocoding. This maps Earth coordinates (latitude and longitude) to
 * a collection of addresses near that coordinate.
 */
@interface GMSGeocoder : NSObject

/* Convenience constructor for GMSGeocoder. */
+ (GMSGeocoder *)geocoder;

/**
 * Reverse geocodes a coordinate on the Earth's surface.
 *
 * @param coordinate The coordinate to reverse geocode.
 * @param handler The callback to invoke with the reverse geocode results.
 *        The callback will be invoked asynchronously from the main thread.
 */
- (void)reverseGeocodeCoordinate:(CLLocationCoordinate2D)coordinate
               completionHandler:(GMSReverseGeocodeCallback)handler;

@end

/** A collection of results from a reverse geocode request. */
@interface GMSReverseGeocodeResponse : NSObject <NSCopying>

/** Returns the first result, or nil if no results were available. */
- (nullable GMSAddress *)firstResult;

/** Returns an array of all the results (contains GMSAddress), including the first result. */
- (nullable NSArray<GMSAddress *> *)results;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSGeocoder.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSGeometryUtils.h
===
//
//  GMSGeometryUtils.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

/**
 * \defgroup GeometryUtils GMSGeometryUtils
 * @{
 */

#import <CoreLocation/CoreLocation.h>

#import "GMSPath.h"

@class GMSPath;
@class GMSStrokeStyle;
@class GMSStyleSpan;

NS_ASSUME_NONNULL_BEGIN

/** Average Earth radius in meters. */
static const CLLocationDistance kGMSEarthRadius = 6371009.0;

/**
 * A point on the map. May represent a projected coordinate.
 *
 * x is in [-1, 1]. The axis direction is normal: y grows towards North, x grows towards East. (0,
 * 0) is the center of the map.
 *
 * See GMSProject() and GMSUnproject().
 */
typedef struct GMSMapPoint {
  double x;
  double y;
} GMSMapPoint;

/** Projects |coordinate| to the map. |coordinate| must be valid. */
FOUNDATION_EXPORT
GMSMapPoint GMSProject(CLLocationCoordinate2D coordinate);

/** Unprojects |point| from the map. point.x must be in [-1, 1]. */
FOUNDATION_EXPORT
CLLocationCoordinate2D GMSUnproject(GMSMapPoint point);

/**
 * Returns a linearly interpolated point on the segment [a, b], at the fraction |t| from |a|. |t|==0
 * corresponds to |a|, |t|==1 corresponds to |b|.
 *
 * The interpolation takes place along the short path between the points potentially crossing the
 * date line. E.g. interpolating from San Francisco to Tokyo will pass north of Hawaii and cross the
 * date line.
 */
FOUNDATION_EXPORT
GMSMapPoint GMSMapPointInterpolate(GMSMapPoint a, GMSMapPoint b, double t);

/**
 * Returns the length of the segment [a, b] in projected space.
 *
 * The length is computed along the short path between the points potentially crossing the date
 * line. E.g. the distance between the points corresponding to San Francisco and Tokyo measures the
 * segment that passes north of Hawaii crossing the date line.
 */
FOUNDATION_EXPORT
double GMSMapPointDistance(GMSMapPoint a, GMSMapPoint b);

/**
 * Returns whether |point| lies inside of path. The path is always considered closed, regardless of
 * whether the last point equals the first or not.
 *
 * Inside is defined as not containing the South Pole -- the South Pole is always outside.
 *
 * |path| describes great circle segments if |geodesic| is YES, and rhumb (loxodromic) segments
 * otherwise.
 *
 * If |point| is exactly equal to one of the vertices, the result is YES. A point that is not equal
 * to a vertex is on one side or the other of any path segment -- it can never be "exactly on the
 * border".
 *
 * See GMSGeometryIsLocationOnPath() for a border test with tolerance.
 */
FOUNDATION_EXPORT
BOOL GMSGeometryContainsLocation(CLLocationCoordinate2D point, GMSPath *path, BOOL geodesic);

/**
 * Returns whether |point| lies on or near |path|, within the specified |tolerance| in meters.
 * |path| is composed of great circle segments if |geodesic| is YES, and of rhumb (loxodromic)
 * segments if |geodesic| is NO.
 *
 * See also GMSGeometryIsLocationOnPath(point, path, geodesic).
 *
 * The tolerance, in meters, is relative to the spherical radius of the Earth. If you need to work
 * on a sphere of different radius, you may compute the equivalent tolerance from the desired
 * tolerance on the sphere of radius R: tolerance = toleranceR * (RadiusEarth / R), with
 * RadiusEarth==6371009.
 */
FOUNDATION_EXPORT
BOOL GMSGeometryIsLocationOnPathTolerance(CLLocationCoordinate2D point, GMSPath *path,
                                          BOOL geodesic, CLLocationDistance tolerance);

/**
 * Same as GMSGeometryIsLocationOnPath(point, path, geodesic, tolerance), with a default tolerance
 * of 0.1 meters.
 */
FOUNDATION_EXPORT
BOOL GMSGeometryIsLocationOnPath(CLLocationCoordinate2D point, GMSPath *path, BOOL geodesic);

/**
 * Returns the great circle distance between two coordinates, in meters, on Earth.
 *
 * This is the shortest distance between the two coordinates on the sphere.
 *
 * Both coordinates must be valid.
 */
FOUNDATION_EXPORT
CLLocationDistance GMSGeometryDistance(CLLocationCoordinate2D from, CLLocationCoordinate2D to);

/**
 * Returns the great circle length of |path|, in meters, on Earth.
 *
 * This is the sum of GMSGeometryDistance() over the path segments.
 *
 * All the coordinates of the path must be valid.
 */
FOUNDATION_EXPORT
CLLocationDistance GMSGeometryLength(GMSPath *path);

/**
 * Returns the area of a geodesic polygon defined by |path| on Earth.
 *
 * The "inside" of the polygon is defined as not containing the South pole.
 *
 * If |path| is not closed, it is implicitly treated as a closed path nevertheless and the result is
 * the same.
 *
 * All coordinates of the path must be valid.
 *
 * The polygon must be simple (not self-overlapping) and may be concave.
 *
 * If any segment of the path is a pair of antipodal points, the result is undefined -- because two
 * antipodal points do not form a unique great circle segment on the sphere.
 */
FOUNDATION_EXPORT
double GMSGeometryArea(GMSPath *path);

/**
 * Returns the signed area of a geodesic polygon defined by |path| on Earth.
 *
 * The result has the same absolute value as GMSGeometryArea(); it is positive if the points of path
 * are in counter-clockwise order, and negative otherwise.
 *
 * The same restrictions as on GMSGeometryArea() apply.
 */
FOUNDATION_EXPORT
double GMSGeometrySignedArea(GMSPath *path);

/**
 * Returns the initial heading (degrees clockwise of North) at |from| of the shortest path to |to|.
 *
 * The returned value is in the range [0, 360).
 *
 * Returns 0 if the two coordinates are the same.
 *
 * Both coordinates must be valid.
 *
 * To get the final heading at |to| one may use (GMSGeometryHeading(|to|, |from|) + 180) modulo 360.
 */
FOUNDATION_EXPORT
CLLocationDirection GMSGeometryHeading(CLLocationCoordinate2D from, CLLocationCoordinate2D to);

/**
 * Returns the destination coordinate, when starting at |from| with initial |heading|, travelling
 * |distance| meters along a great circle arc, on Earth.
 *
 * The resulting longitude is in the range [-180, 180).
 *
 * Both coordinates must be valid.
 */
FOUNDATION_EXPORT
CLLocationCoordinate2D GMSGeometryOffset(CLLocationCoordinate2D from, CLLocationDistance distance,
                                         CLLocationDirection heading);

/**
 * Returns the coordinate that lies the given |fraction| of the way between the |from| and |to|
 * coordinates on the shortest path between the two.
 *
 * The resulting longitude is in the range [-180, 180).
 */
FOUNDATION_EXPORT
CLLocationCoordinate2D GMSGeometryInterpolate(CLLocationCoordinate2D from,
                                              CLLocationCoordinate2D to, double fraction);

/**
 * Returns an NSArray of GMSStyleSpan constructed by repeated application of style and length
 * information from |styles| and |lengths| along |path|.
 *
 * |path| the path along which the output spans are computed.
 * |styles| an NSArray of GMSStrokeStyle. Wraps if consumed. Can't be empty.
 * |lengths| an NSArray of NSNumber; each entry gives the length of the corresponding
 *           style from |styles|. Wraps if consumed. Can't be empty.
 * |lengthKind| the interpretation of values from |lengths| (geodesic, rhumb or projected).
 *
 * Example: a polyline with alternating black and white spans:
 *
 * <pre>
 * GMSMutablePath *path;
 * NSArray *styles = @[[GMSStrokeStyle solidColor:[UIColor whiteColor]],
 *                     [GMSStrokeStyle solidColor:[UIColor blackColor]]];
 * NSArray *lengths = @[@100000, @50000];
 * polyline.path = path;
 * polyline.spans = GMSStyleSpans(path, styles, lengths, kGMSLengthRhumb);
 * </pre>
 */
FOUNDATION_EXPORT
NSArray<GMSStyleSpan *> *GMSStyleSpans(GMSPath *path, NSArray<GMSStrokeStyle *> *styles,
                                       NSArray<NSNumber *> *lengths, GMSLengthKind lengthKind);

/**
 * Similar to GMSStyleSpans(path, styles, lengths, lengthKind) but additionally takes an initial
 * length offset that will be skipped over relative to the |lengths| array.
 *
 * |lengthOffset| the length (e.g. in meters) that should be skipped initially from |lengths|.
 */
FOUNDATION_EXPORT
NSArray<GMSStyleSpan *> *GMSStyleSpansOffset(GMSPath *path, NSArray<GMSStrokeStyle *> *styles,
                                             NSArray<NSNumber *> *lengths, GMSLengthKind lengthKind,
                                             double lengthOffset);

/**@}*/

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSGeometryUtils.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSGroundOverlay.h
===
//
//  GMSGroundOverlay.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSOverlay.h"

@class GMSCoordinateBounds;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSGroundOverlay specifies the available options for a ground overlay that exists on the Earth's
 * surface. Unlike a marker, the position of a ground overlay is specified explicitly and it does
 * not face the camera.
 */
@interface GMSGroundOverlay : GMSOverlay

/**
 * The position of this GMSGroundOverlay, or more specifically, the physical position of its anchor.
 * If this is changed, |bounds| will be moved around the new position.
 */
@property(nonatomic) CLLocationCoordinate2D position;

/**
 * The anchor specifies where this GMSGroundOverlay is anchored to the Earth in relation to
 * |bounds|. If this is modified, |position| will be set to the corresponding new position within
 * |bounds|.
 */
@property(nonatomic) CGPoint anchor;

/**
 * Icon to render within |bounds| on the Earth. If this is nil, the overlay will not be visible
 * (unlike GMSMarker which has a default image).
 */
@property(nonatomic, nullable) UIImage *icon;

/**
 * Sets the opacity of the ground overlay, between 0 (completely transparent) and 1 (default)
 * inclusive.
 */
@property(nonatomic) float opacity;

/**
 * Bearing of this ground overlay, in degrees. The default value, zero, points this ground overlay
 * up/down along the normal Y axis of the earth.
 */
@property(nonatomic) CLLocationDirection bearing;

/**
 * The 2D bounds on the Earth in which |icon| is drawn. Changing this value will adjust |position|
 * accordingly.
 */
@property(nonatomic, nullable) GMSCoordinateBounds *bounds;

/**
 * Convenience constructor for GMSGroundOverlay for a particular |bounds| and |icon|. Will set
 * |position| accordingly.
 */
+ (instancetype)groundOverlayWithBounds:(nullable GMSCoordinateBounds *)bounds
                                   icon:(nullable UIImage *)icon;

/**
 * Constructs a GMSGroundOverlay that renders the given |icon| at |position|, as if the image's
 * actual size matches camera pixels at |zoomLevel|.
 */
+ (instancetype)groundOverlayWithPosition:(CLLocationCoordinate2D)position
                                     icon:(nullable UIImage *)icon
                                zoomLevel:(CGFloat)zoomLevel;

@end

/**
 * The default position of the ground anchor of a GMSGroundOverlay: the center point of the icon.
 */
FOUNDATION_EXTERN const CGPoint kGMSGroundOverlayDefaultAnchor;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSGroundOverlay.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSIndoorBuilding.h
===
//
//  GMSIndoorBuilding.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

@class GMSIndoorLevel;

NS_ASSUME_NONNULL_BEGIN

/**
 * Describes a building which contains levels.
 */
@interface GMSIndoorBuilding : NSObject

/**
 * Array of GMSIndoorLevel describing the levels which make up the building.
 * The levels are in 'display order' from top to bottom.
 */
@property(nonatomic, strong, readonly) NSArray<GMSIndoorLevel *> *levels;

/**
 * Index in the levels array of the default level.
 */
@property(nonatomic, assign, readonly) NSUInteger defaultLevelIndex;

/**
 * If YES, the building is entirely underground and supports being hidden.
 */
@property(nonatomic, assign, readonly, getter=isUnderground) BOOL underground;

- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSIndoorBuilding.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSIndoorDisplay.h
===
//
//  GMSIndoorDisplay.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

@class GMSIndoorBuilding;
@class GMSIndoorLevel;

NS_ASSUME_NONNULL_BEGIN

/** Delegate for events on GMSIndoorDisplay. */
@protocol GMSIndoorDisplayDelegate <NSObject>
@optional

/**
 * Raised when the activeBuilding has changed.  The activeLevel will also have already been updated
 * for the new building, but didChangeActiveLevel: will be raised after this method.
 */
- (void)didChangeActiveBuilding:(nullable GMSIndoorBuilding *)building;

/**
 * Raised when the activeLevel has changed.  This event is raised for all changes, including
 * explicit setting of the property.
 */
- (void)didChangeActiveLevel:(nullable GMSIndoorLevel *)level;

@end

/**
 * Provides ability to observe or control the display of indoor level data.
 *
 * Like GMSMapView, GMSIndoorDisplay may only be used from the main thread.
 */
@interface GMSIndoorDisplay : NSObject

/** GMSIndoorDisplay delegate */
@property(nonatomic, weak, nullable) id<GMSIndoorDisplayDelegate> delegate;

/**
 * Provides the currently focused building, will be nil if there is no building with indoor data
 * currently under focus.
 */
@property(nonatomic, readonly, nullable) GMSIndoorBuilding *activeBuilding;

/**
 * Provides and controls the active level for activeBuilding.  Will be updated whenever
 * activeBuilding changes, and may be set to any member of activeBuilding's levels property.  May
 * also be set to nil if the building is underground, to stop showing the building (the building
 * will remain active).
 *
 * Will always be nil if activeBuilding is nil.
 *
 * Any attempt to set it to an invalid value will be ignored.
 */
@property(nonatomic, nullable) GMSIndoorLevel *activeLevel;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSIndoorDisplay.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSIndoorLevel.h
===
//
//  GMSIndoorLevel.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * Describes a single level in a building.
 *
 * Multiple buildings can share a level - in this case the level instances will compare as equal,
 * even though the level numbers/names may be different.
 */
@interface GMSIndoorLevel : NSObject

- (instancetype)init NS_UNAVAILABLE;

/** Localized display name for the level, e.g. "Ground floor". */
@property(nonatomic, copy, readonly, nullable) NSString *name;

/** Localized short display name for the level, e.g. "1". */
@property(nonatomic, copy, readonly, nullable) NSString *shortName;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSIndoorLevel.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapID.h
===
//
//  GMSMapID.h
//  Google Maps SDK for iOS
//
//  Copyright 2019 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>
NS_ASSUME_NONNULL_BEGIN

/** An opaque identifier for a custom map configuration. */
@interface GMSMapID : NSObject <NSCopying>

- (instancetype)init NS_UNAVAILABLE;

/** Creates a new mapID with the given string value. */
- (instancetype)initWithIdentifier:(NSString *)identifier NS_DESIGNATED_INITIALIZER;

/** Creates a new mapID with the given string value. */
+ (instancetype)mapIDWithIdentifier:(NSString *)identifier
    NS_SWIFT_UNAVAILABLE("Use initializer instead");

/**
 * Returns the DEMO_MAP_ID, which can be used for code samples which require a map ID. This map ID
 * is not intended for use in production applications and cannot be used for features which require
 * cloud configuration (such as Cloud Styling).
 *
 * @note Usage of DEMO_MAP_ID triggers a map load charge against the Dynamic Maps SKU for Android
 * and iOS. For more Information see Google Maps Billing:
 * https://developers.google.com/maps/billing-and-pricing/pricing#dynamic-maps
 */
@property(nonatomic, class, readonly) GMSMapID *demoMapID NS_SWIFT_NAME(demoMapID);

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapID.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapLayer.h
===
//
//  GMSMapLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <QuartzCore/QuartzCore.h>

#import "GMSCALayer.h"

NS_ASSUME_NONNULL_BEGIN

/*
 * The following layer properties and constants describe the camera properties that may be animated
 * on the custom model layer of a GMSMapView with Core Animation. For simple camera control and
 * animation, please see the helper methods in GMSMapView+Animation.h, and the camera object
 * definition within GMSCameraPosition.h.
 *
 * Changing layer properties triggers an implicit animation, e.g.:-
 *   mapView_.layer.cameraBearing = 20;
 *
 * An explicit animation, replacing the implicit animation, may be added after changing the
 * property, for example:
 * <pre>
 *   CAMediaTimingFunction *curve = [CAMediaTimingFunction functionWithName:
 *                                   kCAMediaTimingFunctionEaseInEaseOut];
 *   CABasicAnimation *animation =
 *       [CABasicAnimation animationWithKeyPath:kGMSLayerCameraBearingKey];
 *   animation.duration = 2.0f;
 *   animation.timingFunction = curve;
 *   animation.toValue = @20;
 *   [mapView_.layer addAnimation:animation forKey:kGMSLayerCameraBearingKey];
 * </pre>
 *
 * To control several implicit animations, Core Animation's transaction support may be used, for
 * example:
 * <pre>
 *   [CATransaction begin];
 *   [CATransaction setAnimationDuration:2.0f];
 *   mapView_.layer.cameraBearing = 20;
 *   mapView_.layer.cameraViewingAngle = 30;
 *   [CATransaction commit];
 * </pre>
 *
 * Note that these properties are not view-based. Please see "Animating View and Layer Changes
 * Together" in the <a
 * href="http://developer.apple.com/library/ios/#documentation/windowsviews/conceptual/viewpg_iphoneos/AnimatingViews/AnimatingViews.html">
 * View Programming Guide for iOS</a>.
 */

/**
 * kGMSLayerCameraLatitudeKey ranges from [-85, 85], and values outside this range will be clamped.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraLatitudeKey;

/**
 * kGMSLayerCameraLongitudeKey ranges from [-180, 180), and values outside this range will be
 * wrapped to within this range.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraLongitudeKey;

/**
 * kGMSLayerCameraBearingKey ranges from [0, 360), and values are wrapped.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraBearingKey;

/**
 * kGMSLayerCameraZoomLevelKey ranges from [kGMSMinZoomLevel, kGMSMaxZoomLevel], and values are
 * clamped.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraZoomLevelKey;

/**
 * kGMSLayerCameraViewingAngleKey ranges from zero (i.e., facing straight down) and to between 30
 * and 45 degrees towards the horizon, depending on the model zoom level.
 *
 * @related GMSMapLayer
 */
extern NSString *const kGMSLayerCameraViewingAngleKey;

/**
 * GMSMapLayer is a custom subclass of CALayer, provided as the layer class on GMSMapView. This
 * layer should not be instantiated directly. It provides model access to the camera normally
 * defined on GMSMapView.
 *
 * Modifying or animating these properties will typically interrupt any current gesture on
 * GMSMapView, e.g., a user's pan or rotation. Similarly, if a user performs an enabled gesture
 * during an animation, the animation will stop 'in-place' (at the current presentation value).
 */
@interface GMSMapLayer : GMSCALayer
@property(nonatomic) CLLocationDegrees cameraLatitude;
@property(nonatomic) CLLocationDegrees cameraLongitude;
@property(nonatomic) CLLocationDirection cameraBearing;
@property(nonatomic) float cameraZoomLevel;
@property(nonatomic) double cameraViewingAngle;
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapStyle.h
===
//
//  GMSMapStyle.h
//  Google Maps SDK for iOS
//
//  Copyright 2016 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSMapStyle holds details about a style which can be applied to a map.
 *
 * With style options you can customize the presentation of the standard Google map styles, changing
 * the visual display of features like roads, parks, and other points of interest. As well as
 * changing the style of these features, you can also hide features entirely. This means that you
 * can emphasize particular components of the map or make the map complement the content of your
 * app.
 *
 * For more information see: https://developers.google.com/maps/documentation/ios-sdk/styling
 */
@interface GMSMapStyle : NSObject

/**
 * Creates a style using a string containing JSON.
 *
 * Returns nil and populates |error| (if provided) if |style| is invalid.
 */
+ (nullable instancetype)styleWithJSONString:(NSString *)style
                                       error:(NSError *__autoreleasing _Nullable *)error;

/**
 * Creates a style using a file containing JSON.
 *
 * Returns nil and populates |error| (if provided) if |style| is invalid, the file cannot be read,
 * or the URL is not a file URL.
 */
+ (nullable instancetype)styleWithContentsOfFileURL:(NSURL *)fileURL
                                              error:(NSError *__autoreleasing _Nullable *)error;

@end

/**
 * Calculates a hash value for the given string.
 * @param string The string to use to calculate the hash value.
 * @return The hash value.
 * @note The current implementation uses an MD5 hash, which is sufficient for uniquifying styles.
 */
NSUInteger GMSStyleHashForString(NSString *string);

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapStyle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapView+Animation.h
===
//
//  GMSMapView+Animation.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import "GMSMapView.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSMapView (Animation) offers several animation helper methods.
 *
 * During any animation, retrieving the camera position through the camera property on GMSMapView
 * returns an intermediate immutable GMSCameraPosition. This camera position will typically
 * represent the most recently drawn frame.
 */
@interface GMSMapView (Animation)

/** Animates the camera of this map to |cameraPosition|. */
- (void)animateToCameraPosition:(GMSCameraPosition *)cameraPosition;

/**
 * As animateToCameraPosition:, but changes only the location of the camera (i.e., from the current
 * location to |location|).
 */
- (void)animateToLocation:(CLLocationCoordinate2D)location;

/**
 * As animateToCameraPosition:, but changes only the zoom level of the camera.
 *
 * This value is clamped by [kGMSMinZoomLevel, kGMSMaxZoomLevel].
 */
- (void)animateToZoom:(float)zoom;

/**
 * As animateToCameraPosition:, but changes only the bearing of the camera (in degrees). Zero
 * indicates true north.
 */
- (void)animateToBearing:(CLLocationDirection)bearing;

/**
 * As animateToCameraPosition:, but changes only the viewing angle of the camera (in degrees). This
 * value will be clamped to a minimum of zero (i.e., facing straight down) and between 30 and 45
 * degrees towards the horizon, depending on the relative closeness to the earth.
 */
- (void)animateToViewingAngle:(double)viewingAngle;

/**
 * Applies |cameraUpdate| to the current camera, and then uses the result as per
 * animateToCameraPosition:.
 */
- (void)animateWithCameraUpdate:(GMSCameraUpdate *)cameraUpdate;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapView+Animation.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapView.h
===
//
//  GMSMapView.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>


#if __has_feature(modules)
@import GoogleMapsBase;
#else
#import <GoogleMapsBase/GoogleMapsBase.h>
#endif
#import "GMSFeature.h"
#import "GMSFeatureLayer.h"
#import "GMSPlaceFeature.h"
#import "GMSMapLayer.h"

@class GMSCameraPosition;
@class GMSCameraUpdate;
@class GMSCoordinateBounds;
@class GMSIndoorDisplay;
@class GMSMapID;
@class GMSMapStyle;
@class GMSMapView;
@class GMSMarker;
@class GMSOverlay;
@class GMSProjection;
@class GMSUISettings;

NS_ASSUME_NONNULL_BEGIN

/**
 * \defgroup MapCapabilityFlags GMSMapCapabilityFlags
 * @{
 */

/**
 * Flags that represent conditionally-available map capabilities (ones that require a mapID or some
 * other map setting) that can be used to indicate availability.
 */
typedef NS_OPTIONS(NSUInteger, GMSMapCapabilityFlags) {
  /** No conditional capabilities are enabled on the GMSMapView. */
  GMSMapCapabilityFlagsNone = 0,
  /** Advanced markers are enabled on the GMSMapView. */
  GMSMapCapabilityFlagsAdvancedMarkers = 1 << 0,
  /** Data driven styling is enabled on the GMSMapView. */
  GMSMapCapabilityFlagsDataDrivenStyling = 1 << 1,
  /** GMSPolyline with a stampStyle of GMSSpriteStyle is enabled on the GMSMapView. */
  GMSMapCapabilityFlagsSpritePolylines = 1 << 2,
};

/**@}*/

/** Delegate for events on GMSMapView. */
@protocol GMSMapViewDelegate <NSObject>

@optional

/**
 * Called before the camera on the map changes, either due to a gesture, animation (e.g., by a user
 * tapping on the "My Location" button) or by being updated explicitly via the camera or a
 * zero-length animation on layer.
 *
 * @param mapView The map view that was tapped.
 * @param gesture If YES, this is occurring due to a user gesture.
 */
- (void)mapView:(GMSMapView *)mapView willMove:(BOOL)gesture;

/**
 * Called repeatedly during any animations or gestures on the map (or once, if the camera is
 * explicitly set). This may not be called for all intermediate camera positions. It is always
 * called for the final position of an animation or gesture.
 */
- (void)mapView:(GMSMapView *)mapView didChangeCameraPosition:(GMSCameraPosition *)position;

/**
 * Called when the map becomes idle, after any outstanding gestures or animations have completed (or
 * after the camera has been explicitly set).
 */
- (void)mapView:(GMSMapView *)mapView idleAtCameraPosition:(GMSCameraPosition *)position;

/**
 * Called after a tap gesture at a particular coordinate, but only if a marker was not tapped.  This
 * is called before deselecting any currently selected marker (the implicit action for tapping on
 * the map).
 */
- (void)mapView:(GMSMapView *)mapView didTapAtCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Called after a long-press gesture at a particular coordinate.
 *
 * @param mapView The map view that was tapped.
 * @param coordinate The location that was tapped.
 */
- (void)mapView:(GMSMapView *)mapView didLongPressAtCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Called after a marker has been tapped.
 *
 * @param mapView The map view that was tapped.
 * @param marker The marker that was tapped.
 * @return YES if this delegate handled the tap event, which prevents the map from performing its
 * default selection behavior, and NO if the map should continue with its default selection
 * behavior.
 */
- (BOOL)mapView:(GMSMapView *)mapView didTapMarker:(GMSMarker *)marker;

/**
 * Called after a marker's info window has been tapped.
 */
- (void)mapView:(GMSMapView *)mapView didTapInfoWindowOfMarker:(GMSMarker *)marker;

/** Called after a marker's info window has been long pressed. */
- (void)mapView:(GMSMapView *)mapView didLongPressInfoWindowOfMarker:(GMSMarker *)marker;

/**
 * Called after an overlay has been tapped.
 *
 * This method is not called for taps on markers.
 *
 * @param mapView The map view that was tapped.
 * @param overlay The overlay that was tapped.
 */
- (void)mapView:(GMSMapView *)mapView didTapOverlay:(GMSOverlay *)overlay;

/**
 * Called after a POI has been tapped.
 *
 * @param mapView The map view that was tapped.
 * @param placeID The placeID of the POI that was tapped.
 * @param name The name of the POI that was tapped.
 * @param location The location of the POI that was tapped.
 */
- (void)mapView:(GMSMapView *)mapView
    didTapPOIWithPlaceID:(NSString *)placeID
                    name:(NSString *)name
                location:(CLLocationCoordinate2D)location;

/**
 * Called when a marker is about to become selected, and provides an optional custom info window to
 * use for that marker if this method returns a UIView.
 *
 * If you change this view after this method is called, those changes will not necessarily be
 * reflected in the rendered version.
 *
 * The returned UIView must not have bounds greater than 500 points on either dimension.  As there
 * is only one info window shown at any time, the returned view may be reused between other info
 * windows.
 *
 * Removing the marker from the map or changing the map's selected marker during this call results
 * in undefined behavior.
 *
 * @return The custom info window for the specified marker, or nil for default
 */
- (nullable UIView *)mapView:(GMSMapView *)mapView markerInfoWindow:(GMSMarker *)marker;

/**
 * Called when mapView:markerInfoWindow: returns nil. If this method returns a view, it will be
 * placed within the default info window frame. If this method returns nil, then the default
 * rendering will be used instead.
 *
 * @param mapView The map view that was pressed.
 * @param marker The marker that was pressed.
 * @return The custom view to display as contents in the info window, or nil to use the default
 * content rendering instead
 */

- (nullable UIView *)mapView:(GMSMapView *)mapView markerInfoContents:(GMSMarker *)marker;

/** Called when the marker's info window is closed. */
- (void)mapView:(GMSMapView *)mapView didCloseInfoWindowOfMarker:(GMSMarker *)marker;

/** Called when dragging has been initiated on a marker. */
- (void)mapView:(GMSMapView *)mapView didBeginDraggingMarker:(GMSMarker *)marker;

/** Called after dragging of a marker ended. */
- (void)mapView:(GMSMapView *)mapView didEndDraggingMarker:(GMSMarker *)marker;

/** Called while a marker is dragged. */
- (void)mapView:(GMSMapView *)mapView didDragMarker:(GMSMarker *)marker;

/**
 * Called when the My Location button is tapped.
 *
 * @return YES if the listener has consumed the event (i.e., the default behavior should not occur),
 *         NO otherwise (i.e., the default behavior should occur). The default behavior is for the
 *         camera to move such that it is centered on the device location.
 */
- (BOOL)didTapMyLocationButtonForMapView:(GMSMapView *)mapView;

/**
 * Called when the My Location Dot is tapped.
 *
 * @param mapView The map view that was tapped.
 * @param location The location of the device when the location dot was tapped.
 */
- (void)mapView:(GMSMapView *)mapView didTapMyLocation:(CLLocationCoordinate2D)location;

/** Called when tiles have just been requested or labels have just started rendering. */
- (void)mapViewDidStartTileRendering:(GMSMapView *)mapView;

/** Called when all tiles have been loaded (or failed permanently) and labels have been rendered. */
- (void)mapViewDidFinishTileRendering:(GMSMapView *)mapView;

/**
 * Called when map is stable (tiles loaded, labels rendered, camera idle) and overlay objects have
 * been rendered.
 */
- (void)mapViewSnapshotReady:(GMSMapView *)mapView;

/**
 * Called every time map capabilities are changed.
 *
 * @param mapView The map view where mapCapabilities was changed.
 * @param mapCapabilities Flags representing the capabilities on the map currently.
 */
- (void)mapView:(GMSMapView *)mapView
    didChangeMapCapabilities:(GMSMapCapabilityFlags)mapCapabilities;

/**
 * Called after features in a data-driven styling feature layer have been tapped.
 *
 * All features overlapping with the point being tapped will be included. If the features belong to
 * different feature layers, this method will be called multiple times (once for each individual
 * feature layer).
 *
 * There is no guaranteed order between events on different feature layers, or between events on
 * feature layers and other entities on the base map.
 *
 * @param mapView The map view that was tapped.
 * @param features Array of all features being clicked in the layer.
 * @param featureLayer The feature layer containing the feautre.
 * @param location The location of the actual tapping point.
 */
- (void)mapView:(GMSMapView *)mapView
    didTapFeatures:(NSArray<id<GMSFeature>> *)features
    inFeatureLayer:(GMSFeatureLayer *)featureLayer
        atLocation:(CLLocationCoordinate2D)location;

@end

/**
 * \defgroup MapViewType GMSMapViewType
 * @{
 */

/**
 * Display types for GMSMapView.
 */
typedef NS_ENUM(NSUInteger, GMSMapViewType) {
  /** Basic maps.  The default. */
  kGMSTypeNormal GMS_SWIFT_NAME_2_0_3_0(Normal, normal) = 1,

  /** Satellite maps with no labels. */
  kGMSTypeSatellite GMS_SWIFT_NAME_2_0_3_0(Satellite, satellite),

  /** Terrain maps. */
  kGMSTypeTerrain GMS_SWIFT_NAME_2_0_3_0(Terrain, terrain),

  /** Satellite maps with a transparent label overview. */
  kGMSTypeHybrid GMS_SWIFT_NAME_2_0_3_0(Hybrid, hybrid),

  /** No maps, no labels.  Display of traffic data is not supported. */
  kGMSTypeNone GMS_SWIFT_NAME_2_0_3_0(None, none),

};

/**@}*/

/**
 * \defgroup FrameRate GMSFrameRate
 * @{
 */

/** Rendering frame rates for GMSMapView. */
typedef NS_ENUM(NSUInteger, GMSFrameRate) {
  /** Use the minimum frame rate to conserve battery usage. */
  kGMSFrameRatePowerSave,

  /** Use a median frame rate to provide smoother rendering and conserve processing cycles. */
  kGMSFrameRateConservative,

  /**
   * Use the maximum frame rate for a device. For low end devices this will be 30 FPS,
   * for high end devices 60 FPS.
   */
  kGMSFrameRateMaximum,
};

/**@}*/

/**
 * \defgroup MapViewPaddingAdjustmentBehavior GMSMapViewPaddingAdjustmentBehavior
 * @{
 */

/** Constants indicating how safe area insets are added to padding. */
typedef NS_ENUM(NSUInteger, GMSMapViewPaddingAdjustmentBehavior) {
  /** Always include the safe area insets in the padding. */
  kGMSMapViewPaddingAdjustmentBehaviorAlways,

  /**
   * When the padding value is smaller than the safe area inset for a particular edge, use the safe
   * area value for layout, else use padding.
   */
  kGMSMapViewPaddingAdjustmentBehaviorAutomatic,

  /**
   * Never include the safe area insets in the padding. This was the behavior prior to version 2.5.
   */
  kGMSMapViewPaddingAdjustmentBehaviorNever,
};

/**@}*/

/** This class defines initialization-time options for GMSMapView. */
@interface GMSMapViewOptions : NSObject

/** Initial frame for the view. Defaults to CGRectZero. */
@property(nonatomic) CGRect frame;

/** Initial camera position. Defaults to nil. */
@property(nonatomic, nullable) GMSCameraPosition *camera;

/** The mapID for advanced map usage. Defaults to nil. */
@property(nonatomic, nullable) GMSMapID *mapID;

/**
 * Specifies the background color of the map view, which displays whenever the map tiles are not
 * fully loaded. This is required because GMSMapView ignores the inherited mutable backgroundColor.
 * The color is displayed on the background of the map. Defaults to a light grey color.
 */
@property(nonatomic, nullable) UIColor *backgroundColor;

@end

/**
 * This is the main class of the Google Maps SDK for iOS and is the entry point for all methods
 * related to the map.
 *
 * The map should be instantiated via one of the constructors -init or -initWithOptions:.
 *
 * GMSMapView can only be read and modified from the main thread, similar to all UIKit objects.
 * Calling these methods from another thread will result in an exception or undefined behavior.
 */
@interface GMSMapView : UIView

/** GMSMapView delegate. */
@property(nonatomic, weak, nullable) IBOutlet id<GMSMapViewDelegate> delegate;

/**
 * Controls the camera, which defines how the map is oriented. Modification of this property is
 * instantaneous.
 */
@property(nonatomic, copy) GMSCameraPosition *camera;

/**
 * Returns a GMSProjection object that you can use to convert between screen coordinates and
 * latitude/longitude coordinates.
 *
 * This is a snapshot of the current projection, and will not automatically update when the camera
 * moves. It represents either the projection of the last drawn GMSMapView frame, or; where the
 * camera has been explicitly set or the map just created, the upcoming frame. It will never be nil.
 */
@property(nonatomic, readonly) GMSProjection *projection;

/** Controls whether the My Location dot and accuracy circle is enabled. Defaults to NO. */
@property(nonatomic, getter=isMyLocationEnabled) BOOL myLocationEnabled;

/**
 * If My Location is enabled, reveals where the device location dot is being drawn. If it is
 * disabled, or it is enabled but no location data is available, this will be nil.  This property is
 * observable using KVO.
 */
@property(nonatomic, readonly, nullable) CLLocation *myLocation;

/**
 * The marker that is selected.  Setting this property selects a particular marker, showing an info
 * window on it.  If this property is non-nil, setting it to nil deselects the marker, hiding the
 * info window.  This property is observable using KVO.
 */
@property(nonatomic, nullable) GMSMarker *selectedMarker;

/**
 * Controls whether the map is drawing traffic data, if available.  This is subject to the
 * availability of traffic data.  Defaults to NO.
 */
@property(nonatomic, getter=isTrafficEnabled) BOOL trafficEnabled;

/** Controls the type of map tiles that should be displayed.  Defaults to kGMSTypeNormal. */
@property(nonatomic) GMSMapViewType mapType;

/**
 * Controls the style of the map.
 *
 * A non-nil mapStyle will only apply if mapType is Normal.
 */
@property(nonatomic, nullable) GMSMapStyle *mapStyle;

/**
 * Minimum zoom (the farthest the camera may be zoomed out). Defaults to kGMSMinZoomLevel. Modified
 * with -setMinZoom:maxZoom:.
 */
@property(nonatomic, readonly) float minZoom;

/**
 * Maximum zoom (the closest the camera may be to the Earth). Defaults to kGMSMaxZoomLevel. Modified
 * with -setMinZoom:maxZoom:.
 */
@property(nonatomic, readonly) float maxZoom;

/**
 * If set, 3D buildings will be shown where available.  Defaults to YES.
 *
 * This may be useful when adding a custom tile layer to the map, in order to make it clearer at
 * high zoom levels.  Changing this value will cause all tiles to be briefly invalidated.
 */
@property(nonatomic, getter=isBuildingsEnabled) BOOL buildingsEnabled;

/**
 * Sets whether indoor maps are shown, where available. Defaults to YES.
 *
 * If this is set to NO, caches for indoor data may be purged and any floor currently selected by
 * the end-user may be reset.
 */
@property(nonatomic, getter=isIndoorEnabled) BOOL indoorEnabled;

/**
 * Gets the GMSIndoorDisplay instance which allows to observe or control aspects of indoor data
 * display.
 */
@property(nonatomic, readonly) GMSIndoorDisplay *indoorDisplay;

/** Gets the GMSUISettings object, which controls user interface settings for the map. */
@property(nonatomic, readonly) GMSUISettings *settings;

/**
 * Controls the 'visible' region of the view.  By applying padding an area around the edge of the
 * view can be created which will contain map data but will not contain UI controls.
 *
 * If the padding is not balanced, the visual center of the view will move as appropriate.  Padding
 * will also affect the |projection| property so the visible region will not include the padding
 * area.  GMSCameraUpdate fitToBounds will ensure that both this padding and any padding requested
 * will be taken into account.
 *
 * This property may be animated within a UIView-based animation block.
 */
@property(nonatomic) UIEdgeInsets padding;

/**
 * Controls how safe area insets are added to the padding values. Like padding, safe area insets
 * position map controls such as the compass, my location button and floor picker within the device
 * safe area.
 *
 * Defaults to kGMSMapViewPaddingAdjustmentBehaviorAlways.
 */
@property(nonatomic) GMSMapViewPaddingAdjustmentBehavior paddingAdjustmentBehavior;

/**
 * Defaults to YES. If set to NO, GMSMapView will generate accessibility elements for overlay
 * objects, such as GMSMarker and GMSPolyline.
 *
 * This property follows the informal UIAccessibility protocol, except for the default value of
 * YES.
 */
@property(nonatomic) BOOL accessibilityElementsHidden;

/** Accessor for the custom CALayer type used for the layer. */
@property(nonatomic, readonly, retain) GMSMapLayer *layer;

/** Controls the rendering frame rate. Default value is kGMSFrameRateMaximum. */
@property(nonatomic) GMSFrameRate preferredFrameRate;

/**
 * If not nil, constrains the camera target so that gestures cannot cause it to leave the specified
 * bounds.
 */
@property(nonatomic, nullable) GMSCoordinateBounds *cameraTargetBounds;

/**
 * All conditionally-available (dependent on mapID or other map settings) capabilities that are
 * available at the current moment in time. Does not include always-available capabilities.
 */
@property(nonatomic, readonly) GMSMapCapabilityFlags mapCapabilities;

/** Initializes with CGRectZero and default options. */
- (instancetype)init;

/**
 * Creates a new map view with the given options. The value of the options object is copied by this
 * method.
 */
- (instancetype)initWithOptions:(nonnull GMSMapViewOptions *)options NS_DESIGNATED_INITIALIZER;

- (instancetype)initWithFrame:(CGRect)frame
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.");

- (nullable instancetype)initWithCoder:(NSCoder *)coder
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.");

/** Builds and returns a map view with a frame and camera target. */
+ (instancetype)mapWithFrame:(CGRect)frame
                      camera:(GMSCameraPosition *)camera
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.")
        ;

/** Convenience initializer to build and return a map view with a frame, map ID, and camera target.
 */
+ (instancetype)mapWithFrame:(CGRect)frame
                       mapID:(GMSMapID *)mapID
                      camera:(GMSCameraPosition *)camera
    NS_SWIFT_UNAVAILABLE("Use initializer instead")
        __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.")
            ;

/** Builds and returns a map view, with a frame and camera target. */
- (instancetype)initWithFrame:(CGRect)frame
                       camera:(GMSCameraPosition *)camera
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.")
        ;

/** Builds and returns a map view with a frame, map ID, and camera target. */
- (instancetype)initWithFrame:(CGRect)frame
                        mapID:(GMSMapID *)mapID
                       camera:(GMSCameraPosition *)camera
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG("Use -init or -initWithOptions: instead.")
        ;

/** Tells this map to power up its renderer. This is optional and idempotent. */
- (void)startRendering __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
    "This method is obsolete and will be removed in a future release.");

/** Tells this map to power down its renderer. This is optional and idempotent. */
- (void)stopRendering __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
    "This method is obsolete and will be removed in a future release.");

/**
 * Clears all markup that has been added to the map, including markers, polylines and ground
 * overlays.  This will not clear the visible location dot or reset the current mapType.
 */
- (void)clear;

/**
 * Sets |minZoom| and |maxZoom|. This method expects the minimum to be less than or equal to the
 * maximum, and will throw an exception with name NSRangeException otherwise.
 */
- (void)setMinZoom:(float)minZoom maxZoom:(float)maxZoom;

/**
 * Build a GMSCameraPosition that presents |bounds| with |padding|. The camera will have a zero
 * bearing and tilt (i.e., facing north and looking directly at the Earth). This takes the frame and
 * padding of this GMSMapView into account.
 *
 * If the bounds is invalid this method will return a nil camera.
 */
- (nullable GMSCameraPosition *)cameraForBounds:(GMSCoordinateBounds *)bounds
                                         insets:(UIEdgeInsets)insets;

/**
 * Changes the camera according to |update|. The camera change is instantaneous (with no
 * animation).
 */
- (void)moveCamera:(GMSCameraUpdate *)update;

/**
 * Check whether the given camera positions would practically cause the camera to be rendered the
 * same, taking into account the level of precision and transformations used internally.
 */
- (BOOL)areEqualForRenderingPosition:(GMSCameraPosition *)position
                            position:(GMSCameraPosition *)otherPosition;

/**
 * Returns a feature layer of the specified type. Feature layers must be configured in the Cloud
 * Console.
 *
 * If a layer of the specified type does not exist on this map, or if data-driven styling is not
 * enabled, or if the Metal rendering framework is not used, the resulting layer's isAvailable will
 * be @c NO, and will not respond to any calls.
 *
 * Requires the Metal renderer. Learn how to enable Metal at
 * https://developers.google.com/maps/documentation/ios-sdk/config#use-metal
 */
- (GMSFeatureLayer<GMSPlaceFeature *> *)featureLayerOfFeatureType:(GMSFeatureType)featureType
    NS_SWIFT_NAME(featureLayer(of:));
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMapView.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMarker.h
===
//
//  GMSMarker.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSMarkerAnimation.h"
#import "GMSOverlay.h"

@class GMSMarkerLayer;
@class GMSPanoramaView;

NS_ASSUME_NONNULL_BEGIN

/**
 * A marker is an icon placed at a particular point on the map's surface. A marker's icon is drawn
 * oriented against the device's screen rather than the map's surface; i.e., it will not necessarily
 * change orientation due to map rotations, tilting, or zooming.
 */
@interface GMSMarker : GMSOverlay

/** Marker position. Animated. */
@property(nonatomic) CLLocationCoordinate2D position;

/** Snippet text, shown beneath the title in the info window when selected. */
@property(nonatomic, copy, nullable) NSString *snippet;

/**
 * Marker icon to render. If left nil, uses a default SDK place marker.
 *
 * Supports animated images, but each frame must be the same size or the behavior is undefined.
 *
 * Supports the use of alignmentRectInsets to specify a reduced tap area.  This also redefines how
 * anchors are specified.  For an animated image the value for the animation is used, not the
 * individual frames.
 */
@property(nonatomic, nullable) UIImage *icon;

/**
 * Marker view to render. If left nil, falls back to the |icon| property instead.
 *
 * Supports animation of all animatable properties of UIView, except |frame| and |center|. Changing
 * these properties or their corresponding CALayer version, including |position|, is not supported.
 *
 * Note that the view behaves as if |clipsToBounds| is set to YES, regardless of its actual value.
 */
@property(nonatomic, nullable) UIView *iconView;

/**
 * Controls whether the icon for this marker should be redrawn every frame.
 *
 * Note that when this changes from NO to YES, the icon is guaranteed to be redrawn next frame.
 *
 * Defaults to YES.
 * Has no effect if |iconView| is nil.
 */
@property(nonatomic) BOOL tracksViewChanges;

/**
 * Controls whether the info window for this marker should be redrawn every frame.
 *
 * Note that when this changes from NO to YES, the info window is guaranteed to be redrawn next
 * frame.
 *
 * Defaults to NO.
 */
@property(nonatomic) BOOL tracksInfoWindowChanges;

/**
 * The ground anchor specifies the point in the icon image that is anchored to the marker's position
 * on the Earth's surface. This point is specified within the continuous space [0.0, 1.0] x [0.0,
 * 1.0], where (0,0) is the top-left corner of the image, and (1,1) is the bottom-right corner.
 *
 * If the image has non-zero alignmentRectInsets, the top-left and bottom-right mentioned above
 * refer to the inset section of the image.
 */
@property(nonatomic) CGPoint groundAnchor;

/**
 * The info window anchor specifies the point in the icon image at which to anchor the info window,
 * which will be displayed directly above this point. This point is specified within the same space
 * as groundAnchor.
 */
@property(nonatomic) CGPoint infoWindowAnchor;

/**
 * Controls the animation used when this marker is placed on a GMSMapView (default
 * kGMSMarkerAnimationNone, no animation).
 */
@property(nonatomic) GMSMarkerAnimation appearAnimation;

/** Controls whether this marker can be dragged interactively (default NO). */
@property(nonatomic, getter=isDraggable) BOOL draggable;

/**
 * Controls whether this marker should be flat against the Earth's surface (YES) or a billboard
 * facing the camera (NO, default).
 */
@property(nonatomic, getter=isFlat) BOOL flat;

/**
 * Sets the rotation of the marker in degrees clockwise about the marker's anchor point. The axis of
 * rotation is perpendicular to the marker. A rotation of 0 corresponds to the default position of
 * the marker. Animated.
 *
 * When the marker is flat on the map, the default position is north aligned and the rotation is
 * such that the marker always remains flat on the map. When the marker is a billboard, the default
 * position is pointing up and the rotation is such that the marker is always facing the camera.
 */
@property(nonatomic) CLLocationDegrees rotation;

/** Sets the opacity of the marker, between 0 (completely transparent) and 1 (default) inclusive. */
@property(nonatomic) float opacity;

/** Provides the Core Animation layer for this GMSMarker. */
@property(nonatomic, readonly) GMSMarkerLayer *layer;

/**
 * The |panoramaView| specifies which panorama view will attempt to show this marker.  Note that if
 * the marker's |position| is too far away from the |panoramaView|'s current panorama location, it
 * will not be displayed as it will be too small.
 *
 * Can be set to nil to remove the marker from any current panorama view it is attached to.
 *
 * A marker can be shown on both a panorama and a map at the same time.
 */
@property(nonatomic, weak, nullable) GMSPanoramaView *panoramaView;

/** Convenience constructor for a default marker. */
+ (instancetype)markerWithPosition:(CLLocationCoordinate2D)position;

/** Creates a tinted version of the default marker image for use as an icon. */
+ (UIImage *)markerImageWithColor:(nullable UIColor *)color;

@end

/**
 * The default position of the ground anchor of a GMSMarker: the center bottom point of the marker
 * icon.
 */
FOUNDATION_EXTERN const CGPoint kGMSMarkerDefaultGroundAnchor;

/**
 * The default position of the info window anchor of a GMSMarker: the center top point of the marker
 * icon.
 */
FOUNDATION_EXTERN const CGPoint kGMSMarkerDefaultInfoWindowAnchor;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMarker.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMarkerAnimation.h
===
//
//  GMSMarkerAnimation.h
//  Google Maps SDK for iOS
//
//  Copyright 2021 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * \defgroup MarkerAnimation GMSMarkerAnimation
 * @{
 */

/** Animation types for GMSMarker. */
typedef NS_ENUM(NSUInteger, GMSMarkerAnimation) {
  /** No animation (default). */
  kGMSMarkerAnimationNone = 0,

  /** The marker will pop from its groundAnchor when added. */
  kGMSMarkerAnimationPop,

  /** The marker will fade in when added. */
  kGMSMarkerAnimationFadeIn,
};

/**@}*/

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMarkerAnimation.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMarkerLayer.h
===
//
//  GMSMarkerLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <QuartzCore/QuartzCore.h>

#import "GMSOverlayLayer.h"


NS_ASSUME_NONNULL_BEGIN

/**
 * GMSMarkerLayer is a subclass of GMSOverlayLayer, available on a per-marker basis, that allows
 * animation of several properties of its associated GMSMarker.
 *
 * Note that this CALayer is never actually rendered directly, as GMSMapView is provided entirely
 * via an OpenGL layer. As such, adjustments or animations to 'default' properties of CALayer will
 * not have any effect.
 */
@interface GMSMarkerLayer : GMSOverlayLayer

/** Latitude, part of |position| on GMSMarker. */
@property(nonatomic) CLLocationDegrees latitude;

/** Longitude, part of |position| on GMSMarker. */
@property(nonatomic) CLLocationDegrees longitude;

/** Rotation, as per GMSMarker. */
@property(nonatomic) CLLocationDegrees rotation;

/** Opacity, as per GMSMarker. */
@property(atomic) float opacity;


@end

extern NSString *const kGMSMarkerLayerLatitude;
extern NSString *const kGMSMarkerLayerLongitude;
extern NSString *const kGMSMarkerLayerRotation;
extern NSString *const kGMSMarkerLayerOpacity;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMarkerLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMutablePath.h
===
//
//  GMSMutablePath.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <Foundation/Foundation.h>

#import "GMSPath.h"

/**
 * GMSMutablePath is a dynamic (resizable) array of CLLocationCoordinate2D. All coordinates must be
 * valid. GMSMutablePath is the mutable counterpart to the immutable GMSPath.
 */
@interface GMSMutablePath : GMSPath

/** Adds |coord| at the end of the path. */
- (void)addCoordinate:(CLLocationCoordinate2D)coord;

/** Adds a new CLLocationCoordinate2D instance with the given lat/lng. */
- (void)addLatitude:(CLLocationDegrees)latitude longitude:(CLLocationDegrees)longitude;

/**
 * Inserts |coord| at |index|.
 *
 * If this is smaller than the size of the path, shifts all coordinates forward by one. Otherwise,
 * behaves as replaceCoordinateAtIndex:withCoordinate:.
 */
- (void)insertCoordinate:(CLLocationCoordinate2D)coord atIndex:(NSUInteger)index;

/**
 * Replace the coordinate at |index| with |coord|. If |index| is after the end, grows the array with
 * an undefined coordinate.
 */
- (void)replaceCoordinateAtIndex:(NSUInteger)index withCoordinate:(CLLocationCoordinate2D)coord;

/**
 * Remove entry at |index|.
 *
 * If |index| < count decrements size. If |index| >= count this is a silent no-op.
 */
- (void)removeCoordinateAtIndex:(NSUInteger)index;

/**
 * Removes the last coordinate of the path.
 *
 * If the array is non-empty decrements size. If the array is empty, this is a silent no-op.
 */
- (void)removeLastCoordinate;

/** Removes all coordinates in this path. */
- (void)removeAllCoordinates;

@end

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSMutablePath.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSOrientation.h
===
//
//  GMSOrientation.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

/**
 * GMSOrientation is a tuple of heading and pitch used to control the viewing
 * direction of a GMSPanoramaCamera.
 */
typedef struct {
  /**
   * The camera heading (horizontal angle) in degrees. Type used to represent
   * the direction in degrees from 0 to 359.9. True north is 0, east is 90,
   * south is 180, and west is 270.
   */
  const CLLocationDirection heading;

  /**
   * The camera pitch (vertical angle), in degrees from the horizon. The |pitch|
   * range is [-90,90], although it is possible that not the full range is
   * supported. A positive value looks up and a negative value looks down.
   */
  const double pitch;
} GMSOrientation;

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Returns a GMSOrientation with the given |heading| and |pitch|.
 *
 * @related GMSOrientation
 */
inline static GMSOrientation GMSOrientationMake(CLLocationDirection heading,
                                                double pitch) {
  GMSOrientation orientation = {heading, pitch};
  return orientation;
}

#ifdef __cplusplus
}
#endif

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSOrientation.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSOverlay.h
===
//
//  GMSOverlay.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

@class GMSMapView;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSOverlay is an abstract class that represents some overlay that may be attached to a specific
 * GMSMapView. It may not be instantiated directly; instead, instances of concrete overlay types
 * should be created directly (such as GMSMarker, GMSPolyline, and GMSPolygon).
 *
 * This supports the NSCopying protocol; [overlay_ copy] will return a copy of the overlay type, but
 * with |map| set to nil.
 */
@interface GMSOverlay : NSObject <NSCopying>

/**
 * Title, a short description of the overlay. Some overlays, such as markers, will display the title
 * on the map. The title is also the default accessibility text.
 */
@property(nonatomic, copy, nullable) NSString *title;

/**
 * The map this overlay is on. Setting this property will add the overlay to the map. Setting it to
 * nil removes this overlay from the map. An overlay may be active on at most one map at any given
 * time.
 */
@property(nonatomic, weak, nullable) GMSMapView *map;

/**
 * If this overlay should cause tap notifications. Some overlays, such as markers, will default to
 * being tappable.
 */
@property(nonatomic, getter=isTappable) BOOL tappable;

/**
 * Higher |zIndex| value overlays will be drawn on top of lower |zIndex| value tile layers and
 * overlays.  Equal values result in undefined draw ordering.  Markers are an exception that
 * regardless of |zIndex|, they will always be drawn above tile layers and other non-marker
 * overlays; they are effectively considered to be in a separate z-index group compared to other
 * overlays.
 */
@property(nonatomic) int zIndex;

/**
 * Overlay data. You can use this property to associate an arbitrary object with this overlay.
 * Google Maps SDK for iOS neither reads nor writes this property.
 *
 * Note that userData should not hold any strong references to any Maps objects, otherwise a retain
 * cycle may be created (preventing objects from being released).
 */
@property(nonatomic, nullable) id userData;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSOverlay.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSOverlayLayer.h
===
//
//  GMSOverlayLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2018 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <QuartzCore/QuartzCore.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSOverlayLayer is a custom subclass of CALayer, and an abstract baseclass for GMSOverlay layers
 * that allow custom animations.
 *
 * Note that this CALayer or any subclass are never actually rendered directly, as GMSMapView is
 * provided entirely via an OpenGL layer. As such, adjustments or animations to 'default' properties
 * of CALayer will not have any effect.
 *
 * This is an implementation detail and it should not be instantiated directly.
 */
@interface GMSOverlayLayer : CALayer

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSOverlayLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanorama.h
===
//
//  GMSPanorama.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

@class GMSPanoramaLink;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPanorama represents metadata for a specific panorama on the Earth. This class is not
 * instantiable directly and is obtained via GMSPanoramaService or GMSPanoramaView.
 */
@interface GMSPanorama : NSObject

/** The precise location of this panorama. */
@property(nonatomic, readonly) CLLocationCoordinate2D coordinate;

/** The ID of this panorama. Panoramas may change ID over time, so this should not be persisted */
@property(nonatomic, copy, readonly) NSString *panoramaID;

/** An array of GMSPanoramaLink describing the neighboring panoramas. */
@property(nonatomic, copy, readonly) NSArray<GMSPanoramaLink *> *links;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanorama.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaCamera.h
===
//
//  GMSPanoramaCamera.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

#import "GMSOrientation.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPanoramaCamera is used to control the viewing direction of a GMSPanoramaView. It does not
 * contain information about which particular panorama should be displayed.
 */
@interface GMSPanoramaCamera : NSObject

/**
 * Designated initializer. Configures this GMSPanoramaCamera with |orientation|, |zoom| and |FOV|.
 * These values will be clamped to acceptable ranges.
 */
- (id)initWithOrientation:(GMSOrientation)orientation zoom:(float)zoom FOV:(double)FOV;

/**
 * Convenience constructor specifying heading and pitch as part of |orientation|, plus |zoom| and
 * default field of view (90 degrees).
 */
+ (instancetype)cameraWithOrientation:(GMSOrientation)orientation zoom:(float)zoom;

/**
 * Convenience constructor specifying |heading|, |pitch|, |zoom| with default field of view (90
 * degrees).
 */
+ (instancetype)cameraWithHeading:(CLLocationDirection)heading pitch:(double)pitch zoom:(float)zoom;

/**
 * Convenience constructor for GMSPanoramaCamera, specifying all camera properties with heading and
 * pitch as part of |orientation|.
 */
+ (instancetype)cameraWithOrientation:(GMSOrientation)orientation zoom:(float)zoom FOV:(double)FOV;

/** Convenience constructor for GMSPanoramaCamera, specifying all camera properties. */
+ (instancetype)cameraWithHeading:(CLLocationDirection)heading
                            pitch:(double)pitch
                             zoom:(float)zoom
                              FOV:(double)FOV;

/**
 * The field of view (FOV) encompassed by the larger dimension (width or height) of the view in
 * degrees at zoom 1. This is clamped to the range [1, 160] degrees, and has a default value of 90.
 *
 * Lower FOV values produce a zooming in effect; larger FOV values produce an fisheye effect.
 *
 * Note: This is not the displayed FOV if zoom is anything other than 1.  User zoom gestures
 * control the zoom property, not this property.
 */
@property(nonatomic, readonly) double FOV;

/**
 * Adjusts the visible region of the screen.  A zoom of N will show the same area as the central
 * width/N height/N area of what is shown at zoom 1.
 *
 * Zoom is clamped to the implementation defined range [1, 5].
 */
@property(nonatomic, readonly) float zoom;

/** The camera orientation, which groups together heading and pitch. */
@property(nonatomic, readonly) GMSOrientation orientation;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaCamera.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaCameraUpdate.h
===
//
//  GMSPanoramaCameraUpdate.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreGraphics/CoreGraphics.h>
#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPanoramaCameraUpdate represents an update that may be applied to a GMSPanoramaView.
 * It encapsulates some logic for modifying the current camera.
 * It should only be constructed using the factory helper methods below.
 */
@interface GMSPanoramaCameraUpdate : NSObject

/** Returns an update that increments the camera heading with |deltaHeading|. */
+ (GMSPanoramaCameraUpdate *)rotateBy:(CGFloat)deltaHeading;

/** Returns an update that sets the camera heading to the given value. */
+ (GMSPanoramaCameraUpdate *)setHeading:(CGFloat)heading;

/** Returns an update that sets the camera pitch to the given value. */
+ (GMSPanoramaCameraUpdate *)setPitch:(CGFloat)pitch;

/** Returns an update that sets the camera zoom to the given value. */
+ (GMSPanoramaCameraUpdate *)setZoom:(CGFloat)zoom;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaCameraUpdate.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaLayer.h
===
//
//  GMSPanoramaLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <QuartzCore/QuartzCore.h>

#import "GMSCALayer.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * kGMSLayerPanoramaHeadingKey ranges from [0, 360).
 *
 * @related GMSPanoramaLayer
 */
extern NSString *const kGMSLayerPanoramaHeadingKey;

/**
 * kGMSLayerPanoramaPitchKey ranges from [-90, 90].
 *
 * @related GMSPanoramaLayer
 */
extern NSString *const kGMSLayerPanoramaPitchKey;

/**
 * kGMSLayerCameraZoomLevelKey ranges from [1, 5], default 1.
 *
 * @related GMSPanoramaLayer
 */
extern NSString *const kGMSLayerPanoramaZoomKey;

/**
 * kGMSLayerPanoramaFOVKey ranges from [1, 160] (in degrees), default 90.
 *
 * @related GMSPanoramaLayer
 */
extern NSString *const kGMSLayerPanoramaFOVKey;

/**
 * GMSPanoramaLayer is a custom subclass of CALayer, provided as the layer class on GMSPanoramaView.
 * This layer should not be instantiated directly.
 */
@interface GMSPanoramaLayer : GMSCALayer
@property(nonatomic) CLLocationDirection cameraHeading;
@property(nonatomic) double cameraPitch;
@property(nonatomic) float cameraZoom;
@property(nonatomic) double cameraFOV;
@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaLink.h
===
//
//  GMSPanoramaLink.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreGraphics/CoreGraphics.h>
#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** Links from a GMSPanorama to neighboring panoramas. */
@interface GMSPanoramaLink : NSObject

/** Angle of the neighboring panorama, clockwise from north in degrees. */
@property(nonatomic) CGFloat heading;

/** Panorama ID for the neighboring panorama. Do not store this persistenly, it changes in time. */
@property(nonatomic, copy) NSString *panoramaID;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaLink.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaService.h
===
//
//  GMSPanoramaService.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

#import "GMSPanoramaSource.h"

@class GMSPanorama;

NS_ASSUME_NONNULL_BEGIN

/**
 * Callback for when a panorama metadata becomes available.
 * If an error occurred, |panorama| is nil and |error| is not nil.
 * Otherwise, |panorama| is not nil and |error| is nil.
 *
 * @related GMSPanoramaService
 */
typedef void (^GMSPanoramaCallback)(GMSPanorama *_Nullable panorama, NSError *_Nullable error);

/**
 * GMSPanoramaService can be used to request panorama metadata even when a GMSPanoramaView is not
 * active.
 *
 * Get an instance like this: [[GMSPanoramaService alloc] init].
 */
@interface GMSPanoramaService : NSObject

/**
 * Retrieves information about a panorama near the given |coordinate|.
 *
 * This is an asynchronous request, |callback| will be called with the result.
 */
- (void)requestPanoramaNearCoordinate:(CLLocationCoordinate2D)coordinate
                             callback:(GMSPanoramaCallback)callback;

/**
 * Similar to requestPanoramaNearCoordinate:callback: but allows specifying a search radius (meters)
 * around |coordinate|.
 */
- (void)requestPanoramaNearCoordinate:(CLLocationCoordinate2D)coordinate
                               radius:(NSUInteger)radius
                             callback:(GMSPanoramaCallback)callback;

/**
 * Similar to requestPanoramaNearCoordinate:callback: but allows specifying the panorama source type
 * near the given |coordinate|.
 *
 * This API is experimental and may not always filter by source.
 */
- (void)requestPanoramaNearCoordinate:(CLLocationCoordinate2D)coordinate
                               source:(GMSPanoramaSource)source
                             callback:(GMSPanoramaCallback)callback;

/**
 * Similar to requestPanoramaNearCoordinate:callback: but allows specifying a search radius (meters)
 * and the panorama source type near the given |coordinate|.
 *
 * This API is experimental and may not always filter by source.
 */
- (void)requestPanoramaNearCoordinate:(CLLocationCoordinate2D)coordinate
                               radius:(NSUInteger)radius
                               source:(GMSPanoramaSource)source
                             callback:(GMSPanoramaCallback)callback;

/**
 * Retrieves information about a panorama with the given |panoramaID|.
 *
 * |callback| will be called with the result. Only panoramaIDs obtained from the Google Maps SDK for
 * iOS are supported.
 */
- (void)requestPanoramaWithID:(NSString *)panoramaID callback:(GMSPanoramaCallback)callback;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaService.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaSource.h
===
//
//  GMSPanoramaSource.h
//  Google Maps SDK for iOS
//
//  Copyright 2017 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

/**
 * \defgroup PanoramaSource GMSPanoramaSource
 * @{
 */

/**
 * Source types for Panoramas. Used to specify the source of a StreetView Panorama.
 *
 * This API is experimental. Results may not always match expectations.
 */
typedef NS_ENUM(NSUInteger, GMSPanoramaSource) {
  /** Panoramas of locations either inside or outside. */
  kGMSPanoramaSourceDefault = 0,

  /** Panoramas of locations outside. */
  kGMSPanoramaSourceOutside,
};

/**@}*/

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaSource.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaView.h
===
//
//  GMSPanoramaView.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>

#import "GMSOrientation.h"
#import "GMSPanoramaLayer.h"
#import "GMSPanoramaSource.h"

@class GMSMarker;
@class GMSPanorama;
@class GMSPanoramaCamera;
@class GMSPanoramaCameraUpdate;
@class GMSPanoramaView;

NS_ASSUME_NONNULL_BEGIN

/** Delegate for events on GMSPanoramaView. */
@protocol GMSPanoramaViewDelegate <NSObject>
@optional

/**
 * Called when starting a move to another panorama.
 *
 * This can be the result of interactive navigation to a neighbouring panorama.
 *
 * At the moment this method is called, the |view|.panorama is still pointing to the old panorama,
 * as the new panorama identified by |panoID| is not yet resolved. panoramaView:didMoveToPanorama:
 * will be called when the new panorama is ready.
 */
- (void)panoramaView:(GMSPanoramaView *)view willMoveToPanoramaID:(NSString *)panoramaID;

/** This is invoked every time the |view|.panorama property changes. */
- (void)panoramaView:(GMSPanoramaView *)view didMoveToPanorama:(nullable GMSPanorama *)panorama;

/**
 * Called when the panorama change was caused by invoking moveToPanoramaNearCoordinate:. The
 * coordinate passed to that method will also be passed here.
 */
- (void)panoramaView:(GMSPanoramaView *)view
    didMoveToPanorama:(GMSPanorama *)panorama
       nearCoordinate:(CLLocationCoordinate2D)coordinate;

/** Called when moveNearCoordinate: produces an error. */
- (void)panoramaView:(GMSPanoramaView *)view
                   error:(NSError *)error
    onMoveNearCoordinate:(CLLocationCoordinate2D)coordinate;

/** Called when moveToPanoramaID: produces an error. */
- (void)panoramaView:(GMSPanoramaView *)view
                 error:(NSError *)error
    onMoveToPanoramaID:(NSString *)panoramaID;

/**
 * Called repeatedly during changes to the camera on GMSPanoramaView. This may not be called for all
 * intermediate camera values, but is always called for the final position of the camera after an
 * animation or gesture.
 */
- (void)panoramaView:(GMSPanoramaView *)panoramaView didMoveCamera:(GMSPanoramaCamera *)camera;

/**
 * Called when a user has tapped on the GMSPanoramaView, but this tap was not consumed (taps may be
 * consumed by e.g., tapping on a navigation arrow).
 */
- (void)panoramaView:(GMSPanoramaView *)panoramaView didTap:(CGPoint)point;

/**
 * Called after a marker has been tapped.  May return YES to indicate the event has been fully
 * handled and suppress any default behavior.
 */
- (BOOL)panoramaView:(GMSPanoramaView *)panoramaView didTapMarker:(GMSMarker *)marker;

/**
 * Called when the panorama tiles for the current view have just been requested and are beginning to
 * load.
 */
- (void)panoramaViewDidStartRendering:(GMSPanoramaView *)panoramaView;

/**
 * Called when the panorama tiles have been loaded (or permanently failed to load) and rendered on
 * screen.
 */
- (void)panoramaViewDidFinishRendering:(GMSPanoramaView *)panoramaView;

@end

/**
 * A panorama is used to display Street View imagery. It should be constructed via [[GMSPanoramaView
 * alloc] initWithFrame:], and configured post-initialization.
 *
 * All properties and methods should be accessed on the main thread, similar to all UIKit objects.
 * The GMSPanoramaViewDelegate methods will also be called back only on the main thread.
 *
 * The backgroundColor of this view is shown while no panorama is visible, such as while it is
 * loading or if the panorama is later set to nil. The alpha color of backgroundColor is not
 * supported.
 */
@interface GMSPanoramaView : UIView

/**
 * The panorama to display; setting it will transition to a new panorama. This is animated, except
 * for the initial panorama.
 *
 * Can be set to nil to clear the view.
 */
@property(nonatomic, nullable) GMSPanorama *panorama;

/** GMSPanoramaView delegate. */
@property(nonatomic, weak, nullable) IBOutlet id<GMSPanoramaViewDelegate> delegate;

/**
 * Sets the preference for whether all gestures should be enabled (default) or disabled.
 *
 * This does not limit programmatic movement of the camera or control of the panorama.
 */
- (void)setAllGesturesEnabled:(BOOL)enabled;

/**
 * Controls whether orientation gestures are enabled (default) or disabled. If enabled, users may
 * use gestures to change the orientation of the camera.
 *
 * This does not limit programmatic movement of the camera.
 */
@property(nonatomic) BOOL orientationGestures;

/**
 * Controls whether zoom gestures are enabled (default) or disabled. If enabled, users may pinch to
 * zoom the camera.
 *
 * This does not limit programmatic movement of the camera.
 */
@property(nonatomic) BOOL zoomGestures;

/**
 * Controls whether navigation gestures are enabled (default) or disabled. If enabled, users may use
 * a single tap on navigation links or double tap the view to change panoramas.
 *
 * This does not limit programmatic control of the panorama.
 */
@property(nonatomic) BOOL navigationGestures;

/**
 * Controls whether the tappable navigation links are hidden or visible (default). Hidden navigation
 * links cannot be tapped.
 */
@property(nonatomic) BOOL navigationLinksHidden;

/** Controls whether the street name overlays are hidden or visible (default). */
@property(nonatomic) BOOL streetNamesHidden;

/**
 * Controls the panorama's camera. Setting a new camera here jumps to the new camera value, with no
 * animation.
 */
@property(nonatomic) GMSPanoramaCamera *camera;

/** Accessor for the custom CALayer type used for the layer. */
@property(nonatomic, readonly, retain) GMSPanoramaLayer *layer;

/** Animates the camera of this GMSPanoramaView to |camera|, over |duration| (specified in seconds).
 */
- (void)animateToCamera:(GMSPanoramaCamera *)camera animationDuration:(NSTimeInterval)duration;

/** Modifies the camera according to |cameraUpdate|, over |duration| (specified in seconds). */
- (void)updateCamera:(GMSPanoramaCameraUpdate *)cameraUpdate
    animationDuration:(NSTimeInterval)duration;

/**
 * Requests a panorama near |coordinate|.
 *
 * Upon successful completion panoramaView:didMoveToPanorama: and
 * panoramaView:didMoveToPanorama:nearCoordinate: will be sent to GMSPanoramaViewDelegate.
 *
 * On error panoramaView:error:onMoveNearCoordinate: will be sent.
 *
 * Repeated calls to moveNearCoordinate: result in the previous pending (incomplete) transitions
 * being cancelled -- only the most recent of moveNearCoordinate: and moveToPanoramaId: will proceed
 * and generate events.
 */
- (void)moveNearCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Similar to moveNearCoordinate: but allows specifying a search radius (meters) around
 * |coordinate|.
 */
- (void)moveNearCoordinate:(CLLocationCoordinate2D)coordinate radius:(NSUInteger)radius;

/**
 * Similar to moveNearCoordinate: but allows specifying a source near |coordinate|.
 *
 * This API is experimental and may not always filter by source.
 */
- (void)moveNearCoordinate:(CLLocationCoordinate2D)coordinate source:(GMSPanoramaSource)source;

/**
 * Similar to moveNearCoordinate: but allows specifying a search radius (meters) around
 * |coordinate| and a source.
 *
 * This API is experimental and may not always filter by source.
 */
- (void)moveNearCoordinate:(CLLocationCoordinate2D)coordinate
                    radius:(NSUInteger)radius
                    source:(GMSPanoramaSource)source;

/**
 * Requests a panorama with |panoramaID|.
 *
 * Upon successful completion panoramaView:didMoveToPanorama: will be sent to
 * GMSPanoramaViewDelegate.
 *
 * On error panoramaView:error:onMoveToPanoramaID: will be sent.
 *
 * Repeated calls to moveToPanoramaID: result in the previous pending (incomplete) transitions being
 * cancelled -- only the most recent of moveNearCoordinate: and moveToPanoramaId: will proceed and
 * generate events.
 *
 * Only panoramaIDs obtained from the Google Maps SDK for iOS are supported.
 */
- (void)moveToPanoramaID:(NSString *)panoramaID;

/**
 * For the current view, returns the screen point the |orientation| points through.  This value may
 * be outside the view for forward facing orientations which are far enough away from straight
 * ahead.
 *
 * The result will contain NaNs for camera orientations which point away from the view, where the
 * implied screen point would have had a negative distance from the camera in the direction of
 * orientation.
 */
- (CGPoint)pointForOrientation:(GMSOrientation)orientation;

/**
 * Given a point for this view, returns the current camera orientation pointing through that screen
 * location.  At the center of this view, the returned GMSOrientation will be approximately equal to
 * that of the current GMSPanoramaCamera.
 */
- (GMSOrientation)orientationForPoint:(CGPoint)point;

/**
 * Convenience constructor for GMSPanoramaView, which searches for and displays a GMSPanorama near
 * |coordinate|. This performs a similar action to that of moveNearCoordinate:, and will call the
 * same delegate methods.
 */
+ (instancetype)panoramaWithFrame:(CGRect)frame nearCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Similar to panoramaWithFrame:nearCoordinate: but allows specifying a search radius (meters)
 * around |coordinate|.
 */
+ (instancetype)panoramaWithFrame:(CGRect)frame
                   nearCoordinate:(CLLocationCoordinate2D)coordinate
                           radius:(NSUInteger)radius;

/**
 * Convenience constructor for GMSPanoramaView, which searches for and displays a GMSPanorama near
 * |coordinate|. This performs a similar action to that of moveNearCoordinate:source, and will call
 * the same delegate methods.
 *
 * This API is experimental and may not always filter by source.
 */
+ (instancetype)panoramaWithFrame:(CGRect)frame
                   nearCoordinate:(CLLocationCoordinate2D)coordinate
                           source:(GMSPanoramaSource)source;
/**
 * Convenience constructor for GMSPanoramaView, which searches for and displays a GMSPanorama near
 * |coordinate|. This performs a similar action to that of moveNearCoordinate:radius:source, and
 * will call the same delegate methods.
 *
 * This API is experimental and may not always filter by source.
 */
+ (instancetype)panoramaWithFrame:(CGRect)frame
                   nearCoordinate:(CLLocationCoordinate2D)coordinate
                           radius:(NSUInteger)radius
                           source:(GMSPanoramaSource)source;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPanoramaView.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPath.h
===
//
//  GMSPath.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPath encapsulates an immutable array of CLLocationCooordinate2D. All the coordinates of a
 * GMSPath must be valid. The mutable counterpart is GMSMutablePath.
 */
@interface GMSPath : NSObject <NSCopying, NSMutableCopying>

/** Convenience constructor for an empty path. */
+ (instancetype)path;

/** Initializes a newly allocated path with the contents of another GMSPath. */
- (id)initWithPath:(GMSPath *)path;

/** Get size of path. */
- (NSUInteger)count;

/** Returns kCLLocationCoordinate2DInvalid if |index| >= count. */
- (CLLocationCoordinate2D)coordinateAtIndex:(NSUInteger)index;

/**
 * Initializes a newly allocated path from |encodedPath|. This format is described at:
 * https://developers.google.com/maps/documentation/utilities/polylinealgorithm
 */
+ (nullable instancetype)pathFromEncodedPath:(NSString *)encodedPath;

/** Returns an encoded string of the path in the format described above. */
- (NSString *)encodedPath;

/**
 * Returns a new path obtained by adding |deltaLatitude| and |deltaLongitude| to each coordinate
 * of the current path. Does not modify the current path.
 */
- (instancetype)pathOffsetByLatitude:(CLLocationDegrees)deltaLatitude
                           longitude:(CLLocationDegrees)deltaLongitude;

@end

/**
 * kGMSEquatorProjectedMeter may be useful when specifying lengths for segment in "projected" units.
 * The value of kGMSEquatorProjectedMeter, 1/(pi * EarthRadius), represents the length of one meter
 * at the equator in projected units. For example to specify a projected length that corresponds
 * to 100km at the equator use 100000 * kGMSEquatorProjectedMeter.
 * See [GMSPath segmentsForLength:kind:], [GMSPath lengthOfKind:] and kGMSLengthProjected.
 */
extern const double kGMSEquatorProjectedMeter;

/**
 * \defgroup LengthKind GMSLengthKind
 * @{
 */

/**
 * GMSLengthKind indicates the type of a length value, which can be geodesic (in meters), rhumb
 * length (in meters) and projected length (in GMSMapPoint units).
 */
typedef NS_ENUM(NSUInteger, GMSLengthKind) {
  /*
   * Geodesic length, in meters, along geodesic segments. May be useful, for example, to specify
   * lengths along the the trajectory of airplanes or ships.
   */
  kGMSLengthGeodesic,

  /*
   * Rhumb length, in meters, along rhumb (straight line) segments. May be useful, for example, to
   * draw a scale bar on a map. The visual size of a segment of a given length depens on the
   * latitude.
   */
  kGMSLengthRhumb,

  /*
   * Length in projected space, along rhumb segments. Projected length uses the same units as
   * GMSMapPoint - the Earth equator circumference has length 2. It is possible to specify projected
   * length in units corresponding to 1 meter at the equator by multiplying with
   * kGMSEquatorProjectedMeter, equal to 1/(pi * EarthRadius).
   *
   * Projected length may be useful, for example, to specify segments with the same visual length
   * regardless of latitude.
   */
  kGMSLengthProjected
};

/**@}*/

/** This category is needed in order to have the declaration of GMSLengthKind after GMSPath. */
@interface GMSPath (GMSPathLength)

/**
 * Returns the fractional number of segments along the path that correspond to |length|,
 * interpreted according to |kind|. See GMSLengthKind.
 */
- (double)segmentsForLength:(CLLocationDistance)length kind:(GMSLengthKind)kind;

/** Returns the length of the path, according to |kind|. See GMSLengthKind. */
- (CLLocationDistance)lengthOfKind:(GMSLengthKind)kind;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPath.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPinImage.h
===
//
//  GMSPinImage.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
@class GMSPinImageOptions;
NS_ASSUME_NONNULL_BEGIN

/** Provides a custom pin image for an advanced marker. */
@interface GMSPinImage : UIImage

- (instancetype)init NS_UNAVAILABLE;

/**
 * Returns an image style with the given pin image options that can be used as a standalone UIImage,
 * or as the icon of an Advanced Marker only.
 *
 * @param options A @c GMSPinImageOptions object to use to customize the marker image.
 * @return An image configured with the provided options.
 */
+ (GMSPinImage *)pinImageWithOptions:(GMSPinImageOptions *)options;

@end
NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPinImage.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPinImageGlyph.h
===
//
//  GMSPinImageGlyph.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
NS_ASSUME_NONNULL_BEGIN

/** Provides a custom pin image glyph for an advanced marker. */
@interface GMSPinImageGlyph : NSObject

- (instancetype)init NS_UNAVAILABLE;

@property(nonatomic, nullable, readonly) NSString *text;
@property(nonatomic, nullable, readonly) UIColor *textColor;
@property(nonatomic, nullable, readonly) UIImage *image;
@property(nonatomic, nullable, readonly) UIColor *glyphColor;

/**
 * Returns a glyph model with the given text.
 *
 * @param text A @c NSString object to use as the glyph.
 * @param textColor A @c UIColor object to use to render the text.
 * @return An initialized glyph model.
 */
- (GMSPinImageGlyph *)initWithText:(NSString *)text textColor:(UIColor *)textColor;

/**
 * Returns a glyph model with the given text.
 *
 * @param image A @c UIImage object to use as the glyph.
 * @return An initialized glyph model.
 */
- (GMSPinImageGlyph *)initWithImage:(UIImage *)image;

/**
 * Returns a glyph model with the given glyph color.
 *
 * @param glyphColor A @c UIColor object to use to render the glyph.
 * @return An initialized glyph model.
 */
- (GMSPinImageGlyph *)initWithGlyphColor:(UIColor *)glyphColor;

@end
NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPinImageGlyph.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPinImageOptions.h
===
//
//  GMSPinImageOptions.h
//  Google Maps SDK for iOS
//
//  Copyright 2023 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>

@class GMSPinImageGlyph;
NS_ASSUME_NONNULL_BEGIN

/** Provides pin image customization for an advanced marker. */
@interface GMSPinImageOptions : NSObject

/** An object representing a String or Image to replace the glyph on the marker */
@property(nonatomic, nullable) GMSPinImageGlyph *glyph;

/** The color used to fill the marker shape with. */
@property(nonatomic, nullable) UIColor *backgroundColor;

/** The color used for the border of the marker shape. */
@property(nonatomic, nullable) UIColor *borderColor;

@end
NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPinImageOptions.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPlaceFeature.h
===
//
//  GMSPlaceFeature.h
//  Google Maps SDK for iOS
//
//  Copyright 2022 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>


#import "GMSFeature.h"

NS_ASSUME_NONNULL_BEGIN

/** An interface representing a place feature (a feature with a Place ID). */
NS_SWIFT_NAME(PlaceFeature)
@interface GMSPlaceFeature : NSObject <GMSFeature>

@property(nonatomic, readonly) GMSFeatureType featureType;

@property(nonatomic, readonly) NSString *placeID;

/**
 * Create a feature layer instance for testing.
 *
 * This method should be used for your unit tests only. In production, @c GMSPlaceFeature instances
 * should only be created by the SDK.
 */
- (instancetype)initWithFeatureType:(GMSFeatureType)featureType placeID:(NSString *)placeID;

- (instancetype)init NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPlaceFeature.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPolygon.h
===
//
//  GMSPolygon.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSOverlay.h"

@class GMSPath;
@class GMSPolygonLayer;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPolygon defines a polygon that appears on the map. A polygon (like a polyline) defines a
 * series of connected coordinates in an ordered sequence; additionally, polygons form a closed loop
 * and define a filled region.
 */
@interface GMSPolygon : GMSOverlay

/** The path that describes this polygon. The coordinates composing the path must be valid. */
@property(nonatomic, copy, nullable) GMSPath *path;

/**
 * The array of GMSPath instances that describes any holes in this polygon. The coordinates
 * composing each path must be valid.
 */
@property(nonatomic, copy, nullable) NSArray<GMSPath *> *holes;

/** The width of the polygon outline in screen points. Defaults to 1. */
@property(nonatomic) CGFloat strokeWidth;

/** The color of the polygon outline. Defaults to nil. */
@property(nonatomic, nullable) UIColor *strokeColor;

/** The fill color. Defaults to blueColor. */
@property(nonatomic, nullable) UIColor *fillColor;

/** Whether this polygon should be rendered with geodesic correction. */
@property(nonatomic) BOOL geodesic;

/** Provides the Core Animation layer for this GMSPolygon. */
@property(nonatomic, readonly) GMSPolygonLayer *layer;

/**
 * Convenience constructor for GMSPolygon for a particular path. Other properties will have default
 * values.
 */
+ (instancetype)polygonWithPath:(nullable GMSPath *)path;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPolygon.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPolygonLayer.h
===
//
//  GMSPolygonLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2018 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreLocation/CoreLocation.h>
#import <UIKit/UIKit.h>

#import "GMSOverlayLayer.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPolygonLayer is a subclass of GMSOverlayLayer, available on a per-polygon basis, that allows
 * animation of several properties of its associated GMSPolygon.
 *
 * Note that this CALayer is never actually rendered directly, as GMSMapView is provided entirely
 * via an OpenGL layer. As such, adjustments or animations to 'default' properties of CALayer will
 * not have any effect.
 */
@interface GMSPolygonLayer : GMSOverlayLayer

/** The width of the polygon outline in screen points. */
@property(nonatomic) CGFloat strokeWidth;

/**
 * The color of the polygon outline. This is an assign property, there is an expectation for the
 * GMSPolygon to own the reference if necessary.
 */
@property(nonatomic, assign, nullable) CGColorRef strokeColor;

/**
 * The fill color. This is an assign property, there is an expectation for the GMSPolygon to own the
 * reference if necessary.
 */
@property(nonatomic, assign, nullable) CGColorRef fillColor;

@end

extern NSString *const kGMSPolygonLayerStrokeWidth;
extern NSString *const kGMSPolygonLayerStrokeColor;
extern NSString *const kGMSPolygonLayerFillColor;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPolygonLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPolyline.h
===
//
//  GMSPolyline.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSOverlay.h"
#import "GMSStyleSpan.h"

@class GMSPath;

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSPolyline specifies the available options for a polyline that exists on the Earth's surface.
 * It is drawn as a physical line between the points specified in |path|.
 */
@interface GMSPolyline : GMSOverlay

/** The path that describes this polyline. */
@property(nonatomic, copy, nullable) GMSPath *path;

/** The width of the line in screen points. Defaults to 1. */
@property(nonatomic) CGFloat strokeWidth;

/** The UIColor used to render the polyline. Defaults to [UIColor blueColor]. */
@property(nonatomic) UIColor *strokeColor;

/** Whether this line should be rendered with geodesic correction. */
@property(nonatomic) BOOL geodesic;

/**
 * Convenience constructor for GMSPolyline for a particular path. Other properties will have
 * default values.
 */
+ (instancetype)polylineWithPath:(nullable GMSPath *)path;

/**
 * An array containing GMSStyleSpan, the spans used to render this polyline.
 *
 * If this array contains fewer segments than the polyline itself, the final segment will be applied
 * over the remaining length. If this array is unset or empty, then |strokeColor| is used for the
 * entire line instead.
 */
@property(nonatomic, copy, nullable) NSArray<GMSStyleSpan *> *spans;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSPolyline.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSProjection.h
===
//
//  GMSProjection.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <CoreGraphics/CoreGraphics.h>
#import <CoreLocation/CoreLocation.h>


/**
 * GMSVisibleRegion contains the four points defining the polygon that is visible in a map's camera.
 *
 * This polygon can be a trapezoid instead of a rectangle, because a camera can have tilt. If the
 * camera is directly over the center of the camera, the shape is rectangular, but if the camera is
 * tilted, the shape will appear to be a trapezoid whose smallest side is closest to the point of
 * view.
 */
typedef struct {
  /** Bottom left corner of the camera. */
  CLLocationCoordinate2D nearLeft;

  /** Bottom right corner of the camera. */
  CLLocationCoordinate2D nearRight;

  /** Far left corner of the camera. */
  CLLocationCoordinate2D farLeft;

  /** Far right corner of the camera. */
  CLLocationCoordinate2D farRight;
} GMSVisibleRegion;

/**
 * Defines a mapping between Earth coordinates (CLLocationCoordinate2D) and coordinates in the map's
 * view (CGPoint). A projection is constant and immutable, in that the mapping it embodies never
 * changes. The mapping is not necessarily linear.
 *
 * Passing invalid Earth coordinates (i.e., per CLLocationCoordinate2DIsValid) to this object may
 * result in undefined behavior.
 *
 * This class should not be instantiated directly unless under testing conditions. Instead, obtain
 * it via projection on GMSMapView.
 */
@interface GMSProjection : NSObject

/** Maps an Earth coordinate to a point coordinate in the map's view. */
- (CGPoint)pointForCoordinate:(CLLocationCoordinate2D)coordinate;


/** Maps a point coordinate in the map's view to an Earth coordinate. */
- (CLLocationCoordinate2D)coordinateForPoint:(CGPoint)point;

/**
 * Converts a distance in meters to content size.  This is only accurate for small Earth distances,
 * as it uses CGFloat for screen distances.
 */
- (CGFloat)pointsForMeters:(CLLocationDistance)meters
              atCoordinate:(CLLocationCoordinate2D)coordinate;

/** Returns whether a given coordinate (lat/lng) is contained within the projection. */
- (BOOL)containsCoordinate:(CLLocationCoordinate2D)coordinate;

/**
 * Returns the region (four location coordinates) that is visible according to the projection. If
 * padding was set on GMSMapView, this region takes the padding into account.
 *
 * The visible region can be non-rectangular. The result is undefined if the projection includes
 * points that do not map to anywhere on the map (e.g., camera sees outer space).
 */
- (GMSVisibleRegion)visibleRegion;

@end

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSProjection.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSServices.h
===
//
//  GMSServices.h
//  Google Maps SDK for iOS
//
//  Copyright 2012 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

#if __has_feature(modules)
@import GoogleMapsBase;
#else
#import <GoogleMapsBase/GoogleMapsBase.h>
#endif

NS_ASSUME_NONNULL_BEGIN

/**
 * Service class for the Google Maps SDK for iOS.
 *
 * This class is not thread safe. All methods should only be invoked on the main thread.
 */
@interface GMSServices : NSObject

/**
 * Provides the shared instance of GMSServices for the Google Maps SDK for iOS, creating it if
 * necessary. Classes such as GMSMapView and GMSPanoramaView will hold this instance to provide
 * their connection to Google.
 *
 * This is an opaque object. If your application often creates and destroys view or service classes
 * provided by the Google Maps SDK for iOS, it may be useful to hold onto this object directly, as
 * otherwise your connection to Google may be restarted on a regular basis. It also may be useful to
 * take this object in advance of the first map creation, to reduce initial map creation performance
 * cost.
 *
 * This method will throw an exception if provideAPIKey: has not been called.
 */
+ (id<NSObject>)sharedServices;

/**
 * Provides your API key to the Google Maps SDK for iOS.  This key is generated for your application
 * via the Google Cloud Platform Console, and is paired with your application's bundle ID to
 * identify it. This must be called exactly once by your application before any iOS Maps SDK
 * object is initialized.
 *
 * @return YES if the APIKey was successfully provided.
 */
+ (BOOL)provideAPIKey:(NSString *)APIKey;

/**
 * Provides your API options to the Google Maps SDK for iOS. Pass an array containing an NSString
 * for each option. These options apply to all maps.
 *
 * This may be called exactly once by your application and must be called before any iOS Maps SDK
 * object is initialized.
 *
 * @return YES if all the APIOptions were successfully provided.
 */
+ (BOOL)provideAPIOptions:(NSArray<NSString *> *)APIOptions;

/**
 * Enables the map to render using Metal instead of OpenGL.
 *
 * The rendering might look very slightly different between renderers. The default is @c YES and
 * value must be updated before the services instance is initialized.
 *
 * This property must be set from the main thread.
 */
+ (void)setMetalRendererEnabled:(BOOL)enabled
    __GMS_AVAILABLE_BUT_DEPRECATED_MSG(
        "Metal is now the default renderer if this API is not invoked. In the future, "
        "Metal rendering will be the only available implementation and this API will be a no-op. "
        "We encourage customers to remove calls to this method from their code.");

/**
 * Enables reporting of abnormal SDK terminations such as the app crashes while the SDK is still
 * running. This allows Google to improve SDK stability when applicable. The default is @c YES and
 * value must be updated before the services instance is initialized.
 *
 * This property must be set from the main thread.
 */
+ (void)setAbnormalTerminationReportingEnabled:(BOOL)enabled;

/**
 * Returns the open source software license information for Google Maps SDK for iOS. This
 * information must be made available within your application.
 */
+ (NSString *)openSourceLicenseInfo;

/** Returns the version for this release of the Google Maps SDK for iOS. For example, "1.0.0". */
+ (NSString *)SDKVersion;

/**
 * Returns the long version for this release of the Google Maps SDK for iOS. For example, "1.0.0
 * (102.1)".
 */
+ (NSString *)SDKLongVersion;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSServices.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSStampStyle.h
===
//
//  GMSStampStyle.h
//  Google Maps SDK for iOS
//
//  Copyright 2020 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * The abstract base class for polyline styles that draw a repeating image over a @c GMSStyleSpan.
 */
@interface GMSStampStyle : NSObject

/**
 * The image or texture that will repeated over a stroke.
 * Note that this image will be compressed into a square - so for best results have a square image.
 * The rendered stamps will be the width of the line that the GMSStrokeStyle is set on. The image
 * will be oriented with the top of the image towards the start point, and the bottom of the image
 * towards the end point. For example, if the underlying line has two points and the start point is
 * directly above the endpoint, the stamp will appear in an upright orientation.
 */
@property(nonatomic, readonly) UIImage *stampImage;

- (instancetype)init NS_UNAVAILABLE;

@end

/** A polyline style that draws a repeating image over a @c GMSStyleSpan. */
@interface GMSTextureStyle : GMSStampStyle

/**
 * Returns a texture stamp style with the given image.
 *
 * @param image A @c UIImage object to use as the stamp image.
 * @return An initialized texture stamp style.
 */
+ (instancetype)textureStyleWithImage:(UIImage *)image
    NS_SWIFT_UNAVAILABLE("Use initializer instead");

/**
 * Returns an initialized texture stamp style with the given image.
 *
 * @param image A @c UIImage object to use as the stamp image.
 * @return An initialized texture stamp style.
 */
- (instancetype)initWithImage:(UIImage *)image NS_DESIGNATED_INITIALIZER;

@end

/**
 * Describes the drawing style for a stamp image over a @c GMSStyleSpan.
 *
 * @note Only supports transparent background. If any color is set to the @c GMSStyleSpan it will
 * only be treated as a fallback.
 *
 * @note Use of @c GMSSpriteStyle requires Metal rendering framework. See
 * GMSServices::setMetalRendererEnabled:(BOOL) to learn how to enable Metal. If @c GMSStyleSpan is
 * added to a map without Metal being enabled, the stamp will not render and instead the polyline
 * span will attempt to fallback to any set color. If no color is set, it will fallback to the
 * default polyline color, [UIColor blueColor].
 *
 * @note Use GMSMapView::mapCapabilities property to query if a @c GMSMapView supports @c
 * GMSSpriteStyle.
 */
@interface GMSSpriteStyle : GMSStampStyle

/**
 * Returns a sprite stamp style with the given image.
 *
 * @param image A @c UIImage object to use as the stamp image.
 * @return An initialized sprite stamp style.
 */
+ (instancetype)spriteStyleWithImage:(UIImage *)image
    NS_SWIFT_UNAVAILABLE("Use initializer instead");

/**
 * Returns an initialized sprite stamp style with the given image.
 *
 * @param image A @c UIImage object to use as the stamp image.
 * @return An initialized sprite stamp style.
 */
- (instancetype)initWithImage:(UIImage *)image NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSStampStyle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSStrokeStyle.h
===
//
//  GMSStrokeStyle.h
//  Google Maps SDK for iOS
//
//  Copyright 2019 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

@class GMSStampStyle;

NS_ASSUME_NONNULL_BEGIN

/** Describes the drawing style for one-dimensional entities such as polylines. */
@interface GMSStrokeStyle : NSObject

/**
 * A repeated image over the stroke to allow a user to set a 2D texture on top of a stroke.
 * If the image has transparent or semi-transparent portions, the underlying stroke color will show
 * through in those places. Solid portions of the stamp will completely cover the base stroke.
 */
@property(nonatomic, strong, nullable) GMSStampStyle *stampStyle;

/** Creates a solid color stroke style. */
+ (instancetype)solidColor:(UIColor *)color;

/** Creates a gradient stroke style interpolating from |fromColor| to |toColor|. */
+ (instancetype)gradientFromColor:(UIColor *)fromColor toColor:(UIColor *)toColor;

/** Creates a transparent stroke style and sets the stampStyle. */
+ (instancetype)transparentStrokeWithStampStyle:(GMSStampStyle *)stampStyle;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSStrokeStyle.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSStyleSpan.h
===
//
//  GMSStyleSpan.h
//  Google Maps SDK for iOS
//
//  Copyright 2019 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

#import "GMSStrokeStyle.h"

NS_ASSUME_NONNULL_BEGIN

/** Describes the style for some region of a polyline. */
@interface GMSStyleSpan : NSObject

/**
 * Factory returning a solid color span of length one segment. Equivalent to [GMSStyleSpan
 * spanWithStyle:[GMSStrokeStyle solidColor:|color|] segments:1].
 */
+ (instancetype)spanWithColor:(UIColor *)color;

/**
 * Factory returning a solid color span with a given number of segments. Equivalent to [GMSStyleSpan
 * spanWithStyle:[GMSStrokeStyle solidColor:|color|] segments:|segments|].
 */
+ (instancetype)spanWithColor:(UIColor *)color segments:(double)segments;

/**
 * Factory returning a span with the given |style| of length one segment. Equivalent to
 * [GMSStyleSpan spanWithStyle:|style| segments:1].
 */
+ (instancetype)spanWithStyle:(GMSStrokeStyle *)style;

/**
 * Factory returning a span with the given |style| and length in number of segments. |segments| must
 * be greater than 0 (i.e. can't be 0).
 */
+ (instancetype)spanWithStyle:(GMSStrokeStyle *)style segments:(double)segments;

/** The style of this span. */
@property(nonatomic, readonly) GMSStrokeStyle *style;

/** The length of this span in number of segments. */
@property(nonatomic, readonly) double segments;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSStyleSpan.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSSyncTileLayer.h
===
//
//  GMSSyncTileLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

#import "GMSTileLayer.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * GMSSyncTileLayer is an abstract subclass of GMSTileLayer that provides a sync interface to
 * generate image tile data.
 */
@interface GMSSyncTileLayer : GMSTileLayer

/**
 * As per requestTileForX:y:zoom:receiver: on GMSTileLayer, but provides a synchronous interface to
 * return tiles. This method may block or otherwise perform work, and is not called on the main
 * thread.
 *
 * Calls to this method may also be made from multiple threads so implementations must be
 * threadsafe.
 */
- (nullable UIImage *)tileForX:(NSUInteger)x y:(NSUInteger)y zoom:(NSUInteger)zoom;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSSyncTileLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSTileLayer.h
===
//
//  GMSTileLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <UIKit/UIKit.h>

@class GMSMapView;

NS_ASSUME_NONNULL_BEGIN

/**
 * Stub tile that is used to indicate that no tile exists for a specific tile coordinate. May be
 * returned by tileForX:y:zoom: on GMSTileOverlay.
 */
FOUNDATION_EXTERN UIImage *const kGMSTileLayerNoTile;

/**
 * GMSTileReceiver is provided to GMSTileLayer when a tile request is made, allowing the callback to
 * be later (or immediately) invoked.
 */
@protocol GMSTileReceiver <NSObject>
- (void)receiveTileWithX:(NSUInteger)x
                       y:(NSUInteger)y
                    zoom:(NSUInteger)zoom
                   image:(nullable UIImage *)image;
@end

/**
 * GMSTileLayer is an abstract class that allows overlaying of custom image tiles on a specified
 * GMSMapView. It may not be initialized directly, and subclasses must implement the
 * tileForX:y:zoom: method to return tiles.
 *
 * At zoom level 0 the whole world is a square covered by a single tile, and the coordinates |x| and
 * |y| are both 0 for that tile. At zoom level 1, the world is covered by 4 tiles with |x| and |y|
 * being 0 or 1, and so on.
 */
@interface GMSTileLayer : NSObject

/**
 * requestTileForX:y:zoom:receiver: generates image tiles for GMSTileOverlay. It must be overridden
 * by subclasses. The tile for the given |x|, |y| and |zoom| _must_ be later passed to |receiver|.
 *
 * Specify kGMSTileLayerNoTile if no tile is available for this location; or nil if a transient
 * error occured and a tile may be available later.
 *
 * Calls to this method will be made on the main thread. See GMSSyncTileLayer for a base class that
 * implements a blocking tile layer that does not run on your application's main thread.
 */
- (void)requestTileForX:(NSUInteger)x
                      y:(NSUInteger)y
                   zoom:(NSUInteger)zoom
               receiver:(id<GMSTileReceiver>)receiver;

/** Clears the cache so that all tiles will be requested again. */
- (void)clearTileCache;

/**
 * The map this GMSTileOverlay is displayed on. Setting this property will add the layer to the map.
 * Setting it to nil removes this layer from the map. A layer may be active on at most one map at
 * any given time.
 */
@property(nonatomic, weak, nullable) GMSMapView *map;

/**
 * Higher |zIndex| value tile layers will be drawn on top of lower |zIndex| value tile layers and
 * overlays. Equal values result in undefined draw ordering.
 */
@property(nonatomic) int zIndex;

/**
 * Specifies the number of pixels (not points) that the returned tile images will prefer to display
 * as. For best results, this should be the edge length of your custom tiles. Defaults to 256, which
 * is the traditional size of Google Maps tiles.
 *
 * Values less than the equivalent of 128 points (e.g. 256 pixels on retina devices) may not perform
 * well and are not recommended.
 *
 * As an example, an application developer may wish to provide retina tiles (512 pixel edge length)
 * on retina devices, to keep the same number of tiles
 * per view as the default value of 256 would give on a non-retina device.
 */
@property(nonatomic) NSInteger tileSize;

/**
 * Specifies the opacity of the tile layer. This provides a multiplier for the alpha channel of tile
 * images.
 */
@property(nonatomic) float opacity;

/** Specifies whether the tiles should fade in. Default YES. */
@property(nonatomic) BOOL fadeIn;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSTileLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSUISettings.h
===
//
//  GMSUISettings.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import <Foundation/Foundation.h>

/** Settings for the user interface of a GMSMapView. */
@interface GMSUISettings : NSObject

/**
 * Sets the preference for whether all gestures should be enabled (default) or disabled. This
 * doesn't restrict users from tapping any on screen buttons to move the camera (e.g., compass or
 * zoom controls), nor does it restrict programmatic movements and animation.
 */
- (void)setAllGesturesEnabled:(BOOL)enabled;

/**
 * Controls whether scroll gestures are enabled (default) or disabled. If enabled, users may drag to
 * pan the camera. This does not limit programmatic movement of the camera.
 */
@property(nonatomic) BOOL scrollGestures;

/**
 * Controls whether zoom gestures are enabled (default) or disabled. If enabled, users may double
 * tap/two-finger tap or pinch to zoom the camera. This does not limit programmatic movement of the
 * camera.
 */
@property(nonatomic) BOOL zoomGestures;

/**
 * Controls whether tilt gestures are enabled (default) or disabled. If enabled, users may use a
 * two-finger vertical down or up swipe to tilt the camera. This does not limit programmatic control
 * of the camera's viewingAngle.
 */
@property(nonatomic) BOOL tiltGestures;

/**
 * Controls whether rotate gestures are enabled (default) or disabled. If enabled, users may use a
 * two-finger rotate gesture to rotate the camera. This does not limit programmatic control of the
 * camera's bearing.
 */
@property(nonatomic) BOOL rotateGestures;

/**
 * Controls whether gestures by users are completely consumed by the GMSMapView when gestures are
 * enabled (default YES).  This prevents these gestures from being received by parent views.
 *
 * When the GMSMapView is contained by a UIScrollView (or other scrollable area), this means that
 * gestures on the map will not be additional consumed as scroll gestures.  However, disabling this
 * (set to NO) may be useful to support complex view hierarchies or requirements.
 */
@property(nonatomic) BOOL consumesGesturesInView;

/**
 * Enables or disables the compass. The compass is an icon on the map that indicates the direction
 * of north on the map.
 *
 * If enabled, it is only shown when the camera is rotated away from its default orientation
 * (bearing of 0). When a user taps the compass, the camera orients itself to its default
 * orientation and fades away shortly after. If disabled, the compass will never be displayed.
 */
@property(nonatomic) BOOL compassButton;

/**
 * Enables or disables the My Location button. This is a button visible on the map that, when tapped
 * by users, will center the map on the current user location.
 */
@property(nonatomic) BOOL myLocationButton;

/**
 * Enables (default) or disables the indoor floor picker.
 *
 * If enabled, it is only visible when the view is focused on a building with indoor floor data. If
 * disabled, the selected floor can still be controlled programmatically via the indoorDisplay
 * mapView property.
 */
@property(nonatomic) BOOL indoorPicker;

/**
 * Controls whether rotate and zoom gestures can be performed off-center and scrolled around
 * (default YES).
 */
@property(nonatomic) BOOL allowScrollGesturesDuringRotateOrZoom;

@end

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSUISettings.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSURLTileLayer.h
===
//
//  GMSURLTileLayer.h
//  Google Maps SDK for iOS
//
//  Copyright 2013 Google LLC
//
//  Usage of this SDK is subject to the Google Maps/Google Earth APIs Terms of
//  Service: https://cloud.google.com/maps-platform/terms
//

#import "GMSTileLayer.h"

@class NSURL;

NS_ASSUME_NONNULL_BEGIN

/**
 * |GMSTileURLConstructor| is a block taking |x|, |y| and |zoom| and returning an NSURL, or nil to
 * indicate no tile for that location.
 *
 * @related GMSURLTileLayer
 */
typedef NSURL *_Nullable (^GMSTileURLConstructor)(NSUInteger x, NSUInteger y, NSUInteger zoom);

/**
 * GMSURLTileProvider fetches tiles based on the URLs returned from a GMSTileURLConstructor. For
 * example:
 * <pre>
 *   GMSTileURLConstructor constructor = ^(NSUInteger x, NSUInteger y, NSUInteger zoom) {
 *     NSString *URLStr =
 *         [NSString stringWithFormat:@"https://example.com/%d/%d/%d.png", x, y, zoom];
 *     return [NSURL URLWithString:URLStr];
 *   };
 *   GMSTileLayer *layer =
 *       [GMSURLTileLayer tileLayerWithURLConstructor:constructor];
 *   layer.userAgent = @"SDK user agent";
 *   layer.map = map;
 * </pre>
 *
 * GMSURLTileProvider may not be subclassed and should only be created via its convenience
 * constructor.
 */
@interface GMSURLTileLayer : GMSTileLayer

/** Convenience constructor. |constructor| must be non-nil. */
+ (instancetype)tileLayerWithURLConstructor:(GMSTileURLConstructor)constructor;

/**
 * Specify the user agent to describe your application. If this is nil (the default), the default
 * iOS user agent is used for HTTP requests.
 */
@property(nonatomic, copy, nullable) NSString *userAgent;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GMSURLTileLayer.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GoogleMaps.h
===
#import <GoogleMaps/GMSIndoorBuilding.h>
#import <GoogleMaps/GMSIndoorLevel.h>
#import <GoogleMaps/GMSAccessibilityLabels.h>
#import <GoogleMaps/GMSAddress.h>
#import <GoogleMaps/GMSAdvancedMarker.h>
#import <GoogleMaps/GMSCALayer.h>
#import <GoogleMaps/GMSCameraPosition.h>
#import <GoogleMaps/GMSCameraUpdate.h>
#import <GoogleMaps/GMSCircle.h>
#import <GoogleMaps/GMSCollisionBehavior.h>
#import <GoogleMaps/GMSCoordinateBounds+GoogleMaps.h>
#import <GoogleMaps/GMSFeature.h>
#import <GoogleMaps/GMSFeatureLayer.h>
#import <GoogleMaps/GMSFeatureStyle.h>
#import <GoogleMaps/GMSGeocoder.h>
#import <GoogleMaps/GMSGeometryUtils.h>
#import <GoogleMaps/GMSGroundOverlay.h>
#import <GoogleMaps/GMSIndoorDisplay.h>
#import <GoogleMaps/GMSMapID.h>
#import <GoogleMaps/GMSMapLayer.h>
#import <GoogleMaps/GMSMapStyle.h>
#import <GoogleMaps/GMSMapView+Animation.h>
#import <GoogleMaps/GMSMapView.h>
#import <GoogleMaps/GMSMarker.h>
#import <GoogleMaps/GMSMarkerAnimation.h>
#import <GoogleMaps/GMSMarkerLayer.h>
#import <GoogleMaps/GMSMutablePath.h>
#import <GoogleMaps/GMSOrientation.h>
#import <GoogleMaps/GMSOverlay.h>
#import <GoogleMaps/GMSOverlayLayer.h>
#import <GoogleMaps/GMSPanorama.h>
#import <GoogleMaps/GMSPanoramaCamera.h>
#import <GoogleMaps/GMSPanoramaCameraUpdate.h>
#import <GoogleMaps/GMSPanoramaLayer.h>
#import <GoogleMaps/GMSPanoramaLink.h>
#import <GoogleMaps/GMSPanoramaService.h>
#import <GoogleMaps/GMSPanoramaSource.h>
#import <GoogleMaps/GMSPanoramaView.h>
#import <GoogleMaps/GMSPath.h>
#import <GoogleMaps/GMSPinImage.h>
#import <GoogleMaps/GMSPinImageGlyph.h>
#import <GoogleMaps/GMSPinImageOptions.h>
#import <GoogleMaps/GMSPlaceFeature.h>
#import <GoogleMaps/GMSPolygon.h>
#import <GoogleMaps/GMSPolygonLayer.h>
#import <GoogleMaps/GMSPolyline.h>
#import <GoogleMaps/GMSProjection.h>
#import <GoogleMaps/GMSServices.h>
#import <GoogleMaps/GMSStampStyle.h>
#import <GoogleMaps/GMSStrokeStyle.h>
#import <GoogleMaps/GMSStyleSpan.h>
#import <GoogleMaps/GMSSyncTileLayer.h>
#import <GoogleMaps/GMSTileLayer.h>
#import <GoogleMaps/GMSUISettings.h>
#import <GoogleMaps/GMSURLTileLayer.h>

=== end iosApp/Pods/GoogleMaps/Maps/Frameworks/GoogleMaps.xcframework/ios-arm64_x86_64-simulator/GoogleMaps.framework/Headers/GoogleMaps.h ===

===
Path: iosApp/Pods/GoogleMaps/Maps/Sources/GMSEmpty.h
===
//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Swift Package Manager requires that every target has a header file.
@import GoogleMaps;

=== end iosApp/Pods/GoogleMaps/Maps/Sources/GMSEmpty.h ===

===
Path: iosApp/Pods/GoogleMaps/README.md
===
# Google Maps SDK for iOS

This pod contains the Google Maps SDK for iOS, supporting both Objective-C and
Swift.

Use the [Google Maps SDK for iOS](https://developers.google.com/maps/documentation/ios-sdk/)
to enrich your app with interactive maps and immersive Street View panoramas,
and add your own custom elements such as markers, windows and polylines.

# Installation

1. Before you can use the Google Maps SDK for iOS, follow these [setup instructions](https://developers.google.com/maps/documentation/ios-sdk/cloud-setup) to set up a project and get an API key. You will need to add the API key to your code in order to build your app with the Maps SDK for iOS.

1. To integrate Google Maps SDK for iOS into your Xcode project using CocoaPods,
specify it in your `Podfile`, for example:

    ```
    source 'https://github.com/CocoaPods/Specs.git'
    platform :ios, '14.0'
    target 'YOUR_APPLICATION_TARGET_NAME_HERE' do
      pod 'GoogleMaps', '7.1.0'
    end
    ```

    Then, run the following command:

    ```
    $ pod install
    ```

1. Follow additional steps in the ["Set up an Xcode project"](https://developers.google.com/maps/documentation/ios-sdk/config) guide to add your API key to your project, import classes, and add a map.

# Resources

*   *Guides*: Read the [documentation](https://developers.google.com/maps/documentation/ios-sdk/) for full use of the SDK.
*   *Tutorial videos*: Watch code walkthroughs and useful tips on our [YouTube channel](https://www.youtube.com/playlist?list=PL2rFahu9sLJ3Rob1Vb5O4qX4U8-0FeXqJ).
*   *Code samples*: In order to try out our demo app, use:

    ```
    $ pod try GoogleMaps
    ```

    and follow the instructions on our [samples documentation](https://developers.google.com/maps/documentation/ios-sdk/code-samples).

*   *Support*: Ask the community or get help from Google using the links on the Maps SDK for iOS [support page](https://developers.google.com/maps/documentation/ios-sdk/support).

*   *Report issues*: Use our issue tracker to [file a bug](https://issuetracker.google.com/issues/new?component=188833&template=789005)
    or a [feature request](https://issuetracker.google.com/issues/new?component=188833&template=787421).

# License and Terms of Service

By using the Google Maps SDK for iOS you accept Google's Terms of Service and
Policies. Pay attention particularly to the following aspects:

*   Depending on your app and use case, you may be required to display
    attribution. Read more about [attribution requirements](https://developers.google.com/maps/documentation/ios-sdk/intro#attribution_requirements).
*   Be sure to understand [usage and billing](https://developers.google.com/maps/documentation/ios-sdk/usage-and-billing) information related to use of the Maps SDK for iOS.
*   The [Terms of Service](https://developers.google.com/maps/terms) are a
    comprehensive description of the legal contract that you enter with Google
    by using the Google Maps SDK for iOS.

=== end iosApp/Pods/GoogleMaps/README.md ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDAuthStateMigration.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class GTMKeychainStore;
@class GTMAuthSession;

NS_ASSUME_NONNULL_BEGIN

/// A class providing migration support for auth state saved by older versions of the SDK.
@interface GIDAuthStateMigration : NSObject

/// Creates an instance of this migration type with the keychain storage wrapper it will use.
- (instancetype)initWithKeychainStore:(GTMKeychainStore *)keychainStore NS_DESIGNATED_INITIALIZER;

/// Perform a one-time migration for auth state saved by GPPSignIn 1.x or GIDSignIn 1.0 - 4.x to the
/// GTMAppAuth storage introduced in GIDSignIn 5.0.
- (void)migrateIfNeededWithTokenURL:(NSURL *)tokenURL
                       callbackPath:(NSString *)callbackPath
                       keychainName:(NSString *)keychainName
                     isFreshInstall:(BOOL)isFreshInstall;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDAuthStateMigration.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDAuthentication.h
===
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class OIDAuthState;

NS_ASSUME_NONNULL_BEGIN

// Internal class for GIDGoogleUser NSCoding backward compatibility.
@interface GIDAuthentication : NSObject <NSSecureCoding>

@property(nonatomic) OIDAuthState* authState;

- (instancetype)initWithAuthState:(OIDAuthState *)authState;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDAuthentication.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDCallbackQueue.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@class GIDCallbackQueue;

// The block type of callbacks in the queue.
typedef void (^GIDCallbackQueueCallback)(void);

// The class handles a queue for callbacks for asynchronous operations.
// The queue starts in a ready state. Call |wait| and |next| to mark the
// start and end of asynchronous operations.
@interface GIDCallbackQueue : NSObject

// Marks the start of an asynchronous operation. Any remaining callbacks will
// not be called until |next| is called. The queue object will be retained while
// some asynchronous operation is pending.
- (void)wait;

// Marks the end of an asynchronous operation. If no more operation remain,
// all remaining callbacks are called in the order they are added. Note that
// some earlier callbackes can start asynchronous operations themselves, thus
// blocking later callbacks until they are finished.
- (void)next;

// Resets the callback queue to the ready state and removes all callbacks.
- (void)reset;

// Adds a callback to the end of the callback queue. Callbacks added later will
// only be called when both the callbacks added eariler and the asynchronous
// operations they started if any are finished.
- (void)addCallback:(GIDCallbackQueueCallback)callback;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDCallbackQueue.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDEMMErrorHandler.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <TargetConditionals.h>

#if TARGET_OS_IOS && !TARGET_OS_MACCATALYST

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

// The handler for displaying EMM-specific errors to users.
@interface GIDEMMErrorHandler : NSObject

// Retrieve the shared instance of this class.
+ (instancetype)sharedInstance;

// Handles EMM specific error that is returned in server response.
// Returns whether or not an EMM-specific error is being handled by this invocation.
// If the return value is |YES|, |completion| will be called asynchronously in the main thread
// after the user interacts with the error dialog;
// if the return value is |NO|, |completion| will be called before returning.
- (BOOL)handleErrorFromResponse:(NSDictionary<NSString *, id> *)response
                     completion:(void (^)(void))completion;

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS && !TARGET_OS_MACCATALYST

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDEMMErrorHandler.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDEMMSupport.h
===
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>

#if TARGET_OS_IOS && !TARGET_OS_MACCATALYST

#import <Foundation/Foundation.h>

@import GTMAppAuth;

NS_ASSUME_NONNULL_BEGIN

/// A class to support EMM (Enterprise Mobility Management).
@interface GIDEMMSupport : NSObject<GTMAuthSessionDelegate>

- (instancetype)init NS_DESIGNATED_INITIALIZER;

/// Handles potential EMM error from token fetch response.
+ (void)handleTokenFetchEMMError:(nullable NSError *)error
                      completion:(void (^)(NSError *_Nullable))completion;

/// Gets a new set of URL parameters that contains updated EMM-related URL parameters if needed.
+ (NSDictionary *)updatedEMMParametersWithParameters:(NSDictionary *)parameters;

/// Gets a new set of URL parameters that also contains EMM-related URL parameters if needed.
+ (NSDictionary *)parametersWithParameters:(NSDictionary *)parameters
                                emmSupport:(nullable NSString *)emmSupport
                    isPasscodeInfoRequired:(BOOL)isPasscodeInfoRequired;

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS && !TARGET_OS_MACCATALYST

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDEMMSupport.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDGoogleUser_Private.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "GoogleSignIn/Sources/Public/GoogleSignIn/GIDGoogleUser.h"

#ifdef SWIFT_PACKAGE
@import AppAuth;
#else
#import <AppAuth/AppAuth.h>
#endif

@class OIDAuthState;

NS_ASSUME_NONNULL_BEGIN

/// A completion block that takes a `GIDGoogleUser` or an error if the attempt to refresh tokens was unsuccessful.
typedef void (^GIDGoogleUserCompletion)(GIDGoogleUser *_Nullable user, NSError *_Nullable error);

/// Internal methods for the class that are not part of the public API.
@interface GIDGoogleUser () <OIDAuthStateChangeDelegate>

@property(nonatomic, readwrite) GIDToken *accessToken;

@property(nonatomic, readwrite) GIDToken *refreshToken;

@property(nonatomic, readwrite, nullable) GIDToken *idToken;

/// A representation of the state of the OAuth session for this instance.
@property(nonatomic, readonly) OIDAuthState *authState;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
@property(nonatomic, readwrite) id<GTMFetcherAuthorizationProtocol> fetcherAuthorizer;
#pragma clang diagnostic pop

#if TARGET_OS_IOS && !TARGET_OS_MACCATALYST
// A string indicating support for Enterprise Mobility Management.
@property(nonatomic, readonly, nullable) NSString *emmSupport;
#endif // TARGET_OS_IOS && !TARGET_OS_MACCATALYST

// Create a object with an auth state, scopes, and profile data.
- (instancetype)initWithAuthState:(OIDAuthState *)authState
                      profileData:(nullable GIDProfileData *)profileData;

// Update the auth state and profile data.
- (void)updateWithTokenResponse:(OIDTokenResponse *)tokenResponse
          authorizationResponse:(OIDAuthorizationResponse *)authorizationResponse
                    profileData:(nullable GIDProfileData *)profileData;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDGoogleUser_Private.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDMDMPasscodeCache.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <TargetConditionals.h>

#if TARGET_OS_IOS && !TARGET_OS_MACCATALYST

#import <Foundation/Foundation.h>

@class GIDMDMPasscodeState;

NS_ASSUME_NONNULL_BEGIN

/**
 * The helper class to cache the passcode info and to actually detect the passcode state when cache
 * expires.
 */
@interface GIDMDMPasscodeCache : NSObject

/**
 * Returns a shared instance of the cache.
 */
+ (instancetype)sharedInstance;

/**
 * Retrieves the current passcode state.
 */
- (GIDMDMPasscodeState *)passcodeState;

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS && !TARGET_OS_MACCATALYST

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDMDMPasscodeCache.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDMDMPasscodeState.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <TargetConditionals.h>

#if TARGET_OS_IOS && !TARGET_OS_MACCATALYST

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * An object to obtain and describe the device passcode state.
 */
@interface GIDMDMPasscodeState : NSObject

/**
 * The device passcode status.
 */
@property(nonatomic, strong, readonly, nullable) NSString *status;

/**
 * The detailed device passcode information encoded as a string.
 * See go/robust-ios-mdmlite for its format.
 */
@property(nonatomic, strong, readonly, nullable) NSString *info;

/**
 * This class should not be initialized from other code.
 */
- (instancetype)init NS_UNAVAILABLE;

/**
 * Creates a new instance for the class that represents the current passcode state.
 */
+ (instancetype)passcodeState;

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS && !TARGET_OS_MACCATALYST

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDMDMPasscodeState.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDMDMPasscodeState_Private.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <TargetConditionals.h>

#if TARGET_OS_IOS && !TARGET_OS_MACCATALYST

#import <Foundation/Foundation.h>

#import "GoogleSignIn/Sources/GIDMDMPasscodeState.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * Internal interface for the GIDMDMPasscodeState class.
 */
@interface GIDMDMPasscodeState ()

/**
 * Initializes the instance with the data.
 */
- (instancetype)initWithStatus:(NSString *)status info:(NSString *)info;

@end

NS_ASSUME_NONNULL_END

#endif // TARGET_OS_IOS && !TARGET_OS_MACCATALYST

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDMDMPasscodeState_Private.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDProfileData_Private.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "GoogleSignIn/Sources/Public/GoogleSignIn/GIDProfileData.h"

NS_ASSUME_NONNULL_BEGIN

// Private |GIDProfileData| methods that are used in this SDK.
@interface GIDProfileData ()

// Initialize with profile attributes.
- (instancetype)initWithEmail:(NSString *)email
                         name:(NSString *)name
                    givenName:(nullable NSString *)givenName
                   familyName:(nullable NSString *)familyName
                     imageURL:(nullable NSURL *)imageURL;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDProfileData_Private.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDScopes.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

// The utility class to provide scope constants and check their existence.  Note that most methods
// only work with limited client-side knowledge, a "scopesWith*" method could add the scope
// unnecessarily.
@interface GIDScopes : NSObject

// Adds "email" and "profile" scopes to |scopes| if they are not already contained or implied.
+ (NSArray *)scopesWithBasicProfile:(NSArray *)scopes;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDScopes.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInCallbackSchemes.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

// A utility class for dealing with callback schemes.
@interface GIDSignInCallbackSchemes : NSObject

// Please call the designated initializer.
- (instancetype)init NS_UNAVAILABLE;

// The designated initializer.
- (instancetype)initWithClientIdentifier:(NSString *)clientIdentifier NS_DESIGNATED_INITIALIZER;

// The canonical client identifier callback scheme. Requires clientId to be set on GIDSignIn.
- (NSString *)clientIdentifierScheme;

// An array of all schemes used for sign-in callbacks.
- (NSArray *)allSchemes;

// Returns a list of URL schemes the current app host should support for Google Sign-In to work.
- (NSMutableArray *)unsupportedSchemes;

// Indicates the scheme of an NSURL is a sign-in callback scheme.
- (BOOL)URLSchemeIsCallbackScheme:(NSURL *)URL;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInCallbackSchemes.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInInternalOptions.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#if __has_include(<UIKit/UIKit.h>)
#import <UIKit/UIKit.h>
#elif __has_include(<AppKit/AppKit.h>)
#import <AppKit/AppKit.h>
#endif

#import "GoogleSignIn/Sources/GIDSignIn_Private.h"

@class GIDConfiguration;
@class GIDSignInResult;

NS_ASSUME_NONNULL_BEGIN

/// The options used internally for aspects of the sign-in flow.
@interface GIDSignInInternalOptions : NSObject

/// Whether interaction with user is allowed at all.
@property(nonatomic, readonly) BOOL interactive;

/// Whether the sign-in is a continuation of the previous one.
@property(nonatomic, readonly) BOOL continuation;

/// Whether the sign-in is an addScopes flow. NO means it is a sign in flow.
@property(nonatomic, readonly) BOOL addScopesFlow;

/// The extra parameters used in the sign-in URL.
@property(nonatomic, readonly, nullable) NSDictionary *extraParams;

/// The configuration to use during the flow.
@property(nonatomic, readonly, nullable) GIDConfiguration *configuration;

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST
/// The view controller to use during the flow.
@property(nonatomic, readonly, weak, nullable) UIViewController *presentingViewController;
#elif TARGET_OS_OSX
/// The window to use during the flow.
@property(nonatomic, readonly, weak, nullable) NSWindow *presentingWindow;
#endif // TARGET_OS_IOS || TARGET_OS_MACCATALYST

/// The completion block to be called at the completion of the flow.
@property(nonatomic, readonly, nullable) GIDSignInCompletion completion;

/// The scopes to be used during the flow.
@property(nonatomic, copy, nullable) NSArray<NSString *> *scopes;

/// The login hint to be used during the flow.
@property(nonatomic, copy, nullable) NSString *loginHint;

/// Creates the default options.
#if TARGET_OS_IOS || TARGET_OS_MACCATALYST
+ (instancetype)defaultOptionsWithConfiguration:(nullable GIDConfiguration *)configuration
                       presentingViewController:(nullable UIViewController *)presentingViewController
                                      loginHint:(nullable NSString *)loginHint
                                  addScopesFlow:(BOOL)addScopesFlow
                                     completion:(nullable GIDSignInCompletion)completion;

+ (instancetype)defaultOptionsWithConfiguration:(nullable GIDConfiguration *)configuration
                       presentingViewController:(nullable UIViewController *)presentingViewController
                                      loginHint:(nullable NSString *)loginHint
                                  addScopesFlow:(BOOL)addScopesFlow
                                         scopes:(nullable NSArray *)scopes
                                     completion:(nullable GIDSignInCompletion)completion;

#elif TARGET_OS_OSX
+ (instancetype)defaultOptionsWithConfiguration:(nullable GIDConfiguration *)configuration
                               presentingWindow:(nullable NSWindow *)presentingWindow
                                      loginHint:(nullable NSString *)loginHint
                                  addScopesFlow:(BOOL)addScopesFlow
                                     completion:(nullable GIDSignInCompletion)completion;

+ (instancetype)defaultOptionsWithConfiguration:(nullable GIDConfiguration *)configuration
                               presentingWindow:(nullable NSWindow *)presentingWindow
                                      loginHint:(nullable NSString *)loginHint
                                  addScopesFlow:(BOOL)addScopesFlow
                                         scopes:(nullable NSArray *)scopes
                                     completion:(nullable GIDSignInCompletion)completion;
#endif // TARGET_OS_IOS || TARGET_OS_MACCATALYST

/// Creates the options to sign in silently.
+ (instancetype)silentOptionsWithCompletion:(GIDSignInCompletion)completion;

/// Creates options with the same values as the receiver, except for the "extra parameters", and
/// continuation flag, which are replaced by the arguments passed to this method.
- (instancetype)optionsWithExtraParameters:(NSDictionary *)extraParams
                           forContinuation:(BOOL)continuation;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInInternalOptions.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInPreferences.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

extern NSString *const kSDKVersionLoggingParameter;
extern NSString *const kEnvironmentLoggingParameter;

NSString* GIDVersion(void);

NSString* GIDEnvironment(void);

@interface GIDSignInPreferences : NSObject

+ (NSString *)googleAuthorizationServer;
+ (NSString *)googleTokenServer;
+ (NSString *)googleUserInfoServer;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInPreferences.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInResult_Private.h
===
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "GoogleSignIn/Sources/Public/GoogleSignIn/GIDSignInResult.h"

NS_ASSUME_NONNULL_BEGIN

// Private |GIDSignInResult| methods that are used in this SDK.
@interface GIDSignInResult ()

// Private initializer for |GIDSignInResult|.
// @param user The current GIDGoogleUser.
// @param severAuthCode The one-time authorization code for backend to exchange
//     access and refresh tokens.
- (instancetype)initWithGoogleUser:(GIDGoogleUser *)user
                    serverAuthCode:(nullable NSString *)serverAuthCode;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInResult_Private.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInStrings.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

// Provides localized strings.
// TODO(xiangtian) At some point we should probably convert this so that it's auto-generated from
// a script. This is a "better than what was there before, and what we need now, but probably not
// ideal" solution.
@interface GIDSignInStrings : NSObject

// Returns the localized string for the key if available, or the supplied default text if not.
+ (nullable NSString *)localizedStringForKey:(NSString *)key text:(NSString *)text;

// "Sign In"
+ (nullable NSString *)signInString;

// "Sign in with Google"
+ (nullable NSString *)signInWithGoogleString;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignInStrings.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignIn_Private.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <TargetConditionals.h>

#import "GoogleSignIn/Sources/Public/GoogleSignIn/GIDSignIn.h"

#if __has_include(<UIKit/UIKit.h>)
#import <UIKit/UIKit.h>
#elif __has_include(<AppKit/AppKit.h>)
#import <AppKit/AppKit.h>
#endif

NS_ASSUME_NONNULL_BEGIN

@class GIDGoogleUser;
@class GIDSignInInternalOptions;
@class GTMKeychainStore;

/// Represents a completion block that takes a `GIDSignInResult` on success or an error if the
/// operation was unsuccessful.
typedef void (^GIDSignInCompletion)(GIDSignInResult *_Nullable signInResult,
                                    NSError *_Nullable error);

/// Represents a completion block that takes an error if the operation was unsuccessful.
typedef void (^GIDDisconnectCompletion)(NSError *_Nullable error);

// Private |GIDSignIn| methods that are used internally in this SDK and other Google SDKs.
@interface GIDSignIn ()

/// Redeclare |currentUser| as readwrite for internal use.
@property(nonatomic, readwrite, nullable) GIDGoogleUser *currentUser;

/// Private initializer for |GIDSignIn|.
- (instancetype)initPrivate;

/// Private initializer taking a `GTMKeychainStore` to use during tests.
- (instancetype)initWithKeychainStore:(GTMKeychainStore *)keychainStore;

/// Authenticates with extra options.
- (void)signInWithOptions:(GIDSignInInternalOptions *)options;

/// Restores a previously authenticated user from the keychain synchronously without refreshing
/// the access token or making a userinfo request.
/// 
/// The currentUser.profile will be nil unless the profile data can be extracted from the ID token.
///
/// @return NO if there is no user restored from the keychain.
- (BOOL)restorePreviousSignInNoRefresh;

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST

/// Starts an interactive consent flow on iOS to add scopes to the current user's grants.
///
/// The completion will be called at the end of this process.  If successful, a `GIDSignInResult`
/// instance will be returned reflecting the new scopes and saved sign-in state will be updated.
///
/// @param scopes The scopes to ask the user to consent to.
/// @param presentingViewController The view controller used to present `SFSafariViewController` on
///     iOS 9 and 10 and to supply `presentationContextProvider` for `ASWebAuthenticationSession` on
///     iOS 13+.
/// @param completion The block that is called on completion.  This block will be called asynchronously
///     on the main queue.
- (void)addScopes:(NSArray<NSString *> *)scopes
    presentingViewController:(UIViewController *)presentingViewController
                  completion:(nullable GIDSignInCompletion)completion
    NS_EXTENSION_UNAVAILABLE("The add scopes flow is not supported in App Extensions.");

#elif TARGET_OS_OSX

/// Starts an interactive consent flow on macOS to add scopes to the current user's grants.
///
/// The completion will be called at the end of this process.  If successful, a `GIDSignInResult`
/// instance will be returned reflecting the new scopes and saved sign-in state will be updated.
///
/// @param scopes An array of scopes to ask the user to consent to.
/// @param presentingWindow The window used to supply `presentationContextProvider` for
///     `ASWebAuthenticationSession`.
/// @param completion The block that is called on completion.  This block will be called asynchronously
///     on the main queue.
- (void)addScopes:(NSArray<NSString *> *)scopes
    presentingWindow:(NSWindow *)presentingWindow
          completion:(nullable GIDSignInCompletion)completion;

#endif

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDSignIn_Private.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDToken_Private.h
===
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "GoogleSignIn/Sources/Public/GoogleSignIn/GIDToken.h"

NS_ASSUME_NONNULL_BEGIN

// Private |GIDToken| methods that are used in this SDK.
@interface GIDToken ()

// Private initializer for |GIDToken|.
// @param token The token String.
// @param expirationDate The expiration date of the token.
- (instancetype)initWithTokenString:(NSString *)tokenString
                     expirationDate:(nullable NSDate *)expirationDate;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/GIDToken_Private.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/NSBundle+GID3PAdditions.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@interface NSBundle (GID3PAdditions)

// Gets the bundle for the SDK framework.
+ (nullable NSBundle *)gid_frameworkBundle;

// Registers fonts needed for the SDK to work. Okay to call multiple times.
+ (void)gid_registerFonts;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/NSBundle+GID3PAdditions.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDConfiguration.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/// This class represents the client configuration provided by the developer.
@interface GIDConfiguration : NSObject <NSCopying, NSSecureCoding>

/// The client ID of the app from the Google Cloud Console.
@property(nonatomic, readonly) NSString *clientID;

/// The client ID of the home server.  This will be returned as the `audience` property of the
/// OpenID Connect ID token.  For more info on the ID token:
/// https://developers.google.com/identity/sign-in/ios/backend-auth
@property(nonatomic, readonly, nullable) NSString *serverClientID;

/// The Google Apps domain to which users must belong to sign in.  To verify, check
/// `GIDGoogleUser`'s `hostedDomain` property.
@property(nonatomic, readonly, nullable) NSString *hostedDomain;

/// The OpenID2 realm of the home server. This allows Google to include the user's OpenID
/// Identifier in the OpenID Connect ID token.
@property(nonatomic, readonly, nullable) NSString *openIDRealm;

/// Unavailable.  Please use `initWithClientID:` or one of the other initializers below.
/// :nodoc:
+ (instancetype)new NS_UNAVAILABLE;

/// Unavailable.  Please use `initWithClientID:` or one of the other initializers below.
/// :nodoc:
- (instancetype)init NS_UNAVAILABLE;

/// Initialize a `GIDConfiguration` object with a client ID.
///
/// @param clientID The client ID of the app.
/// @return An initialized `GIDConfiguration` instance.
- (instancetype)initWithClientID:(NSString *)clientID;

/// Initialize a `GIDConfiguration` object with a client ID and server client ID.
///
/// @param clientID The client ID of the app.
/// @param serverClientID The server's client ID.
/// @return An initialized `GIDConfiguration` instance.
- (instancetype)initWithClientID:(NSString *)clientID
                  serverClientID:(nullable NSString *)serverClientID;

/// Initialize a `GIDConfiguration` object by specifying all available properties.
///
/// @param clientID The client ID of the app.
/// @param serverClientID The server's client ID.
/// @param hostedDomain The Google Apps domain to be used.
/// @param openIDRealm The OpenID realm to be used.
/// @return An initialized `GIDConfiguration` instance.
- (instancetype)initWithClientID:(NSString *)clientID
                  serverClientID:(nullable NSString *)serverClientID
                    hostedDomain:(nullable NSString *)hostedDomain
                     openIDRealm:(nullable NSString *)openIDRealm NS_DESIGNATED_INITIALIZER;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDConfiguration.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDGoogleUser.h
===
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import <TargetConditionals.h>

#if __has_include(<UIKit/UIKit.h>)
#import <UIKit/UIKit.h>
#elif __has_include(<AppKit/AppKit.h>)
#import <AppKit/AppKit.h>
#endif

#ifdef SWIFT_PACKAGE
@import GTMSessionFetcherCore;
#else
#import <GTMSessionFetcher/GTMSessionFetcher.h>
#endif

@class GIDConfiguration;
@class GIDSignInResult;
@class GIDToken;
@class GIDProfileData;

NS_ASSUME_NONNULL_BEGIN

/// This class represents a signed-in user.
@interface GIDGoogleUser : NSObject <NSSecureCoding>

/// The Google user ID.
@property(nonatomic, readonly, nullable) NSString *userID;

/// The basic profile data for the user.
@property(nonatomic, readonly, nullable) GIDProfileData *profile;

/// The OAuth2 scopes granted to the app in an array of `NSString`.
@property(nonatomic, readonly, nullable) NSArray<NSString *> *grantedScopes;

/// The configuration that was used to sign in this user.
@property(nonatomic, readonly) GIDConfiguration *configuration;

/// The OAuth2 access token to access Google services.
@property(nonatomic, readonly) GIDToken *accessToken;

/// The OAuth2 refresh token to exchange for new access tokens.
@property(nonatomic, readonly) GIDToken *refreshToken;

/// The OpenID Connect ID token that identifies the user.
///
/// Send this token to your server to authenticate the user there. For more information on this topic,
/// see https://developers.google.com/identity/sign-in/ios/backend-auth.
@property(nonatomic, readonly, nullable) GIDToken *idToken;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
/// The authorizer for use with `GTLRService`, `GTMSessionFetcher`, or `GTMHTTPFetcher`.
@property(nonatomic, readonly) id<GTMFetcherAuthorizationProtocol> fetcherAuthorizer;
#pragma clang diagnostic pop

/// Refresh the user's access and ID tokens if they have expired or are about to expire.
///
/// @param completion A completion block that takes a `GIDGoogleUser` or an error if the attempt to
///     refresh tokens was unsuccessful.  The block will be called asynchronously on the main queue.
- (void)refreshTokensIfNeededWithCompletion:(void (^)(GIDGoogleUser *_Nullable user,
                                                      NSError *_Nullable error))completion;

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST

/// Starts an interactive consent flow on iOS to add new scopes to the user's `grantedScopes`.
///
/// The completion will be called at the end of this process.  If successful, a `GIDSignInResult`
/// instance will be returned reflecting the new scopes and saved sign-in state will be updated.
///
/// @param scopes The scopes to ask the user to consent to.
/// @param presentingViewController The view controller used to present `SFSafariViewController` on
///     iOS 9 and 10 and to supply `presentationContextProvider` for `ASWebAuthenticationSession` on
///     iOS 13+.
/// @param completion The optional block that is called on completion.  This block will be called
///     asynchronously on the main queue.
- (void)addScopes:(NSArray<NSString *> *)scopes
    presentingViewController:(UIViewController *)presentingViewController
                  completion:(nullable void (^)(GIDSignInResult *_Nullable signInResult,
                                                NSError *_Nullable error))completion
    NS_EXTENSION_UNAVAILABLE("The add scopes flow is not supported in App Extensions.");

#elif TARGET_OS_OSX

/// Starts an interactive consent flow on macOS to add new scopes to the user's `grantedScopes`.
///
/// The completion will be called at the end of this process.  If successful, a `GIDSignInResult`
/// instance will be returned reflecting the new scopes and saved sign-in state will be updated.
///
/// @param scopes An array of scopes to ask the user to consent to.
/// @param presentingWindow The window used to supply `presentationContextProvider` for
///     `ASWebAuthenticationSession`.
/// @param completion The optional block that is called on completion.  This block will be called
///     asynchronously on the main queue.
- (void)addScopes:(NSArray<NSString *> *)scopes
    presentingWindow:(NSWindow *)presentingWindow
          completion:(nullable void (^)(GIDSignInResult *_Nullable signInResult,
                                        NSError *_Nullable error))completion;

#endif

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDGoogleUser.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDProfileData.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/// This class represents the basic profile information of a `GIDGoogleUser`.
@interface GIDProfileData : NSObject <NSCopying, NSSecureCoding>

/// The Google user's email.
@property(nonatomic, readonly) NSString *email;

/// The Google user's full name.
@property(nonatomic, readonly) NSString *name;

/// The Google user's given name.
@property(nonatomic, readonly, nullable) NSString *givenName;

/// The Google user's family name.
@property(nonatomic, readonly, nullable) NSString *familyName;

/// Whether or not the user has profile image.
@property(nonatomic, readonly) BOOL hasImage;

/// Gets the user's profile image URL for the given dimension in pixels for each side of the square.
///
/// @param dimension The desired height (and width) of the profile image.
/// @return The URL of the user's profile image.
- (nullable NSURL *)imageURLWithDimension:(NSUInteger)dimension;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDProfileData.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDSignIn.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import <TargetConditionals.h>

#if __has_include(<UIKit/UIKit.h>)
#import <UIKit/UIKit.h>
#elif __has_include(<AppKit/AppKit.h>)
#import <AppKit/AppKit.h>
#endif

@class GIDConfiguration;
@class GIDGoogleUser;
@class GIDSignInResult;

NS_ASSUME_NONNULL_BEGIN

/// The error domain for `NSError`s returned by the Google Sign-In SDK.
extern NSErrorDomain const kGIDSignInErrorDomain;

/// A list of potential error codes returned from the Google Sign-In SDK.
typedef NS_ERROR_ENUM(kGIDSignInErrorDomain, GIDSignInErrorCode) {
  /// Indicates an unknown error has occurred.
  kGIDSignInErrorCodeUnknown = -1,
  /// Indicates a problem reading or writing to the application keychain.
  kGIDSignInErrorCodeKeychain = -2,
  /// Indicates there are no valid auth tokens in the keychain. This error code will be returned by
  /// `restorePreviousSignIn` if the user has not signed in before or if they have since signed out.
  kGIDSignInErrorCodeHasNoAuthInKeychain = -4,
  /// Indicates the user canceled the sign in request.
  kGIDSignInErrorCodeCanceled = -5,
  /// Indicates an Enterprise Mobility Management related error has occurred.
  kGIDSignInErrorCodeEMM = -6,
  /// Indicates the requested scopes have already been granted to the `currentUser`.
  kGIDSignInErrorCodeScopesAlreadyGranted = -8,
  /// Indicates there is an operation on a previous user.
  kGIDSignInErrorCodeMismatchWithCurrentUser = -9,
};

/// This class is used to sign in users with their Google account and manage their session.
///
/// For reference, please see "Google Sign-In for iOS and macOS" at
/// https://developers.google.com/identity/sign-in/ios
@interface GIDSignIn : NSObject

/// The shared `GIDSignIn` instance.
@property(class, nonatomic, readonly) GIDSignIn *sharedInstance;

/// The `GIDGoogleUser` object representing the current user or `nil` if there is no signed-in user.
@property(nonatomic, readonly, nullable) GIDGoogleUser *currentUser;

/// The active configuration for this instance of `GIDSignIn`.
@property(nonatomic, nullable) GIDConfiguration *configuration;

/// Unavailable. Use the `sharedInstance` property to instantiate `GIDSignIn`.
/// :nodoc:
+ (instancetype)new NS_UNAVAILABLE;

/// Unavailable. Use the `sharedInstance` property to instantiate `GIDSignIn`.
/// :nodoc:
- (instancetype)init NS_UNAVAILABLE;

/// This method should be called from your `UIApplicationDelegate`'s `application:openURL:options:`
/// method.
///
/// @param url The URL that was passed to the app.
/// @return `YES` if `GIDSignIn` handled this URL.
- (BOOL)handleURL:(NSURL *)url;

/// Checks if there is a previous user sign-in saved in keychain.
///
/// @return `YES` if there is a previous user sign-in saved in keychain.
- (BOOL)hasPreviousSignIn;

/// Attempts to restore a previous user sign-in without interaction. 
///
/// Restores user from the local cache and refreshes tokens if they have expired (>1 hour).
///
/// @param completion The block that is called on completion.  This block will be called asynchronously
///     on the main queue.
- (void)restorePreviousSignInWithCompletion:(nullable void (^)(GIDGoogleUser *_Nullable user,
                                                               NSError *_Nullable error))completion;

/// Signs out the `currentUser`, removing it from the keychain.
- (void)signOut;

/// Disconnects the `currentUser` by signing them out and revoking all OAuth2 scope grants made to the app.
///
/// @param completion The optional block that is called on completion.
///     This block will be called asynchronously on the main queue.
- (void)disconnectWithCompletion:(nullable void (^)(NSError *_Nullable error))completion;

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST

/// Starts an interactive sign-in flow on iOS.
///
/// The completion will be called at the end of this process.  Any saved sign-in state will be
/// replaced by the result of this flow.  Note that this method should not be called when the app is
/// starting up, (e.g in `application:didFinishLaunchingWithOptions:`); instead use the
/// `restorePreviousSignInWithCompletion:` method to restore a previous sign-in.
///
/// @param presentingViewController The view controller used to present `SFSafariViewController` on
///     iOS 9 and 10 and to supply `presentationContextProvider` for `ASWebAuthenticationSession` on
///     iOS 13+.
/// @param completion The optional block that is called on completion.  This block will
///     be called asynchronously on the main queue.
- (void)signInWithPresentingViewController:(UIViewController *)presentingViewController
                                completion:
    (nullable void (^)(GIDSignInResult *_Nullable signInResult,
                       NSError *_Nullable error))completion
    NS_EXTENSION_UNAVAILABLE("The sign-in flow is not supported in App Extensions.");

/// Starts an interactive sign-in flow on iOS using the provided hint.
///
/// The completion will be called at the end of this process.  Any saved sign-in state will be
/// replaced by the result of this flow.  Note that this method should not be called when the app is
/// starting up, (e.g in `application:didFinishLaunchingWithOptions:`); instead use the
/// `restorePreviousSignInWithCompletion:` method to restore a previous sign-in.
///
/// @param presentingViewController The view controller used to present `SFSafariViewController` on
///     iOS 9 and 10 and to supply `presentationContextProvider` for `ASWebAuthenticationSession` on
///     iOS 13+.
/// @param hint An optional hint for the authorization server, for example the user's ID or email
///     address, to be prefilled if possible.
/// @param completion The optional block that is called on completion.  This block will
///     be called asynchronously on the main queue.
- (void)signInWithPresentingViewController:(UIViewController *)presentingViewController
                                      hint:(nullable NSString *)hint
                                completion:
    (nullable void (^)(GIDSignInResult *_Nullable signInResult,
                       NSError *_Nullable error))completion
    NS_EXTENSION_UNAVAILABLE("The sign-in flow is not supported in App Extensions.");

/// Starts an interactive sign-in flow on iOS using the provided hint and additional scopes.
///
/// The completion will be called at the end of this process.  Any saved sign-in state will be
/// replaced by the result of this flow.  Note that this method should not be called when the app is
/// starting up, (e.g in `application:didFinishLaunchingWithOptions:`); instead use the
/// `restorePreviousSignInWithCompletion:` method to restore a previous sign-in.
///
/// @param presentingViewController The view controller used to present `SFSafariViewController` on
///     iOS 9 and 10.
/// @param hint An optional hint for the authorization server, for example the user's ID or email
///     address, to be prefilled if possible.
/// @param additionalScopes An optional array of scopes to request in addition to the basic profile scopes.
/// @param completion The optional block that is called on completion.  This block will
///     be called asynchronously on the main queue.
- (void)signInWithPresentingViewController:(UIViewController *)presentingViewController
                                      hint:(nullable NSString *)hint
                          additionalScopes:(nullable NSArray<NSString *> *)additionalScopes
                                completion:
    (nullable void (^)(GIDSignInResult *_Nullable signInResult,
                       NSError *_Nullable error))completion
    NS_EXTENSION_UNAVAILABLE("The sign-in flow is not supported in App Extensions.");

#elif TARGET_OS_OSX

/// Starts an interactive sign-in flow on macOS.
///
/// The completion will be called at the end of this process.  Any saved sign-in state will be
/// replaced by the result of this flow.  Note that this method should not be called when the app is
/// starting up, (e.g in `application:didFinishLaunchingWithOptions:`); instead use the
/// `restorePreviousSignInWithCompletion:` method to restore a previous sign-in.
///
/// @param presentingWindow The window used to supply `presentationContextProvider` for `ASWebAuthenticationSession`.
/// @param completion The optional block that is called on completion.  This block will
///     be called asynchronously on the main queue.
- (void)signInWithPresentingWindow:(NSWindow *)presentingWindow
                        completion:(nullable void (^)(GIDSignInResult *_Nullable signInResult,
                                                      NSError *_Nullable error))completion;

/// Starts an interactive sign-in flow on macOS using the provided hint.
///
/// The completion will be called at the end of this process.  Any saved sign-in state will be
/// replaced by the result of this flow.  Note that this method should not be called when the app is
/// starting up, (e.g in `application:didFinishLaunchingWithOptions:`); instead use the
/// `restorePreviousSignInWithCompletion:` method to restore a previous sign-in.
///
/// @param presentingWindow The window used to supply `presentationContextProvider` for `ASWebAuthenticationSession`.
/// @param hint An optional hint for the authorization server, for example the user's ID or email
///     address, to be prefilled if possible.
/// @param completion The optional block that is called on completion.  This block will
///     be called asynchronously on the main queue.
- (void)signInWithPresentingWindow:(NSWindow *)presentingWindow
                              hint:(nullable NSString *)hint
                        completion:(nullable void (^)(GIDSignInResult *_Nullable signInResult,
                                                      NSError *_Nullable error))completion;

/// Starts an interactive sign-in flow on macOS using the provided hint.
///
/// The completion will be called at the end of this process.  Any saved sign-in state will be
/// replaced by the result of this flow.  Note that this method should not be called when the app is
/// starting up, (e.g in `application:didFinishLaunchingWithOptions:`); instead use the
/// `restorePreviousSignInWithCompletion:` method to restore a previous sign-in.
///
/// @param presentingWindow The window used to supply `presentationContextProvider` for `ASWebAuthenticationSession`.
/// @param hint An optional hint for the authorization server, for example the user's ID or email
///     address, to be prefilled if possible.
/// @param additionalScopes An optional array of scopes to request in addition to the basic profile scopes.
/// @param completion The optional block that is called on completion.  This block will
///     be called asynchronously on the main queue.
- (void)signInWithPresentingWindow:(NSWindow *)presentingWindow
                              hint:(nullable NSString *)hint
                  additionalScopes:(nullable NSArray<NSString *> *)additionalScopes
                        completion:(nullable void (^)(GIDSignInResult *_Nullable signInResult,
                                                      NSError *_Nullable error))completion;

#endif

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDSignIn.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDSignInButton.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <TargetConditionals.h>

#if TARGET_OS_IOS || TARGET_OS_MACCATALYST

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

/// The layout styles supported by the `GIDSignInButton`.
///
/// The minimum size of the button depends on the language used for text.
/// The following dimensions (in points) fit for all languages:
/// - kGIDSignInButtonStyleStandard: 230 x 48
/// - kGIDSignInButtonStyleWide:     312 x 48
/// - kGIDSignInButtonStyleIconOnly: 48 x 48 (no text, fixed size)
typedef NS_ENUM(NSInteger, GIDSignInButtonStyle) {
  kGIDSignInButtonStyleStandard = 0,
  kGIDSignInButtonStyleWide = 1,
  kGIDSignInButtonStyleIconOnly = 2
};

/// The color schemes supported by the `GIDSignInButton`.
typedef NS_ENUM(NSInteger, GIDSignInButtonColorScheme) {
  kGIDSignInButtonColorSchemeDark = 0,
  kGIDSignInButtonColorSchemeLight = 1
};

/// This class provides the "Sign in with Google" button.
///
/// You can instantiate this class programmatically or from a NIB file. You should connect this
/// control to an `IBAction`, or something similar, that calls
/// signInWithPresentingViewController:completion: on `GIDSignIn` and add it to your view
/// hierarchy.
@interface GIDSignInButton : UIControl

/// The layout style for the sign-in button.
/// Possible values:
/// - kGIDSignInButtonStyleStandard: 230 x 48 (default)
/// - kGIDSignInButtonStyleWide:     312 x 48
/// - kGIDSignInButtonStyleIconOnly: 48 x 48 (no text, fixed size)
@property(nonatomic, assign) GIDSignInButtonStyle style;

/// The color scheme for the sign-in button.
/// Possible values:
/// - kGIDSignInButtonColorSchemeDark
/// - kGIDSignInButtonColorSchemeLight (default)
@property(nonatomic, assign) GIDSignInButtonColorScheme colorScheme;

@end

NS_ASSUME_NONNULL_END

#endif

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDSignInButton.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDSignInResult.h
===
/*
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

#import <Foundation/Foundation.h>

@class GIDGoogleUser;

NS_ASSUME_NONNULL_BEGIN

/// A helper object that contains the result of a successful signIn or addScopes flow.
@interface GIDSignInResult : NSObject

/// The updated `GIDGoogleUser` instance for the user who just completed the flow.
@property(nonatomic, readonly) GIDGoogleUser *user;

/// An OAuth2 authorization code for the home server.
@property(nonatomic, readonly, nullable) NSString *serverAuthCode;

/// Unsupported.
+ (instancetype)new NS_UNAVAILABLE;

/// Unsupported.
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDSignInResult.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDToken.h
===
/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/// This class represents an OAuth2 or OpenID Connect token.
@interface GIDToken : NSObject <NSSecureCoding>

/// The token string.
@property(nonatomic, copy, readonly) NSString *tokenString;

/// The estimated expiration date of the token.
@property(nonatomic, readonly, nullable) NSDate *expirationDate;

/// Check if current token is equal to another one.
///
/// @param otherToken Another token to compare.
- (BOOL)isEqualToToken:(GIDToken *)otherToken;

/// Unavailable.
/// :nodoc:
+ (instancetype)new NS_UNAVAILABLE;

/// Unavailable.
/// :nodoc:
- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GIDToken.h ===

===
Path: iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GoogleSignIn.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#import <TargetConditionals.h>

#import "GIDConfiguration.h"
#import "GIDGoogleUser.h"
#import "GIDProfileData.h"
#import "GIDSignIn.h"
#import "GIDToken.h"
#import "GIDSignInResult.h"
#if TARGET_OS_IOS || TARGET_OS_MACCATALYST
#import "GIDSignInButton.h"
#endif

=== end iosApp/Pods/GoogleSignIn/GoogleSignIn/Sources/Public/GoogleSignIn/GoogleSignIn.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Internal/GULAppDelegateSwizzler_Private.h
===
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "GoogleUtilities/AppDelegateSwizzler/Public/GoogleUtilities/GULAppDelegateSwizzler.h"
#import "GoogleUtilities/Network/Public/GoogleUtilities/GULMutableDictionary.h"

@class GULApplication;

NS_ASSUME_NONNULL_BEGIN

@interface GULAppDelegateSwizzler ()

/** ISA Swizzles the given appDelegate as the original app delegate would be.
 *
 *  @param appDelegate The object that needs to be isa swizzled. This should conform to the
 *      application delegate protocol.
 */
+ (void)proxyAppDelegate:(id<GULApplicationDelegate>)appDelegate;

/** Returns a dictionary containing interceptor IDs mapped to a GULZeroingWeakContainer.
 *
 *  @return A dictionary of the form {NSString : GULZeroingWeakContainer}, where the NSString is
 *      the interceptorID.
 */
+ (GULMutableDictionary *)interceptors;

/** Deletes all the registered interceptors. */
+ (void)clearInterceptors;

/** Resets the token that prevents the app delegate proxy from being isa swizzled multiple times. */
+ (void)resetProxyOriginalDelegateOnceToken;

/** Returns the original app delegate that was proxied.
 *
 *  @return The original app delegate instance that was proxied.
 */
+ (id<GULApplicationDelegate>)originalDelegate;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Internal/GULAppDelegateSwizzler_Private.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Internal/GULSceneDelegateSwizzler_Private.h
===
/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import "GoogleUtilities/AppDelegateSwizzler/Public/GoogleUtilities/GULSceneDelegateSwizzler.h"
#import "GoogleUtilities/Network/Public/GoogleUtilities/GULMutableDictionary.h"

NS_ASSUME_NONNULL_BEGIN

@interface GULSceneDelegateSwizzler ()

#if UISCENE_SUPPORTED

/** Returns a dictionary containing interceptor IDs mapped to a GULZeroingWeakContainer.
 *
 *  @return A dictionary of the form {NSString : GULZeroingWeakContainer}, where the NSString is
 *      the interceptorID.
 */
+ (GULMutableDictionary *)interceptors;

/** Deletes all the registered interceptors. */
+ (void)clearInterceptors;

/** ISA Swizzles the given appDelegate as the original app delegate would be.
 *
 *  @param scene The scene whose delegate needs to be isa swizzled. This should conform to the
 *      scene delegate protocol.
 */
+ (void)proxySceneDelegateIfNeeded:(UIScene *)scene API_AVAILABLE(ios(13.0), tvos(13.0));

#endif  // UISCENE_SUPPORTED

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Internal/GULSceneDelegateSwizzler_Private.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Public/GoogleUtilities/GULAppDelegateSwizzler.h
===
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "GULApplication.h"

NS_ASSUME_NONNULL_BEGIN

typedef NSString *const GULAppDelegateInterceptorID;

/** This class contains methods that isa swizzle the app delegate. */
@interface GULAppDelegateSwizzler : NSProxy

/** Registers an app delegate interceptor whose methods will be invoked as they're invoked on the
 *  original app delegate.
 *
 *  @param interceptor An instance of a class that conforms to the application delegate protocol.
 *      The interceptor is NOT retained.
 *  @return A unique GULAppDelegateInterceptorID if interceptor was successfully registered; nil
 *      if it fails.
 */
+ (nullable GULAppDelegateInterceptorID)registerAppDelegateInterceptor:
    (id<GULApplicationDelegate>)interceptor;

/** Unregisters an interceptor with the given ID if it exists.
 *
 *  @param interceptorID The object that was generated when the interceptor was registered.
 */
+ (void)unregisterAppDelegateInterceptorWithID:(GULAppDelegateInterceptorID)interceptorID;

/** This method ensures that the original app delegate has been proxied. Call this before
 *  registering your interceptor. This method is safe to call multiple times (but it only proxies
 *  the app delegate once).
 *
 *  This method doesn't proxy APNS related methods:
 *  @code
 *    - application:didRegisterForRemoteNotificationsWithDeviceToken:
 *    - application:didFailToRegisterForRemoteNotificationsWithError:
 *    - application:didReceiveRemoteNotification:fetchCompletionHandler:
 *    - application:didReceiveRemoteNotification:
 *  @endcode
 *
 *  To proxy these methods use +[GULAppDelegateSwizzler
 *  proxyOriginalDelegateIncludingAPNSMethods]. The methods have to be proxied separately to
 *  avoid potential warnings from Apple review about missing Push Notification Entitlement (e.g.
 *  https://github.com/firebase/firebase-ios-sdk/issues/2807)
 *
 *  The method has no effect for extensions.
 *
 *  @see proxyOriginalDelegateIncludingAPNSMethods
 */
+ (void)proxyOriginalDelegate;

/** This method ensures that the original app delegate has been proxied including APNS related
 *  methods. Call this before registering your interceptor. This method is safe to call multiple
 *  times (but it only proxies the app delegate once) or
 *  after +[GULAppDelegateSwizzler proxyOriginalDelegate]
 *
 *  This method calls +[GULAppDelegateSwizzler proxyOriginalDelegate] under the hood.
 *  After calling this method the following App Delegate methods will be proxied in addition to
 *  the methods proxied by proxyOriginalDelegate:
 *  @code
 *    - application:didRegisterForRemoteNotificationsWithDeviceToken:
 *    - application:didFailToRegisterForRemoteNotificationsWithError:
 *    - application:didReceiveRemoteNotification:fetchCompletionHandler:
 *    - application:didReceiveRemoteNotification:
 *  @endcode
 *
 *  The method has no effect for extensions.
 *
 *  @see proxyOriginalDelegate
 */
+ (void)proxyOriginalDelegateIncludingAPNSMethods;

/** Indicates whether app delegate proxy is explicitly disabled or enabled. Enabled by default.
 *
 *  @return YES if AppDelegateProxy is Enabled, NO otherwise.
 */
+ (BOOL)isAppDelegateProxyEnabled;

/** Returns the current sharedApplication.
 *
 *  @return the current application instance if in an app, or nil if in extension or if it doesn't
 * exist.
 */
+ (nullable GULApplication *)sharedApplication;

/** Do not initialize this class. */
- (instancetype)init NS_UNAVAILABLE;

NS_ASSUME_NONNULL_END

@end

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Public/GoogleUtilities/GULAppDelegateSwizzler.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Public/GoogleUtilities/GULApplication.h
===
/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#if TARGET_OS_IOS || TARGET_OS_TV || (defined(TARGET_OS_VISION) && TARGET_OS_VISION)

#import <UIKit/UIKit.h>

#define GULApplication UIApplication
#define GULApplicationDelegate UIApplicationDelegate
#define GULUserActivityRestoring UIUserActivityRestoring

static NSString *const kGULApplicationClassName = @"UIApplication";

#elif TARGET_OS_OSX

#import <AppKit/AppKit.h>

#define GULApplication NSApplication
#define GULApplicationDelegate NSApplicationDelegate
#define GULUserActivityRestoring NSUserActivityRestoring

static NSString *const kGULApplicationClassName = @"NSApplication";

#elif TARGET_OS_WATCH

#import <WatchKit/WatchKit.h>

// We match the according watchOS API but swizzling should not work in watch
#define GULApplication WKExtension
#define GULApplicationDelegate WKExtensionDelegate
#define GULUserActivityRestoring NSUserActivityRestoring

static NSString *const kGULApplicationClassName = @"WKExtension";

#endif

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Public/GoogleUtilities/GULApplication.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Public/GoogleUtilities/GULSceneDelegateSwizzler.h
===
/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#import <TargetConditionals.h>

#if !TARGET_OS_OSX
#import <UIKit/UIKit.h>
#endif  // !TARGET_OS_OSX

#if ((TARGET_OS_IOS || TARGET_OS_TV) && (__IPHONE_OS_VERSION_MAX_ALLOWED >= 130000))
#define UISCENE_SUPPORTED 1
#endif

NS_ASSUME_NONNULL_BEGIN

typedef NSString *const GULSceneDelegateInterceptorID;

/** This class contains methods that isa swizzle the scene delegate. */
@interface GULSceneDelegateSwizzler : NSProxy

#if UISCENE_SUPPORTED

/** Registers a scene delegate interceptor whose methods will be invoked as they're invoked on the
 *  original scene delegate.
 *
 *  @param interceptor An instance of a class that conforms to the application delegate protocol.
 *      The interceptor is NOT retained.
 *  @return A unique GULSceneDelegateInterceptorID if interceptor was successfully registered; nil
 *      if it fails.
 */
+ (nullable GULSceneDelegateInterceptorID)registerSceneDelegateInterceptor:
    (id<UISceneDelegate>)interceptor API_AVAILABLE(ios(13.0), tvos(13.0));

/** Unregisters an interceptor with the given ID if it exists.
 *
 *  @param interceptorID The object that was generated when the interceptor was registered.
 */
+ (void)unregisterSceneDelegateInterceptorWithID:(GULSceneDelegateInterceptorID)interceptorID
    API_AVAILABLE(ios(13.0), tvos(13.0));

/** Do not initialize this class. */
- (instancetype)init NS_UNAVAILABLE;

#endif  // UISCENE_SUPPORTED

/** This method ensures that the original scene delegate has been proxied. Call this before
 *  registering your interceptor. This method is safe to call multiple times (but it only proxies
 *  the scene delegate once).
 *
 *  The method has no effect for extensions.
 */
+ (void)proxyOriginalSceneDelegate;

/** Indicates whether scene delegate proxy is explicitly disabled or enabled. Enabled by default.
 *
 *  @return YES if SceneDelegateProxy is Enabled, NO otherwise.
 */
+ (BOOL)isSceneDelegateProxyEnabled;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/AppDelegateSwizzler/Public/GoogleUtilities/GULSceneDelegateSwizzler.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Common/GULLoggerCodes.h
===
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

typedef NS_ENUM(NSInteger, GULSwizzlerMessageCode) {
  // App Delegate Swizzling.
  kGULSwizzlerMessageCodeAppDelegateSwizzling000 = 1000,                 // I-SWZ001000
  kGULSwizzlerMessageCodeAppDelegateSwizzling001 = 1001,                 // I-SWZ001001
  kGULSwizzlerMessageCodeAppDelegateSwizzling002 = 1002,                 // I-SWZ001002
  kGULSwizzlerMessageCodeAppDelegateSwizzling003 = 1003,                 // I-SWZ001003
  kGULSwizzlerMessageCodeAppDelegateSwizzling004 = 1004,                 // I-SWZ001004
  kGULSwizzlerMessageCodeAppDelegateSwizzling005 = 1005,                 // I-SWZ001005
  kGULSwizzlerMessageCodeAppDelegateSwizzling006 = 1006,                 // I-SWZ001006
  kGULSwizzlerMessageCodeAppDelegateSwizzling007 = 1007,                 // I-SWZ001007
  kGULSwizzlerMessageCodeAppDelegateSwizzling008 = 1008,                 // I-SWZ001008
  kGULSwizzlerMessageCodeAppDelegateSwizzling009 = 1009,                 // I-SWZ001009
  kGULSwizzlerMessageCodeAppDelegateSwizzling010 = 1010,                 // I-SWZ001010
  kGULSwizzlerMessageCodeAppDelegateSwizzling011 = 1011,                 // I-SWZ001011
  kGULSwizzlerMessageCodeAppDelegateSwizzling012 = 1012,                 // I-SWZ001012
  kGULSwizzlerMessageCodeAppDelegateSwizzling013 = 1013,                 // I-SWZ001013
  kGULSwizzlerMessageCodeAppDelegateSwizzlingInvalidAppDelegate = 1014,  // I-SWZ001014

  // Scene Delegate Swizzling.
  kGULSwizzlerMessageCodeSceneDelegateSwizzling000 = 1100,                   // I-SWZ001100
  kGULSwizzlerMessageCodeSceneDelegateSwizzling001 = 1101,                   // I-SWZ001101
  kGULSwizzlerMessageCodeSceneDelegateSwizzling002 = 1102,                   // I-SWZ001102
  kGULSwizzlerMessageCodeSceneDelegateSwizzling003 = 1103,                   // I-SWZ001103
  kGULSwizzlerMessageCodeSceneDelegateSwizzling004 = 1104,                   // I-SWZ001104
  kGULSwizzlerMessageCodeSceneDelegateSwizzling005 = 1105,                   // I-SWZ001105
  kGULSwizzlerMessageCodeSceneDelegateSwizzling006 = 1106,                   // I-SWZ001106
  kGULSwizzlerMessageCodeSceneDelegateSwizzling007 = 1107,                   // I-SWZ001107
  kGULSwizzlerMessageCodeSceneDelegateSwizzling008 = 1108,                   // I-SWZ001108
  kGULSwizzlerMessageCodeSceneDelegateSwizzling009 = 1109,                   // I-SWZ001109
  kGULSwizzlerMessageCodeSceneDelegateSwizzling010 = 1110,                   // I-SWZ001110
  kGULSwizzlerMessageCodeSceneDelegateSwizzling011 = 1111,                   // I-SWZ001111
  kGULSwizzlerMessageCodeSceneDelegateSwizzling012 = 1112,                   // I-SWZ001112
  kGULSwizzlerMessageCodeSceneDelegateSwizzling013 = 1113,                   // I-SWZ001113
  kGULSwizzlerMessageCodeSceneDelegateSwizzlingInvalidSceneDelegate = 1114,  // I-SWZ001114

  // Method Swizzling.
  kGULSwizzlerMessageCodeMethodSwizzling000 = 2000,  // I-SWZ002000
};

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Common/GULLoggerCodes.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULAppEnvironmentUtil.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@interface GULAppEnvironmentUtil : NSObject

/// Indicates whether the app is from Apple Store or not. Returns NO if the app is on simulator,
/// development environment or sideloaded.
+ (BOOL)isFromAppStore;

/// Indicates whether the app is a Testflight app. Returns YES if the app has sandbox receipt.
/// Returns NO otherwise.
+ (BOOL)isAppStoreReceiptSandbox;

/// Indicates whether the app is on simulator or not at runtime depending on the device
/// architecture.
+ (BOOL)isSimulator;

/// The current device model. Returns an empty string if device model cannot be retrieved.
+ (nullable NSString *)deviceModel;

/// The current device model, with simulator-specific values. Returns an empty string if device
/// model cannot be retrieved.
+ (nullable NSString *)deviceSimulatorModel;

/// The current operating system version. Returns an empty string if the system version cannot be
/// retrieved.
+ (NSString *)systemVersion;

/// Indicates whether it is running inside an extension or an app.
+ (BOOL)isAppExtension;

/// @return Returns @YES when is run on iOS version greater or equal to 7.0
+ (BOOL)isIOS7OrHigher DEPRECATED_MSG_ATTRIBUTE(
    "Always `YES` because only iOS 8 and higher supported. The method will be removed.");

/// @return YES if Swift runtime detected in the app.
+ (BOOL)hasSwiftRuntime __deprecated;

/// @return An Apple platform. Possible values "ios", "tvos", "macos", "watchos", "maccatalyst", and
/// "visionos".
+ (NSString *)applePlatform;

/// @return An Apple Device platform. Same possible values as `applePlatform`, with the addition of
/// "ipados".
+ (NSString *)appleDevicePlatform;

/// @return The way the library was added to the app, e.g. "swiftpm", "cocoapods", etc.
+ (NSString *)deploymentType;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULAppEnvironmentUtil.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULHeartbeatDateStorable.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * Describes an object that can store and fetch heartbeat dates for given tags.
 */
@protocol GULHeartbeatDateStorable <NSObject>

/**
 * Reads the date from the specified file for the given tag.
 * @return Returns date if exists, otherwise `nil`.
 */
- (nullable NSDate *)heartbeatDateForTag:(NSString *)tag;

/**
 * Saves the date for the specified tag in the specified file.
 * @return YES on success, NO otherwise.
 */
- (BOOL)setHearbeatDate:(NSDate *)date forTag:(NSString *)tag;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULHeartbeatDateStorable.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULHeartbeatDateStorage.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "GULHeartbeatDateStorable.h"

NS_ASSUME_NONNULL_BEGIN

/// The name of the directory where the heartbeat data is stored.
extern NSString *const kGULHeartbeatStorageDirectory;

/// Stores either a date or a dictionary to a specified file.
@interface GULHeartbeatDateStorage : NSObject <GULHeartbeatDateStorable>

- (instancetype)init NS_UNAVAILABLE;

@property(nonatomic, readonly) NSURL *fileURL;

/**
 * Default initializer.
 * @param fileName The name of the file to store the date information.
 * exist, it will be created if needed.
 */
- (instancetype)initWithFileName:(NSString *)fileName;

/**
 * Reads the date from the specified file for the given tag.
 * @return Returns date if exists, otherwise `nil`.
 */
- (nullable NSDate *)heartbeatDateForTag:(NSString *)tag;

/**
 * Saves the date for the specified tag in the specified file.
 * @return YES on success, NO otherwise.
 */
- (BOOL)setHearbeatDate:(NSDate *)date forTag:(NSString *)tag;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULHeartbeatDateStorage.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULHeartbeatDateStorageUserDefaults.h
===
/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "GULHeartbeatDateStorable.h"

NS_ASSUME_NONNULL_BEGIN

/// Stores either a date or a dictionary to a specified file.
@interface GULHeartbeatDateStorageUserDefaults : NSObject <GULHeartbeatDateStorable>

/**
 * Default initializer. tvOS can only write to the cache directory and
 * there are no guarantees that the directory will persist. User defaults will
 * be retained, so that should be used instead.
 * @param defaults User defaults instance to store the heartbeat information.
 * @param key The key to be used with the user defaults instance.
 */
- (instancetype)initWithDefaults:(NSUserDefaults *)defaults key:(NSString *)key;

- (instancetype)init NS_UNAVAILABLE;

/**
 * Reads the date from the specified file for the given tag.
 * @return Returns date if exists, otherwise `nil`.
 */
- (nullable NSDate *)heartbeatDateForTag:(NSString *)tag;

/**
 * Saves the date for the specified tag in the specified file.
 * @return YES on success, NO otherwise.
 */
- (BOOL)setHearbeatDate:(NSDate *)date forTag:(NSString *)tag;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULHeartbeatDateStorageUserDefaults.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULKeychainStorage.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FBLPromise<ValueType>;

NS_ASSUME_NONNULL_BEGIN

/// The class provides a convenient, multiplatform abstraction of the Keychain.
///
/// When using this API on macOS, the corresponding target must be signed with a provisioning
/// profile that has the Keychain Sharing capability enabled.
@interface GULKeychainStorage : NSObject

- (instancetype)init NS_UNAVAILABLE;

/** Initializes the keychain storage with Keychain Service name.
 *  @param service A Keychain Service name that will be used to store and retrieve objects. See also
 * `kSecAttrService`.
 */
- (instancetype)initWithService:(NSString *)service;

/**
 * Get an object by key.
 * @param key The key.
 * @param objectClass The expected object class required by `NSSecureCoding`.
 * @param accessGroup The Keychain Access Group.
 *
 * @return Returns a promise. It is resolved with an object stored by key if exists. It is resolved
 * with `nil` when the object not found. It fails on a Keychain error.
 */
- (FBLPromise<id<NSSecureCoding>> *)getObjectForKey:(NSString *)key
                                        objectClass:(Class)objectClass
                                        accessGroup:(nullable NSString *)accessGroup;

/**
 * Saves the given object by the given key.
 * @param object The object to store.
 * @param key The key to store the object. If there is an existing object by the key, it will be
 * overridden.
 * @param accessGroup The Keychain Access Group.
 *
 * @return Returns which is resolved with `[NSNull null]` on success.
 */
- (FBLPromise<NSNull *> *)setObject:(id<NSSecureCoding>)object
                             forKey:(NSString *)key
                        accessGroup:(nullable NSString *)accessGroup;

/**
 * Removes the object by the given key.
 * @param key The key to store the object. If there is an existing object by the key, it will be
 * overridden.
 * @param accessGroup The Keychain Access Group.
 *
 * @return Returns which is resolved with `[NSNull null]` on success.
 */
- (FBLPromise<NSNull *> *)removeObjectForKey:(NSString *)key
                                 accessGroup:(nullable NSString *)accessGroup;

#if TARGET_OS_OSX
/// If not `nil`, then only this keychain will be used to save and read data (see
/// `kSecMatchSearchList` and `kSecUseKeychain`. It is mostly intended to be used by unit tests.
@property(nonatomic, nullable) SecKeychainRef keychainRef;
#endif  // TARGET_OS_OSX

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULKeychainStorage.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULKeychainUtils.h
===
/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

FOUNDATION_EXPORT NSString *const kGULKeychainUtilsErrorDomain;

/// A collection of helper functions that abstract away common Keychain operations.
///
/// When using this API on macOS, the corresponding target must be signed with a provisioning
/// profile that has the Keychain Sharing capability enabled.
@interface GULKeychainUtils : NSObject

/** Fetches a keychain item data matching to the provided query.
 *  @param query A dictionary with Keychain query parameters. See docs for `SecItemCopyMatching` for
 * details.
 *  @param outError A pointer to `NSError` instance or `NULL`. The instance at `outError` will be
 * assigned with an error if there is.
 *  @returns Data for the first Keychain Item matching the provided query or `nil` if there is not
 * such an item (`outError` will be `nil` in this case) or an error occurred.
 */
+ (nullable NSData *)getItemWithQuery:(NSDictionary *)query
                                error:(NSError *_Nullable *_Nullable)outError;

/** Stores data to a Keychain Item matching to the provided query. An existing Keychain Item
 * matching the query parameters will be updated or a new will be created.
 *  @param item A Keychain Item data to store.
 *  @param query A dictionary with Keychain query parameters. See docs for `SecItemAdd` and
 * `SecItemUpdate` for details.
 *  @param outError A pointer to `NSError` instance or `NULL`. The instance at `outError` will be
 * assigned with an error if there is.
 *  @returns `YES` when data was successfully stored, `NO` otherwise.
 */
+ (BOOL)setItem:(NSData *)item
      withQuery:(NSDictionary *)query
          error:(NSError *_Nullable *_Nullable)outError;

/** Removes a Keychain Item matching to the provided query.
 *  @param query A dictionary with Keychain query parameters. See docs for `SecItemDelete` for
 * details.
 *  @param outError A pointer to `NSError` instance or `NULL`. The instance at `outError` will be
 * assigned with an error if there is.
 *  @returns `YES` if the item was removed successfully or doesn't exist, `NO` otherwise.
 */
+ (BOOL)removeItemWithQuery:(NSDictionary *)query error:(NSError *_Nullable *_Nullable)outError;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULKeychainUtils.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULNetworkInfo.h
===
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/// The type of network that the device is running with. Values should correspond to the NetworkType
/// values in android/play/playlog/proto/clientanalytics.proto
typedef NS_ENUM(NSInteger, GULNetworkType) {
  GULNetworkTypeNone = -1,
  GULNetworkTypeMobile = 0,
  GULNetworkTypeWIFI = 1,
};

/// Collection of utilities to read network status information
@interface GULNetworkInfo : NSObject

/// Returns the cellular mobile country code (mcc) if CoreTelephony is supported, otherwise nil
+ (NSString *_Nullable)getNetworkMobileCountryCode;

/// Returns the cellular mobile network code (mnc) if CoreTelephony is supported, otherwise nil
+ (NSString *_Nullable)getNetworkMobileNetworkCode;

/**
 * Returns the formatted MccMnc if the inputs are valid, otherwise nil
 * @param mcc The Mobile Country Code returned from `getNetworkMobileCountryCode`
 * @param mnc The Mobile Network Code returned from `getNetworkMobileNetworkCode`
 * @returns A string with the concatenated mccMnc if both inputs are valid, otherwise nil
 */
+ (NSString *_Nullable)formatMcc:(NSString *_Nullable)mcc andMNC:(NSString *_Nullable)mnc;

/// Returns an enum indicating the network type. The enum values should be easily transferrable to
/// the NetworkType value in android/play/playlog/proto/clientanalytics.proto. Right now this always
/// returns None on platforms other than iOS. This should be updated in the future to return Wi-Fi
/// values for the other platforms when applicable.
+ (GULNetworkType)getNetworkType;

/// Returns a string indicating the radio access technology used by the app. The return value will
/// be one of CTRadioAccess constants defined in
/// https://developer.apple.com/documentation/coretelephony/cttelephonynetworkinfo/radio_access_technology_constants
+ (NSString *)getNetworkRadioType;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULNetworkInfo.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULSecureCoding.h
===
// Copyright 2019 Google
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** The class wraps `NSKeyedArchiver` and `NSKeyedUnarchiver` API to provide a unified secure coding
 *  methods for iOS versions before and after 11.
 */
@interface GULSecureCoding : NSObject

+ (nullable id)unarchivedObjectOfClasses:(NSSet<Class> *)classes
                                fromData:(NSData *)data
                                   error:(NSError **)outError;

+ (nullable id)unarchivedObjectOfClass:(Class)aClass
                              fromData:(NSData *)data
                                 error:(NSError **)outError;

+ (nullable NSData *)archivedDataWithRootObject:(id<NSCoding>)object error:(NSError **)outError;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULSecureCoding.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULURLSessionDataResponse.h
===
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/** The class represents HTTP response received from `NSURLSession`. */
@interface GULURLSessionDataResponse : NSObject

@property(nonatomic, readonly) NSHTTPURLResponse *HTTPResponse;
@property(nonatomic, nullable, readonly) NSData *HTTPBody;

- (instancetype)initWithResponse:(NSHTTPURLResponse *)response HTTPBody:(nullable NSData *)body;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/GULURLSessionDataResponse.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/NSURLSession+GULPromises.h
===
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

@class FBLPromise<Value>;
@class GULURLSessionDataResponse;

NS_ASSUME_NONNULL_BEGIN

/** Promise based API for `NSURLSession`. */
@interface NSURLSession (GULPromises)

/** Creates a promise wrapping `-[NSURLSession dataTaskWithRequest:completionHandler:]` method.
 * @param URLRequest The request to create a data task with.
 * @return A promise that is fulfilled when an HTTP response is received (with any response code),
 * or is rejected with the error passed to the task completion.
 */
- (FBLPromise<GULURLSessionDataResponse *> *)gul_dataTaskPromiseWithRequest:
    (NSURLRequest *)URLRequest;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Environment/Public/GoogleUtilities/NSURLSession+GULPromises.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Logger/Public/GoogleUtilities/GULLogger.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "GULLoggerLevel.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * The services used in the logger.
 */
typedef NSString *const GULLoggerService;

#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

/**
 * Initialize GULLogger.
 */
extern void GULLoggerInitializeASL(void);

/**
 * Override log level to Debug.
 */
void GULLoggerForceDebug(void);

/**
 * Turn on logging to STDERR.
 */
extern void GULLoggerEnableSTDERR(void);

/**
 * Gets the current GULLoggerLevel.
 */
extern GULLoggerLevel GULGetLoggerLevel(void);

/**
 * Changes the default logging level of GULLoggerLevelNotice to a user-specified level.
 * The default level cannot be set above GULLoggerLevelNotice if the app is running from App Store.
 * (required) log level (one of the GULLoggerLevel enum values).
 */
extern void GULSetLoggerLevel(GULLoggerLevel loggerLevel);

/**
 * Checks if the specified logger level is loggable given the current settings.
 * (required) log level (one of the GULLoggerLevel enum values).
 */
extern BOOL GULIsLoggableLevel(GULLoggerLevel loggerLevel);

/**
 * Register version to include in logs.
 * (required) version
 */
extern void GULLoggerRegisterVersion(NSString *version);

/**
 * Logs a message to the Xcode console and the device log. If running from AppStore, will
 * not log any messages with a level higher than GULLoggerLevelNotice to avoid log spamming.
 * (required) log level (one of the GULLoggerLevel enum values).
 * (required) service name of type GULLoggerService.
 * (required) message code starting with "I-" which means iOS, followed by a capitalized
 *            three-character service identifier and a six digit integer message ID that is unique
 *            within the service.
 *            An example of the message code is @"I-COR000001".
 * (required) message string which can be a format string.
 * (optional) variable arguments list obtained from calling va_start, used when message is a format
 *            string.
 */
extern void GULLogBasic(GULLoggerLevel level,
                        GULLoggerService service,
                        BOOL forceLog,
                        NSString *messageCode,
                        NSString *message,
// On 64-bit simulators, va_list is not a pointer, so cannot be marked nullable
// See: http://stackoverflow.com/q/29095469
#if __LP64__ && TARGET_OS_SIMULATOR || TARGET_OS_OSX
                        va_list args_ptr
#else
                        va_list _Nullable args_ptr
#endif
);

/**
 * The following functions accept the following parameters in order:
 * (required) service name of type GULLoggerService.
 * (required) message code starting from "I-" which means iOS, followed by a capitalized
 *            three-character service identifier and a six digit integer message ID that is unique
 *            within the service.
 *            An example of the message code is @"I-COR000001".
 *            See go/firebase-log-proposal for details.
 * (required) message string which can be a format string.
 * (optional) the list of arguments to substitute into the format string.
 * Example usage:
 * GULLogError(kGULLoggerCore, @"I-COR000001", @"Configuration of %@ failed.", app.name);
 */
extern void GULLogError(GULLoggerService service,
                        BOOL force,
                        NSString *messageCode,
                        NSString *message,
                        ...) NS_FORMAT_FUNCTION(4, 5);
extern void GULLogWarning(GULLoggerService service,
                          BOOL force,
                          NSString *messageCode,
                          NSString *message,
                          ...) NS_FORMAT_FUNCTION(4, 5);
extern void GULLogNotice(GULLoggerService service,
                         BOOL force,
                         NSString *messageCode,
                         NSString *message,
                         ...) NS_FORMAT_FUNCTION(4, 5);
extern void GULLogInfo(GULLoggerService service,
                       BOOL force,
                       NSString *messageCode,
                       NSString *message,
                       ...) NS_FORMAT_FUNCTION(4, 5);
extern void GULLogDebug(GULLoggerService service,
                        BOOL force,
                        NSString *messageCode,
                        NSString *message,
                        ...) NS_FORMAT_FUNCTION(4, 5);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

@interface GULLoggerWrapper : NSObject

/**
 * Objective-C wrapper for GULLogBasic to allow weak linking to GULLogger
 * (required) log level (one of the GULLoggerLevel enum values).
 * (required) service name of type GULLoggerService.
 * (required) message code starting with "I-" which means iOS, followed by a capitalized
 *            three-character service identifier and a six digit integer message ID that is unique
 *            within the service.
 *            An example of the message code is @"I-COR000001".
 * (required) message string which can be a format string.
 * (optional) variable arguments list obtained from calling va_start, used when message is a format
 *            string.
 */

+ (void)logWithLevel:(GULLoggerLevel)level
         withService:(GULLoggerService)service
            withCode:(NSString *)messageCode
         withMessage:(NSString *)message
            withArgs:(va_list)args;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Logger/Public/GoogleUtilities/GULLogger.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Logger/Public/GoogleUtilities/GULLoggerLevel.h
===
/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

/**
 * The log levels used by internal logging.
 */
typedef NS_ENUM(NSInteger, GULLoggerLevel) {
  /** Error level, matches ASL_LEVEL_ERR. */
  GULLoggerLevelError = 3,
  /** Warning level, matches ASL_LEVEL_WARNING. */
  GULLoggerLevelWarning = 4,
  /** Notice level, matches ASL_LEVEL_NOTICE. */
  GULLoggerLevelNotice = 5,
  /** Info level, matches ASL_LEVEL_INFO. */
  GULLoggerLevelInfo = 6,
  /** Debug level, matches ASL_LEVEL_DEBUG. */
  GULLoggerLevelDebug = 7,
  /** Minimum log level. */
  GULLoggerLevelMin = GULLoggerLevelError,
  /** Maximum log level. */
  GULLoggerLevelMax = GULLoggerLevelDebug
} NS_SWIFT_NAME(GoogleLoggerLevel);

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Logger/Public/GoogleUtilities/GULLoggerLevel.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/NSData+zlib/Public/GoogleUtilities/GULNSData+zlib.h
===
// Copyright 2018 Google
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#import <Foundation/Foundation.h>

/// This is a copy of Google Toolbox for Mac library to avoid creating an extra framework.

// NOTE: For 64bit, none of these apis handle input sizes >32bits, they will return nil when given
// such data. To handle data of that size you really should be streaming it rather then doing it all
// in memory.

@interface NSData (GULGzip)

/// Returns an data as the result of decompressing the payload of |data|.The data to decompress must
/// be a gzipped payloads.
+ (NSData *)gul_dataByInflatingGzippedData:(NSData *)data error:(NSError **)error;

/// Returns an compressed data with the result of gzipping the payload of |data|. Uses the default
/// compression level.
+ (NSData *)gul_dataByGzippingData:(NSData *)data error:(NSError **)error;

FOUNDATION_EXPORT NSString *const GULNSDataZlibErrorDomain;
FOUNDATION_EXPORT NSString *const GULNSDataZlibErrorKey;           // NSNumber
FOUNDATION_EXPORT NSString *const GULNSDataZlibRemainingBytesKey;  // NSNumber

typedef NS_ENUM(NSInteger, GULNSDataZlibError) {
  GULNSDataZlibErrorGreaterThan32BitsToCompress = 1024,
  // An internal zlib error.
  // GULNSDataZlibErrorKey will contain the error value.
  // NSLocalizedDescriptionKey may contain an error string from zlib.
  // Look in zlib.h for list of errors.
  GULNSDataZlibErrorInternal,
  // There was left over data in the buffer that was not used.
  // GULNSDataZlibRemainingBytesKey will contain number of remaining bytes.
  GULNSDataZlibErrorDataRemaining
};

@end

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/NSData+zlib/Public/GoogleUtilities/GULNSData+zlib.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/GULNetworkInternal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "GoogleUtilities/Logger/Public/GoogleUtilities/GULLogger.h"

extern NSString *const kGULNetworkErrorDomain;

/// The logger service for GULNetwork.
extern GULLoggerService kGULLoggerNetwork;

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/GULNetworkInternal.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULMutableDictionary.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

/// A mutable dictionary that provides atomic accessor and mutators.
@interface GULMutableDictionary : NSObject

/// Returns an object given a key in the dictionary or nil if not found.
- (id)objectForKey:(id)key;

/// Updates the object given its key or adds it to the dictionary if it is not in the dictionary.
- (void)setObject:(id)object forKey:(id<NSCopying>)key;

/// Removes the object given its session ID from the dictionary.
- (void)removeObjectForKey:(id)key;

/// Removes all objects.
- (void)removeAllObjects;

/// Returns the number of current objects in the dictionary.
- (NSUInteger)count;

/// Returns an object given a key in the dictionary or nil if not found.
- (id)objectForKeyedSubscript:(id<NSCopying>)key;

/// Updates the object given its key or adds it to the dictionary if it is not in the dictionary.
- (void)setObject:(id)obj forKeyedSubscript:(id<NSCopying>)key;

/// Returns the immutable dictionary.
- (NSDictionary *)dictionary;

@end

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULMutableDictionary.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetwork.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "GULNetworkConstants.h"
#import "GULNetworkLoggerProtocol.h"
#import "GULNetworkURLSession.h"

/// Delegate protocol for GULNetwork events.
@protocol GULNetworkReachabilityDelegate

/// Tells the delegate to handle events when the network reachability changes to connected or not
/// connected.
- (void)reachabilityDidChange;

@end

/// The Network component that provides network status and handles network requests and responses.
/// This is not thread safe.
///
/// NOTE:
/// User must add FIRAnalytics handleEventsForBackgroundURLSessionID:completionHandler to the
/// AppDelegate application:handleEventsForBackgroundURLSession:completionHandler:
@interface GULNetwork : NSObject

/// Indicates if network connectivity is available.
@property(nonatomic, readonly, getter=isNetworkConnected) BOOL networkConnected;

/// Indicates if there are any uploads in progress.
@property(nonatomic, readonly, getter=hasUploadInProgress) BOOL uploadInProgress;

/// An optional delegate that can be used in the event when network reachability changes.
@property(nonatomic, weak) id<GULNetworkReachabilityDelegate> reachabilityDelegate;

/// An optional delegate that can be used to log messages, warnings or errors that occur in the
/// network operations.
@property(nonatomic, weak) id<GULNetworkLoggerDelegate> loggerDelegate;

/// Indicates whether the logger should display debug messages.
@property(nonatomic, assign) BOOL isDebugModeEnabled;

/// The time interval in seconds for the network request to timeout.
@property(nonatomic, assign) NSTimeInterval timeoutInterval;

/// Initializes with the default reachability host.
- (instancetype)init;

/// Initializes with a custom reachability host.
- (instancetype)initWithReachabilityHost:(NSString *)reachabilityHost;

/// Handles events when background session with the given ID has finished.
+ (void)handleEventsForBackgroundURLSessionID:(NSString *)sessionID
                            completionHandler:(GULNetworkSystemCompletionHandler)completionHandler;

/// Compresses and sends a POST request with the provided data to the URL. The session will be
/// background session if usingBackgroundSession is YES. Otherwise, the POST session is default
/// session. Returns a session ID or nil if an error occurs.
- (NSString *)postURL:(NSURL *)url
                   payload:(NSData *)payload
                     queue:(dispatch_queue_t)queue
    usingBackgroundSession:(BOOL)usingBackgroundSession
         completionHandler:(GULNetworkCompletionHandler)handler;

/// Compresses and sends a POST request with the provided headers and data to the URL. The session
/// will be background session if usingBackgroundSession is YES. Otherwise, the POST session is
/// default session. Returns a session ID or nil if an error occurs.
- (NSString *)postURL:(NSURL *)url
                   headers:(NSDictionary *)headers
                   payload:(NSData *)payload
                     queue:(dispatch_queue_t)queue
    usingBackgroundSession:(BOOL)usingBackgroundSession
         completionHandler:(GULNetworkCompletionHandler)handler;

/// Sends a GET request with the provided data to the URL. The session will be background session
/// if usingBackgroundSession is YES. Otherwise, the GET session is default session. Returns a
/// session ID or nil if an error occurs.
- (NSString *)getURL:(NSURL *)url
                   headers:(NSDictionary *)headers
                     queue:(dispatch_queue_t)queue
    usingBackgroundSession:(BOOL)usingBackgroundSession
         completionHandler:(GULNetworkCompletionHandler)handler;

@end

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetwork.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetworkConstants.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

/// Error codes in Firebase Network error domain.
/// Note: these error codes should never change. It would make it harder to decode the errors if
/// we inadvertently altered any of these codes in a future SDK version.
typedef NS_ENUM(NSInteger, GULNetworkErrorCode) {
  /// Unknown error.
  GULNetworkErrorCodeUnknown = 0,
  /// Error occurs when the request URL is invalid.
  GULErrorCodeNetworkInvalidURL = 1,
  /// Error occurs when request cannot be constructed.
  GULErrorCodeNetworkRequestCreation = 2,
  /// Error occurs when payload cannot be compressed.
  GULErrorCodeNetworkPayloadCompression = 3,
  /// Error occurs when session task cannot be created.
  GULErrorCodeNetworkSessionTaskCreation = 4,
  /// Error occurs when there is no response.
  GULErrorCodeNetworkInvalidResponse = 5
};

#pragma mark - Network constants

/// The prefix of the ID of the background session.
extern NSString *const kGULNetworkBackgroundSessionConfigIDPrefix;

/// The sub directory to store the files of data that is being uploaded in the background.
extern NSString *const kGULNetworkApplicationSupportSubdirectory;

/// Name of the temporary directory that stores files for background uploading.
extern NSString *const kGULNetworkTempDirectoryName;

/// The period when the temporary uploading file can stay.
extern const NSTimeInterval kGULNetworkTempFolderExpireTime;

/// The default network request timeout interval.
extern const NSTimeInterval kGULNetworkTimeOutInterval;

/// The host to check the reachability of the network.
extern NSString *const kGULNetworkReachabilityHost;

/// The key to get the error context of the UserInfo.
extern NSString *const kGULNetworkErrorContext;

#pragma mark - Network Status Code

extern const int kGULNetworkHTTPStatusOK;
extern const int kGULNetworkHTTPStatusNoContent;
extern const int kGULNetworkHTTPStatusCodeMultipleChoices;
extern const int kGULNetworkHTTPStatusCodeMovedPermanently;
extern const int kGULNetworkHTTPStatusCodeFound;
extern const int kGULNetworkHTTPStatusCodeNotModified;
extern const int kGULNetworkHTTPStatusCodeMovedTemporarily;
extern const int kGULNetworkHTTPStatusCodeNotFound;
extern const int kGULNetworkHTTPStatusCodeCannotAcceptTraffic;
extern const int kGULNetworkHTTPStatusCodeUnavailable;

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetworkConstants.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetworkLoggerProtocol.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "GULNetworkMessageCode.h"

/// The log levels used by GULNetworkLogger.
typedef NS_ENUM(NSInteger, GULNetworkLogLevel) {
  kGULNetworkLogLevelError = 3,
  kGULNetworkLogLevelWarning = 4,
  kGULNetworkLogLevelInfo = 6,
  kGULNetworkLogLevelDebug = 7,
};

@protocol GULNetworkLoggerDelegate <NSObject>

@required
/// Tells the delegate to log a message with an array of contexts and the log level.
- (void)GULNetwork_logWithLevel:(GULNetworkLogLevel)logLevel
                    messageCode:(GULNetworkMessageCode)messageCode
                        message:(NSString *)message
                       contexts:(NSArray *)contexts;

/// Tells the delegate to log a message with a context and the log level.
- (void)GULNetwork_logWithLevel:(GULNetworkLogLevel)logLevel
                    messageCode:(GULNetworkMessageCode)messageCode
                        message:(NSString *)message
                        context:(id)context;

/// Tells the delegate to log a message with the log level.
- (void)GULNetwork_logWithLevel:(GULNetworkLogLevel)logLevel
                    messageCode:(GULNetworkMessageCode)messageCode
                        message:(NSString *)message;

@end

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetworkLoggerProtocol.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetworkMessageCode.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

// Make sure these codes do not overlap with any contained in the FIRAMessageCode enum.
typedef NS_ENUM(NSInteger, GULNetworkMessageCode) {
  // GULNetwork.m
  kGULNetworkMessageCodeNetwork000 = 900000,  // I-NET900000
  kGULNetworkMessageCodeNetwork001 = 900001,  // I-NET900001
  kGULNetworkMessageCodeNetwork002 = 900002,  // I-NET900002
  kGULNetworkMessageCodeNetwork003 = 900003,  // I-NET900003
  // GULNetworkURLSession.m
  kGULNetworkMessageCodeURLSession000 = 901000,  // I-NET901000
  kGULNetworkMessageCodeURLSession001 = 901001,  // I-NET901001
  kGULNetworkMessageCodeURLSession002 = 901002,  // I-NET901002
  kGULNetworkMessageCodeURLSession003 = 901003,  // I-NET901003
  kGULNetworkMessageCodeURLSession004 = 901004,  // I-NET901004
  kGULNetworkMessageCodeURLSession005 = 901005,  // I-NET901005
  kGULNetworkMessageCodeURLSession006 = 901006,  // I-NET901006
  kGULNetworkMessageCodeURLSession007 = 901007,  // I-NET901007
  kGULNetworkMessageCodeURLSession008 = 901008,  // I-NET901008
  kGULNetworkMessageCodeURLSession009 = 901009,  // I-NET901009
  kGULNetworkMessageCodeURLSession010 = 901010,  // I-NET901010
  kGULNetworkMessageCodeURLSession011 = 901011,  // I-NET901011
  kGULNetworkMessageCodeURLSession012 = 901012,  // I-NET901012
  kGULNetworkMessageCodeURLSession013 = 901013,  // I-NET901013
  kGULNetworkMessageCodeURLSession014 = 901014,  // I-NET901014
  kGULNetworkMessageCodeURLSession015 = 901015,  // I-NET901015
  kGULNetworkMessageCodeURLSession016 = 901016,  // I-NET901016
  kGULNetworkMessageCodeURLSession017 = 901017,  // I-NET901017
  kGULNetworkMessageCodeURLSession018 = 901018,  // I-NET901018
  kGULNetworkMessageCodeURLSession019 = 901019,  // I-NET901019
};

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetworkMessageCode.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetworkURLSession.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

#import "GULNetworkLoggerProtocol.h"

NS_ASSUME_NONNULL_BEGIN

typedef void (^GULNetworkCompletionHandler)(NSHTTPURLResponse *_Nullable response,
                                            NSData *_Nullable data,
                                            NSError *_Nullable error);
typedef void (^GULNetworkURLSessionCompletionHandler)(NSHTTPURLResponse *_Nullable response,
                                                      NSData *_Nullable data,
                                                      NSString *sessionID,
                                                      NSError *_Nullable error);
typedef void (^GULNetworkSystemCompletionHandler)(void);

/// The protocol that uses NSURLSession for iOS >= 7.0 to handle requests and responses.
@interface GULNetworkURLSession : NSObject

/// Indicates whether the background network is enabled. Default value is NO.
@property(nonatomic, getter=isBackgroundNetworkEnabled) BOOL backgroundNetworkEnabled;

/// The logger delegate to log message, errors or warnings that occur during the network operations.
@property(nonatomic, weak, nullable) id<GULNetworkLoggerDelegate> loggerDelegate;

/// Calls the system provided completion handler after the background session is finished.
+ (void)handleEventsForBackgroundURLSessionID:(NSString *)sessionID
                            completionHandler:(GULNetworkSystemCompletionHandler)completionHandler;

/// Initializes with logger delegate.
- (instancetype)initWithNetworkLoggerDelegate:
    (nullable id<GULNetworkLoggerDelegate>)networkLoggerDelegate NS_DESIGNATED_INITIALIZER;

- (instancetype)init NS_UNAVAILABLE;

/// Sends an asynchronous POST request and calls the provided completion handler when the request
/// completes or when errors occur, and returns an ID of the session/connection.
- (nullable NSString *)sessionIDFromAsyncPOSTRequest:(NSURLRequest *)request
                                   completionHandler:(GULNetworkURLSessionCompletionHandler)handler;

/// Sends an asynchronous GET request and calls the provided completion handler when the request
/// completes or when errors occur, and returns an ID of the session.
- (nullable NSString *)sessionIDFromAsyncGETRequest:(NSURLRequest *)request
                                  completionHandler:(GULNetworkURLSessionCompletionHandler)handler;

NS_ASSUME_NONNULL_END
@end

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Network/Public/GoogleUtilities/GULNetworkURLSession.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Reachability/GULReachabilityChecker+Internal.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "GoogleUtilities/Reachability/Public/GoogleUtilities/GULReachabilityChecker.h"

#if !TARGET_OS_WATCH
typedef SCNetworkReachabilityRef (*GULReachabilityCreateWithNameFn)(CFAllocatorRef allocator,
                                                                    const char *host);

typedef Boolean (*GULReachabilitySetCallbackFn)(SCNetworkReachabilityRef target,
                                                SCNetworkReachabilityCallBack callback,
                                                SCNetworkReachabilityContext *context);
typedef Boolean (*GULReachabilityScheduleWithRunLoopFn)(SCNetworkReachabilityRef target,
                                                        CFRunLoopRef runLoop,
                                                        CFStringRef runLoopMode);
typedef Boolean (*GULReachabilityUnscheduleFromRunLoopFn)(SCNetworkReachabilityRef target,
                                                          CFRunLoopRef runLoop,
                                                          CFStringRef runLoopMode);

typedef void (*GULReachabilityReleaseFn)(CFTypeRef cf);

struct GULReachabilityApi {
  GULReachabilityCreateWithNameFn createWithNameFn;
  GULReachabilitySetCallbackFn setCallbackFn;
  GULReachabilityScheduleWithRunLoopFn scheduleWithRunLoopFn;
  GULReachabilityUnscheduleFromRunLoopFn unscheduleFromRunLoopFn;
  GULReachabilityReleaseFn releaseFn;
};
#endif
@interface GULReachabilityChecker (Internal)

- (const struct GULReachabilityApi *)reachabilityApi;
- (void)setReachabilityApi:(const struct GULReachabilityApi *)reachabilityApi;

@end

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Reachability/GULReachabilityChecker+Internal.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Reachability/GULReachabilityMessageCode.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>

// Make sure these codes do not overlap with any contained in the FIRAMessageCode enum.
typedef NS_ENUM(NSInteger, GULReachabilityMessageCode) {
  // GULReachabilityChecker.m
  kGULReachabilityMessageCode000 = 902000,  // I-NET902000
  kGULReachabilityMessageCode001 = 902001,  // I-NET902001
  kGULReachabilityMessageCode002 = 902002,  // I-NET902002
  kGULReachabilityMessageCode003 = 902003,  // I-NET902003
  kGULReachabilityMessageCode004 = 902004,  // I-NET902004
  kGULReachabilityMessageCode005 = 902005,  // I-NET902005
  kGULReachabilityMessageCode006 = 902006,  // I-NET902006
};

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Reachability/GULReachabilityMessageCode.h ===

===
Path: iosApp/Pods/GoogleUtilities/GoogleUtilities/Reachability/Public/GoogleUtilities/GULReachabilityChecker.h
===
/*
 * Copyright 2017 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <Foundation/Foundation.h>
#if !TARGET_OS_WATCH
#import <SystemConfiguration/SystemConfiguration.h>
#endif

/// Reachability Status
typedef enum {
  kGULReachabilityUnknown,  ///< Have not yet checked or been notified whether host is reachable.
  kGULReachabilityNotReachable,  ///< Host is not reachable.
  kGULReachabilityViaWifi,       ///< Host is reachable via Wifi.
  kGULReachabilityViaCellular,   ///< Host is reachable via cellular.
} GULReachabilityStatus;

const NSString *GULReachabilityStatusString(GULReachabilityStatus status);

@class GULReachabilityChecker;

/// Google Analytics iOS Reachability Checker.
@protocol GULReachabilityDelegate
@required
/// Called when network status has changed.
- (void)reachability:(GULReachabilityChecker *)reachability
       statusChanged:(GULReachabilityStatus)status;
@end

/// Google Analytics iOS Network Status Checker.
@interface GULReachabilityChecker : NSObject

/// The last known reachability status, or GULReachabilityStatusUnknown if the
/// checker is not active.
@property(nonatomic, readonly) GULReachabilityStatus reachabilityStatus;
/// The host to which reachability status is to be checked.
@property(nonatomic, copy, readonly) NSString *host;
/// The delegate to be notified of reachability status changes.
@property(nonatomic, weak) id<GULReachabilityDelegate> reachabilityDelegate;
/// `YES` if the reachability checker is active, `NO` otherwise.
@property(nonatomic, readonly) BOOL isActive;

/// Initialize the reachability checker. Note that you must call start to begin checking for and
/// receiving notifications about network status changes.
///
/// @param reachabilityDelegate The delegate to be notified when reachability status to host
/// changes.
///
/// @param host The name of the host.
///
- (instancetype)initWithReachabilityDelegate:(id<GULReachabilityDelegate>)reachabilityDelegate
                                    withHost:(NSString *)host;

- (instancetype)init NS_UNAVAILABLE;

/// Start checking for reachability to the specified host. This has no effect if the status
/// checker is already checking for connectivity.
///
/// @return `YES` if initiating status checking was successful or the status checking has already
/// been initiated, `NO` otherwise.
- (BOOL)start;

/// Stop checking for reachability to the specified host. This has no effect if the status
/// checker is not checking for connectivity.
- (void)stop;

@end

=== end iosApp/Pods/GoogleUtilities/GoogleUtilities/Reachability/Public/GoogleUtilities/GULReachabilityChecker.h ===

===
Path: iosApp/Pods/GoogleUtilities/third_party/IsAppEncrypted/Public/IsAppEncrypted.h
===
// Copyright (c) 2017 Landon J. Fuller <landon@landonf.org>
// All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

#import <objc/objc.h>

BOOL IsAppEncrypted(void);

=== end iosApp/Pods/GoogleUtilities/third_party/IsAppEncrypted/Public/IsAppEncrypted.h ===

===
Path: iosApp/Pods/Headers/Private/GoogleMaps/GMSEmpty.h
===
//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Swift Package Manager requires that every target has a header file.
@import GoogleMaps;

=== end iosApp/Pods/Headers/Private/GoogleMaps/GMSEmpty.h ===

===
Path: iosApp/Pods/Headers/Public/GoogleMaps/GMSEmpty.h
===
//
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Swift Package Manager requires that every target has a header file.
@import GoogleMaps;

=== end iosApp/Pods/Headers/Public/GoogleMaps/GMSEmpty.h ===

===
Path: iosApp/Pods/PromisesObjC/README.md
===
[![Apache
License](https://img.shields.io/github/license/google/promises.svg)](LICENSE)
[![Travis](https://api.travis-ci.org/google/promises.svg?branch=master)](https://travis-ci.org/google/promises)
[![Gitter Chat](https://badges.gitter.im/google/promises.svg)](https://gitter.im/google/promises)

![Platforms](https://img.shields.io/badge/platforms-macOS%20%7C%20iOS%20%7C%20tvOS%20%7C%20watchOS-blue.svg?longCache=true&style=flat)
![Languages](https://img.shields.io/badge/languages-Swift%20%7C%20ObjC-orange.svg?longCache=true&style=flat)
![Package Managers](https://img.shields.io/badge/supports-Bazel%20%7C%20SwiftPM%20%7C%20CocoaPods%20%7C%20Carthage-yellow.svg?longCache=true&style=flat)

# Promises

Promises is a modern framework that provides a synchronization construct for
Objective-C and Swift to facilitate writing asynchronous code.

*   [Introduction](g3doc/index.md)
    *   [The problem with async
        code](g3doc/index.md#the-problem-with-async-code)
    *   [Promises to the rescue](g3doc/index.md#promises-to-the-rescue)
    *   [What is a promise?](g3doc/index.md#what-is-a-promise)
*   [Framework](g3doc/index.md#framework)
    *   [Features](g3doc/index.md#features)
    *   [Benchmark](g3doc/index.md#benchmark)
*   [Getting started](g3doc/index.md#getting-started)
    *   [Add dependency](g3doc/index.md#add-dependency)
    *   [Import](g3doc/index.md#import)
    *   [Adopt](g3doc/index.md#adopt)
*   [Basics](g3doc/index.md#basics)
    *   [Creating promises](g3doc/index.md#creating-promises)
        *   [Async](g3doc/index.md#async)
        *   [Do](g3doc/index.md#do)
        *   [Pending](g3doc/index.md#pending)
        *   [Resolved](g3doc/index.md#create-a-resolved-promise)
    *   [Observing fulfillment](g3doc/index.md#observing-fulfillment)
        *   [Then](g3doc/index.md#then)
    *   [Observing rejection](g3doc/index.md#observing-rejection)
        *   [Catch](g3doc/index.md#catch)
*   [Extensions](g3doc/index.md#extensions)
    *   [All](g3doc/index.md#all)
    *   [Always](g3doc/index.md#always)
    *   [Any](g3doc/index.md#any)
    *   [AwaitPromise](g3doc/index.md#awaitpromise)
    *   [Delay](g3doc/index.md#delay)
    *   [Race](g3doc/index.md#race)
    *   [Recover](g3doc/index.md#recover)
    *   [Reduce](g3doc/index.md#reduce)
    *   [Retry](g3doc/index.md#retry)
    *   [Timeout](g3doc/index.md#timeout)
    *   [Validate](g3doc/index.md#validate)
    *   [Wrap](g3doc/index.md#wrap)
*   [Advanced topics](g3doc/index.md#advanced-topics)
    *   [Default dispatch queue](g3doc/index.md#default-dispatch-queue)
    *   [Ownership and retain
        cycles](g3doc/index.md#ownership-and-retain-cycles)
    *   [Testing](g3doc/index.md#testing)
    *   [Objective-C <-> Swift
        interoperability](g3doc/index.md#objective-c---swift-interoperability)
    *   [Dot-syntax in Objective-C](g3doc/index.md#dot-syntax-in-objective-c)
*   [Anti-patterns](g3doc/index.md#anti-patterns)
    *   [Broken chain](g3doc/index.md#broken-chain)
    *   [Nested promises](g3doc/index.md#nested-promises)

=== end iosApp/Pods/PromisesObjC/README.md ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+All.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(AllAdditions)

/**
 Wait until all of the given promises are fulfilled.
 If one of the given promises is rejected, then the returned promise is rejected with same error.
 If any other arbitrary value or `NSError` appears in the array instead of `FBLPromise`,
 it's implicitly considered a pre-fulfilled or pre-rejected `FBLPromise` correspondingly.
 Promises resolved with `nil` become `NSNull` instances in the resulting array.

 @param promises Promises to wait for.
 @return Promise of an array containing the values of input promises in the same order.
 */
+ (FBLPromise<NSArray *> *)all:(NSArray *)promises NS_SWIFT_UNAVAILABLE("");

/**
 Wait until all of the given promises are fulfilled.
 If one of the given promises is rejected, then the returned promise is rejected with same error.
 If any other arbitrary value or `NSError` appears in the array instead of `FBLPromise`,
 it's implicitly considered a pre-fulfilled or pre-rejected FBLPromise correspondingly.
 Promises resolved with `nil` become `NSNull` instances in the resulting array.

 @param queue A queue to dispatch on.
 @param promises Promises to wait for.
 @return Promise of an array containing the values of input promises in the same order.
 */
+ (FBLPromise<NSArray *> *)onQueue:(dispatch_queue_t)queue
                               all:(NSArray *)promises NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `all` operators.
 Usage: FBLPromise.all(@[ ... ])
 */
@interface FBLPromise<Value>(DotSyntax_AllAdditions)

+ (FBLPromise<NSArray *> * (^)(NSArray *))all FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSArray *> * (^)(dispatch_queue_t, NSArray *))allOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+All.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Always.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(AlwaysAdditions)

typedef void (^FBLPromiseAlwaysWorkBlock)(void) NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block that always executes, no matter if the receiver is rejected or fulfilled.
 @return A new pending promise to be resolved with same resolution as the receiver.
 */
- (FBLPromise *)always:(FBLPromiseAlwaysWorkBlock)work NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to dispatch on.
 @param work A block that always executes, no matter if the receiver is rejected or fulfilled.
 @return A new pending promise to be resolved with same resolution as the receiver.
 */
- (FBLPromise *)onQueue:(dispatch_queue_t)queue
                 always:(FBLPromiseAlwaysWorkBlock)work NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `always` operators.
 Usage: promise.always(^{...})
 */
@interface FBLPromise<Value>(DotSyntax_AlwaysAdditions)

- (FBLPromise* (^)(FBLPromiseAlwaysWorkBlock))always FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");
- (FBLPromise* (^)(dispatch_queue_t, FBLPromiseAlwaysWorkBlock))alwaysOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Always.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Any.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(AnyAdditions)

/**
 Waits until all of the given promises are either fulfilled or rejected.
 If all promises are rejected, then the returned promise is rejected with same error
 as the last one rejected.
 If at least one of the promises is fulfilled, the resulting promise is fulfilled with an array of
 values or `NSErrors`, matching the original order of fulfilled or rejected promises respectively.
 If any other arbitrary value or `NSError` appears in the array instead of `FBLPromise`,
 it's implicitly considered a pre-fulfilled or pre-rejected `FBLPromise` correspondingly.
 Promises resolved with `nil` become `NSNull` instances in the resulting array.

 @param promises Promises to wait for.
 @return Promise of array containing the values or `NSError`s of input promises in the same order.
 */
+ (FBLPromise<NSArray *> *)any:(NSArray *)promises NS_SWIFT_UNAVAILABLE("");

/**
 Waits until all of the given promises are either fulfilled or rejected.
 If all promises are rejected, then the returned promise is rejected with same error
 as the last one rejected.
 If at least one of the promises is fulfilled, the resulting promise is fulfilled with an array of
 values or `NSError`s, matching the original order of fulfilled or rejected promises respectively.
 If any other arbitrary value or `NSError` appears in the array instead of `FBLPromise`,
 it's implicitly considered a pre-fulfilled or pre-rejected `FBLPromise` correspondingly.
 Promises resolved with `nil` become `NSNull` instances in the resulting array.

 @param queue A queue to dispatch on.
 @param promises Promises to wait for.
 @return Promise of array containing the values or `NSError`s of input promises in the same order.
 */
+ (FBLPromise<NSArray *> *)onQueue:(dispatch_queue_t)queue
                               any:(NSArray *)promises NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `any` operators.
 Usage: FBLPromise.any(@[ ... ])
 */
@interface FBLPromise<Value>(DotSyntax_AnyAdditions)

+ (FBLPromise<NSArray *> * (^)(NSArray *))any FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSArray *> * (^)(dispatch_queue_t, NSArray *))anyOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Any.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Async.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(AsyncAdditions)

typedef void (^FBLPromiseFulfillBlock)(Value __nullable value) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseRejectBlock)(NSError *error) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseAsyncWorkBlock)(FBLPromiseFulfillBlock fulfill,
                                         FBLPromiseRejectBlock reject) NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise and executes `work` block asynchronously.

 @param work A block to perform any operations needed to resolve the promise.
 @return A new pending promise.
 */
+ (instancetype)async:(FBLPromiseAsyncWorkBlock)work NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise and executes `work` block asynchronously on the given queue.

 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @return A new pending promise.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue
                  async:(FBLPromiseAsyncWorkBlock)work NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `async` operators.
 Usage: FBLPromise.async(^(FBLPromiseFulfillBlock fulfill, FBLPromiseRejectBlock reject) { ... })
 */
@interface FBLPromise<Value>(DotSyntax_AsyncAdditions)

+ (FBLPromise* (^)(FBLPromiseAsyncWorkBlock))async FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(dispatch_queue_t, FBLPromiseAsyncWorkBlock))asyncOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Async.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Await.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

/**
 Waits for promise resolution. The current thread blocks until the promise is resolved.

 @param promise Promise to wait for.
 @param error Error the promise was rejected with, or `nil` if the promise was fulfilled.
 @return Value the promise was fulfilled with. If the promise was rejected, the return value
         is always `nil`, but the error out arg is not.
 */
FOUNDATION_EXTERN id __nullable FBLPromiseAwait(FBLPromise *promise,
                                                NSError **error) NS_REFINED_FOR_SWIFT;

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Await.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Catch.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(CatchAdditions)

typedef void (^FBLPromiseCatchWorkBlock)(NSError *error) NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise which eventually gets resolved with same resolution as the receiver.
 If receiver is rejected, then `reject` block is executed asynchronously.

 @param reject A block to handle the error that receiver was rejected with.
 @return A new pending promise.
 */
- (FBLPromise *)catch:(FBLPromiseCatchWorkBlock)reject NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise which eventually gets resolved with same resolution as the receiver.
 If receiver is rejected, then `reject` block is executed asynchronously on the given queue.

 @param queue A queue to invoke the `reject` block on.
 @param reject A block to handle the error that receiver was rejected with.
 @return A new pending promise.
 */
- (FBLPromise *)onQueue:(dispatch_queue_t)queue
                  catch:(FBLPromiseCatchWorkBlock)reject NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `catch` operators.
 Usage: promise.catch(^(NSError *error) { ... })
 */
@interface FBLPromise<Value>(DotSyntax_CatchAdditions)

- (FBLPromise* (^)(FBLPromiseCatchWorkBlock))catch FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
- (FBLPromise* (^)(dispatch_queue_t, FBLPromiseCatchWorkBlock))catchOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Catch.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Delay.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(DelayAdditions)

/**
 Creates a new pending promise that fulfills with the same value as `self` after the `delay`, or
 rejects with the same error immediately.

 @param interval Time to wait in seconds.
 @return A new pending promise that fulfills at least `delay` seconds later than `self`, or rejects
         with the same error immediately.
 */
- (FBLPromise *)delay:(NSTimeInterval)interval NS_SWIFT_UNAVAILABLE("");

/**
 Creates a new pending promise that fulfills with the same value as `self` after the `delay`, or
 rejects with the same error immediately.

 @param queue A queue to dispatch on.
 @param interval Time to wait in seconds.
 @return A new pending promise that fulfills at least `delay` seconds later than `self`, or rejects
         with the same error immediately.
 */
- (FBLPromise *)onQueue:(dispatch_queue_t)queue
                  delay:(NSTimeInterval)interval NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `delay` operators.
 Usage: promise.delay(...)
 */
@interface FBLPromise<Value>(DotSyntax_DelayAdditions)

- (FBLPromise * (^)(NSTimeInterval))delay FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
- (FBLPromise * (^)(dispatch_queue_t, NSTimeInterval))delayOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Delay.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Do.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(DoAdditions)

typedef id __nullable (^FBLPromiseDoWorkBlock)(void) NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise and executes `work` block asynchronously.

 @param work A block that returns a value or an error used to resolve the promise.
 @return A new pending promise.
 */
+ (instancetype)do:(FBLPromiseDoWorkBlock)work NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise and executes `work` block asynchronously on the given queue.

 @param queue A queue to invoke the `work` block on.
 @param work A block that returns a value or an error used to resolve the promise.
 @return A new pending promise.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue do:(FBLPromiseDoWorkBlock)work NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `do` operators.
 Usage: FBLPromise.doOn(queue, ^(NSError *error) { ... })
 */
@interface FBLPromise<Value>(DotSyntax_DoAdditions)

+ (FBLPromise * (^)(dispatch_queue_t, FBLPromiseDoWorkBlock))doOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Do.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Race.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(RaceAdditions)

/**
 Wait until any of the given promises are fulfilled.
 If one of the promises is rejected, then the returned promise is rejected with same error.
 If any other arbitrary value or `NSError` appears in the array instead of `FBLPromise`,
 it's implicitly considered a pre-fulfilled or pre-rejected `FBLPromise` correspondingly.

 @param promises Promises to wait for.
 @return A new pending promise to be resolved with the same resolution as the first promise, among
         the given ones, which was resolved.
 */
+ (instancetype)race:(NSArray *)promises NS_SWIFT_UNAVAILABLE("");

/**
 Wait until any of the given promises are fulfilled.
 If one of the promises is rejected, then the returned promise is rejected with same error.
 If any other arbitrary value or `NSError` appears in the array instead of `FBLPromise`,
 it's implicitly considered a pre-fulfilled or pre-rejected `FBLPromise` correspondingly.

 @param queue A queue to dispatch on.
 @param promises Promises to wait for.
 @return A new pending promise to be resolved with the same resolution as the first promise, among
         the given ones, which was resolved.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue race:(NSArray *)promises NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `race` operators.
 Usage: FBLPromise.race(@[ ... ])
 */
@interface FBLPromise<Value>(DotSyntax_RaceAdditions)

+ (FBLPromise * (^)(NSArray *))race FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise * (^)(dispatch_queue_t, NSArray *))raceOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Race.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Recover.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(RecoverAdditions)

typedef id __nullable (^FBLPromiseRecoverWorkBlock)(NSError *error) NS_SWIFT_UNAVAILABLE("");

/**
 Provides a new promise to recover in case the receiver gets rejected.

 @param recovery A block to handle the error that the receiver was rejected with.
 @return A new pending promise to use instead of the rejected one that gets resolved with resolution
         returned from `recovery` block.
 */
- (FBLPromise *)recover:(FBLPromiseRecoverWorkBlock)recovery NS_SWIFT_UNAVAILABLE("");

/**
 Provides a new promise to recover in case the receiver gets rejected.

 @param queue A queue to dispatch on.
 @param recovery A block to handle the error that the receiver was rejected with.
 @return A new pending promise to use instead of the rejected one that gets resolved with resolution
         returned from `recovery` block.
 */
- (FBLPromise *)onQueue:(dispatch_queue_t)queue
                recover:(FBLPromiseRecoverWorkBlock)recovery NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `recover` operators.
 Usage: promise.recover(^id(NSError *error) {...})
 */
@interface FBLPromise<Value>(DotSyntax_RecoverAdditions)

- (FBLPromise * (^)(FBLPromiseRecoverWorkBlock))recover FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");
- (FBLPromise * (^)(dispatch_queue_t, FBLPromiseRecoverWorkBlock))recoverOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Recover.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Reduce.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(ReduceAdditions)

typedef id __nullable (^FBLPromiseReducerBlock)(Value __nullable partial, id next)
    NS_SWIFT_UNAVAILABLE("");

/**
 Sequentially reduces a collection of values to a single promise using a given combining block
 and the value `self` resolves with as initial value.

 @param items An array of values to process in order.
 @param reducer A block to combine an accumulating value and an element of the sequence into
                the new accumulating value or a promise resolved with it, to be used in the next
                call of the `reducer` or returned to the caller.
 @return A new pending promise returned from the last `reducer` invocation.
         Or `self` if `items` is empty.
 */
- (FBLPromise *)reduce:(NSArray *)items
               combine:(FBLPromiseReducerBlock)reducer NS_SWIFT_UNAVAILABLE("");

/**
 Sequentially reduces a collection of values to a single promise using a given combining block
 and the value `self` resolves with as initial value.

 @param queue A queue to dispatch on.
 @param items An array of values to process in order.
 @param reducer A block to combine an accumulating value and an element of the sequence into
                the new accumulating value or a promise resolved with it, to be used in the next
                call of the `reducer` or returned to the caller.
 @return A new pending promise returned from the last `reducer` invocation.
         Or `self` if `items` is empty.
 */
- (FBLPromise *)onQueue:(dispatch_queue_t)queue
                 reduce:(NSArray *)items
                combine:(FBLPromiseReducerBlock)reducer NS_SWIFT_UNAVAILABLE("");

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `reduce` operators.
 Usage: promise.reduce(values, ^id(id partial, id next) { ... })
 */
@interface FBLPromise<Value>(DotSyntax_ReduceAdditions)

- (FBLPromise * (^)(NSArray *, FBLPromiseReducerBlock))reduce FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");
- (FBLPromise * (^)(dispatch_queue_t, NSArray *, FBLPromiseReducerBlock))reduceOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Reduce.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Retry.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

/** The default number of retry attempts is 1. */
FOUNDATION_EXTERN NSInteger const FBLPromiseRetryDefaultAttemptsCount NS_REFINED_FOR_SWIFT;

/** The default delay interval before making a retry attempt is 1.0 second. */
FOUNDATION_EXTERN NSTimeInterval const FBLPromiseRetryDefaultDelayInterval NS_REFINED_FOR_SWIFT;

@interface FBLPromise<Value>(RetryAdditions)

typedef id __nullable (^FBLPromiseRetryWorkBlock)(void) NS_SWIFT_UNAVAILABLE("");
typedef BOOL (^FBLPromiseRetryPredicateBlock)(NSInteger, NSError *) NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise that fulfills with the same value as the promise returned from `work`
 block, which executes asynchronously, or rejects with the same error after all retry attempts have
 been exhausted. Defaults to `FBLPromiseRetryDefaultAttemptsCount` attempt(s) on rejection where the
 `work` block is retried after a delay of `FBLPromiseRetryDefaultDelayInterval` second(s).

 @param work A block that executes asynchronously on the default queue and returns a value or an
             error used to resolve the promise.
 @return A new pending promise that fulfills with the same value as the promise returned from `work`
         block, or rejects with the same error after all retry attempts have been exhausted.
 */
+ (instancetype)retry:(FBLPromiseRetryWorkBlock)work NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise that fulfills with the same value as the promise returned from `work`
 block, which executes asynchronously on the given `queue`, or rejects with the same error after all
 retry attempts have been exhausted. Defaults to `FBLPromiseRetryDefaultAttemptsCount` attempt(s) on
 rejection where the `work` block is retried on the given `queue` after a delay of
 `FBLPromiseRetryDefaultDelayInterval` second(s).

 @param queue A queue to invoke the `work` block on.
 @param work A block that executes asynchronously on the given `queue` and returns a value or an
             error used to resolve the promise.
 @return A new pending promise that fulfills with the same value as the promise returned from `work`
         block, or rejects with the same error after all retry attempts have been exhausted.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue
                  retry:(FBLPromiseRetryWorkBlock)work NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise that fulfills with the same value as the promise returned from `work`
 block, which executes asynchronously, or rejects with the same error after all retry attempts have
 been exhausted.

 @param count Max number of retry attempts. The `work` block will be executed once if the specified
              count is less than or equal to zero.
 @param work A block that executes asynchronously on the default queue and returns a value or an
             error used to resolve the promise.
 @return A new pending promise that fulfills with the same value as the promise returned from `work`
         block, or rejects with the same error after all retry attempts have been exhausted.
 */
+ (instancetype)attempts:(NSInteger)count
                   retry:(FBLPromiseRetryWorkBlock)work NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise that fulfills with the same value as the promise returned from `work`
 block, which executes asynchronously on the given `queue`, or rejects with the same error after all
 retry attempts have been exhausted.

 @param queue A queue to invoke the `work` block on.
 @param count Max number of retry attempts. The `work` block will be executed once if the specified
              count is less than or equal to zero.
 @param work A block that executes asynchronously on the given `queue` and returns a value or an
             error used to resolve the promise.
 @return A new pending promise that fulfills with the same value as the promise returned from `work`
         block, or rejects with the same error after all retry attempts have been exhausted.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue
               attempts:(NSInteger)count
                  retry:(FBLPromiseRetryWorkBlock)work NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise that fulfills with the same value as the promise returned from `work`
 block, which executes asynchronously, or rejects with the same error after all retry attempts have
 been exhausted. On rejection, the `work` block is retried after the given delay `interval` and will
 continue to retry until the number of specified attempts have been exhausted or will bail early if
 the given condition is not met.

 @param count Max number of retry attempts. The `work` block will be executed once if the specified
              count is less than or equal to zero.
 @param interval Time to wait before the next retry attempt.
 @param predicate Condition to check before the next retry attempt. The predicate block provides the
                  the number of remaining retry attempts and the error that the promise was rejected
                  with.
 @param work A block that executes asynchronously on the default queue and returns a value or an
             error used to resolve the promise.
 @return A new pending promise that fulfills with the same value as the promise returned from `work`
         block, or rejects with the same error after all retry attempts have been exhausted or if
         the given condition is not met.
 */
+ (instancetype)attempts:(NSInteger)count
                   delay:(NSTimeInterval)interval
               condition:(nullable FBLPromiseRetryPredicateBlock)predicate
                   retry:(FBLPromiseRetryWorkBlock)work NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise that fulfills with the same value as the promise returned from `work`
 block, which executes asynchronously on the given `queue`, or rejects with the same error after all
 retry attempts have been exhausted. On rejection, the `work` block is retried after the given
 delay `interval` and will continue to retry until the number of specified attempts have been
 exhausted or will bail early if the given condition is not met.

 @param queue A queue to invoke the `work` block on.
 @param count Max number of retry attempts. The `work` block will be executed once if the specified
              count is less than or equal to zero.
 @param interval Time to wait before the next retry attempt.
 @param predicate Condition to check before the next retry attempt. The predicate block provides the
                  the number of remaining retry attempts and the error that the promise was rejected
                  with.
 @param work A block that executes asynchronously on the given `queue` and returns a value or an
             error used to resolve the promise.
 @return A new pending promise that fulfills with the same value as the promise returned from `work`
         block, or rejects with the same error after all retry attempts have been exhausted or if
         the given condition is not met.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue
               attempts:(NSInteger)count
                  delay:(NSTimeInterval)interval
              condition:(nullable FBLPromiseRetryPredicateBlock)predicate
                  retry:(FBLPromiseRetryWorkBlock)work NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise+Retry` operators.
 Usage: FBLPromise.retry(^id { ... })
 */
@interface FBLPromise<Value>(DotSyntax_RetryAdditions)

+ (FBLPromise * (^)(FBLPromiseRetryWorkBlock))retry FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise * (^)(dispatch_queue_t, FBLPromiseRetryWorkBlock))retryOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise * (^)(NSInteger, NSTimeInterval, FBLPromiseRetryPredicateBlock __nullable,
                    FBLPromiseRetryWorkBlock))retryAgain FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise * (^)(dispatch_queue_t, NSInteger, NSTimeInterval,
                    FBLPromiseRetryPredicateBlock __nullable,
                    FBLPromiseRetryWorkBlock))retryAgainOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Retry.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Testing.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

/**
 Waits for all scheduled promises blocks.

 @param timeout Maximum time to wait.
 @return YES if all promises blocks have completed before the timeout and NO otherwise.
 */
FOUNDATION_EXTERN BOOL FBLWaitForPromisesWithTimeout(NSTimeInterval timeout) NS_REFINED_FOR_SWIFT;

@interface FBLPromise<Value>(TestingAdditions)

/**
 Dispatch group for promises that is typically used to wait for all scheduled blocks.
 */
@property(class, nonatomic, readonly) dispatch_group_t dispatchGroup NS_REFINED_FOR_SWIFT;

/**
 Properties to get the current state of the promise.
 */
@property(nonatomic, readonly) BOOL isPending NS_REFINED_FOR_SWIFT;
@property(nonatomic, readonly) BOOL isFulfilled NS_REFINED_FOR_SWIFT;
@property(nonatomic, readonly) BOOL isRejected NS_REFINED_FOR_SWIFT;

/**
 Value the promise was fulfilled with.
 Can be nil if the promise is still pending, was resolved with nil or after it has been rejected.
 */
@property(nonatomic, readonly, nullable) Value value NS_REFINED_FOR_SWIFT;

/**
 Error the promise was rejected with.
 Can be nil if the promise is still pending or after it has been fulfilled.
 */
@property(nonatomic, readonly, nullable) NSError *error NS_REFINED_FOR_SWIFT;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Testing.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Then.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(ThenAdditions)

typedef id __nullable (^FBLPromiseThenWorkBlock)(Value __nullable value) NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise which eventually gets resolved with resolution returned from `work`
 block: either value, error or another promise. The `work` block is executed asynchronously only
 when the receiver is fulfilled. If receiver is rejected, the returned promise is also rejected with
 the same error.

 @param work A block to handle the value that receiver was fulfilled with.
 @return A new pending promise to be resolved with resolution returned from the `work` block.
 */
- (FBLPromise *)then:(FBLPromiseThenWorkBlock)work NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise which eventually gets resolved with resolution returned from `work`
 block: either value, error or another promise. The `work` block is executed asynchronously when the
 receiver is fulfilled. If receiver is rejected, the returned promise is also rejected with the same
 error.

 @param queue A queue to invoke the `work` block on.
 @param work A block to handle the value that receiver was fulfilled with.
 @return A new pending promise to be resolved with resolution returned from the `work` block.
 */
- (FBLPromise *)onQueue:(dispatch_queue_t)queue
                   then:(FBLPromiseThenWorkBlock)work NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `then` operators.
 Usage: promise.then(^id(id value) { ... })
 */
@interface FBLPromise<Value>(DotSyntax_ThenAdditions)

- (FBLPromise* (^)(FBLPromiseThenWorkBlock))then FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
- (FBLPromise* (^)(dispatch_queue_t, FBLPromiseThenWorkBlock))thenOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Then.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Timeout.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(TimeoutAdditions)

/**
 Waits for a promise with the specified `timeout`.

 @param interval Time to wait in seconds.
 @return A new pending promise that gets either resolved with same resolution as the receiver or
         rejected with `FBLPromiseErrorCodeTimedOut` error code in `FBLPromiseErrorDomain`.
 */
- (FBLPromise *)timeout:(NSTimeInterval)interval NS_SWIFT_UNAVAILABLE("");

/**
 Waits for a promise with the specified `timeout`.

 @param queue A queue to dispatch on.
 @param interval Time to wait in seconds.
 @return A new pending promise that gets either resolved with same resolution as the receiver or
         rejected with `FBLPromiseErrorCodeTimedOut` error code in `FBLPromiseErrorDomain`.
 */
- (FBLPromise *)onQueue:(dispatch_queue_t)queue
                timeout:(NSTimeInterval)interval NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `timeout` operators.
 Usage: promise.timeout(...)
 */
@interface FBLPromise<Value>(DotSyntax_TimeoutAdditions)

- (FBLPromise* (^)(NSTimeInterval))timeout FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
- (FBLPromise* (^)(dispatch_queue_t, NSTimeInterval))timeoutOn FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Timeout.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Validate.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

@interface FBLPromise<Value>(ValidateAdditions)

typedef BOOL (^FBLPromiseValidateWorkBlock)(Value __nullable value) NS_SWIFT_UNAVAILABLE("");

/**
 Validates a fulfilled value or rejects the value if it can not be validated.

 @param predicate An expression to validate.
 @return A new pending promise that gets either resolved with same resolution as the receiver or
         rejected with `FBLPromiseErrorCodeValidationFailure` error code in `FBLPromiseErrorDomain`.
 */
- (FBLPromise *)validate:(FBLPromiseValidateWorkBlock)predicate NS_SWIFT_UNAVAILABLE("");

/**
 Validates a fulfilled value or rejects the value if it can not be validated.

 @param queue A queue to dispatch on.
 @param predicate An expression to validate.
 @return A new pending promise that gets either resolved with same resolution as the receiver or
         rejected with `FBLPromiseErrorCodeValidationFailure` error code in `FBLPromiseErrorDomain`.
 */
- (FBLPromise *)onQueue:(dispatch_queue_t)queue
               validate:(FBLPromiseValidateWorkBlock)predicate NS_REFINED_FOR_SWIFT;

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `validate` operators.
 Usage: promise.validate(^BOOL(id value) { ... })
 */
@interface FBLPromise<Value>(DotSyntax_ValidateAdditions)

- (FBLPromise * (^)(FBLPromiseValidateWorkBlock))validate FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");
- (FBLPromise * (^)(dispatch_queue_t, FBLPromiseValidateWorkBlock))validateOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Validate.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Wrap.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise.h"

NS_ASSUME_NONNULL_BEGIN

/**
 Different types of completion handlers available to be wrapped with promise.
 */
typedef void (^FBLPromiseCompletion)(void) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseObjectCompletion)(id __nullable) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseErrorCompletion)(NSError* __nullable) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseObjectOrErrorCompletion)(id __nullable, NSError* __nullable)
    NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseErrorOrObjectCompletion)(NSError* __nullable, id __nullable)
    NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromise2ObjectsOrErrorCompletion)(id __nullable, id __nullable,
                                                    NSError* __nullable) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseBoolCompletion)(BOOL) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseBoolOrErrorCompletion)(BOOL, NSError* __nullable) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseIntegerCompletion)(NSInteger) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseIntegerOrErrorCompletion)(NSInteger, NSError* __nullable)
    NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseDoubleCompletion)(double) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseDoubleOrErrorCompletion)(double, NSError* __nullable)
    NS_SWIFT_UNAVAILABLE("");

/**
 Provides an easy way to convert methods that use common callback patterns into promises.
 */
@interface FBLPromise<Value>(WrapAdditions)

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with `nil` when completion handler is invoked.
 */
+ (instancetype)wrapCompletion:(void (^)(FBLPromiseCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with `nil` when completion handler is invoked.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue
         wrapCompletion:(void (^)(FBLPromiseCompletion handler))work NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an object provided by completion handler.
 */
+ (instancetype)wrapObjectCompletion:(void (^)(FBLPromiseObjectCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an object provided by completion handler.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue
    wrapObjectCompletion:(void (^)(FBLPromiseObjectCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an error provided by completion handler.
 If error is `nil`, fulfills with `nil`, otherwise rejects with the error.
 */
+ (instancetype)wrapErrorCompletion:(void (^)(FBLPromiseErrorCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an error provided by completion handler.
 If error is `nil`, fulfills with `nil`, otherwise rejects with the error.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue
    wrapErrorCompletion:(void (^)(FBLPromiseErrorCompletion handler))work NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an object provided by completion handler if error is `nil`.
 Otherwise, rejects with the error.
 */
+ (instancetype)wrapObjectOrErrorCompletion:
    (void (^)(FBLPromiseObjectOrErrorCompletion handler))work NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an object provided by completion handler if error is `nil`.
 Otherwise, rejects with the error.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue
    wrapObjectOrErrorCompletion:(void (^)(FBLPromiseObjectOrErrorCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an error or object provided by completion handler. If error
 is not `nil`, rejects with the error.
 */
+ (instancetype)wrapErrorOrObjectCompletion:
    (void (^)(FBLPromiseErrorOrObjectCompletion handler))work NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an error or object provided by completion handler. If error
 is not `nil`, rejects with the error.
 */
+ (instancetype)onQueue:(dispatch_queue_t)queue
    wrapErrorOrObjectCompletion:(void (^)(FBLPromiseErrorOrObjectCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an array of objects provided by completion handler in order
 if error is `nil`. Otherwise, rejects with the error.
 */
+ (FBLPromise<NSArray*>*)wrap2ObjectsOrErrorCompletion:
    (void (^)(FBLPromise2ObjectsOrErrorCompletion handler))work NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an array of objects provided by completion handler in order
 if error is `nil`. Otherwise, rejects with the error.
 */
+ (FBLPromise<NSArray*>*)onQueue:(dispatch_queue_t)queue
    wrap2ObjectsOrErrorCompletion:(void (^)(FBLPromise2ObjectsOrErrorCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping YES/NO.
 */
+ (FBLPromise<NSNumber*>*)wrapBoolCompletion:(void (^)(FBLPromiseBoolCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping YES/NO.
 */
+ (FBLPromise<NSNumber*>*)onQueue:(dispatch_queue_t)queue
               wrapBoolCompletion:(void (^)(FBLPromiseBoolCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping YES/NO when error is `nil`.
 Otherwise rejects with the error.
 */
+ (FBLPromise<NSNumber*>*)wrapBoolOrErrorCompletion:
    (void (^)(FBLPromiseBoolOrErrorCompletion handler))work NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping YES/NO when error is `nil`.
 Otherwise rejects with the error.
 */
+ (FBLPromise<NSNumber*>*)onQueue:(dispatch_queue_t)queue
        wrapBoolOrErrorCompletion:(void (^)(FBLPromiseBoolOrErrorCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping an integer.
 */
+ (FBLPromise<NSNumber*>*)wrapIntegerCompletion:(void (^)(FBLPromiseIntegerCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping an integer.
 */
+ (FBLPromise<NSNumber*>*)onQueue:(dispatch_queue_t)queue
            wrapIntegerCompletion:(void (^)(FBLPromiseIntegerCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping an integer when error is `nil`.
 Otherwise rejects with the error.
 */
+ (FBLPromise<NSNumber*>*)wrapIntegerOrErrorCompletion:
    (void (^)(FBLPromiseIntegerOrErrorCompletion handler))work NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping an integer when error is `nil`.
 Otherwise rejects with the error.
 */
+ (FBLPromise<NSNumber*>*)onQueue:(dispatch_queue_t)queue
     wrapIntegerOrErrorCompletion:(void (^)(FBLPromiseIntegerOrErrorCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping a double.
 */
+ (FBLPromise<NSNumber*>*)wrapDoubleCompletion:(void (^)(FBLPromiseDoubleCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping a double.
 */
+ (FBLPromise<NSNumber*>*)onQueue:(dispatch_queue_t)queue
             wrapDoubleCompletion:(void (^)(FBLPromiseDoubleCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

/**
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping a double when error is `nil`.
 Otherwise rejects with the error.
 */
+ (FBLPromise<NSNumber*>*)wrapDoubleOrErrorCompletion:
    (void (^)(FBLPromiseDoubleOrErrorCompletion handler))work NS_SWIFT_UNAVAILABLE("");

/**
 @param queue A queue to invoke the `work` block on.
 @param work A block to perform any operations needed to resolve the promise.
 @returns A promise that resolves with an `NSNumber` wrapping a double when error is `nil`.
 Otherwise rejects with the error.
 */
+ (FBLPromise<NSNumber*>*)onQueue:(dispatch_queue_t)queue
      wrapDoubleOrErrorCompletion:(void (^)(FBLPromiseDoubleOrErrorCompletion handler))work
    NS_SWIFT_UNAVAILABLE("");

@end

/**
 Convenience dot-syntax wrappers for `FBLPromise` `wrap` operators.
 Usage: FBLPromise.wrapCompletion(^(FBLPromiseCompletion handler) {...})
 */
@interface FBLPromise<Value>(DotSyntax_WrapAdditions)

+ (FBLPromise* (^)(void (^)(FBLPromiseCompletion)))wrapCompletion FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(dispatch_queue_t, void (^)(FBLPromiseCompletion)))wrapCompletionOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(void (^)(FBLPromiseObjectCompletion)))wrapObjectCompletion
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(dispatch_queue_t, void (^)(FBLPromiseObjectCompletion)))wrapObjectCompletionOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(void (^)(FBLPromiseErrorCompletion)))wrapErrorCompletion FBL_PROMISES_DOT_SYNTAX
    NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(dispatch_queue_t, void (^)(FBLPromiseErrorCompletion)))wrapErrorCompletionOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(void (^)(FBLPromiseObjectOrErrorCompletion)))wrapObjectOrErrorCompletion
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(dispatch_queue_t,
                   void (^)(FBLPromiseObjectOrErrorCompletion)))wrapObjectOrErrorCompletionOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(void (^)(FBLPromiseErrorOrObjectCompletion)))wrapErrorOrObjectCompletion
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise* (^)(dispatch_queue_t,
                   void (^)(FBLPromiseErrorOrObjectCompletion)))wrapErrorOrObjectCompletionOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSArray*>* (^)(void (^)(FBLPromise2ObjectsOrErrorCompletion)))
    wrap2ObjectsOrErrorCompletion FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSArray*>* (^)(dispatch_queue_t, void (^)(FBLPromise2ObjectsOrErrorCompletion)))
    wrap2ObjectsOrErrorCompletionOn FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(void (^)(FBLPromiseBoolCompletion)))wrapBoolCompletion
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(dispatch_queue_t,
                              void (^)(FBLPromiseBoolCompletion)))wrapBoolCompletionOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(void (^)(FBLPromiseBoolOrErrorCompletion)))wrapBoolOrErrorCompletion
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(dispatch_queue_t,
                              void (^)(FBLPromiseBoolOrErrorCompletion)))wrapBoolOrErrorCompletionOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(void (^)(FBLPromiseIntegerCompletion)))wrapIntegerCompletion
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(dispatch_queue_t,
                              void (^)(FBLPromiseIntegerCompletion)))wrapIntegerCompletionOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(void (^)(FBLPromiseIntegerOrErrorCompletion)))
    wrapIntegerOrErrorCompletion FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(dispatch_queue_t, void (^)(FBLPromiseIntegerOrErrorCompletion)))
    wrapIntegerOrErrorCompletionOn FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(void (^)(FBLPromiseDoubleCompletion)))wrapDoubleCompletion
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(dispatch_queue_t,
                              void (^)(FBLPromiseDoubleCompletion)))wrapDoubleCompletionOn
    FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(void (^)(FBLPromiseDoubleOrErrorCompletion)))
    wrapDoubleOrErrorCompletion FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise<NSNumber*>* (^)(dispatch_queue_t, void (^)(FBLPromiseDoubleOrErrorCompletion)))
    wrapDoubleOrErrorCompletionOn FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise+Wrap.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromiseError.h"

NS_ASSUME_NONNULL_BEGIN

/**
 Promises synchronization construct in Objective-C.
 */
@interface FBLPromise<__covariant Value> : NSObject

/**
 Default dispatch queue used for `FBLPromise`, which is `main` if a queue is not specified.
 */
@property(class) dispatch_queue_t defaultDispatchQueue NS_REFINED_FOR_SWIFT;

/**
 Creates a pending promise.
 */
+ (instancetype)pendingPromise NS_REFINED_FOR_SWIFT;

/**
 Creates a resolved promise.

 @param resolution An object to resolve the promise with: either a value or an error.
 @return A new resolved promise.
 */
+ (instancetype)resolvedWith:(nullable id)resolution NS_REFINED_FOR_SWIFT;

/**
 Synchronously fulfills the promise with a value.

 @param value An arbitrary value to fulfill the promise with, including `nil`.
 */
- (void)fulfill:(nullable Value)value NS_REFINED_FOR_SWIFT;

/**
 Synchronously rejects the promise with an error.

 @param error An error to reject the promise with.
 */
- (void)reject:(NSError *)error NS_REFINED_FOR_SWIFT;

+ (instancetype)new NS_UNAVAILABLE;
- (instancetype)init NS_UNAVAILABLE;
@end

@interface FBLPromise<Value>()

/**
 Adds an object to the set of pending objects to keep strongly while the promise is pending.
 Used by the Swift wrappers to keep them alive until the underlying ObjC promise is resolved.

 @param object An object to add.
 */
- (void)addPendingObject:(id)object NS_REFINED_FOR_SWIFT;

@end

#ifdef FBL_PROMISES_DOT_SYNTAX_IS_DEPRECATED
#define FBL_PROMISES_DOT_SYNTAX __attribute__((deprecated))
#else
#define FBL_PROMISES_DOT_SYNTAX
#endif

@interface FBLPromise<Value>(DotSyntaxAdditions)

/**
 Convenience dot-syntax wrappers for FBLPromise.
 Usage: FBLPromise.pending()
        FBLPromise.resolved(value)

 */
+ (FBLPromise * (^)(void))pending FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");
+ (FBLPromise * (^)(id __nullable))resolved FBL_PROMISES_DOT_SYNTAX NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromise.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromiseError.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

FOUNDATION_EXTERN NSErrorDomain const FBLPromiseErrorDomain NS_REFINED_FOR_SWIFT;

/**
 Possible error codes in `FBLPromiseErrorDomain`.
 */
typedef NS_ENUM(NSInteger, FBLPromiseErrorCode) {
  /** Promise failed to resolve in time. */
  FBLPromiseErrorCodeTimedOut = 1,
  /** Validation predicate returned false. */
  FBLPromiseErrorCodeValidationFailure = 2,
} NS_REFINED_FOR_SWIFT;

NS_INLINE BOOL FBLPromiseErrorIsTimedOut(NSError *error) NS_SWIFT_UNAVAILABLE("") {
  return error.domain == FBLPromiseErrorDomain &&
         error.code == FBLPromiseErrorCodeTimedOut;
}

NS_INLINE BOOL FBLPromiseErrorIsValidationFailure(NSError *error) NS_SWIFT_UNAVAILABLE("") {
  return error.domain == FBLPromiseErrorDomain &&
         error.code == FBLPromiseErrorCodeValidationFailure;
}

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromiseError.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromisePrivate.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise+Testing.h"

NS_ASSUME_NONNULL_BEGIN

/**
 Miscellaneous low-level private interfaces available to extend standard FBLPromise functionality.
 */
@interface FBLPromise<Value>()

typedef void (^FBLPromiseOnFulfillBlock)(Value __nullable value) NS_SWIFT_UNAVAILABLE("");
typedef void (^FBLPromiseOnRejectBlock)(NSError *error) NS_SWIFT_UNAVAILABLE("");
typedef id __nullable (^__nullable FBLPromiseChainedFulfillBlock)(Value __nullable value)
    NS_SWIFT_UNAVAILABLE("");
typedef id __nullable (^__nullable FBLPromiseChainedRejectBlock)(NSError *error)
    NS_SWIFT_UNAVAILABLE("");

/**
 Creates a pending promise.
 */
- (instancetype)initPending NS_SWIFT_UNAVAILABLE("");

/**
 Creates a resolved promise.

 @param resolution An object to resolve the promise with: either a value or an error.
 @return A new resolved promise.
 */
- (instancetype)initWithResolution:(nullable id)resolution NS_SWIFT_UNAVAILABLE("");

/**
 Invokes `fulfill` and `reject` blocks on `queue` when the receiver gets either fulfilled or
 rejected respectively.
 */
- (void)observeOnQueue:(dispatch_queue_t)queue
               fulfill:(FBLPromiseOnFulfillBlock)onFulfill
                reject:(FBLPromiseOnRejectBlock)onReject NS_SWIFT_UNAVAILABLE("");

/**
 Returns a new promise which gets resolved with the return value of `chainedFulfill` or
 `chainedReject` blocks respectively. The blocks are invoked when the receiver gets either
 fulfilled or rejected. If `nil` is passed to either block arg, the returned promise is resolved
 with the same resolution as the receiver.
 */
- (FBLPromise *)chainOnQueue:(dispatch_queue_t)queue
              chainedFulfill:(FBLPromiseChainedFulfillBlock)chainedFulfill
               chainedReject:(FBLPromiseChainedRejectBlock)chainedReject NS_SWIFT_UNAVAILABLE("");

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromisePrivate.h ===

===
Path: iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromises.h
===
/**
 Copyright 2018 Google Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "FBLPromise+All.h"
#import "FBLPromise+Always.h"
#import "FBLPromise+Any.h"
#import "FBLPromise+Async.h"
#import "FBLPromise+Await.h"
#import "FBLPromise+Catch.h"
#import "FBLPromise+Delay.h"
#import "FBLPromise+Do.h"
#import "FBLPromise+Race.h"
#import "FBLPromise+Recover.h"
#import "FBLPromise+Reduce.h"
#import "FBLPromise+Retry.h"
#import "FBLPromise+Then.h"
#import "FBLPromise+Timeout.h"
#import "FBLPromise+Validate.h"
#import "FBLPromise+Wrap.h"

=== end iosApp/Pods/PromisesObjC/Sources/FBLPromises/include/FBLPromises.h ===

===
Path: iosApp/Pods/RecaptchaInterop/README.md
===
# Interop Libraries for Google SDKs on Apple Platforms

This repository is for internal Google use only.

This repository contains interfaces (Objective-C or Swift Protocols) that allow Google SDKs, for
Apple platforms, to reliably interoperate with one another via weak dependencies. These interfaces
enable Google SDKs to depend on the features of another Google SDK while optionally installing the
dependent SDK only if specified by the client.

## Versioning

The major version of this SDK should always be 100. When a new interface is added, the minor version
should be incremented. Clients should always enable minor version updates from the required minimum
required minor version, `100.x`, e.g.:
- Swift Package Manager: `"100.x" ..< "101.0"`
- CocoaPods: `'~100.x'`

If a breaking change is ever required, it should be done by renaming the library to a new name in
this repo.

## Contributing

See [Contributing](CONTRIBUTING.md) for more information on contributing to the project.

## License

The contents of this repository is licensed under the
[Apache License, version 2.0](http://www.apache.org/licenses/LICENSE-2.0).

=== end iosApp/Pods/RecaptchaInterop/README.md ===

===
Path: iosApp/Pods/RecaptchaInterop/RecaptchaEnterprise/RecaptchaInterop/Public/RecaptchaInterop/RCAActionProtocol.h
===
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

/**
 * Action intended to be protected by reCAPTCHA. An instance of this object
 * should be passed to RecaptchaClient.execute.
 */
@protocol RCAActionProtocol

/** Indicates that the protected action is a Login workflow. */
@property(class, readonly, nonatomic) id<RCAActionProtocol> login;

/** Indicates that the protected action is a Signup workflow. */
@property(class, readonly, nonatomic) id<RCAActionProtocol> signup;

/** A String representing the action. */
@property(nonatomic, readonly) NSString* action;

/** Creates an instance with a custom action from a String. */
- (instancetype)initWithCustomAction:(NSString*)customAction;

- (instancetype)init NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/RecaptchaInterop/RecaptchaEnterprise/RecaptchaInterop/Public/RecaptchaInterop/RCAActionProtocol.h ===

===
Path: iosApp/Pods/RecaptchaInterop/RecaptchaEnterprise/RecaptchaInterop/Public/RecaptchaInterop/RCARecaptchaClientProtocol.h
===
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#import <Foundation/Foundation.h>

#import "RCAActionProtocol.h"

NS_ASSUME_NONNULL_BEGIN

/** Interface to interact with reCAPTCHA. */
@protocol RCARecaptchaClientProtocol

- (instancetype)init NS_UNAVAILABLE;

/**
 * Executes reCAPTCHA on a user action.
 *
 * It is suggested the usage of 10 seconds for the timeout. The minimum value
 * is 5 seconds.
 *
 * @param action The user action to protect.
 * @param timeout Timeout for execute in milliseconds.
 * @param completion Callback function to return the execute result.
 */
- (void)execute:(nonnull id<RCAActionProtocol>)action
    withTimeout:(double)timeout
     completion:(void (^)(NSString *_Nullable token, NSError *_Nullable error))completion
    NS_SWIFT_NAME(execute(withAction:withTimeout:completion:));

/**
 * Executes reCAPTCHA on a user action.
 *
 * This method will throw a timeout exception after 10 seconds.
 *
 * @param action The user action to protect.
 * @param completion Callback function to return the execute result.
 */
- (void)execute:(nonnull id<RCAActionProtocol>)action
     completion:(void (^)(NSString *_Nullable token, NSError *_Nullable error))completion
    NS_SWIFT_NAME(execute(withAction:completion:));

@end

NS_ASSUME_NONNULL_END

=== end iosApp/Pods/RecaptchaInterop/RecaptchaEnterprise/RecaptchaInterop/Public/RecaptchaInterop/RCARecaptchaClientProtocol.h ===

===
Path: iosApp/Pods/RecaptchaInterop/RecaptchaEnterprise/RecaptchaInterop/Public/RecaptchaInterop/RCARecaptchaProtocol.h
===
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#import <Foundation/Foundation.h>

#import "RCARecaptchaClientProtocol.h"

NS_ASSUME_NONNULL_BEGIN

/** Interface to interact with reCAPTCHA and retrieve a reCAPTCHA Client. */
@protocol RCARecaptchaProtocol

- (instancetype)init NS_UNAVAILABLE;

/**
 * Builds a new reCAPTCHA Client for the given Site Key and timeout.
 *
 * The SDK currently supports one Site Key. Passing a different Site Key will
 * throw an exception.
 *
 * At least a 10000 millisecond timeout is suggested to allow for slow
 * networking, though in some cases longer timeouts may be necessary. The
 * minimum allowable value is 5000 milliseconds.
 *
 * @param siteKey reCAPTCHA Site Key for the app.
 * @param timeout Timeout for getClient in milliseconds.
 * @param completion Callback function to return the RecaptchaClient or an error.
 */
+ (void)getClientWithSiteKey:(nonnull NSString *)siteKey
                 withTimeout:(double)timeout
                  completion:(void (^)(id<RCARecaptchaClientProtocol> _Nullable recaptchaClient,
                                       NSError *_Nullable error))completion
    NS_SWIFT_NAME(getClient(withSiteKey:withTimeout:completion:));

/**
 * Builds a new reCAPTCHA Client for the given Site Key.
 *
 * The SDK currently supports one Site Key. Passing a different Site Key will
 * throw an exception.
 *
 * This method will throw a timeout exception after 10 seconds.
 *
 * @param siteKey reCAPTCHA Site Key for the app.
 * @param completion Callback function to return the RecaptchaClient or an error.
 */
+ (void)getClientWithSiteKey:(nonnull NSString *)siteKey
                  completion:(void (^)(id<RCARecaptchaClientProtocol> _Nullable recaptchaClient,
                                       NSError *_Nullable error))completion
    NS_SWIFT_NAME(getClient(withSiteKey:completion:));

@end

NS_ASSUME_NONNULL_END
=== end iosApp/Pods/RecaptchaInterop/RecaptchaEnterprise/RecaptchaInterop/Public/RecaptchaInterop/RCARecaptchaProtocol.h ===

===
Path: iosApp/Pods/RecaptchaInterop/RecaptchaEnterprise/RecaptchaInterop/Public/RecaptchaInterop/RecaptchaInterop.h
===
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#import "RCAActionProtocol.h"
#import "RCARecaptchaClientProtocol.h"
#import "RCARecaptchaProtocol.h"

=== end iosApp/Pods/RecaptchaInterop/RecaptchaEnterprise/RecaptchaInterop/Public/RecaptchaInterop/RecaptchaInterop.h ===

===
Path: iosApp/Pods/Target Support Files/AppAuth/AppAuth-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif

#import "AppAuthCore.h"
#import "OIDAuthorizationRequest.h"
#import "OIDAuthorizationResponse.h"
#import "OIDAuthorizationService.h"
#import "OIDAuthState.h"
#import "OIDAuthStateChangeDelegate.h"
#import "OIDAuthStateErrorDelegate.h"
#import "OIDClientMetadataParameters.h"
#import "OIDDefines.h"
#import "OIDEndSessionRequest.h"
#import "OIDEndSessionResponse.h"
#import "OIDError.h"
#import "OIDErrorUtilities.h"
#import "OIDExternalUserAgent.h"
#import "OIDExternalUserAgentRequest.h"
#import "OIDExternalUserAgentSession.h"
#import "OIDFieldMapping.h"
#import "OIDGrantTypes.h"
#import "OIDIDToken.h"
#import "OIDRegistrationRequest.h"
#import "OIDRegistrationResponse.h"
#import "OIDResponseTypes.h"
#import "OIDScopes.h"
#import "OIDScopeUtilities.h"
#import "OIDServiceConfiguration.h"
#import "OIDServiceDiscovery.h"
#import "OIDTokenRequest.h"
#import "OIDTokenResponse.h"
#import "OIDTokenUtilities.h"
#import "OIDURLQueryComponent.h"
#import "OIDURLSessionProvider.h"
#import "AppAuth.h"
#import "OIDAuthorizationService+IOS.h"
#import "OIDAuthState+IOS.h"
#import "OIDExternalUserAgentCatalyst.h"
#import "OIDExternalUserAgentIOS.h"
#import "OIDExternalUserAgentIOSCustomBrowser.h"

FOUNDATION_EXPORT double AppAuthVersionNumber;
FOUNDATION_EXPORT const unsigned char AppAuthVersionString[];


=== end iosApp/Pods/Target Support Files/AppAuth/AppAuth-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/FirebaseAppCheckInterop/FirebaseAppCheckInterop-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif

#import "FIRAppCheckInterop.h"
#import "FIRAppCheckProtocol.h"
#import "FIRAppCheckTokenResultInterop.h"
#import "FirebaseAppCheckInterop.h"

FOUNDATION_EXPORT double FirebaseAppCheckInteropVersionNumber;
FOUNDATION_EXPORT const unsigned char FirebaseAppCheckInteropVersionString[];


=== end iosApp/Pods/Target Support Files/FirebaseAppCheckInterop/FirebaseAppCheckInterop-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/FirebaseAuth/FirebaseAuth-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif

#import "FIRActionCodeSettings.h"
#import "FIRAdditionalUserInfo.h"
#import "FIRAuth.h"
#import "FIRAuthAPNSTokenType.h"
#import "FIRAuthCredential.h"
#import "FIRAuthDataResult.h"
#import "FIRAuthErrors.h"
#import "FIRAuthSettings.h"
#import "FIRAuthTokenResult.h"
#import "FIRAuthUIDelegate.h"
#import "FirebaseAuth.h"
#import "FIREmailAuthProvider.h"
#import "FIRFacebookAuthProvider.h"
#import "FIRFederatedAuthProvider.h"
#import "FIRGameCenterAuthProvider.h"
#import "FIRGitHubAuthProvider.h"
#import "FIRGoogleAuthProvider.h"
#import "FIRMultiFactor.h"
#import "FIRMultiFactorAssertion.h"
#import "FIRMultiFactorInfo.h"
#import "FIRMultiFactorResolver.h"
#import "FIRMultiFactorSession.h"
#import "FIROAuthCredential.h"
#import "FIROAuthProvider.h"
#import "FIRPhoneAuthCredential.h"
#import "FIRPhoneAuthProvider.h"
#import "FIRPhoneMultiFactorAssertion.h"
#import "FIRPhoneMultiFactorGenerator.h"
#import "FIRPhoneMultiFactorInfo.h"
#import "FIRTOTPMultiFactorAssertion.h"
#import "FIRTOTPMultiFactorGenerator.h"
#import "FIRTOTPSecret.h"
#import "FIRTwitterAuthProvider.h"
#import "FIRUser.h"
#import "FIRUserInfo.h"
#import "FIRUserMetadata.h"

FOUNDATION_EXPORT double FirebaseAuthVersionNumber;
FOUNDATION_EXPORT const unsigned char FirebaseAuthVersionString[];


=== end iosApp/Pods/Target Support Files/FirebaseAuth/FirebaseAuth-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/FirebaseCore/FirebaseCore-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif

#import "FIRApp.h"
#import "FIRConfiguration.h"
#import "FirebaseCore.h"
#import "FIRLoggerLevel.h"
#import "FIROptions.h"
#import "FIRVersion.h"

FOUNDATION_EXPORT double FirebaseCoreVersionNumber;
FOUNDATION_EXPORT const unsigned char FirebaseCoreVersionString[];


=== end iosApp/Pods/Target Support Files/FirebaseCore/FirebaseCore-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/FirebaseCoreInternal/FirebaseCoreInternal-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif


FOUNDATION_EXPORT double FirebaseCoreInternalVersionNumber;
FOUNDATION_EXPORT const unsigned char FirebaseCoreInternalVersionString[];


=== end iosApp/Pods/Target Support Files/FirebaseCoreInternal/FirebaseCoreInternal-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/GTMAppAuth/GTMAppAuth-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif


FOUNDATION_EXPORT double GTMAppAuthVersionNumber;
FOUNDATION_EXPORT const unsigned char GTMAppAuthVersionString[];


=== end iosApp/Pods/Target Support Files/GTMAppAuth/GTMAppAuth-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/GTMSessionFetcher/GTMSessionFetcher-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif

#import "GTMSessionFetcher.h"
#import "GTMSessionFetcherLogging.h"
#import "GTMSessionFetcherService.h"
#import "GTMSessionUploadFetcher.h"

FOUNDATION_EXPORT double GTMSessionFetcherVersionNumber;
FOUNDATION_EXPORT const unsigned char GTMSessionFetcherVersionString[];


=== end iosApp/Pods/Target Support Files/GTMSessionFetcher/GTMSessionFetcher-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/GoogleSignIn/GoogleSignIn-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif

#import "GIDConfiguration.h"
#import "GIDGoogleUser.h"
#import "GIDProfileData.h"
#import "GIDSignIn.h"
#import "GIDSignInButton.h"
#import "GIDSignInResult.h"
#import "GIDToken.h"
#import "GoogleSignIn.h"

FOUNDATION_EXPORT double GoogleSignInVersionNumber;
FOUNDATION_EXPORT const unsigned char GoogleSignInVersionString[];


=== end iosApp/Pods/Target Support Files/GoogleSignIn/GoogleSignIn-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/GoogleUtilities/GoogleUtilities-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif

#import "GULAppDelegateSwizzler.h"
#import "GULApplication.h"
#import "GULSceneDelegateSwizzler.h"
#import "GULAppEnvironmentUtil.h"
#import "GULHeartbeatDateStorable.h"
#import "GULHeartbeatDateStorage.h"
#import "GULHeartbeatDateStorageUserDefaults.h"
#import "GULKeychainStorage.h"
#import "GULKeychainUtils.h"
#import "GULNetworkInfo.h"
#import "GULSecureCoding.h"
#import "GULURLSessionDataResponse.h"
#import "NSURLSession+GULPromises.h"
#import "GULLogger.h"
#import "GULLoggerLevel.h"
#import "GULNSData+zlib.h"
#import "GULMutableDictionary.h"
#import "GULNetwork.h"
#import "GULNetworkConstants.h"
#import "GULNetworkLoggerProtocol.h"
#import "GULNetworkMessageCode.h"
#import "GULNetworkURLSession.h"
#import "GULReachabilityChecker.h"

FOUNDATION_EXPORT double GoogleUtilitiesVersionNumber;
FOUNDATION_EXPORT const unsigned char GoogleUtilitiesVersionString[];


=== end iosApp/Pods/Target Support Files/GoogleUtilities/GoogleUtilities-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/Pods-iosApp/Pods-iosApp-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif


FOUNDATION_EXPORT double Pods_iosAppVersionNumber;
FOUNDATION_EXPORT const unsigned char Pods_iosAppVersionString[];


=== end iosApp/Pods/Target Support Files/Pods-iosApp/Pods-iosApp-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/PromisesObjC/PromisesObjC-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif

#import "FBLPromise+All.h"
#import "FBLPromise+Always.h"
#import "FBLPromise+Any.h"
#import "FBLPromise+Async.h"
#import "FBLPromise+Await.h"
#import "FBLPromise+Catch.h"
#import "FBLPromise+Delay.h"
#import "FBLPromise+Do.h"
#import "FBLPromise+Race.h"
#import "FBLPromise+Recover.h"
#import "FBLPromise+Reduce.h"
#import "FBLPromise+Retry.h"
#import "FBLPromise+Testing.h"
#import "FBLPromise+Then.h"
#import "FBLPromise+Timeout.h"
#import "FBLPromise+Validate.h"
#import "FBLPromise+Wrap.h"
#import "FBLPromise.h"
#import "FBLPromiseError.h"
#import "FBLPromises.h"

FOUNDATION_EXPORT double FBLPromisesVersionNumber;
FOUNDATION_EXPORT const unsigned char FBLPromisesVersionString[];


=== end iosApp/Pods/Target Support Files/PromisesObjC/PromisesObjC-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/RecaptchaInterop/RecaptchaInterop-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif

#import "RCAActionProtocol.h"
#import "RCARecaptchaClientProtocol.h"
#import "RCARecaptchaProtocol.h"
#import "RecaptchaInterop.h"

FOUNDATION_EXPORT double RecaptchaInteropVersionNumber;
FOUNDATION_EXPORT const unsigned char RecaptchaInteropVersionString[];


=== end iosApp/Pods/Target Support Files/RecaptchaInterop/RecaptchaInterop-umbrella.h ===

===
Path: iosApp/Pods/Target Support Files/netfox/netfox-umbrella.h
===
#ifdef __OBJC__
#import <UIKit/UIKit.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern "C"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif


FOUNDATION_EXPORT double netfoxVersionNumber;
FOUNDATION_EXPORT const unsigned char netfoxVersionString[];


=== end iosApp/Pods/Target Support Files/netfox/netfox-umbrella.h ===

===
Path: iosApp/Pods/netfox/README.md
===
<p align="center">
  <img src="netfox-logo.svg" />
</p>

<p align="center">
<img alt="Version" src="https://img.shields.io/badge/version-1.20.0-green.svg?style=flat-square" />
<a href="https://travis-ci.org/kasketis/netfox"><img alt="CI Status" src="http://img.shields.io/travis/kasketis/netfox.svg?style=flat-square" /></a>
<a href="https://cocoapods.org/pods/netfox"><img alt="Cocoapods Compatible" src="https://img.shields.io/cocoapods/v/netfox.svg?style=flat-square" /></a>
<a href="https://github.com/Carthage/Carthage"><img alt="Carthage Compatible" src="https://img.shields.io/badge/carthage-compatible-4BC51D.svg?style=flat-square" /></a>
<img alt="Platform" src="https://img.shields.io/cocoapods/p/netfox.svg?style=flat-square" />
<a href="https://opensource.org/licenses/MIT"><img alt="License" src="https://img.shields.io/badge/license-MIT-orange.svg?style=flat-square" /></a>
</p>


Netfox provides a quick look on all executed network requests performed by your iOS or OSX app.
It grabs all requests - of course yours, requests from 3rd party libraries (such as AFNetworking, Alamofire or else), UIWebViews, and more

Very useful and handy for network related issues and bugs

Supports Swift 5 and above - bridged also for Objective-C.

For Swift 4 support, use version [1.19.0](https://github.com/kasketis/netfox/releases/tag/1.19.0).

For Swift 3.2 support, use version [1.12.1](https://github.com/kasketis/netfox/releases/tag/1.12.1).

Feel free to contribute :)

### Overview
| ![](https://raw.githubusercontent.com/kasketis/netfox/master/assets/overview1_5_3.gif)  | ![](https://cloud.githubusercontent.com/assets/1402212/12893260/78f90916-ce90-11e5-830a-d1a1b91b2ac4.png) |
|---|---|

## Installation

### SPM (beta, only iOS)

The [Swift Package Manager](https://swift.org/package-manager/) is a tool for automating the distribution of Swift code and is integrated into the `swift` compiler.

To add `netfox` as a package dependency to your Xcode project, select `File > Add Packages` and enter as repository URL the `https://github.com/kasketis/netfox` (always choose the latest release)

For more info, please check [here](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app)

### CocoaPods

[CocoaPods](http://cocoapods.org) is a dependency manager for Cocoa projects. To integrate netfox into your Xcode project using CocoaPods, specify it in your `Podfile`:

<pre>
use_frameworks!
pod 'netfox'
</pre>

To bundle only on some build configurations specify them after pod.

<pre>
use_frameworks!
pod 'netfox', :configurations => ['Debug', 'Test']
</pre>

### Carthage

[Carthage](https://github.com/Carthage/Carthage) is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate netfox into your Xcode project using Carthage, specify it in your `Cartfile`:

<pre>
github "kasketis/netfox"
</pre>
### Manually

If you prefer not to use dependency managers, you can integrate netfox into your project manually.

You can do it by copying the "netfox" folder in your project (make sure that "Create groups" option is selected)

The above folder contains 3 subfolders: Core, iOS and OSX. 

- If you target on iOS keep only Core and iOS folders (remove OSX folder)
- If you target on OSX keep only Core and OSX folders (remove iOS folder)

## Start

#### Swift
```swift
// AppDelegate
import netfox
NFX.sharedInstance().start() // in didFinishLaunchingWithOptions:
```

</pre>

#### Objective-C
```objective-c
// AppDelegate
[NFX.sharedInstance start]; // in didFinishLaunchingWithOptions:
```

Just simple as that!

Note: Please wrap the above line with
```c
#if DEBUG
. . .
#endif
```
to prevent library’s execution on your production app.

You can add the DEBUG symbol with the -DDEBUG entry. Set it in the "Swift Compiler - Custom Flags" section -> "Other Swift Flags" line in project’s "Build Settings"

## Usage 

Just shake your device and check what's going right or wrong! 
Shake again and go back to your app!
![](https://raw.githubusercontent.com/kasketis/netfox/master/assets/shake.png)

## Stop

Call
```swift
NFX.sharedInstance().stop()
```
to stop netfox and clear all saved data. 
If you stop netfox its view will not be displayed until you call start method again. 

If you want to just enable/disable logging functionality or clear the data please use the buttons provided in the settings view

## Custom gestures

By default the library registers for shake motion. If you want to open the logs with a different gesture, add the following line after the installation one
```swift
NFX.sharedInstance().setGesture(.custom)
```
Then you can use
```swift
NFX.sharedInstance().show()
```
when you want to show the logs and
```swift
NFX.sharedInstance().hide()
```
when you want to hide them.

## Prevent logging for specific URLs

Use the following method to prevent requests for specified URL from being logged. You can ignore as many URLs as you want
```swift
NFX.sharedInstance().ignoreURL("the_url")
```
Tip: You can use the url of the host (for example "https://www.github.com") to ignore all paths of it 

## Features

- Search: You can easily search among requests via
	- Request url: github.com, .gr, or whatever you want
	- Request method: GET, POST, etc
	- Response type: Like json, xml, html, image and more 
- Sharing: You can share your log via email with backend devs or someone who can help.
	- Simple log option includes only request/response headers and small request/response bodies (when applicable)
	- Full log option includes request/response headers and request/response bodies (as attachments)
- Filtering: Select what types of responses (JSON/XML/HTML/Image/Other) you want to see
- Enable/disable logging within the app
- Clear data within the app
- Statistics: Check cool things like average response time, total response size and more for your selected types of responses
- Info: Check your IP address, your app version and build number and other things within the app
- More to come.. ;)

## Integrations

[Droar](https://github.com/myriadmobile/netfox-Droar): A modular, single-line installation debugging window.

## Other

- If you experience any problems with request logging please check [this](https://github.com/kasketis/netfox/blob/master/Workarounds.md). If you don't get your answer please open an [issue](https://github.com/kasketis/netfox/issues)
- Due to the large size of request/response bodies, the library provides disk storage for low memory overhead

## Thanks

Special thanks to [tbaranes](https://github.com/tbaranes) and [vincedev](https://github.com/vincedev) for their contribution on OSX library!

## Licence

All source code is licensed under [MIT License](https://github.com/kasketis/netfox/blob/master/LICENSE). Which means you could do virtually anything with the code. I will appreciate it very much if you keep an attribution where appropriate.


=== end iosApp/Pods/netfox/README.md ===

===
Path: note.md
===
# Welcome to Kotlin Compose Multiplatform for Android and IOS by Utsman
Networking, Google Maps and Firebase Authentication from basic to advanced level

- Why networking?
- Why Google Maps?
- Why firebase authentication?

Goal project:
Google Maps Location Picker

# basic
- Download android studio
- Download xcode
- Plugin kotlin multiplatform
- starter project --> https://kmp.jetbrains.com/

## How it works
- Expect-actual concept
- Swift class interoperability in kotlin

### Ios side
- Kotlin code generated to swift code
- Swift class interopable to kotlin code
- Xcode runner run gradle script

### Android side
- Android Compose as usual

## Coding
### Phase 1

#### Build Config
Create own build config generator:
    - Works with `secret.properties`
    - Created task for generate properties from `secret.properties`
    - Run generate task depend on existing task when sync process

#### Networking
- Ktor: https://ktor.io/docs/client-create-multiplatform-application.html
- Kotlin Serializer plugin: https://github.com/Kotlin/kotlinx.serialization
- Try with reqres api: https://reqres.in/api/users?page=2

### Networking: Content negotiation and loggi
- Parsing response
- check response as log

#### Networking: State and handle error
- State -> condition data status flow
    - Idle
    - Loading
    - Success -> data
    - Failure -> exception

#### Networking: State compose handler
- State Handler
    - onIdle
    - onLoading
    - onSuccess(data)
    - onFailure(exception)


### Phase 2
#### Architecture: Uni-directional Data Flow
- Uni-directional component
    - Store states
    - Reducer
    - View
    - Action
- Uni-directional and Compose UI
    - Declarative
    - Reactive
    - Isolation / self-contained
    - integrate with state management (live data, stateflow, viewmodel)

#### Architecture: MVI (Model - View - Intent)
- MVI Component
    - Model (state)
    - View (rendered)
    - Intent (action)
- MVI: ViewModel

#### Architecture: ViewModel
- Library
- Model implementation
- Abstraction viewmodel

#### Architecture: Repository
- Abstraction repository
- Mapper model

### Phase 3
#### Navigation
- Composition Provider
- Manual navigation
- Navigation libraries
    - Jetbrain navigation -> jetpack navigation adopt
    - Voyager:
        pros: 
            - easy to use
            - flexible configuration
        cons: 
            - limited gesture support: ios swipe back
    - Decompose:
        pros: 
            - focus on development multiplatform
            - environment full support
            - lifecycle management
        cons:
            - limited gesture support: ios swipe back
            - learning curve
            - complexity
    - PreCompose
        pros:
            - lifecycle management
            - easy to use -> like jetpack navigation
        cons: 
            - limited gesture support: ios swipe back
    - Appyx
        pros:
            - gesture support: ios swipe back
            - lifecycle management
        cons:
            - complexity usability
- Side effect

#### Navigation: Appyx
- Setup appyx -> RootNode
- Setup interface navigator
- Setup ios
- Setup android
    Troubleshot: 
        - implement plugin parcelize
        - add custom parameter in `freeCompilerArgs`:
            `- P plugin:org.jetbrains.kotlin.parcelize:additionalAnnotation=com.bumble.appyx.utils.multiplatform.Parcelize`

### Phase 4
#### Kotlin Cinterop
- Bidirectional objective-c interopable
- Kotlin module compiled into a framework
- Swift library exported to objc support
- Pure swift library not supported

#### CocoaPod
- Setup CocoaPod
- Using netfox in kotlin side
    - issue task embedAndSign -> need kotlin downgrade from 2.0 to 1.9.23

### Phase 5
#### Search Location API
- Search Place API -> get location from query
  - https://discover.search.hereapi.com/v1/discover?at=-6.361380449431958,106.8334773180715&limit=2&q=stasiun&apiKey=BQkAEa32DStxlj60z8z2bQpqV9aqjfNVInsSrclBmMY
- Reversed Place API -> get place from coordinate
  - https://revgeocode.search.hereapi.com/v1/revgeocode?at=-6.360501654958923,106.83179711447815&limit=3&lang=en-US&apiKey=BQkAEa32DStxlj60z8z2bQpqV9aqjfNVInsSrclBmMY

#### Search Location
- Simple List
- Render item in list with column

#### Reversed Location
- Input Field lat long
- Render item in list column

### Phase 6
#### Google Maps Compose Render
- Google Maps API Key
  - Android: AIzaSyBLdpISj1DAZJZ3nDri1oVn2wNvJjJQLls
  - Ios: AIzaSyA0m6uScEWSqH83f1qNjTDOExTyoa7TNdw
- Google Maps Compose
  - Android Google Maps Compose
    - composeCompiler
  - Ios Google Maps UIKit
    - CocoaPod

#### Google Maps Compose Basic Function
- Google Maps State
- Camera
  - Initial camera
  - Animated camera
  - Camera Listener
  - Zoom
    - Zoom out
    - Zoom in
- Google Maps State Saver
  - Android issue fix with parcelable
- Settings
  - myLocationEnable
  - myLocationButtonEnabled
  - compassEnabled

#### Location Service
- Permission
  - ios:
    - Privacy - Location When In Use Usage Description
- Get Location

#### Gesture Detector
- Not started
- Start started
- Stop started (coordinate)
- Location picker feature

### Phase 7
#### Feature Google Maps
- Search location
  - Display all item in search content
  - Move camera and display marker for selected location
  - Display marker for all result location

### Phase 8
#### Feature Firebase Google Authentication
- Sign In With Firebase and Google
  - Firebase is under layer of Google Sign In
  - For android, Sign In API deprecated
  - For android, migration into Jetpack Identity is recommended

### Phase 9
#### Completing apps
- Add google sign in button
- Display profile dialog and logout button
- Add splash screen for check the credential
- Sign In screen
- Sign in into maps

=== end note.md ===

===
Path: settings.gradle.kts
===
rootProject.name = "KotlinComposeMultiplatform1"
enableFeaturePreview("TYPESAFE_PROJECT_ACCESSORS")

pluginManagement {
    repositories {
        google {
            mavenContent {
                includeGroupAndSubgroups("androidx")
                includeGroupAndSubgroups("com.android")
                includeGroupAndSubgroups("com.google")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositories {
        google {
            mavenContent {
                includeGroupAndSubgroups("androidx")
                includeGroupAndSubgroups("com.android")
                includeGroupAndSubgroups("com.google")
            }
        }
        mavenCentral()
    }
}

include(":composeApp")
=== end settings.gradle.kts ===

